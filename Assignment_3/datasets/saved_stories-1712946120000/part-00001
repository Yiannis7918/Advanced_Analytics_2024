{"aid": "40011740", "title": "My Best Awk Tricks (2016)", "url": "https://blog.jpalardy.com/posts/my-best-awk-tricks/", "domain": "jpalardy.com", "votes": 2, "user": "Tomte", "posted_at": "2024-04-12 12:20:35", "comments": 0, "source_title": "My Best Awk Tricks | Jonathan Palardy's Blog", "source_text": "My Best Awk Tricks | Jonathan Palardy's Blog\n\nJonathan PalardyGitHub  \n---  \nTwitter  \nEmail  \nRSS  \n  \n  * about\n  * posts\n\n# My Best Awk Tricks\n\nJune 29, 2016\n\nThis is a wrap-up of my AWK tutorial series. You can start with why learn awk.\nOr you can jump straight to part 1 of the tutorial.\n\nIf you\u2019ve read the tutorial, the amount of magic should be down to a minimum.\n\n## Disclaimers\n\nBefore you ask: I have a cheatsheet, and that\u2019s where I keep the recipes that\nfollow. I\u2019m just human \u2013 I copy and paste what I need.\n\nI\u2019m not the author of these recipes; I only collected them over time.\n\nAllow me to skip the cat FILE | or awk 'YOUR SCRIPT' FILE parts. By now, I trust you to figure that out.\n\nWhich specific columns make sense for your specific needs will depend on you.\nI might use $0 or $1, but you\u2019ll have to fix those. That\u2019s what I do after I\npaste.\n\n## uniq without sort\n\nI posted about this before, but it\u2019s still my favorite:\n\n    \n    \n    $ awk '!seen[$0]++'\n\nThe action is print, of course. The condition is true the first time a string\nis put into the array. It follows that subsequent appearances won\u2019t be\nprinted.\n\nRelated to the above, print duplicates (without sort):\n\n    \n    \n    $ awk '++seen[$0] == 2'\n\nPrint the 2nd time you see a string.\n\n## Group counts or sums\n\nThis was covered in the tutorial, but it\u2019s damn useful:\n\n    \n    \n    $ awk '{ groups[$0]++ } END { for (k in groups) print groups[k], k }' # count $ awk '{ groups[$1] += $2 } END { for (k in groups) print groups[k], k }' # sum\n\nAccumulate in an array, report at the END. In both cases, pay attention to the\ncolumns you use.\n\n## Set operations: union, intersection, difference\n\nIf you have multiple files, and you consider their content as sets, you can\ngenerate a bunch of interesting subsets.\n\n### Union\n\ncat all the files and use the \u201cuniq without sort\u201d recipe from above :-)\n\n### Intersection\n\nFor both intersection and difference, you need to accumulate from one file and\nprocess the other file.\n\n    \n    \n    $ awk 'NR == FNR {lut[$0] = 1; next} $0 in lut {print}' FILE1 FILE2\n\nThe main trick is to realize that NR and FNR will, by definition, only be\nequal during the processing of the first file. The next statement ensures the\nrest of the one-liner is skipped. We load the lut (LookUp Table) array with\nthe relevant parts from the first file.\n\nWhy use $0 in lut instead of lut[$0] for the condition? That\u2019s an optimization\nI learned the hard way: even a miss lookup in lut[$0] will instantiate the\narray location to an empty string \u2013 and over the processing of HUGE files,\nyou\u2019ll eventually consume a lot of memory.\n\nIt takes a LOT for this problem to be a problem with the amount of memory that\ncomputers have nowadays ... that\u2019s why I didn\u2019t cover the in operator in the\ntutorial.\n\n### Difference\n\n    \n    \n    $ awk 'NR == FNR {lut[$0] = 1; next} !($0 in lut) {print}' FILE1 FILE2\n\nThis operation isn\u2019t symmetrical: you\u2019re removing the entries from FILE1 from\nFILE2. Switch the files around to get the other set difference.\n\n## Easy performance\n\nIf your AWK script isn\u2019t fast enough, it might be time to consider whether AWK\nis the right tool for the job. How many GB of data are you piping through it?!\n\nThat being said, I know 2 tricks to speed up AWK:\n\n### Drop unicode support\n\n    \n    \n    $ LC_ALL=C awk 'YOUR SCRIPT'\n\nThe LC_ALL variable forced to C will drop unicode support and, sometimes,\ngreatly speed up processing.\n\n### Use mawk\n\nThere are many variants of AWK, and the one you\u2019re using is probably GNU AWK.\nThere are others: mawk is one of the FAST one.\n\n  * is mawk already installed?\n  * how much of a pain will it be to install?\n  * will my AWK script work without modifications?\n\nThese are all good questions. In all likelihood:\n\n  * mawk won\u2019t be installed...\n  * it will be easy to install (brew install mawk, for example)\n  * your unmodified AWK script will just run FASTER\n\nIf you\u2019re hitting the performance wall, giving mawk a chance might be worth\nit.\n\n### Discuss on Twitter\n\nTweet Follow @jpalardy\n\n", "frontpage": false}
