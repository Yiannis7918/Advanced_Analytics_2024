{"aid": "40016072", "title": "Missfile: //CVE-2024-20670 \u2013 NTLM Hash Disclosure in New Outlook", "url": "https://mpizzicaroli.github.io/missfile/", "domain": "mpizzicaroli.github.io", "votes": 2, "user": "moonsword", "posted_at": "2024-04-12 18:24:28", "comments": 0, "source_title": "Missfile://CVE-2024-20670", "source_text": "Missfile://CVE-2024-20670 \u2013 The Pizza Box \u2013 Unstructured Threat Hunt Lead with\nCharles Schwab\n\n# The Pizza Box\n\nUnstructured Threat Hunt Lead with Charles Schwab\n\n# Missfile://CVE-2024-20670\n\nBefore I start, I want to give a shout to the Charles Schwab Threat\nIntelligence team and our leadership for giving me the opportunity, time, and\nopinions to give this some legs. As the new Unstructured Hunt lead, this was a\nthrilling find.\n\n## Discovery\n\nThe team and I were discussing the MonikerLink bug from CheckPoint and whether\nor not you could downgrade the attack to WebDAV if SMB was blocked. We did\nsome testing and determined nope, not possible.\n\nWe knew it had been patched otherwise, and we weren\u2019t exposed, and to make it\nworse, our good ol\u2019 Attack Surface Management SME dropped this lil guy on us:\n\n> Interaction based on the WebDAV protocol is not at risk of leaking\n> credentials to external IP addresses via this exploit technique. While the\n> threat actor infrastructure might request Net-NTLMv2 authentication, Windows\n> will honor the defined internet security zones and will not send Net-NTLMv2\n> hashes. In other words, an external threat actor can only exploit this\n> vulnerability via the SMB protocol.\n\nSo I said fineeeee, lets check some Microsoft Outlook versions just in case\nsomething got missed. I noted mine, threw some queries into our SIEM, and\nnoticed something odd. Version numbers I didn\u2019t recognize. I sanity checked\nmyself by pestering a colleague and he hit me with: \u201c1.2024.214.400\u201d, not\nversion \u2018WXYZ\u2019 like I expected.\n\nThis led me to a wonderful new discovery \u2013 there is a \u201cNew Outlook\u201d...and I\u2019ve\nsimply been ignoring the option in the top right corner this entire time.\n\nAlright fair play Microsoft. I attempted to find the security release notes\nfor this \u201cNew Outlook\u201d\n\nAnd realized I can\u2019t find them. I still to this day can\u2019t find those so\nMicrosoft if you have them please tell me!\n\nSo I said fineeeee again, let\u2019s try MonikerLink in New Outlook and see if we\ncan get an NTLM hash leak. I fully expected it to fail...and it kind of did?\n\n## Testing\n\nInstead of getting the error I expected like thick Outlook,\n\nNew Outlook asked if I wanted to open the file...but there was no hash\nleak...so no preview pane vulnerability unfortunately.\n\nPlaying around for a bit and running through Wireshark, I noticed something\ninteresting: the NetBIOS domain and computer name definitely weren\u2019t my labs.\n\nI began sleuthing the internet (read: googling for 5 minutes) and found that\nlocal file paths didn\u2019t work in New Outlook, and probably as a work around,\nfile:// was hacked into New Outlook\n\nAfter more research and testing, what I had found was that when you sent the\nfile:// path in a link in an email, New Outlook was automatically appending it\nto the following url, likely due to SafeLinks.\n\nI captured a PCAP but didn\u2019t do any break and inspect. I did notate traffic to\nMicrosoft, and then a response from Microsoft. My theory is that since New\nOutlook is essentially OWA (Outlook On The Web), SafeLinks checks the domain,\nsees it\u2019s a file:// call, and returns it back to the user.\n\nThere\u2019s no need to play with OLEs, Monikers, anything... it just accepts\nfile:// outright.\n\nSo, if you could get a user to enter credentials, you could get a NTLM hash\nleak.\n\nQuite a few clicks, but it was doable. At this point, I opened a case with\nMicrosoft for responsible disclosure that you could leak NTLM hashes with\nfile:// links in New Outlook.\n\nWhile I waited for a case, I continued to play with this vulnerability and I\nrealized, that since we\u2019re truly using file://, you can downgrade to WebDAV,\nwhich also means you could probably get someone to download a file!\n\nSo back to 80.\n\nAnd I got stuck. I spent a day trying to get New Outlook to download the file,\nand all I could get was propfinds and options. I\u2019m sure someone with more\nexperience with the WebDAV protocol could do something clever.\n\nBut while I was reading about file:// and WebDAVs interactions, I eventually\nrealized I was staring at a tree in a forest. After all, file protocol\ninteracts with the local system right? Let\u2019s see if we can open Powershell.\n\nI updated the case with Microsoft with these further findings that you could\nremotely launch any executable on a host and stopped my investigation here. I\nknow it\u2019s possible to provide arguments in Windows Explorer, but I was unable\nto get any further and did have a day job to do. I\u2019m sure there\u2019s some clever\nUNC pathing that could be done, but for me, an NTLM hash leak and a remote\nfile execute in one vulnerability was enough.\n\n## Outcome\n\nCVE-2024-20670\n\nCVSS:3.1 Score - 8.1 / 7.1\n\nI can\u2019t say I set out to find a CVE, but I\u2019m very happy to hang my first hat\non an 8.1.\n\nWritten on April 10, 2024\n\n", "frontpage": false}
