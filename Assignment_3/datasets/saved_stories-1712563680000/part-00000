{"aid": "39965605", "title": "I build an AI based Frankenstein and asked it to be my recruiter in Canada", "url": "https://github.com/ukraine/jobBanksCanada", "domain": "github.com/ukraine", "votes": 2, "user": "ukrainian", "posted_at": "2024-04-08 02:06:17", "comments": 0, "source_title": "GitHub - ukraine/jobBanksCanada: Job Bank Canada Chrome Extension", "source_text": "GitHub - ukraine/jobBanksCanada: Job Bank Canada Chrome Extension\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nukraine / jobBanksCanada Public\n\n  * Notifications\n  * Fork 0\n  * Star 11\n\nJob Bank Canada Chrome Extension\n\n11 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# ukraine/jobBanksCanada\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nukraineCreate FUNDING.ymle02329e \u00b7\n\n## History\n\n29 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Create FUNDING.yml  \n  \n### emploiquebec\n\n|\n\n### emploiquebec\n\n| Initialization for emploi quebec firefox extension  \n  \n### jobbank\n\n|\n\n### jobbank\n\n| visual input for the options page changed  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| changed look of the options page  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md  \n  \n## Repository files navigation\n\n# Navigating Canada's Job Market: How I tried to automate Job Applications as\na Software Engineer\n\nStarting my job hunt in a new country felt like stepping into a massive\nlibrary with no idea where to find the book I needed. Coming right after the\nneighboring country's violent invasion of Ukraine in 2022, I arrived with high\nhopes but quickly encountered a wall.\n\nThe job market here was a whole new world, and my usual approach just wasn't\ncutting it. Friends and settlement organizations suggested trying online job\nboards such as Job Bank Canada and Indeed.\n\n## The concept of Job Application Automation with a Human Touch\n\nI wasn't aiming to spam companies with my resume. Instead, I sought to\nautomate certain aspects of the process to save time and target suitable jobs\nfor me in a more personalized manner. Moreover, it wasn\u2019t solely about finding\na job; it was also about learning how to use technology and AI, in particular.\n\nIn sharing this story, I hope to inspire others to look at their challenges\ndifferently and maybe even find new ways to tackle them.\n\nHere's how I pieced it together, combining RSS feeds, server-side scripts,\ncustom Chrome extensions, and the innovative use of AI to enrich data and\npersonalize applications:\n\n## Step 1: RSS for Job Listings\n\nDaily, a script on a Linux server I set up would fetch RSS feeds from Job Bank\nCanada, filtering opportunities based on my predefined keywords. It would\nstore the data gathered into a cache file that another part of the system\nwould work with later.\n\nThis step appreciates the enduring value of RSS, allowing me and other old-\nschool guys to stay updated with minimal effort. So a big special thank you to\nthe services and platforms like Job Bank for maintaining it\n\nExample of an RSS URL with a keyword\n\n### Technologies used\n\n  * PHP\n  * PHP Simple XML\n  * Linux Bash Scripting\n  * Crontabs\n\n## Step 2: The Manual Touch: Reviewing Matches\n\nDespite the automation intention, I chose to review the matches manually,\nensuring that only the most relevant opportunities were considered. At least\nat the beginning. This blend of automation and personal oversight was enough\nfor maintaining quality in the job hunt. I figured out there were too many\nvague jobs that didn't sound legit to me.\n\nTechnically the script reads the cached file and displays the number of items\nfound for each keyword. At first I was copying job posting details manually,\nbut I gave up doing so for each listing. Even so sometimes the same position\ncan be seen twice or more if it contains different keywords, so...\n\n### Technologies used\n\n  * PHP\n\n## Step 3: Crafting a Custom Chrome Extension\n\nScreenshot of the extracted data (link)\n\n..to expedite the review process and eliminate duplicates, I developed a\nsimple parsing Chrome extension. The details it captured included the position\nname, salary range, contact info, and other essential data. I opted to\nautomate this aspect in later versions of the system and either discard or\nrepurpose the extension.\n\nOnce I obtained the data, if I deemed the listing worthwhile, a click would\nsave it directly to a Google Spreadsheet. Initially, I didn't want to set up a\nseparate database for this project. Therefore, this convenient and widely used\nGoogle product suited my needs, allowing me to maintain simplicity\n\n### The extension:\n\nInstall the extension\n\nView Github source code\n\n### Technologies used\n\n  * Google Spreadsheets API\n  * Google Chrome\u2019s extension\n  * JavaScript\n\n## Step 4: Enriching Data with Server-Side Scripts and AI\n\nI then enhanced my spreadsheet's listings using a server-side script to\nextract insights from employer websites, such as career page addresses,\nadditional contact details, and social media links. More technical details\nlike the server software and programming languages used were also gathered\n\nThe major breakthrough came from integrating OpenAI's API, which summarized\nwebsites and classified industries, enriching each saved job listing with\nvaluable context. To optimize OpenAI token usage, I trimmed the content to\nfocus on the most relevant sections for analysis, avoiding excess from footers\nor irrelevant links\n\n### Technologies used\n\n  * PHP cURL\n  * Prompt Engineering\n  * OpenAI API\n  * Google Spreadsheets API\n\n## Step 5: Personalizing Cover Letters and resumes objectives\n\nTo avoid the impersonal nature of mass applications, I used OpenAI's API\nselectively to tailor cover letters, inserting placeholders for the company\nname, industry, and the software they utilize. When you know the product or\nservice the company produces, you understand the value you may provide to it.\n\nThat was the only way to stand out among other applicants who use the semi-\ncold outreach approach. This strategy demonstrated genuine interest in each\nemployer even if I visited the website automatically in less than a second.\n\n### Technologies used\n\n  * OpenAI API\n  * PHP\n\n## Step 6: Generating PDFs for Applications\n\nAware of the limitations and risks associated with direct links in emails, I\nopted for a more conservative approach: converting resumes and cover letters\ninto PDFs. Despite my preference for digital simplicity, the goal was to\nensure my applications reached their destination with a reduced chance of\nbeing sidelined into spam folders or worse.\n\nThe PDF files generated were cached on the server side to be attached to my\nemails.\n\n### Technologies used\n\n  * PHP\n  * DomPDF\n  * Ubuntu Linux\n  * JavaScript\n\n## Step 7: Enhancing Communication and Email Dispatch\n\nAfter the initial steps of data enrichment and personalization it is now time\nfor the critical phase \u2014 communication.\n\nUpon selecting a potential opportunity, a predefined email template loaded\ninto a textarea, ready for any final, personal touches.\n\nThe interface was similar to gmail's one, where email addresses and the\nsubject lines were populated automatically. I used the position name, my name\nand the company name in the subject. Sometimes I had to visit the website of a\ncompany of my interest again to ensure I don\u2019t like or sound mistaken.\n\nAnyway, I reviewed and, if necessary, customized each message before\nproceeding. This part can be automated later too. At least I thought I would\ndo so.\n\nTo further avoid the stigma of automated spam, emails were dispatched at\nrandom intervals. This careful timing was designed to mimic human\nirregularity, reducing the likelihood of triggering spam filters and\nincreasing the chance of email deliverability\n\n### Technologies used\n\n  * Gmail\u2019s SMTP\n  * CronJobs\n  * Water.css\n  * PHP\n\n## Step 8: Refining Email opening Tracking\n\nAnother gem of my job application toolkit was an email tracking system. I\nimplemented a technique to outsmart tracker caching, subtly changing the\ntracking image's color scheme embedded in my email signature with each\ndispatch.\n\nThis ensured each email open was uniquely recorded, triggering a script to log\nthe activity directly into my Google Spreadsheet against the respective\nemployer. This method provided precise insights into who engaged with my\nemails, how many times, significantly informing the effectiveness of my\napproach.\n\nWhile this tactic faced limitations with Gmail, it proved highly effective\nwith other providers, particularly corporate ones.\n\n### Technologies used\n\n  * cURL\n  * Google Spreadsheets API\n  * PHP\n\n## Conclusion\n\nSending each resume out of over 400 felt like giving away a great book to\nsomeone who's already received 400 others. The rare responses I got were like\nsmall beams of light\u2014rare but motivating. Adding a tracking system helped me\nsee if my book even stood out in the pile.\n\nIt was a journey of patience, perseverance, and a personal test showing that\njob platforms like Job Bank might not be the best for IT jobs. It seems\nemployers prefer traditional methods like recruiters, LinkedIn, or employee\nreferrals.\n\nAutomating my job search was a huge learning curve. It was more than just\nspeeding up applications; it was about making technology an ally in a personal\nquest. By blending RSS feeds, a Chrome extension, AI, and clever email\nstrategies, I made my job hunt more efficient, yet personal.\n\nThe experience taught me valuable lessons about using technology wisely and\nstaying true to myself. It's not about replacing the personal touch with\ntechnology, but enhancing it, showing that with the right approach, we can\npush beyond what we thought was possible.\n\nVersion 1: draft\n\n## About\n\nJob Bank Canada Chrome Extension\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n11 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Sponsor this project\n\n  * buymeacoffee.com/yatsiv\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * JavaScript 80.1%\n  * HTML 19.9%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
