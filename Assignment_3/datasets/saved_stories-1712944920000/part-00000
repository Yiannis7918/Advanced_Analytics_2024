{"aid": "40011558", "title": "What we talk about when we talk about 'root cause'", "url": "https://github.com/readme/guides/root-cause", "domain": "github.com/readme", "votes": 1, "user": "kiyanwang", "posted_at": "2024-04-12 11:59:49", "comments": 0, "source_title": "What we talk about when we talk about \u2018root cause\u2019", "source_text": "What we talk about when we talk about \u2018root cause\u2019 \u00b7 GitHub\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\n# What we talk about when we talk about \u2018root cause\u2019\n\nIt\u2019s a lot more nuanced than you might think.\n\nArtwork: Micha Huigen\n\nJohn Allspaw // Cofounder, Adaptive Capacity Labs\n\nThe ReadME Project amplifies the voices of the open source community: the\nmaintainers, developers, and teams whose contributions move the world forward\nevery day.\n\nThe ReadME Project\n\nWhat we talk about when we talk about \u2018root cause\u2019? To begin, consider this\npassage from Thinking By Machine (deLatil, 1956) p.153:\n\n\u201cImagine an iron bar thrust into an electric furnace. The bar lengthens, and\nthe \u201ccause\u201d of the lengthening is said to be the heat of the furnace. One is\nastonished\u2014why should it not be the introduction of the bar into the furnace?\nOr the existence of the bar? Or the fact that the bar had been previously kept\nat a lower temperature? None of these possibilities can be termed secondary\ncauses; they are all primary determining causes without which the lengthening\nphenomenon could not have occurred.\u201d\n\nIn recent years, the understanding that failure in complex systems requires\nmultiple contributors coming together to produce these surprising events that\nwe call incidents has gained traction. Much has been written and presented\nabout this hallmark phenomena of complex systems, and while this perspective\nisn\u2019t yet considered a \u201cmainstream\u201d view, I suspect it aligns with what all\nexperienced software engineers intuitively understand.\n\nIn his seminal paper How Complex Systems Fail (Cook, 1998), my colleague Dr.\nRichard Cook put it this way:\n\n3) Catastrophe requires multiple failures\u2014single point failures are not\nenough. The array of defenses works. System operations are generally\nsuccessful. Overt catastrophic failure occurs when small, apparently innocuous\nfailures join to create opportunity for a systemic accident. Each of these\nsmall failures is necessary to cause catastrophe but only the combination is\nsufficient to permit failure. Put another way, there are many more failure\nopportunities than overt system accidents. Most initial failure trajectories\nare blocked by designed system safety components. Trajectories that reach the\noperational level are mostly blocked, usually by practitioners.\n\nAnother description of this perspective was made by Ryan Kitchens at SRECon\nAmericas in 2019:\n\n\u201cThere is no root cause. The problem with this term isn't just that it's\nsingular or that the word root is misleading: there's more. Trying to find\ncauses at all is problematic...looking for causes to explain an incident\nlimits what you'll find and learn. And the irony is that root cause analysis\nis built on this idea that incidents can be fully comprehended. They can't. We\nalready have a better phrase for this, and it sounds way cooler: it's called a\nperfect storm. In this way, separating out causes and breaking down incidents\ninto their multiple contributing factors, we're able to see that the things\nthat led to an incident are either always or transiently present. An incident\nis just the first time they combined into a perfect storm of normal things\nthat went wrong at the same time.\u201d\n\nFrom an abstract perspective, language that describes causality is,\nostensibly, value-neutral. But use of the term \u2018root cause\u2019 is almost always\nused in the context of untoward or negative outcomes, and not in situations\nwhere an outcome is deemed a success. Rarely does someone demand a search for\nthe \u2018root cause\u2019 of a successful product launch, for example. It seems widely\naccepted that successful outcomes in complex systems come from many influences\nthat come together in a positive way. Failures aren\u2019t often viewed the same\nway.\n\nRather than restating what\u2019s been written and spoken about (such as the\nreferences linked above), I\u2019d like to explore in this article what seems to\nkeep people using the term \u2018root cause\u2019 despite the growing skepticism of its\nvalue.\n\nWhat makes this term attractive for the people using it? Is it simply used as\nshorthand language, as a way to summarize an otherwise too-detailed\nexplanation for the reader or listener? Or is it used to simplify a story, to\nredirect people\u2019s attention to a specific and bounded area so\nsomething\u2014anything\u2014practical can be done?\n\nResearch literature on this topic reveals that in descriptions of accidents\nand incidents, use of the term \u2018root cause\u2019 (or even multiple \u2018root\u2019 causes)\nserves social purposes more than technical ones.\n\n## Providing reassurance about the future\n\nLabeling something as a \u2018root cause\u2019 helps people cope with the (sometimes\nimplicit) anxiety that comes along with the experience of incidents. When\npeople are observing their systems working well (or at least well enough), and\na seemingly out-of-nowhere incident happens, the contrast can be jarring, to\nsay the least. We can go from feeling confident about how well we understand\nour technical systems to suddenly feeling astonished and quite uncertain.\n\nThe lived experience of people responding to these situations can leave them\nwanting for something\u2014anything\u2014to help them feel better about the future.\nLikewise, technical leaders are also not immune to the feeling of unease that\nincidents tend to bring with them. If this can happen unexpectedly, what else\ncan? Do these events represent harbingers of more significant ones to come?\nWhat do these incidents say about the organization\u2019s abilities...or my own\nleadership skills?\n\nIncidents have a way of producing genuine and unsettling dismay; it\u2019s\nunderstandable to search for an explanation, a cause, that we can be sure of.\n\nIn this way, labeling some specific part of the story as a 'root cause' helps\nus. It provides some comfort that we\u2019ve got a handle on things we previously\ndidn\u2019t. There\u2019s a term for this phenomenon: Nietzschean anxiety. It reflects\nwhat the German philosopher wrote in Twilight of the Idols:\n\n\u201cWith the unknown, one is confronted with danger, discomfort, and care; the\nfirst instinct is to abolish these painful states. First principle: any\nexplanation is better than none. Because it is fundamentally just our desire\nto be rid of an unpleasant uncertainty, we are not very particular about how\nwe get rid of it: the first interpretation that explains the unknown in\nfamiliar terms feels so good that one \u201caccepts it as true\u201d.... The \u201cwhy\u201d\nshall, if at all possible, result not in identifying the cause for its own\nsake, but in identifying a cause that is comforting, liberating, and\nrelieving. A second consequence of this need is that we identify as a cause\nsomething already familiar or experienced, something already inscribed in\nmemory. Whatever is novel or strange or never before experienced is excluded.\u201d\n\nIn other words, our experience with incidents can be so disturbing to us that\nwe feel a strong and immediate desire to identify what \u201ccaused\u201d an event, so\nwe can then do something (which typically means fixing something) in order to\nregain a sense of being in control. This is what John Carroll (Carroll, 1995)\ncalled root cause seduction.\n\nOn the face of it, this idea seems understandable, even relatable. But we have\nto acknowledge that labeling something as a \u2018root cause\u2019 reflects a cherry-\npicked perspective; it highlights one aspect of a complex event and discounts\nothers. The label performs a sort of sleight-of-hand or redirection like a\nmagician might, akin to saying \u201clook right here\u2014don\u2019t concern yourself with\nother things.\u201d\n\n## Purposes and audiences\n\nIt can be useful to understand the context in which the term \u201croot cause\u201d is\nbeing used.\n\nWho is the author (or speaker) using it? What are they hoping to convey by\nusing the term? Who is their audience? How do they understand the use of \u2018root\ncause\u2019 in the context of what they are reading?\n\nIf it is used in a conversation amongst engineers on the same team, it might\nbe used simply as a way to emphasize or highlight a specific location they\nbelieve warrants attention. Quite often, we find this usage more to reflect a\nthing better conveyed as a trigger, rather than a cause. The term \u2018trigger\u2019\ntends to do a better job of describing a specific dynamic that \u201cactivates\u201d\nalready existing conditions, some of which might have been latent in the code\nor architecture\u2019s arrangement for some time.\n\nIf it is used in a legal agreement or other contractual documents, the term\ntends to intentionally have an ambiguous meaning so as to allow for\nflexibility of interpretation that frequently comes with legal language.\n\nWhen it comes to articles companies publish about incidents their service(s)\nor products have experienced, the term \u2018root cause\u2019 tends to be used in very\nspecific ways. The core audience for these public posts are both current and\npotential future customers. The primary purpose is to provide a) confidence\nthat the company understands the event sufficiently and b) some form of\ncommitment to improving the situation in the future. By labeling a specific\ncomponent as a \u201croot cause\u201d (or even a finite number of \u201croot causes\u201d) authors\nof these posts can project much more certainty or confidence than if they were\nto acknowledge the genuine complexity of the incident.\n\n## A challenge for readers and listeners\n\nI\u2019ll offer a few questions to consider the next time you read or hear the term\n\u2018root cause\u2019:\n\n  * What is the author (or speaker) trying to convey by using the term?\n\n  * What agenda(s) might the author (or speaker) have in their version of the story, other than providing the richest description they can?\n\n  * What else can you imagine is influencing the outcome of the story being told, besides what is deemed the \u2018root cause\u2019?\n\n  * What details seem to be noticeably absent in the story you\u2019re being told?\n\n  * What questions can you imagine being dismissed or discounted by the storyteller, if you had the chance to ask them?\n\nQuestions like these are garden-variety critical thinking exercises. But they\nmight help us explore what the story doesn\u2019t tell us, or what might be missing\nin the story.\n\nHi, I'm John. I'm a founder of Adaptive Capacity Labs, and the author of The\nArt of Capacity Planning and Web Operations. In 2009, I helped shape what\nlater became known as the DevOps movement before I moved to Brooklyn, New\nYork. My fascination with understanding how people handle challenging problems\nunder pressure led me to my master's degree in Human Factors and Systems\nSafety at Lund University while I was CTO at Etsy. Since then, my colleagues\nand I have been working hard to bring perspectives and approaches from\nResilience Engineering to the world of software engineering and operations.\n\n## More stories\n\n### Secure cloud deployment and delivery\n\nChris Johnson // Eli Lilly\n\n### Make your first open source contribution in four easy steps\n\nRuth Ikegah\n\n### Finish your projects\n\nAaron Francis // PlanetScale\n\n## About The ReadME Project\n\nCoding is usually seen as a solitary activity, but it\u2019s actually the world\u2019s\nlargest community effort led by open source maintainers, contributors, and\nteams. These unsung heroes put in long hours to build software, fix issues,\nfield questions, and manage communities.\n\nThe ReadME Project is part of GitHub\u2019s ongoing effort to amplify the voices of\nthe developer community. It\u2019s an evolving space to engage with the community\nand explore the stories, challenges, technology, and culture that surround the\nworld of open source.\n\n### Follow us:\n\n#### Nominate a developer\n\nNominate inspiring developers and projects you think we should feature in The\nReadME Project.\n\n#### Support the community\n\nRecognize developers working behind the scenes and help open source projects\nget the resources they need.\n\nThank you! for subscribing\n\n## Site-wide Links\n\nSubscribe to our developer newsletter\n\nGet tips, technical guides, and best practices. Twice a month. Right in your\ninbox.\n\nSubscribe\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
