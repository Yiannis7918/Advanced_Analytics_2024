{"aid": "40011565", "title": "Unit Tests Considered Harmful", "url": "https://www.shaiyallin.com/post/unit-tests-considered-harmful", "domain": "shaiyallin.com", "votes": 11, "user": "kiyanwang", "posted_at": "2024-04-12 12:00:39", "comments": 18, "source_title": "Unit Tests Considered Harmful", "source_text": "Unit Tests Considered Harmful\n\ntop of page\n\nSearch\n\n  * Shai Yallin\n  *     * Apr 2\n    * 3 min read\n\n# Unit Tests Considered Harmful\n\nSoftware engineers often refer to software as being built from Lego bricks,\nwhere the engineer\u2019s job is to assemble the bricks to a coherent software\nsystem that solves a particular problem. This view is somewhat simplistic,\nbecause new software aims to solve a novel problem (otherwise an existing\nproduct could be used) and as such, at least some of the aforementioned Lego\nbricks must be themselves new or unique to the system\u2019s domain. However, it is\nstill a useful enough allusion to deal with the controversial topic of unit\ntests.\n\nThe problem begins with the mere definition: a unit test. What constitutes a\nunit? Is it a function? A class? I once overheard a seasoned engineer saying\nthat he considers a unit as something that delivers value to a paying client -\nwhich is the definition I agree with the most. In reality, though, most\nengineers attempt to unit test a single class, while mocking out its\ndependencies. This approach has seen a lot of traction during the past 15\nyears. It\u2019s being taught in programming classes. It\u2019s being promoted by\nframeworks such as Nest.js and NX. And it\u2019s complete and utter rubbish.\n\nThe reason is simple: a class might or might not be a useful representation of\npart of the business domain our software system deals with. But a feature is\nmost likely represented by a complex slice of functionality that spans across\nmultiple units of software, for instance a Component that talks to a Route\nwhich talks to a Service that accesses a DB via a Repository. Testing this\nfeature would require running both the UI and the backend, using a UI driver\n(such as TestingLib or Playwright) to interact with the component, and\nasserting that the DB has been modified and any other side effects (emails\nbeing sent, S3 files being created, etc) have occurred as expected.\n\nIn many software systems, I see unit tests that achieve 100% coverage with a\nService test that mocks the Repository, a Route test that mocks the Service, a\nComponent test that mocks the backend, and so on.\n\nThere are two main problems with this approach, which render it not only\nuseless in terms of preventing regression, but actually harmful.\n\nStrict coverage for classes prevents regression in these classes but does not\nassert that the feature actually works. And these tests make it difficult to\nchange the behavior and interface of these classes, that might reflect\nincidental design or implementation details that have nothing to do with the\nfeature that we actually care about. It\u2019s akin to making sure that each and\nevery Lego brick has exactly the required number of studs and color, but\nforgetting to make sure that all bricks are connected together and that our\nFerarri can actually drive.\n\nThis does not mean that we should rely on an extensive suite of E2E tests -\nthese are often slow, cumbersome, hard to debug and tend to be flaky. My\napproach prefers extracting IO operations to adapters, testing them\nseparately, then using reliable fakes to test the bulk of the system\u2019s\nbehavior from the outside - achieving the scope of an E2E test with the speed\nand comfort of an in-process unit test.\n\nFinally, remember that our users don't care about our test suite. They care\nabout whether our software actually solves their problems and makes their\nlives easier. Our engineers also don\u2019t care about our test suite. They want to\ndevelop new features, solve bugs, and keep everything tidy with minimal pains\nand restrictions.\n\n  * TDD\n  * \u2022\n  * Software Engineering\n  * \u2022\n  * Fear Of Change\n\n149 views0 comments\n\n### RECENT POSTS\n\n  * Apr 2\n\nUnit Tests Considered Harmful\n\n  * Mar 26\n\nNot The Design We Want, The Design We Deserve\n\n  * Mar 18\n\nOf Rigid Microservices and Flexible Monoliths\n\n\u00a92023 by Shai Yallin.\n\nPrivacy Policy\n\nbottom of page\n\n", "frontpage": true}
