{"aid": "40010960", "title": "Would Software Bill Of Materials prevent the next xy backdoor?", "url": "https://www.schneier.com/blog/archives/2024/04/backdoor-in-xz-utils-that-almost-happened.html", "domain": "schneier.com", "votes": 1, "user": "nonrandomstring", "posted_at": "2024-04-12 10:00:26", "comments": 0, "source_title": "Backdoor in XZ Utils That Almost Happened - Schneier on Security", "source_text": "Backdoor in XZ Utils That Almost Happened - Schneier on Security\n\n# Schneier on Security\n\n### Search\n\nPowered by DuckDuckGo\n\n### Subscribe\n\nHomeBlog\n\n## Backdoor in XZ Utils That Almost Happened\n\nLast week, the internet dodged a major nation-state attack that would have had\ncatastrophic cybersecurity repercussions worldwide. It\u2019s a catastrophe that\ndidn\u2019t happen, so it won\u2019t get much attention\u2014but it should. There\u2019s an\nimportant moral to the story of the attack and its discovery: The security of\nthe global internet depends on countless obscure pieces of software written\nand maintained by even more obscure unpaid, distractible, and sometimes\nvulnerable volunteers. It\u2019s an untenable situation, and one that is being\nexploited by malicious actors. Yet precious little is being done to remedy it.\n\nProgrammers dislike doing extra work. If they can find already-written code\nthat does what they want, they\u2019re going to use it rather than recreate the\nfunctionality. These code repositories, called libraries, are hosted on sites\nlike GitHub. There are libraries for everything: displaying objects in 3D,\nspell-checking, performing complex mathematics, managing an e-commerce\nshopping cart, moving files around the internet\u2014everything. Libraries are\nessential to modern programming; they\u2019re the building blocks of complex\nsoftware. The modularity they provide makes software projects tractable.\nEverything you use contains dozens of these libraries: some commercial, some\nopen source and freely available. They are essential to the functionality of\nthe finished software. And to its security.\n\nYou\u2019ve likely never heard of an open-source library called XZ Utils, but it\u2019s\non hundreds of millions of computers. It\u2019s probably on yours. It\u2019s certainly\nin whatever corporate or organizational network you use. It\u2019s a freely\navailable library that does data compression. It\u2019s important, in the same way\nthat hundreds of other similar obscure libraries are important.\n\nMany open-source libraries, like XZ Utils, are maintained by volunteers. In\nthe case of XZ Utils, it\u2019s one person, named Lasse Collin. He has been in\ncharge of XZ Utils since he wrote it in 2009. And, at least in 2022, he\u2019s had\nsome \u201clongterm mental health issues.\u201d (To be clear, he is not to blame in this\nstory. This is a systems problem.)\n\nBeginning in at least 2021, Collin was personally targeted. We don\u2019t know by\nwhom, but we have account names: Jia Tan, Jigar Kumar, Dennis Ens. They\u2019re not\nreal names. They pressured Collin to transfer control over XZ Utils. In early\n2023, they succeeded. Tan spent the year slowly incorporating a backdoor into\nXZ Utils: disabling systems that might discover his actions, laying the\ngroundwork, and finally adding the complete backdoor earlier this year. On\nMarch 25, Hans Jansen\u2014another fake name\u2014tried to push the various Unix systems\nto upgrade to the new version of XZ Utils.\n\nAnd everyone was poised to do so. It\u2019s a routine update. In the span of a few\nweeks, it would have been part of both Debian and Red Hat Linux, which run on\nthe vast majority of servers on the internet. But on March 29, another unpaid\nvolunteer, Andres Freund\u2014a real person who works for Microsoft but who was\ndoing this in his spare time\u2014noticed something weird about how much processing\nthe new version of XZ Utils was doing. It\u2019s the sort of thing that could be\neasily overlooked, and even more easily ignored. But for whatever reason,\nFreund tracked down the weirdness and discovered the backdoor.\n\nIt\u2019s a masterful piece of work. It affects the SSH remote login protocol,\nbasically by adding a hidden piece of functionality that requires a specific\nkey to enable. Someone with that key can use the backdoored SSH to upload and\nexecute an arbitrary piece of code on the target machine. SSH runs as root, so\nthat code could have done anything. Let your imagination run wild.\n\nThis isn\u2019t something a hacker just whips up. This backdoor is the result of a\nyears-long engineering effort. The ways the code evades detection in source\nform, how it lies dormant and undetectable until activated, and its immense\npower and flexibility give credence to the widely held assumption that a major\nnation-state is behind this.\n\nIf it hadn\u2019t been discovered, it probably would have eventually ended up on\nevery computer and server on the internet. Though it\u2019s unclear whether the\nbackdoor would have affected Windows and Mac, it would have worked on Linux.\nRemember in 2020, when Russia planted a backdoor into SolarWinds that affected\n14,000 networks? That seemed like a lot, but this would have been orders of\nmagnitude more damaging. And again, the catastrophe was averted only because a\nvolunteer stumbled on it. And it was possible in the first place only because\nthe first unpaid volunteer, someone who turns out to be a national security\nsingle point of failure, was personally targeted and exploited by a foreign\nactor.\n\nThis is no way to run critical national infrastructure. And yet, here we are.\nThis was an attack on our software supply chain. This attack subverted\nsoftware dependencies. The SolarWinds attack targeted the update process.\nOther attacks target system design, development, and deployment. Such attacks\nare becoming increasingly common and effective, and also are increasingly the\nweapon of choice of nation-states.\n\nIt\u2019s impossible to count how many of these single points of failure are in our\ncomputer systems. And there\u2019s no way to know how many of the unpaid and\nunappreciated maintainers of critical software libraries are vulnerable to\npressure. (Again, don\u2019t blame them. Blame the industry that is happy to\nexploit their unpaid labor.) Or how many more have accidentally created\nexploitable vulnerabilities. How many other coercion attempts are ongoing? A\ndozen? A hundred? It seems impossible that the XZ Utils operation was a unique\ninstance.\n\nSolutions are hard. Banning open source won\u2019t work; it\u2019s precisely because XZ\nUtils is open source that an engineer discovered the problem in time. Banning\nsoftware libraries won\u2019t work, either; modern software can\u2019t function without\nthem. For years security engineers have been pushing something called a\n\u201csoftware bill of materials\u201d: an ingredients list of sorts so that when one of\nthese packages is compromised, network owners at least know if they\u2019re\nvulnerable. The industry hates this idea and has been fighting it for years,\nbut perhaps the tide is turning.\n\nThe fundamental problem is that tech companies dislike spending extra money\neven more than programmers dislike doing extra work. If there\u2019s free software\nout there, they are going to use it\u2014and they\u2019re not going to do much in-house\nsecurity testing. Easier software development equals lower costs equals more\nprofits. The market economy rewards this sort of insecurity.\n\nWe need some sustainable ways to fund open-source projects that become de\nfacto critical infrastructure. Public shaming can help here. The Open Source\nSecurity Foundation (OSSF), founded in 2022 after another critical\nvulnerability in an open-source library\u2014Log4j\u2014was discovered, addresses this\nproblem. The big tech companies pledged $30 million in funding after the\ncritical Log4j supply chain vulnerability, but they never delivered. And they\nare still happy to make use of all this free labor and free resources, as a\nrecent Microsoft anecdote indicates. The companies benefiting from these\nfreely available libraries need to actually step up, and the government can\nforce them to.\n\nThere\u2019s a lot of tech that could be applied to this problem, if corporations\nwere willing to spend the money. Liabilities will help. The Cybersecurity and\nInfrastructure Security Agency\u2019s (CISA\u2019s) \u201csecure by design\u201d initiative will\nhelp, and CISA is finally partnering with OSSF on this problem. Certainly the\nsecurity of these libraries needs to be part of any broad government\ncybersecurity initiative.\n\nWe got extraordinarily lucky this time, but maybe we can learn from the\ncatastrophe that didn\u2019t happen. Like the power grid, communications network,\nand transportation systems, the software supply chain is critical\ninfrastructure, part of national security, and vulnerable to foreign attack.\nThe U.S. government needs to recognize this as a national security problem and\nstart treating it as such.\n\nThis essay originally appeared in Lawfare.\n\nTags: backdoors, cybersecurity, economics of security, hacking, Linux,\nmalware, open source, social engineering, SSH\n\nPosted on April 11, 2024 at 7:01 AM \u2022 46 Comments\n\n  * Two clicks for more privacy: The Facebook Like button will be enabled once you click here. No data is loaded from Facebook until you enable the button. Click the [i] button for more information.\n\nnot connected to Facebook\n\n  * Two clicks for more privacy: The Tweet button will be enabled once you click here. No data is loaded from Twitter until you enable the button. Click the [i] button for more information.\n\nnot connected to Twitter\n\n  * If you click to activate the share buttons, data will be loaded from a third party, allowing them to track your visit to schneier.com. For more details click the [i] button.\n\n### Comments\n\nAnonymous \u2022 April 11, 2024 7:32 AM\n\nDoesn\u2019t \u201csupply chain\u201d imply you pay someone to get something in return? No\none\u2019s paying anyone.\n\nAnd it\u2019s not your supply chain, it\u2019s a guy\u2019s code. His.\n\nChris Becke \u2022 April 11, 2024 7:42 AM\n\nDo we really believe that this was the first such attack to succeed?\n\nSimon Tatham \u2022 April 11, 2024 8:41 AM\n\nA \u201cnational security\u201d single point of failure? Critical \u201cnational\u201d\ninfrastructure?\n\nSurely \u201cglobal\u201d in both cases? The victims of the attack wouldn\u2019t just have\nbeen the USA. Likely the USA weren\u2019t even the only intended victims of the\nattack.\n\nWho? \u2022 April 11, 2024 8:59 AM\n\n@ Bruce\n\n> Programmers dislike doing extra work. If they can find already-written code\n> that does what they want, they\u2019re going to use it rather than recreate the\n> functionality. These code repositories, called libraries, are hosted on\n> sites like GitHub.\n\nIt is not so simple as just lazy development. Most of that code has passed\nyears, even decades, of audits and patching on production environments. It is\nbetter using a code that has been tested on real production environments than\nwriting something new from scratch.\n\nWho? \u2022 April 11, 2024 9:00 AM\n\nA short, single-word, outline of my previous post?\n\nCOBOL.\n\nWinter \u2022 April 11, 2024 9:08 AM\n\n> Programmers dislike doing extra work. If they can find already-written code\n> that does what they want, they\u2019re going to use it rather than recreate the\n> functionality.\n\nI wholeheartedly support @Who?\n\n> Most of that code has passed years, even decades, of audits and patching on\n> production environments.\n\nI would even go further. Most of the value of a code base is in the debugging\nthat it has received.\n\n> Battle-tested trumps shiny-new.\n\nAs Brian Kernighan put it:\n\n> \u201cDebugging is twice as hard as writing the code in the first place.\n> Therefore, if you write the code as cleverly as possible, you are, by\n> definition, not smart enough to debug it.\u201d\n\nWinter \u2022 April 11, 2024 9:10 AM\n\n@Chris Becke\n\n> Do we really believe that this was the first such attack to succeed?\n\nNo. At least, I have yet to see a comment claiming to believe this.\n\nErdem Memisyazici \u2022 April 11, 2024 9:18 AM\n\nThat\u2019s not how any of this works.\n\nIn open source often a contributor is from the organization using the project.\nThis gives the organization some access and control and often those are decent\nprogrammers.\n\nWhen government is using an open source product they do what is called a code\nreview where every line of code is scrutinized by a team of security experts\nbefore the library is used and only stable versions are utilized. Deemed safe\nversions are posted on a list for everyone else to use.\n\nThere are periodic vulnerability advisories issued again by the IT security\ndepartment on more recent versions of open source products, what CVEs are out\nthere etc.\n\nArticle reads like click-bait.\n\nWho? \u2022 April 11, 2024 9:28 AM\n\n@ Bruce\n\n> Like the power grid, communications network, and transportation systems, the\n> software supply chain is critical infrastructure, part of national security,\n> and vulnerable to foreign attack. The U.S. government needs to recognize\n> this as a national security problem and start treating it as such.\n\nI hate to say it, but the answer to this question is something you do not want\nto hear. The only answer is supporting open source and free software\ndevelopers around the world. Pay them for the work they are doing building the\npillars of our cyberinfrastructure.\n\nAnd I am saying paying them, not U.S. developers, but to anyone that develops\nsoftware around the world, so people gets motivated to continue their work.\n\njefferson \u2022 April 11, 2024 10:06 AM\n\n@ Winter:\n\n> Battle-tested trumps shiny-new.\n\n...but it\u2019s easy to confuse mere existence with a \u201cbattle\u201d. Lots of people\nhave used the xz library, but that doesn\u2019t mean it\u2019s come \u201cunder attack\u201d. It\nprobably has, but I don\u2019t really know. There\u2019s likely a lot of stuff that\u2019s\nbeen floating around GitHub for a decade or more, and might even look very\nprofessional, but is obscure enough that nobody\u2019s seriously considered\nsecurity.\n\nA project by \u201csome guy\u201d can look a lot like an open-source project by a team\nof top programmers from a major company. In either case, they\u2019re usually very\nclear they have no responsibility whatsoever to anyone. If someone finds the\ncode and decides to use it in an important product, that user should take some\nresponsibility.\n\nWho? \u2022 April 11, 2024 10:15 AM\n\n> How many other coercion attempts are ongoing? A dozen? A hundred? It seems\n> impossible that the XZ Utils operation was a unique instance.\n\nAnother question that should be answered is how many coercion attempts have\nbeen successful and we do not know it.\n\nTimH \u2022 April 11, 2024 10:37 AM\n\n@jefferson:\n\n> If\n>\n> someone\n\n>\n> finds the code and decides to use it in an important product, that\n>\n> user\n\n>\n> should take some responsibility.\n\nIf your\n\nsomeone\n\nregards themselves as a\n\nuser\n\n, then they\u2019ll consider themselves a victim of any security issues in their\nlibrary code, and won\u2019t take responsibility.\n\nYog \u2022 April 11, 2024 10:51 AM\n\nThis incident also illustrates the dangers in making security critical\nsoftware like OpenSSH vulnerable to attack by adding local patches which drag\nin a lot of less rigorously developed libraries. This is what Red Hat, Debian\nand their derivatives did. OpenSSH itself is not at fault. Other Linux\ndistributions like Alpine, Slackware, Void and Gentoo along with the BSDs,\nwhich didn\u2019t add the offending patches, were not vulnerable.\n\nThe monoculture which has absorbed most of the Linux world must share some of\nthe blame here, by providing a single point of failure on a massive scale.\n\nClive Robinson \u2022 April 11, 2024 10:54 AM\n\n@ Bruce,\n\nYour paragraph,\n\n> \u201cThe fundamental problem is that tech companies dislike spending extra money\n> even more than programmers dislike doing extra work. If there\u2019s free\n> software out there, they are going to use it\u2014and they\u2019re not going to do\n> much in-house security testing. Easier software development equals lower\n> costs equals more profits. The market economy rewards this sort of\n> insecurity.\u201d\n\nEncapsulates most of the problem, but leaves out a couple of things.\n\nFirstly the original driver of these problems,\n\n\u201cTime to Market\u201d\n\nThe argument via the observing of the likes of Microsoft was \u201ccompetition\nkilling\u201d by being \u201cfirst out the door\u201d and as a few around here who were there\ncan confirm in Microsoft\u2019s case their software was rarely if ever all there or\nall functional and promised fixes never happened and became\n\n\u201cA wish for a future release\u201d.\n\nSecondly as I mentioned to @Winter just the other day Microsoft was a thief in\nall sorts of ways. Much of their code was actually stolen or taken from other\nplaces.\n\ncourts even eventually found them guilty of doing so. Yet Microsoft carried\non.\n\nAfter all why spend money on what is \u201cmarket research\u201d just steal it from your\ncompetitors work.\n\nCourts even eventually found Microsoft guilty of doing so.\n\nYet Microsoft carried on, thus the question,\n\n\u201cWhy?\u201d\n\nThe simple answer is because Microsoft knew that the time to court and final\njudgment was usually measured in years. With two sometimes three product\ncycles a year the offending code/ideas could be sufficiently sanitised, and\nthe competitor in effect put out of business in that time.\n\nSo to compete with Microsoft you either had to be too niche or play the sane\ngame as Microsoft. So we have the industry the way Microsoft wanted it because\nthe legal process is at best defective when it comes to time.\n\nBut an important point to note is nobody pays for breakages with software.\nMicrosoft drove the faux-lease idea to avoid any liabilities for there bad\ncode.\n\nThe only real way to stop this nonsense or at least put a drag on it is\n\u201cconsumer liability\u201d legislation. If Microsoft have to pay for breakages they\ncause then they will take more care than they ever have done.\n\nHow you get past the faux-clauses in the EULA\u2019s and over paid corporate\nlawyers is another matter. Which in times past legislators were happy to find\nsolutions for. But now with billion dollar corporate lobbying...\n\nSt\u00e9phane Bortzmeyer \u2022 April 11, 2024 11:39 AM\n\nYou say \u201ccoercion\u201d and \u201cThey pressured Collin to transfer control over XZ\nUtils\u201d. This suggest malevolent force but it seems that the xz maintainer was\nquite happy to receive a seemingly friendly offer for assistance, and gave\naccess to Jia Tan happily. That\u2019s something awful about this attack: it was\ndisguised as help.\n\npostscript \u2022 April 11, 2024 11:41 AM\n\nI would also like to see companies that use open-source products pay the\ndevelopers. But, would that have helped in this situation? Any project, paid\nor not, could be vulnerable to social engineering-type attacks, especially\nwith an adversary that is willing to spend years building credibility. I\u2019d\nlike to see a fund that not only compensates developers and contributors, but\nalso pays bug bounties. They already reneged on the log4j fund so I don\u2019t hold\nout much hope.\n\nSt\u00e9phane Bortzmeyer \u2022 April 11, 2024 11:43 AM\n\n@postscript Remember also that many free software developers do not WANT to be\npaid, or, more precisely, do not want the hassles associated with it:\nprocesses, reporting, instructions, etc. Many free software developers do it\nbecause they enjoy the freedom of working as they want, something that may not\nbe possible if there were some money sent.\n\nMorley \u2022 April 11, 2024 11:54 AM\n\nI think I\u2019ll buy more emergency food and water.\n\nWinter \u2022 April 11, 2024 11:56 AM\n\n@jefferson\n\n> Lots of people have used the xz library, but that doesn\u2019t mean it\u2019s come\n> \u201cunder attack\u201d.\n\nxz Is not the right example for this. The malware was discovered by someone\nwho was timing execution at ms scale. That shows real thorough testing.\n\nBut there are indeed millions of single/dual developer project with few users.\nNPM has well known horror stories around such projects.\n\nJonKnowsNothing \u2022 April 11, 2024 12:15 PM\n\n@All\n\nre: software bill of materials\n\nSBOM went into the dumpster with limited release notes and cryptic bug fix\nstatements.\n\nConsider the M$ Patch Tuesday. It lists some information but only AFTER it\ninstalls. The contents are cryptic. The bug fixes sometimes referred to as BUG\nFIXES or SECURITY UPDATES.\n\nAlong with M$ Patch Tuesday comes all the other patches and update for\nsoftware installed or archived on the system. Software you have never\nactivated but still gets a patch Just In Case.\n\nThere isn\u2019t any way for an end user, even programmers, to know whats built in\nthe download. There are specialist programmers who can manage the update\nprocess for enterprise systems, reviewing what\u2019s allowed and what isn\u2019t.\n(btdt)\n\nWith the current methodology you really haven\u2019t any choice: take the patch-\nupdate or don\u2019t.\n\nSimilar known hacks happen in device drivers, gpu drivers and system\ncomponents. People who need a driver update because their system is Not-WAI\nwill download stuff in hopes of a fix.\n\nRL tl;dr\n\n> Long ago, I was playing a new game on a laptop. Like all modern video games\n> it was a color animated game. Other players would comment about the\n> beautiful landscape, but the landscape looked geometric to me. They would\n> comment on the color of the plants, all the plants on my system looked like\n> black silhouettes. I played this way for several years.\n>\n> Then I got a new system and BOOM the landscape rendered into mountains,\n> hills and plains. The plants rendered into colorful flowers, trees and\n> shrubs.\n>\n> The old rendering was due to a incompatibility in the game graphics engine\n> and the video graphics driver in the laptop (there was no fix). The new\n> rendering used the same game graphics engine but had a new GPU and driver\n> set (rebuilt code base).\n>\n> Many games still use:\n>\n> * Visual C++ redistributables packages from 2005, 2010, and the bundle\n> containing 2015, 2017, 2019, and 2022\n\nIt\u2019s not enough to dump upgrades or dump legacy items. As mentioned, many\nsoftware programs have years of development riding on top of code they do not\nhave access to or is not maintained.\n\nIn a recent post there was discussion about WikiP Editors, Edit Wars, Hot\nTopics, Orphaned Pages. This is a similar issue.\n\nnote: You don\u2019t need to have a health crisis to have someone else snag your\ncode or post. It\u2019s part of the hand-me-down code-topic process, sometimes\ncalled Knowledge Transfer.\n\nClive Robinson \u2022 April 11, 2024 12:24 PM\n\n@ Morley, ALL,\n\nRe : It ain\u2019t what you do but the way that you do it.\n\n> I think I\u2019ll buy more emergency food and water.\n\nBuying in ready prepared will only serve you once... Then what?\n\nIf you want to stay in the game of life you need to know as a minimum how to\n\n\u201cGrow, hunt, cook, can, and store.\u201d\n\nYour food, and,\n\n\u201cCollect, harvest, filter, and make potable\u201d\n\nYour water.\n\nFor both you need to know how to get sufficient energy to do some of the\nsteps, and there ain\u2019t many trees in the city.\n\nOtherwise it\u2019s \u201cEndEx\u201d before you get out of round one.\n\nJust saying there\u2019s a lot you need to known and have had good practice at.\n\nJust remember that even with a lifetime of experience early American Settlers\ndid not really live that long, and about 1/3rd died before they made it to\ntwenty...\n\nClive Robinson \u2022 April 11, 2024 12:51 PM\n\n@ Yog\n\nRe : The prey is usually innocent.\n\n> \u201cOpenSSH itself is not at fault.\u201d\n\nThat depends on your view point.\n\nTo the hunter it was the prey and usually the prey is fairly innocent.\n\nBut consider what the predator is actually doing,\n\n\u201cObtaining a resource with minimal risk or effort\u201d\n\nTherefore it can be argued that the weak or poorly defended are going to be\nthe predator\u2019s \u201clow hanging fruit\u201d.\n\nTherefore it can be further argued that OpenSSH was just one of several\nresources that met the predator\u2019s need, but OpenSSH had the lowest effort,\nrisk, reward.\n\nThus the follow on question is,\n\n\u201cWas OpenSSH weak or poorly defended?\u201d\n\nTo which the answer is,\n\n\u201cIn this predators eyes, yes or they would have attacked else where.\u201d\n\nYou or I as will others might think \u201cWhy not XXX\u201d but we don\u2019t know what is in\nthe predators mind.\n\nAlso the predator might be part of a team that have attacked other resources\nas well as a broad multipoint attack strategy. With other resources already\nattacked, and defeated, but not yet discovered.\n\nAs is said around here from time to time,\n\n\u201cAttribution is hard very hard\u201d\n\nWith the implicit rider of,\n\n\u201cand oft impossible to get right\u201d\n\nIn part because we can not get into the predators mind or environment...\n\nClive Robinson \u2022 April 11, 2024 1:17 PM\n\n@ Who?, Winter, ALL,\n\nRe : Not all parts are interchangeable.\n\n> \u201cMost of that code has passed years, even decades, of audits and patching on\n> production environments. It is better using a code that has been tested on\n> real production environments than writing something new from scratch\u201d\n\nAnd thereby hangs a myth.\n\nFrom a physical engineering perspective, most engineers know that there are\n\u201csystems\u201d and \u201csub systems\u201d. They do not solve the same problems, thus the\nproperties of sub systems have to be considered within any new system not just\ndropped in.\n\nA nylon gear might be great to adjust a trim flap on a drone. Being better\nbecause it\u2019s not brass or steel thus lighter. But would you use the same nylon\ngear in the engine drive? Probably not, because although it can do the job,\nit\u2019s failure mode is significantly different and is very much more critical.\nThus you go for the heavier part with better failure characteristics.\n\nThe fact a software sub system works fine in half a dozen or more other\nsystems is really not a \u201crecommendation\u201d for new systems that are different in\nall sorts of ways.\n\nSystem complexity makes a mockery very fast of the \u201cbattle hardened\u201d notion.\n\nWorse all to many of these sub systems are used because they have the kitchen\nsink thrown in.\n\nIn order to be \u201cpopular\u201d they have to be,\n\n\u201cAll things to all men\u201d\n\nAnd that really is stupid from a security perspective because it opens up the\nvulnerability potential by the unwarranted increase in complexity...\n\ndenton scratch \u2022 April 11, 2024 2:40 PM\n\n@Erdem Memisyazici\n\n\u201cWhen government is using an open source product they do what is called a code\nreview where every line of code is scrutinized by a team of security experts\nbefore the library is used and only stable versions are utilized.\u201d\n\nDo you seriously believe that? I suspect you may be being sarcastic. Or maybe\nyou\u2019ve never been close to a government software procurement exercise. Good\nprogrammers \u2013 \u201cexperts\u201d, in your words \u2013 don\u2019t work for the government,\nbecause they can earn twice as much elsewhere.\n\nGovernments aren\u2019t good at running major software projects for this reason.\nCivil servants are awful at project management, so budgets for government\nsoftware projects balloon; and then the project fails anyway, and the\nballooned budget has to be written off.\n\nFarming the project out to a contractor doesn\u2019t work either. Just look at\nFujitsu and the Post Office. Government involvement made that much worse,\nbecause of the number of government software projects in the pipeline that\nwere to be handled by Fujitsu (formerly ICL, the UK government computing\n\u201cchampion\u201d). A commercial software buyer would have cancelled the contract\naround 2004, but successive governments couldn\u2019t do that.\n\nFor much the same reason, legislation on software is nearly always\nmisconceived and harmful; there are few software experts in the civil service.\n\ndenton scratch \u2022 April 11, 2024 2:45 PM\n\n@Yog\n\n\u201cThis is what Red Hat, Debian and their derivatives did.\u201d\n\nDebian, in particular, has form for this kind of unwarranted meddling with\nupstream\u2019s code.\n\nPeter S. Shenkin \u2022 April 11, 2024 2:47 PM\n\nOn April 6, I wrote, on X:\n\n\u2014\n\nThe XZ debacle makes it appear as if the very existence and practice of open-\nsource software has resulted in the largest accumulation of technical debt the\nworld has ever known or will know, all behind our backs. \u201cHaving seen one\ntiger in the woods\u201d, etc.\n\nTo my surprise, I\u2019ve not seen any responses, pro or con.\n\nErdem Memisyazici \u2022 April 11, 2024 2:54 PM\n\n@denton scratch\n\nI\u2019m a civil servant and we do that.\n\nSam \u2022 April 11, 2024 3:01 PM\n\nYep, huge problem. I programmed for 10+ years with the last few in a 5 man\nshop. We created and supported insurance software. It\u2019s insane to think we\ncould do any kind of security review of our dependecies, beyond a look at \u2018are\nenough other developers using this library to make it maintained and not\nabandonware in the near term future\u2019.\n\nAll libraries \u2013 anything from UI to framework libs to single sign on security\nlibraries were downloaded from Nuget / npm / other package managers with an\nimplicit trust that they weren\u2019t compromised or malicious. Many of these were\nmade by independent or small teams of programmers.\n\nThe amount of brain power audit the code bases for vulnerabilities down to\nbits is unfathomable.\n\nIf I need a car to get me ( or my code base ) from A to B, there\u2019s no way I\ncan afford to audit the car down to pistons and tie rods and ABS electronics.\n\nWinter \u2022 April 11, 2024 4:43 PM\n\n@Clive\n\n> But would you use the same nylon gear in the engine drive?\n\nSoftware is not nylon, nor brass.\n\nSoftware cannot be designed to have an operating temperature or strength to\nweight ration. Debugging before and after release is unavoidable and\nessential.\n\nNew nylon is good and reliable, new code is neither.\n\nQu \u2022 April 11, 2024 6:07 PM\n\nConsidering the authorities granted to surveil and protect critical\ninfrastructure, I can imagine many open source maintainers would be extremely\nuncomfortable being subject to any such targeted surveillance.\n\nJonKnowsNothing \u2022 April 11, 2024 8:50 PM\n\n@All\n\nre: Plethora of options, Dearth of scope\n\nAnother aspect of the overall problem is the sheer number of items in Open\nSource available. There are loads of options and loads of similar functions.\n\nProgrammers often use the 5-Cow version of a program (for those that remember\ntucow shareware downloads (1)). Like the star rating at Amz, the more cows a\nshareware item had, the more trustworthy the download appeared. Some folks\nonly went by the number of cows without considering any other aspect of the\ndownload.\n\nOpen source is a more convoluted version of load-n-pray because you don\u2019t\nreally know whats in the pkg and you don\u2019t really know if it works until you\ntry it out. The costs if it\u2019s a bust is lost project time or a load of\nmalware.\n\nProgrammers don\u2019t like to redo-do-overs, so once they decide 4Cows is enough\nand it worked at \u201ctheir previous employer\u201d, they will pull the same item again\nand again and again.\n\nThis makes them vulnerable to all sorts of site spoofing (fauxcows) and the\nunintended or intended coding errors from fauxcow copies.\n\nPurchasing code has the same problems. Expensive libraries and stacks that do\nnot work out of the box and require previous experience on fixing the\nseriously and vendor ignored errors in the source.\n\nWorse, some vendors or sources only shovel OBJ code for elcheapo, if you want\neditable source text you have to fork over a lot more moolah.\n\n===\n\n(1) ht tps:/ /en.wikipedia.org/wiki/Shareware\n\n  * Shareware is a type of proprietary software that is initially shared by the owner for trial use at little or no cost.\n\n> Types of shareware\n>\n> Trialware Freemium Adware Crippleware Donationware Nagware Postcardware\n\nname.withheld.for.obvious.reasons \u2022 April 11, 2024 10:33 PM\n\nOne more example of the value of promoting diverse and divergent sources of\ncode components not readily abused in a systemic environment with large\nhomogeneous installations and interconnects.\n\nFunctional relays, as used in aerospace applications, go a far way in stunting\ncataclysmic types of breaches and security events. No amount of sandboxing\nreplica codec engines will protect against a sufficiently developed monocode\nplatform (whether hardware or software\u2013or both).\n\nClive Robinson \u2022 April 11, 2024 11:19 PM\n\n@ Winter, JonKnowsNothing, ALL,\n\nRe : It\u2019s Crapware you want.\n\n> \u201cDebugging before and after release is unavoidable and essential.\u201d\n\nDebugging if done properly is only required to be done \u201cpre-release\u201d.\n\nCode with bugs after release is \u201cCrapware\u201d and our host points this out with,\n\n> \u201cThe fundamental problem is that tech companies dislike spending extra money\n> even more than programmers dislike doing extra work. If there\u2019s free\n> software out there, they are going to use it\u2014and they\u2019re not going to do\n> much in-house security testing. Easier software development equals lower\n> costs equals more profits. The market economy rewards this sort of\n> insecurity.\u201d\n\nHe\u2019s been a lot less polite about it in the past, and with good reason.\n\nFor years I\u2019ve written code \u201cas an engineer\u201d for embedded systems that used\n\u201cMasked Programmed\u201d microcontrollers. Some of it is still out there running\ncontinuously without power cycle or reset year after year, and has been for\nwell into four decades. Some of it controls very valuable plant equipment that\nif it fails could have global economic effects.\n\nThe thing about \u201cmasked programmed\u201d and similar is code could not be changed\nand you payed a lot of money upfront for a production run of microcontrollers.\n\nAs the reality of the engineers mantra (based on the NASA saying) has it,\n\n\u201cBugs are not an option\u201d\n\nThat was the norm in the industry back then and in some places still is. Then\nin the mid to late 1980\u2019s the likes of Microsoft decided otherwise and started\nshipping \u201cCrapware\u201d.\n\nSlowly that Microsoft mantra of,\n\n\u201cJust ship the S41t\u201d\n\nNonsense walked back via the use of Flash ROM into embedded systems...\n\nThe result is that now crackers can change embedded code from the other side\nof the world and create havoc and have done...\n\nThanks to basic management greed and stupidity, cranking the handle on \u201cneo-\ncon mantras of neoliberalism\u201d.\n\nWill you fly on an aircraft that has \u201cPatch Tuesday\u201d fitted as standard so\nthey can \u201cJust ship the Sh1t\u201d for a few dollars more?\n\nBecause that is what your statement excuses.\n\nThere is a rumour that the DoJ and FBI are looking into Boeing because of that\n\u201cJust ship the S41t\u201d mentality in management. Prompted by the deaths in the\nhundreds and multiple critical aircraft failures costing hundreds of millions\nif not more.\n\nWinter \u2022 April 12, 2024 1:15 AM\n\n@Clive\n\n> Debugging if done properly is only required to be done \u201cpre-release\u201d.\n\nObviously not. Even NASA code has bugs.\n\nNASA\u2019s options are limited after a probe has left the planet, so they use many\nother strategies to prevent disaster due to bugs.\n\nAlso, NASA does make code changes after launch. NASA needs such strategies\nanyway as radiation ensures that bug free code can get bugs in space.\n\nHowever, your claim is easy to prove. Just show us non-trivial codebases that\nwere bug free on release. It would be nice if we were to know how it was\nachieved and verified.\n\nbl5q sw5N \u2022 April 12, 2024 2:35 AM\n\nPrograms need to be designed for their problem environment, task to be\nperformed, and data structures; and then written to instantiate that design.\nIt seems more typical on the contrary that we don\u2019t have a good idea of what\nwe are trying to do, and the implementation is something half unknown that is\nnot even that.\n\n\u201cThe beginning of wisdom for a programmer is to recognize the difference\nbetween getting [the] program to work and getting it right. ... a program\nwhich does work is not necessarily right. It may still be wrong because it is\nhard to understand; or because it is hard to maintain as the problem\nrequirements change; or because its structure is different from the structure\nof the problem ; or because we cannot be sure that it does indeed work.\u201d \u2013 M A\nJackson\n\n\u201cOur objective above all has been to create programs which are self-evidently\ncorrect. ... we cannot afford any significant probability that our program\ncontains a logic error. All the logic errors must have been eliminated during\nthe design process.\n\n\u201cWe cannot hope to find logic errors by testing. Logic errors are concerned\nwith combinations of circumstances, and there are too many combinations to\ntest. Instead of testing we must think and plan and design so that testing\nbecomes unnecessary.\u201d \u2013 M A Jackson\n\n\u201cNever trust a system that seems to be working\u201d \u2013 Alan Turing.\n\nbl5q sw5N \u2022 April 12, 2024 2:50 AM\n\nApologies, the quote attributed to Alan Turing in my above post should have\nbeen attributed to Foone Turing.\n\nOffice ally \u2022 April 12, 2024 2:52 AM\n\nThank you for your contribution! Your perspective adds depth to our knowledge\nbase.\n\nJonKnowsNothing \u2022 April 12, 2024 3:28 AM\n\n@ bl5q sw5N, @Clive, @Winter, All\n\nre: Programs need to be designed for their problem\n\nThere is a huge chasm between \u201cdesign for their problem\u201d and actually having a\n\u201cdesign that solves the problem\u201d.\n\nThis is a large aspect of what fails in program usage. Marketing has a lot to\nsay about this along with the Leave Nothing On The Table approach to project\ndevelopment.\n\n  * Design v Solve\n\nThey are not mutually inclusive. It\u2019s more of a Venn diagram overlap between\nthe concepts.\n\nThis concept is followed by \u201cdesign is not the same as what can be implemented\nor executed\u201d. It may look good on paper but it doesn\u2019t work in real\napplication.\n\n  * Amz AI powered cashier free shops Grab and Walk Out failure\n\nThe design looked great, the investors chucked money at Bezos who burned it up\non a rocket ship, but the reality was a failure in what was implemented. The\nexecution of the implementation of the fancy design did not result in the\nexpected outputs. There were too many Ohs and Naughts that was not evident on\nthe design board.\n\nProblems and errors, which may not have the same definition, follow complex or\neven simple programs.\n\nSome of the most tested software and hardware systems are the ones used for\nspace missions (may not include bezos-elmusko space efforts). The post-crash\nanalysis shows how the implementation did not match the design which did not\nactually solve the specified problem.\n\n===\n\nMars lander failures. Note the sections that have root cause analysis\nexplanations.\n\nht tps://en .wikipe dia.org/wiki/Schiaparelli_EDM\n\n  * Schiaparelli EDM (Italian: [skjapa\u02c8r\u025blli]) was a failed Entry, Descent, and Landing Demonstrator Module (EDM) of the ExoMars programme\u2014a joint mission of the European Space Agency (ESA) and the Russian Space Agency Roscosmos.[4] It was built in Italy and was intended to test technology for future soft landings on the surface of Mars.\n  * An investigation that concluded in May 2017 identified four \u201croot causes for the mishap [...]: Insufficient uncertainty and configuration management in the modelling of the parachute dynamics which led to expect much lower dynamics than observed in flight; Inadequate persistence time of the IMU [Inertial Measurement Unit] saturation flag and inadequate handling of IMU saturation by the GNC [Guidance Navigation and Control]; Insufficient approach to Failure Detection, Isolation and Recovery and design robustness; Mishap in management of subcontractors and acceptance of hardware.\u201d\n\nht tps://e n.wiki pedia.org/wiki/List_of_missions_to_Mars\n\nCheck mission success v failure and failure analysis.\n\nhtt ps:/ /en.wik ipedia.org/wiki/Mars_2\n\n  * The Mars 2 was an uncrewed space probe of the Mars program, a series of uncrewed Mars landers and orbiters launched by the Soviet Union beginning 19 May 1971. The Mars 2 and Mars 3 missions consisted of identical spacecraft, each with an orbiter and an attached lander.\n\nhtt ps://en.wikipe dia.org/wiki/Mars_2#Entry,_descent,_and_crash_landing\n\n  * The descent module separated from the orbiter on 27 November 1971 about 4.5 hours before reaching Mars. After entering the atmosphere at approximately 6 km/s, the descent system on the module malfunctioned, possibly because the angle of entry was too steep. The descent sequence did not operate as planned and the parachute did not deploy.[4] The descent module became the first man-made object to impact the surface of Mars. The exact crash site is unknown, but it is estimated to be at 45\u00b0S 313\u00b0W.[3][5] Attempts to contact the probe after the crash were unsuccessful.\n\nMike \u2022 April 12, 2024 4:01 AM\n\nUnfair language.\n\nThe phrase \u201cprogrammers dislike doing extra work\u201d is grossly unfair. The\ncorrect and accurate statement would be \u201cprogrammers strive to not repeatedly\nre-invent the wheel\u201d.\n\nThe way you have written this makes it sound like all programmers are lazy and\nthey are responsible for this type of exploit being possible. You know well\nBruce that this is far from the truth but your choice of expression ends up\nbeing pejorative towards programmers.\n\nWinter \u2022 April 12, 2024 5:47 AM\n\n@Mike\n\n> The phrase \u201cprogrammers dislike doing extra work\u201d is grossly unfair. The\n> correct and accurate statement would be \u201cprogrammers strive to not\n> repeatedly re-invent the wheel\u201d.\n\nOtaku Quotes \u2013 \u201cLaziness is the mother of human progress\u201d\n\nwiredog \u2022 April 12, 2024 5:47 AM\n\n\u201cIt\u2019s a catastrophe that didn\u2019t happen, so it won\u2019t get much attention\u2014but it\nshould. \u201d\n\nIt\u2019s been written up in the Washington Post, the New York Times, and even The\nEconomist (which also noted that closed source software from the likes of\nMicrosoft has frequent security problems). It\u2019s gotten a lot of attention.\nWhether that attention will last is another question...\n\nIIRC, the Economist article even mentioned the classic XKCD cartoon:\nhttps://m.xkcd.com/2347/\n\ncybershow \u2022 April 12, 2024 5:56 AM\n\nHopefully it\u2019s not annoying if I respost this analysis I wrote last week that\ncomes to some similar but slightly different conclusions than Bruce.\n\nPoison Code\n\nThere is definitely a complex balance to be struck between the (positive)\nfreedom and independence of anyone to write code for any use, and the\n(negative) freedom users should have from malware and bugs. My concern is that\nno single/few too-powerful entities presume ti be arbiters of trust relations\nthat underpin the supply chain. More democracy and public involvement is\nneeded, and the burden of provenance needs to be distributed somehow.\n\nBen \u2022 April 12, 2024 6:03 AM\n\nA minor point, but you say \u201cforeign actor\u201d, but do we know that for sure?\n\nOur own governments quite like the idea of backdoors, after all.\n\nResearcherZero \u2022 April 12, 2024 6:08 AM\n\nDoing extra is inefficient not necessarily lazy. It depends on how you look at\nand address the problem.\n\nResources and time are also a constraint to the types of processes that can be\nput in place. If it is a single soul that is responsible, a production chain\nis not feasible. Process control and auditing more difficult. Time management\nand setting limits are then crucial.\n\nAn open source project maintained by a few people hardly has the resources to\nmanage a large complex project, while running background checks and\nsupervision of every contributor. If a core maintainer is incapacitated, the\nload increases.\n\n\u2013\n\nEven departments with greater resources have gaps in process.\n\n\u2018https://securityboulevard.com/2024/04/cisa-russian-hackers-stole-emails-\nbetween-u-s-agencies-and-microsoft/\n\ntfb \u2022 April 12, 2024 6:26 AM\n\n@Who\n\nYou are completely right that the \u2018programmers dislike doing extra work\u2019\ncomment is silly: writing reusable code aka libraries is kind of the whole\npoint of programming. And without such code large programming systems would\nsimply not be possible at all. Indeed it\u2019s easy to see that if you consider\njust the time taken to type in a series of systems of linearly increasing size\nthen unless you reuse code this becomes quadratic in the final system\u2019s size,\nunless you reuse code. And that\u2019s just typing them in: that\u2019s the easy bit.\n\nBut there\u2019s a caveat:\n\n> Most of that code has passed years, even decades, of audits and patching on\n> production environments.\n\nThat\u2019s true only if the code is not being actively developed. If you rely on\nsome library which has not changed in a long time then you can rely on it\nbehaving the same way as it always did (bugs included). If people are making\nchanges to it, even if those changes are \u2018small\u2019, then you can\u2019t: the\nfoundation you think is made of concrete turns out to be made of jelly.\n\nSo I think a desirable thing would be for people to be willing to say that\n\u2018this thing is finished now: it does what it needs to do and any future\nchanges to it will be only fixes for demonstrated bugs with really careful\ntest cases\u2019.\n\nThat\u2019s never going to happen, of course, for a lot of reasons this margin is\ntoo small to contain.\n\ntfb \u2022 April 12, 2024 6:33 AM\n\n@Erdem Memisyazici\n\n> When government is using an open source product they do what is called a\n> code review where every line of code is scrutinized by a team of security\n> experts before the library is used and only stable versions are utilized.\n> Deemed safe versions are posted on a list for everyone else to use.\n\nOn exactly what planet do you live? I mean, really? Because no, they do not.\nAnd yes, I have worked for government. Indeed in one such role I left because\nI could not face the appalling security nightmare which was their system (I am\na coward, but I also know I did not have the political skills to deal with it\nwithout losing my temper in a bad way).\n\nSubscribe to comments on this entry\n\n## Leave a comment Cancel reply\n\n\u2190 In Memoriam: Ross Anderson, 1956-2024\n\nSidebar photo of Bruce Schneier by Joe MacInnis.\n\nPowered by WordPress Hosted by Pressable\n\n### About Bruce Schneier\n\nI am a public-interest technologist, working at the intersection of security,\ntechnology, and people. I've been writing about security issues on my blog\nsince 2004, and in my monthly newsletter since 1998. I'm a fellow and lecturer\nat Harvard's Kennedy School, a board member of EFF, and the Chief of Security\nArchitecture at Inrupt, Inc. This personal website expresses the opinions of\nnone of those organizations.\n\n### Related Entries\n\n  * In Memoriam: Ross Anderson, 1956-2024\n  * US Cyber Safety Review Board on the 2023 Microsoft Exchange Hack\n  * XZ Utils Backdoor\n  * Ross Anderson\n  * Security Vulnerability in Saflok's RFID-Based Keycard Locks\n\n### Featured Essays\n\n  * The Value of Encryption\n  * Data Is a Toxic Asset, So Why Not Throw It Out?\n  * How the NSA Threatens National Security\n  * Terrorists May Use Google Earth, But Fear Is No Reason to Ban It\n  * In Praise of Security Theater\n  * Refuse to be Terrorized\n  * The Eternal Value of Privacy\n  * Terrorists Don't Do Movie Plots\n\nMore Essays\n\n### Blog Archives\n\n  * Archive by Month\n  * 100 Latest Comments\n\n#### Blog Tags\n\n  * 3d printers\n  * 9/11\n  * A Hacker's Mind\n  * Aaron Swartz\n  * academic\n  * academic papers\n  * accountability\n  * ACLU\n  * activism\n  * Adobe\n  * advanced persistent threats\n  * adware\n  * AES\n  * Afghanistan\n  * air marshals\n  * air travel\n  * airgaps\n  * al Qaeda\n  * alarms\n  * algorithms\n  * alibis\n  * Amazon\n  * Android\n  * anonymity\n  * Anonymous\n  * antivirus\n  * Apache\n  * Apple\n  * Applied Cryptography\n  * artificial intelligence\n\nMore Tags\n\n### Latest Book\n\nMore Books\n\n", "frontpage": false}
