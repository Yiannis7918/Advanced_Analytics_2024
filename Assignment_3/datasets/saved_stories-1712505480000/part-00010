{"aid": "39958224", "title": "Coding Interview Cheat Sheets", "url": "https://deriveit.org/coding/everything-you-need-to-know-about-python-118", "domain": "deriveit.org", "votes": 2, "user": "andrewp123", "posted_at": "2024-04-07 04:40:02", "comments": 0, "source_title": "Everything You Need to Know About Python - DeriveIt", "source_text": "Everything You Need to Know About Python - DeriveIt\n\nDeriveIt\n\nCourse\n\nCheat Sheets\n\nPremium\n\nLog In\n\n#\n\nCheat Sheets\n\n# Everything You Need to Know About Python\n\nLesson\n\nHere are all the import Python language features you need to know.\n\n### Basics\n\nThese are all the built-in data structure types in Python:\n\n# primitives\n\nx = 1 # integer\n\nx = 1.2 # float\n\nx = True # bool\n\nx = None # null\n\nx = float('inf') # infinity (float)\n\n# objects\n\nx = [1, 2, 3] # list\n\nx = (1, 2, 3) # tuple\n\nx = {1: \"a\"} # dict\n\nx = {1, 2, 3} # set\n\nx = \"abc123\" # str\n\nYou can convert between types like this:\n\nn = 7\n\nstr(n) # '7'\n\nint('7') # 7\n\nx = [1,2,3]\n\nset(x) # {1,2,3}\n\ntuple(x) # (1,2,3)\n\ns = {1,2,3}\n\nlist(s) # [3,1,2], sets don't store order\n\nHere are very basic operations that you should know:\n\n# set up variables for the example\n\na = [1]\n\nb = [1]\n\na == b # True, compares value\n\na is b # False, compares memory location\n\n1 / 2 # .5, division\n\n1 % 2 # 1, remainder\n\n1 // 2 # 0, division rounding down\n\n2 ** 5 # 32, power 2^5\n\nYou can conditionally set a value using if statement, called a \"Ternary\nOperator\".\n\n# gives 0 if x is equal to 5, else gives 1\n\ny = (0 if x == 5 else 1)\n\nYou can set multiple variables at the same time, which is particularly useful\nwhen you want to swap variables with each other. Here are a few examples (this\nis called \"object destructuring\"):\n\n# sets a=b, b=a (swap a and b)\n\na, b = b, a\n\n# sets a=1, b=2\n\na, b = 1, 2\n\n# sets a=1, b=2, c=3, d=4, e=[5, 6]\n\n[a, b, [c, d], e] = [1, 2, [3, 4], [5, 6]]\n\n### Loops + Ifs\n\nfor i in range(4):\n\n# 0 1 2 3\n\nfor i in range(1, 4):\n\n# 1 2 3\n\nfor i in range(1, 6, 2): # loop in steps of 2\n\n# 1 3 5\n\nfor i in range(3, -1, -1): # loop backwards\n\n# 3 2 1 0\n\narr = [\"a\", \"b\"]\n\nfor x in arr:\n\n# \"a\" \"b\"\n\nhmap = {\"a\": 4, \"b\": 5}\n\nfor x in hmap:\n\n# \"a\" \"b\"\n\nx = 0\n\nwhile x != 4:\n\n# 0, 1, 2, 3\n\nx += 1\n\nx = 4\n\nif x == 4:\n\nprint('This prints')\n\nelif x == 5:\n\nprint('This does not print')\n\nelif x == 6:\n\nprint('This does not print')\n\nelse:\n\nprint('This does not print')\n\n### Comprehensions\n\nPython has nice syntax for creating arrays. Here's an example that shows the\ngeneral logic you can use (this is called a \"List Comprehension\"):\n\n# This creates an array:\n\nx = [a*b for a in A for b in B if a > 5]\n\n# The code above is equivalent to:\n\nx = []\n\nfor a in A:\n\nfor b in B:\n\nif a > 5:\n\nx.append(a*b)\n\nHere are some more examples:\n\nx = [2*n for n in range(4)]\n\n# [0, 2, 4, 6]\n\nx = [a for a in [1,2,3,4,5,6] if a % 2 == 0]\n\n# [2, 4, 6]\n\n# 2 x 3 matrix of zeros\n\nx = [[0 for col in range(3)] for row in range(2)]\n\n# [[0, 0, 0],\n\n# [0, 0, 0]]\n\nGenerator Comprehensions are the same as List Comprehensions, except they\ngenerate values lazily and can stop early. To do a generator comprehension,\njust use () instead of [].\n\n# does not run yet\n\ncomputations = (i for i in range(5))\n\n# runs the loop, might stop early\n\nfor x in computations:\n\n# ...\n\nNote that () can mean a tuple, or it can mean a generator depending on\ncontext.\n\n### Functions\n\nTo create a function, you use the def keyword:\n\ndef my_function():\n\n# do things here\n\nmy_function() # runs the code in the function\n\nAll variables declared inside a function are local. You need to use the\nnonlocal keyword if you want to use variables that appear outside of a\nfunction. Here's an example:\n\nx = 1\n\ny = 1\n\ndef fn():\n\nnonlocal x # declare x as nonlocal\n\nx = 2 # sets variable `x` that appears outside of the\n\nfunction\n\ny = 2 # creates new local variable\n\nfn()\n\nprint(x) # 2\n\nprint(y) # 1\n\nYou only have to worry about using nonlocal with primitive types like with\nnumbers. This is because objects are automatically globally scoped. See below\nfor details.\n\nx = [1]\n\ny = [1]\n\ndef fn():\n\nnonlocal x\n\nx[0] = 2\n\ny[0] = 2 # this would normally give an error. to avoid this,\n\npython refers to a more globally scoped variable, so `nonlocal`\n\nis not needed\n\nfn()\n\nprint(x) # [2]\n\nprint(y) # [2]\n\nYou can also declare a function in-line, using the keyword lambda. You don't\nhave to do this, it's just for convenience. The following 2 functions are the\nsame:\n\ndef fn(x,y):\n\nreturn x + y\n\nlambda x,y: x + y\n\n### Booleans\n\nAnything can be used as a boolean. Values of None, 0, and empty data\nstructures like [] evaluate to False, and everything else evaluates to True.\n\na = None\n\nif a: # does not run\n\nprint('does not print')\n\nb = []\n\nif b: # does not run\n\nprint('does not print')\n\nc = [15]\n\nif c: # runs\n\nprint('prints')\n\nThe any() function check if any value is true, and the all() function checks\nif all values are true.\n\nany([True, False, False]) # True\n\nall([True, False, False]) # False\n\n### Strings\n\nStrings come with the useful built-in functions .split(x), .join(x), ord(x),\nand chr(x).\n\nx = 'a:b:c'\n\nx.split(':') # ['a', 'b', 'c']\n\nx = ['a', 'b', 'c']\n\n':'.join(x) # 'a:b:c'\n\n# convert between character and unicode number\n\nord(\"a\") # 97\n\nchr(97) # 'a'\n\n### Misc\n\nTo write an expression over multiple lines, you can escape newlines with \\, or\nyou can wrap the expression in parentheses.\n\n# escape newlines\n\nx = 5 \\\n\n\\+ 10 \\\n\n\\+ 6\n\n# wrap in parentheses\n\nx = (\n\n5\n\n\\+ 10\n\n\\+ 6\n\n)\n\nYou can select parts of an array or string very easily, called \"splicing\".\nSpecify the start index, end index, and/or step size that you want to make.\nHere are some examples:\n\n# splice array using x[start:end:step]. End is exclusive\n\nx = [0,1,2,3,4]\n\nx[2:] # [2,3,4]\n\nx[:2] # [0,1]\n\nx[1:4] # [1,2,3]\n\nx[3::-1] # [3,2,1,0]\n\nx[-1] # 4\n\nAlmost everything in Python is a pointer. Whenever you write A=B, Python\npoints A to B. See Pointers are all you Need for more.\n\n### Python Reference\n\nHere's a refrence to the offical Python docs:\nhttps://docs.python.org/3/library/index.html. The Built-in Functions and\nBuilt-in Types sections are the most useful parts to skim, although it's\ntotally optional reading. The docs are not formatted in a very readable way.\n\nMark as Completed:\n\nSubmits:\n\ntest\n\n1\n\n2\n\ndef test():\n\nTest your code to get an output here!\n\n##\n\nHelper Functions\n\nUse these functions to test your code, but not in submissions. Only available\nwhen imported.\n\nThe TreeNode.of function can be used to create an entire binary tree using 1\nline of code. The input is a BFS traversal of the tree including nulls, and\nthe output is the root node of the tree.\n\nTreeNode.of([1, None, 2, None, 3])\n\nWhenever you print a TreeNode, it automatically gets printed as\nTreeNode.of(...).\n\nThe ListNode.of function lets you create an entire Linked List using 1 line of\ncode. The input is an array, and the output is the head of the Linked List.\n\nListNode.of([1, 2, 3])\n\nOptionally, you can add a loop using the second parameter. Here's an example\nthat loops back to index 1:\n\nListNode.of([1, 2, 3], 1)\n\nWhenever you print a ListNode, it automatically gets printed as\nListNode.of(...).\n\nThe GraphNode.of function lets you create an entire Graph using 1 line of\ncode. The input is an Adjacency Matrix, and the output is the first node in\nthe matrix.\n\nHere's how you create the graph below. The node with value 'A' is returned.\n\n    \n    \n    GraphNode.of([ ['A', 1, 2], ['B', 2], ['C', 0] ])\n\nWhenever you print a GraphNode, it automatically gets printed as\nGraphNode.of(...).\n\nIf the problem you're solving uses a Class, you can run your own custom test\ncases. To do this, you can provide the functions that you want to call inside\nof an Array, along with their arguments. Here's an example:\n\n[['__init__', 15], ['add', 16], ['get']]\n\nThe above input will run this code:\n\n    \n    \n    c = MyClass(15) c.add(16) c.get()\n\nThe call to the __init__ function must come first and should not be repeated.\n\n", "frontpage": false}
