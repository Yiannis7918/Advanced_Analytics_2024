{"aid": "39965209", "title": "Private schema in Supabase: learning from misconfigurations", "url": "https://saifur-rahman.com/supabase-private-schema.html", "domain": "saifur-rahman.com", "votes": 1, "user": "TheSaifurRahman", "posted_at": "2024-04-08 00:42:09", "comments": 0, "source_title": "Supabase Private Schema", "source_text": "Supabase Private Schema\n\n..\n\n2024-04-07\n\n# Supabase Private Schema\n\nFor Creo, we made the decision to use Supabase, mainly because of its Auth.\nSlowly, we started using the database as well and ended up having ~20 tables\nin the public schema. We did not enable RLS (Row Level Security) for a long\ntime, even though it kept complaining about it. This was mainly because I\nwasn\u2019t aware of how Supabase works and who it is for. Later, when I realized\nthat, we just didn\u2019t have enough time to fix it. This task remained in my\ntodos for the things to do before a public launch (No pun intended).\n\nAnd Supabase publishes all the tables in the public schema via the REST APIs.\nThis was something I didn\u2019t want to do.\n\nThe following options were there:\n\n  1. Enable RLS.\n  2. Move to a different Postgres provider.\n  3. Move the table to a different schema (e.g., private).\n\n1 - It was not possible to enable RLS as there were tables that didn\u2019t have\nany user data. Also, since we had our own backend, even the user-related data\nwas something I didn\u2019t want to publish publicly via the APIs (even though they\ncan access what they own) as this would publish the structure of the tables -\nthe lesser I share, the better. No need, don\u2019t share. \u201cPrinciple of least\nprivilege or the Need-to-know principle.\u201d\n\n2 - We had a trigger on auth.users table (which is a Supabase-owned table for\nmanaged Auth). The job of this trigger was to INSERT into our users\u2019 table\n(public.users). We created this table to store users\u2019 metadata. It would have\nbeen cumbersome to switch to a different provider, and we might have needed a\nwebhook handler, among other things, for this.\n\n3 - This is what we ended up doing. We moved ALL the tables from the public\nschema to the private schema. You can create a new schema with any name; I\njust called it private. Anything that\u2019s not called public will not expose the\ndata via the APIs.\n\nSupabase doesn\u2019t provide a way to completely disable the REST APIs on the\npublic schema. The only way left was to do this or to write RLS policies,\nwhich didn\u2019t make any sense as I didn\u2019t want to publish anything via the\nSupabase APIs. Furthermore, we have our own backend already, which doesn\u2019t\nneed any APIs from Supabase as it connects directly to the DB.\n\nA whitelist for the schema (with the option to remove public) from it would\nhave been a really nice feature. But anyways.\n\nThese are the migration steps we followed, something that could be useful to\nsomeone:\n\n  1. Create a private schema from the Supabase dashboard.\n  2. Run the DDL migration on the private schema.\n  3. Export DML from the public schema; we just needed the COPY and SEQ sections.\n    \n        $ pg_dump -h {host} -U {user} -n public --data-only postgres > prod_raw_dump.sql\n\n  4. Remove anything that\u2019s not needed to be added, set. We just needed the COPY and SEQ sections.\n  5. In the exported DML, rename the public schema to private.\n  6. Run this .sql on the private schema:\n    \n        $ psql -h {host} -U {user} -d {db} -f prod_new_dump.sql -v ON_ERROR_STOP=1 --set=schema_name=private\n\n  7. Delete the auth.users triggers that were inserting into public.users.\n  8. Delete all the tables, etc., from the public schema.\n\nI run raw SQL DDL migrations using Postgrator and felt safer to do DDL first.\nYou may not need to do the same; you can export the entire schema, rename the\nschema in the exported file, and just apply them to the private schema.\n\nTypes of Supabase users when it comes to the DB:\n\n  1. Those who don\u2019t have their own backend.\n  2. Those who have their own backend.\n\nSupabase is well-suited for 1 - it\u2019s their primary focus. You create your\ntables, and your web client can query the DB just by calling an API. The\naccess that users have is solely determined by how you\u2019ve set up the RLS.\n\n2 - We fall into this category; we had our own backend that was connected to\nthe DB directly, so we didn\u2019t need any REST APIs from Supabase as a secondary\nlayer.\n\n", "frontpage": false}
