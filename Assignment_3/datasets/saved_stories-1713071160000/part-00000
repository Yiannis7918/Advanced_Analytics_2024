{"aid": "40027026", "title": "Tvisor: A Tiny Thread-level syscall interception framework", "url": "https://github.com/mathetake/tvisor", "domain": "github.com/mathetake", "votes": 1, "user": "mathetake", "posted_at": "2024-04-13 23:05:14", "comments": 0, "source_title": "GitHub - mathetake/tvisor: tvisor is a tiny 100% userspace syscall interception framework", "source_text": "GitHub - mathetake/tvisor: tvisor is a tiny 100% userspace syscall\ninterception framework\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nmathetake / tvisor Public\n\n  * Notifications\n  * Fork 2\n  * Star 20\n\ntvisor is a tiny 100% userspace syscall interception framework\n\n20 stars 2 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# mathetake/tvisor\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nmathetakeMerge pull request #1 from pouyakary/patch-13c1bcb2 \u00b7\n\n## History\n\n4 Commits  \n  \n### tvisor-tests\n\n|\n\n### tvisor-tests\n\n| init  \n  \n### tvisor\n\n|\n\n### tvisor\n\n| init  \n  \n### .editorconfig\n\n|\n\n### .editorconfig\n\n| init  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| init  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| init  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md  \n  \n## Repository files navigation\n\n# tvisor: a Tiny Thread-level syscall interception framework\n\nWarning\n\nI stopped working on this project because I realized that almost the same\nthing can be achieved with Kernel runtime security instrumentation very\neasily, though it is not userspace mechanism. Therefore, the sole purpose of\nthis repository is to show how to build an userspace syscall interception\nframework by only relying on the (classic) seccomp-bpf.\n\nThe code is not complete at all but at least 95% of basic musl-libc tests are\npassing for \"no-op\" syscall interception. The one of the most difficult parts\nthat I have not implemented is proper signal handling of blocked signals while\nexecuting interruptible syscalls.\n\nI am not sure if I will continue this project, but I will keep this repository\nas a reference for the future.\n\ntvisor is a tiny 100% userspace syscall interception framework that can be\nused to build a program to monitor syscalls. \"T\" indicates both \"Tiny\" and\n\"Thread-level\". Only available on Linux.\n\nA program built with tvisor will be a single-binary, and it does not spawn\nguest in a separate process, but it directly runs the guest in the same\nprocess. It runs in a higher address space than the guest, and injects a tiny\nmonitor in the process, then starts running the guest in the same process. The\nmonitor is responsible for intercepting the syscall and forwarding it to the\nhost while rejecting/modifying the syscall arguments if necessary. It spawns a\n\"kernel\" thread which corresponds to each guest program thread. A kernel is\nresponsible for handling syscalls in the corresponding guest thread.\n\ntvisor is able to run any binary either statically or dynamically(TODO but\nshould be possible) linked, without any modification (with some exceptions).\n\n## How it works\n\nFirst of all, the tvisor binaries are running in a higher address space than\nthe guest by passing --image-base linker flag when building the tvisor binary.\nTvisor users run the guest binary as ./tvisor <tvisor_args> \\-- <guest_binary>\n<guest_args>. Tvisor binary does the following things:\n\n  1. Parse the ELF binary and load it into the same virtual memory space.\n  2. Installs special signal handlers to handle all signals.\n  3. Spawns the \"kernel thread\" corresponding to each guest thread. Each kernel thread is responsible for handling target syscalls in the corresponding guest thread. It spawns the corresponding guest thread and starts running the guest thread.\n  4. Each guest thread installs sigaltstack to handle any signals raised in the guest thread. The sigalt stack contains the various data structures that allow each signal handler can communicate with the corresponding kernel thread.\n  5. Each guest thread also installs seccomp-bpf filter to intercept syscalls, which raises SIGSYS signals. Which syscall is intercepted is determined by users of tvisor library.\n  6. After all the setup is done, the guest thread start running the guest executable code.\n\n## Example\n\nThere are two tvisor usage example programs in tvisor/bin. To build them, run\nmake build. You see the binary ./tvisor/target/aarch64-unknown-\nnone/release/tvisor-fs which is a freestanding linux ELF binary.\n\ntvisor-fs example program is a simple program that modifies the current\nworking directory and root directory of the guest program by intercepting\ngetcwd and open kind system calls. For example, for the example program that\nprints the current working directory getcwd, tvisor-fs runs as a file system\nsandbox program that changes the current working directory to /tmp:\n\n    \n    \n    $ ./getcwd Current working directory: /Users/mathetake/tvisor $ tvisor-fs --cwd /anydir -- ./getcwd Current working directory: /anydir\n\n## About\n\ntvisor is a tiny 100% userspace syscall interception framework\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n20 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n2 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Rust 79.4%\n  * C 13.9%\n  * Assembly 6.1%\n  * Makefile 0.6%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
