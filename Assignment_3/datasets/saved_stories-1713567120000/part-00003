{"aid": "40089098", "title": "Mail Self Hosting in 2024?", "url": "https://blog.latana.rocks/from-setup-to-compliance-self-hosting-a-mail-server/", "domain": "latana.rocks", "votes": 1, "user": "giuseony", "posted_at": "2024-04-19 16:51:24", "comments": 0, "source_title": "From setup to compliance: self hosting at home a mail server", "source_text": "From setup to compliance: self hosting at home a mail server\n\nLa Tana\n\nBy Giuseppe Pagano in mail \u2014 19 apr 2024\n\n# From setup to compliance: self hosting at home a mail server\n\n\ud83d\udca1\n\nNotice: this post is aimed to advanced users who already now how DNS works and\ncan set up a firewall for a network.\n\nIn this container-dominated era, setting up a software solution for a self-\nhosted mail server has become surprisingly straightforward, even for those\nwith limited technical expertise. The use of modern pre-built software\npackaged with container technology has transformed what was once a complex\nundertaking into a manageable project. This post aims to unveil the simplicity\nbehind self-hosting your email, a powerful step towards greater digital\nindependence and privacy.\n\nBy self-hosting your mail server, you take a critical step towards\nsafeguarding your digital communications. However, it's not just about the\nsetup; it's also about ensuring your emails reach their destination without\nbeing flagged as spam. We will explore the essential aspects of compliance and\nmy practices to maintain a reliable and respected presence in the world of\nemail communication.\n\nThe introduction of container technology has significantly simplified the\nprocess of self-hosting mail servers. By encapsulating applications and their\ndependencies into a single, configurable unit, these containerized solutions\nallow for easy deployment and customization through environment variables,\nbypassing the complexities inherent in traditional setups.\n\nAmong the popular containerized self-hosted mail solutions are:\n\nMailcow: A user-friendly Dockerized mail server solution, Mailcow comes with a\nweb-based UI for easy management, integrating components like SOGo for webmail\nand CalDAV/CardDAV for calendar and contacts support.\n\niRedMail: Available in both traditional and Docker versions, iRedMail\nsimplifies deployment with its containerized version, offering a robust set of\nfeatures including webmail and spam/virus scanning.\n\nPoste.io: This Dockerized solution provides a full-featured mail server stack\ncomplete with a web administration interface and support for standard mail\nprotocols.\n\nThese containerized mail server solutions represent a significant advancement\nin making self-hosting accessible and manageable, allowing more individuals\nand organizations to exercise greater control over their digital\ncommunications.\n\nI'll focus on Mailcow for its ease of use, integrated web UI, and its\ninclusive suite of email services.\n\n### Setting up mailcow\n\nTo use Mailcow docker and the compose tool (either the standalone docker-\ncompose or the docker compose plugin) are required, be sure to have installed\non your system. I'll use the compose plugin with docker 24.0.7.\n\nBe sure to do all the following steps as root and check that your umask equals\nto 0022.\n\n    \n    \n    $ su # umask 0022 # <- Verify it is 0022 # cd /opt # git clone https://github.com/mailcow/mailcow-dockerized # cd mailcow-dockerized\n\nGenerate the configuration file and use a FQDN when asked and then edit it\naccording to your needs:\n\n    \n    \n    ./generate_config.sh nano mailcow.conf\n\nNow, simply pull the images and spin up the containers.\n\n    \n    \n    docker compose pull docker compose up -d\n\nAnd that's it! Simple as drinking a cup of tea. For further documentation or\ntroubleshooting check on the official docs.\n\nOnce done you have to set up your DNS records. Let's say that you domain is\nmydomain.com and the FQDN of your server is mail.mydomain.com, you'll have to\nset the following records:\n\nTYPE| HOST| ANSWER  \n---|---|---  \nMX| mydomain.com| mail.mydomain.com  \nA| mail.mydomain.com| [the server ip address]  \n  \nand now you can receive and send email messages from your new server.\n\n### Compliance (aka not being marked as spam)\n\nThat was actually the easy part, now the real fun begins. Let's say that you\nwant to self host your email server at home, maybe on a spare computer laying\naround in your house collecting dust, you'll first have to set up the correct\nport forwarding in your router to route incoming SMTP(S)/POP(S)/IMAP(S)\nconnections to your server, and that's pretty straightforward if you have ever\nexperienced with port forwarding.\n\nTime to test, so you create a mail inbox in mailcow and send an email to your\nnewly created email from another email of your choice (e.g. protonmail or\ngmail) and yay! \ud83c\udf89 you can successfully receive emails. Let's test the other\nway by sending an email and chances are that you'll be marked as spam. \ud83d\ude27\n\nThere are some security issues here that cause your outbound email to be\nmarked as spam, which we'll examine in detail further below:\n\n  1. Dynamic public IPs\n  2. IPs with the wrong reverse DNS\n  3. Domains with unset or wrong DMARC\n\nDynamic public IPs\n\nWe know that when we connect to the internet the ISP assigns us a public IP\naddress to be public available on the net and, since we usually don't need to\nbe addressable because the standard user do not expose any service, there's no\nreal need to assign a static IP to every ISP customer, hence a temporary one\nis assigned every time a home router is booted. This allows ISP to reuse the\nsame IP address in different times for different customers but this means that\nyou'll have to update your DNS; you still could use dynamic DNS solutions like\ndynDNS or no-ip, but that brings us to the second issue.\n\nIPs with the wrong reverse DNS\n\nThe reverse DNS is, as the name says, the opposite of a DNS record: it\nassociates a domain name to a specific IP address, and is critical for\nvalidating the legitimacy of IP addresses. Each IP has a reverse DNS entry,\nusually set by the ISP. For residential internet services, users typically\ncannot modify these settings due to security concerns and the complexities\nassociated with dynamic IPs. In contrast, business internet services often\nallow customization of reverse DNS entries. This ability is crucial to\nmaintain a trustworthy digital identity, particularly for static IP addresses\nused in professional contexts and proper reverse DNS configuration is\nessential, especially for email servers, to prevent emails from being marked\nas spam.\n\nDomains with unset or wrong DMARC\n\nDMARC stands for Domain-based Message Authentication, Reporting & Conformance\nis an email authentication protocol designed to give email domain owners the\nability to protect their domain from unauthorized use, commonly known as email\nspoofing. The core function of DMARC is to help email receivers determine what\nto do with messages that fail to authenticate against existing SPF (Sender\nPolicy Framework) and DKIM (DomainKeys Identified Mail) standards. The\ninformation for SPF and DKIM protocols, which together are used in DMARC, are\ndelivered through DNS records. Thankfully Mailcow mages almost all this\nsecurity part by providing DNS record values that you just have to copy in\nyour DNS configuration.\n\nAs said, Mailcow handles DMARC configuration so the issues are boiled down to\njust have the correct reverse DNS set up on your email server. Unfortunately,\nas said before, reverse DNS is almost impossible to set up on residential\nlines. We could install our server on a VPS, but that's not the aim of this\npost, the goal is to host you own server at home, in order to have as much\ncontrol as possible on what is really exposed on the internet.\n\nMy solution here is the following: use a vps with a fixed public ip address\nand editable reverse DNS as a internet gateway for the mail.\n\nTo achieve this, I installed wireguard on the VPS, enabling ip forwading, then\nI set up some firewall rules to make the VPS wireguard IP as the gateway for\nthe mail server and was able send emails. At last, to allow incoming messages,\nI set up socat to forward incoming connections to the vps straight through the\nfirewall to the mail server, and that's it! I've used this mail server for the\npast ~6 months and never got a reject nor being marked as spam,\n\nNevertheless, I still feel this is an incomplete setup and, even if using this\nserver more and more, I don't think it is ready enough to get rid of an\nexternal mailbox.\n\nLa Tana \u00a9 2024\n\nPowered by Ghost, pfSense and Proxmox\n\n", "frontpage": false}
