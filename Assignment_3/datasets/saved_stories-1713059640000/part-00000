{"aid": "40025531", "title": "Show HN: ZSV (Zip Separated Values) columnar data format", "url": "https://github.com/Hafthor/zsvutil", "domain": "github.com/hafthor", "votes": 6, "user": "hafthor", "posted_at": "2024-04-13 19:52:15", "comments": 0, "source_title": "GitHub - Hafthor/zsvutil: ZSV Utility for converting csv/tsv to/from zip-separated-values", "source_text": "GitHub - Hafthor/zsvutil: ZSV Utility for converting csv/tsv to/from zip-\nseparated-values\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nHafthor / zsvutil Public\n\n  * Notifications\n  * Fork 0\n  * Star 0\n\nZSV Utility for converting csv/tsv to/from zip-separated-values\n\n### License\n\nMIT license\n\n0 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# Hafthor/zsvutil\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nHafthorupdated README.md to add more detail about the why of ZSV0605723 \u00b7\n\n## History\n\n6 Commits  \n  \n### src/com/hafthor\n\n|\n\n### src/com/hafthor\n\n| minor tweaks  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| initial public commit  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit  \n  \n### README.md\n\n|\n\n### README.md\n\n| updated README.md to add more detail about the why of ZSV  \n  \n## Repository files navigation\n\n# zsvutil\n\nA utility for converting TSV files from/to ZSV files.\n\n# Introducing ZSV - ZIP Separated Values\n\n## TL;DR\n\nZSV (ZIP Separated Values) is a columnar data storage format with features\nsimilar to Parquet, Orc or Avro, however, it is built upon the simple\ntechnologies of TSV (tab separated values) and ZIP, making it easy to\nunderstand, create and consume, but still provide the query performance\ncharacteristics of a modern columnar store format.\n\n## Tenants\n\n  * Be simple\n  * Prefer mature, widely available technologies\n  * Favor human readability\n  * Be easy to parse and generate\n  * Be efficient for simple tabular data\n  * Prefer longevity over novelty\n\n## Description\n\nGiven an original source, products.tsv, zsvutil import creates a products.zsv\nfile that is just a .zip file with a file inside for each column, for example,\nSKU, Description and Price. Inside those files is just the TSV for that\ncolumn, compressed.\n\n## FAQ\n\n### Why is ZSV built on ZIP file format? Why not use .targz?\n\nZIP is a widely available, mature technology that is easy to use and has\nbuilt-in support in many languages and platforms. .targz is a single gzip\nstream of a tar file, which is a collection of files. This makes it\neffectively impossible to seek to a specific file without reading and\ndecompressing the whole stream up to that file. ZIP files are a collection of\nindividually compressed files, with a directory as a footer to the file, which\nmakes it easy to seek to a specific file without reading the whole file.\n\n### Why is ZSV built on TSV format? Why not CSV? Why not JSON?\n\nTSV is a simple, human-readable format that is easy to understand and\nmanipulate. It is also trivial to parse and generate. CSV is also a good\nchoice, but it is more complex than TSV, with quoting and escaping rules that\ncan be confusing, ambiguous and inconsistent. JSON is a good format for nested\ndata, but it is not as easy to read or write as TSV. JSON is also not as\nefficient as TSV for simple tabular data.\n\n### What are some key shortcomings of ZSV?\n\nZSV is not a good choice for binary or unstructured textual data. The main\nlimitation is that the data in the columns must not include the tab character\n\u21e5 or newline character \u2b90. This is a limitation of the TSV format. Any escaping\nor encoding of these characters would make the format less human-readable,\nharder to parse and could introduce ambiguity and consistency problems.\n\n### How well is ZSV supported by tools and platforms?\n\nToday ZSV is not widely supported by tools and platforms, but it is easy to\nconvert between TSV and ZSV using zsvutil. It should be relatively easy to add\nsupport for ZSV to any tool that supports columnar data formats.\n\n### What is an ideal use case for ZSV?\n\nIf you are currently using TSV files and want to improve query performance\nwithout changing your data format, ZSV is a good choice.\n\n## Simple Columnar Storage Example\n\nGiven products.tsv with a header line\n\nSKU\u21e5| Description\u21e5| Price\u21e5| Region\u2b90  \n---|---|---|---  \nAA\u21e5| Item AA\u21e5| 111.11\u21e5| US\u2b90  \nBB\u21e5| Item BB\u21e5| 222.22\u21e5| US\u2b90  \nCC\u21e5| Item CC\u21e5| 333.33\u21e5| US\u2b90  \n  \nwe would have a ZIP file products.zsv with the files SKU, Description and\nPrice inside. Each file would have just that column's data.\n\nNote that column names MUST be allowed by .zip format as entry names. Also,\nthe tab character \u21e5 MUST NOT be used in the name.\n\n### products.zsv\n\n  * SKU AA\u2b90BB\u2b90CC\u2b90\n  * Description Item AA\u2b90Item BB\u2b90Item CC\u2b90\n  * Price 111.11\u2b90222.22\u2b90333.33\u2b90\n  * Region US\u2b90US\u2b90US\u2b90\n\nNote the number of rows in each column MUST be the same, except for Constant\nColumns (see below). The nature of .zip files makes it possible to seek and\nread just the columns required without having to read/decode the other\ncolumns. Note that newline \u2b90 MUST NOT appear in the actual column data since\nit is used to separate rows. Note that each column row MUST end with a \u2b90\nincluding the last one.\n\n# Additional features\n\nThese are features that are not required, but may be useful in some cases.\nThey are somewhat counter to our tenant of being simple, but they may be\nuseful enough to warrant the additional complexity. These features are mostly\nindependent of each other, so you can use one or more of them without using\nthe others.\n\n## Constant Columns\n\nConstant Columns allow us to add an invariant column, which is useful for\npartition keys. Note that the field has no trailing newline \u2b90.\n\n### products.zsv\n\n  * SKU AA\u2b90BB\u2b90CC\u2b90\n  * Description Item AA\u2b90Item BB\u2b90Item CC\u2b90\n  * Price 111.11\u2b90222.22\u2b90333.33\u2b90\n  * Region US\n\n## Compound Columns\n\nIf a collection of columns are always accessed together, it may make sense to\ncombine them, for example if SKU and Description were never accessed\nindependently, we could make products.zsv look like this:\n\n### products.zsv\n\n  * SKU AA\u2b90BB\u2b90CC\u2b90\n  * Description\u21e5Price Item AA\u21e5111.11\u2b90Item BB\u21e5222.22\u2b90Item CC\u21e5333.33\u2b90\n  * Region US\n\nNote that Constant Columns MUST NOT participate in Compound Columns. Note that\nalong with newline \u2b90, the tab \u21e5 character MUST NOT appear in the column data\nin a Compound Column. Each row in any column MUST include the same number of\ncolumns as its entry name.\n\n## Repeated Columns\n\nData may be repeated using Compound Columns, if desired, for example:\n\n### products.zsv\n\n  * SKU AA\u2b90BB\u2b90CC\u2b90\n  * Description\u21e5Price Item AA\u21e5111.11\u2b90Item BB\u21e5222.22\u2b90Item CC\u21e5333.33\u2b90\n  * Price 111.11\u2b90222.22\u2b90333.33\u2b90\n  * Region US\n\nIt is up to the reader to decide the optimal combination of ZIP entries to\nread to meet the requirements and avoid reading unnecessary data. The same\ncombination of columns may appear in a different order, especially when the\ndata is sorted.\n\n## Nested/Binary Data\n\nData may be nested by storing a ZIP of compressed row blob files inside the\nZSV.\n\n### products.zsv\n\n  * SKU AA\u2b90BB\u2b90CC\u2b90\n  * Description\u21e5Price Item AA\u21e5111.11\u2b90Item BB\u21e5222.22\u2b90Item CC\u21e5333.33\u2b90\n  * \u21e5Images (inner stored ZIP)\n\n    * 0 <<Image data for AA>>\n    * 1 <<Image data for BB>>\n    * 2 <<Image data for CC>>\n\nData stored inside, Image data for BB, for example, is directly seekable and\nfetchable without reading through any of the other data. The image data itself\nmay be compressed, but Images ZIP itself would not be compressed inside\nproducts.zsv.\n\nNote the column name is prefixed with a tab \u21e5 character to indicate to the\nreader that this is a nested column.\n\n## Row Groups\n\nRow Groups may be used to split up longer data sets inside a bigger .zsv. This\nis done by repeating the column file names followed by a double tab \u21e5\u21e5 and a\nunique number for each rowgroup.\n\n### products.zsv\n\n  * SKU\u21e5\u21e50 AA\u2b90BB\u2b90\n  * Description\u21e5Price\u21e5\u21e50 Item AA\u21e5111.11\u2b90Item BB\u21e5222.22\u2b90\n  * Region\u21e5\u21e50 US\n  * SKU\u21e5\u21e51 CC\u2b90\n  * Description\u21e5Price\u21e5\u21e51 Item CC\u21e5333.33\u2b90\n  * Region\u21e5\u21e51 US\n\nNote the number of rows in each column of the row group MUST be equal. The\ncolumns referenced in each row group MUST be equal. Columns referenced in each\nrow group SHOULD be in the same order and grouped together, however, this is\nnot a strict requirement and readers MUST NOT assume an order of files.\nConstant columns may be different in each row group when named with the double\ntab or there can be a single constant column as though there were no\nrowgroups.\n\n### products.zsv\n\n  * SKU\u21e5\u21e50 AA\u2b90BB\u2b90\n  * Description\u21e5Price\u21e5\u21e50 Item AA\u21e5111.11\u2b90Item BB\u21e5222.22\u2b90\n  * SKU\u21e5\u21e51 CC\u2b90\n  * Description\u21e5Price\u21e5\u21e51 Item CC\u21e5333.33\u2b90\n  * Region US\n\n## Metadata\n\nZIP files support having comments on file entries inside. This may be used to\nhold metadata about the contents that are otherwise unavailable, such as row\ncounts, partition information, sorting, distinct values, min/max text or\nvalues, all in a bare keyname JSON format.\n\n### products.zsv\n\n  * SKU\u21e5\u21e50 {rows:2, distinct:2, maxlength:2, min:\"AA\", max:\"BB\"} AA\u2b90BB\u2b90\n  * Description\u21e5\u21e50 {rows:2, distinct:2, maxlength:7} Item AA\u2b90Item BB\u2b90\n  * Price\u21e5\u21e50 {rows:2, distinct:2, minvalue:111.11, maxvalue:222.22} 111.11\u2b90222.22\u2b90\n  * SKU\u21e5\u21e51 {rows:1, distinct:1, maxlength:2, min:\"CC\", max:\"CC\"} CC\u2b90\n  * Description\u21e5\u21e51 {rows:1, distinct:1, maxlength:7} Item CC\u2b90\n  * Price\u21e5\u21e51 {rows:1, distinct:1, minvalue:333.33, maxvalue:333.33} 333.33\u2b90\n  * Region {} US\n\n## Alternative CSV Inner Format\n\nWhile TSV is the preferred inner format for ZSV, a form using CSV is also\npossible. Each line has comma separated values and each value is either a\nquoted string with JSON escapes possible, a JSON number, or a bare string, but\nwith no escapes and with forbidden characters.\n\n### products.zsv\n\n  * SKU \"AA\"\u2b90\"BB\"\u2b90\"CC\"\u2b90\n  * Description\u21e5Price \"Item AA\",111.11\u2b90\"Item BB\",222.22\u2b90\"Item CC\",333.33\u2b90\n  * Price 111.11\u2b90 222.22\u2b90 333.33\u2b90\n  * Region \"US\"\n\n## About\n\nZSV Utility for converting csv/tsv to/from zip-separated-values\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n0 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Java 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
