{"aid": "40078525", "title": "Developer tool secrets that shouldn't be secrets", "url": "https://christianheilmann.com/2021/11/01/developer-tools-secrets-that-shouldnt-be-secrets/", "domain": "christianheilmann.com", "votes": 2, "user": "hidelooktropic", "posted_at": "2024-04-18 17:19:51", "comments": 0, "source_title": "Developer Tools secrets that shouldn\u2019t be secrets | Christian Heilmann", "source_text": "Developer Tools secrets that shouldn\u2019t be secrets | Christian Heilmann\n\nSkip to content\n\nChristian Heilmann\n\n# Developer Tools secrets that shouldn\u2019t be secrets\n\nMonday, November 1st, 2021 at 3:21 pm\n\n> Update: As this is blowing up on Hackernews I added information to each of\n> the tips in which environment they are supported in parenthesis after each\n> heading. When I state \u201cChromium browsers\u201d, this refers to all browsers that\n> use the Chromium core and also feature all the Developer Tools. This is\n> Chrome, Microsoft Edge, Brave and many more. As a reminder: Microsoft Edge\n> is the browser that comes with Windows 10/11 and is based on Chromium and\n> thus from a platform perspective simular to Chrome. They differ in UX and\n> services around the core. Edge Developer Tools work closely with Google on\n> bringing the work we add to the product back into the Chromium Core. But\n> some of the things I am talking about here are experiments and exclusively\n> in Microsoft Edge, which is available on Windows, Mac and Linux. Some\n> functionality is only available inside Visual Studio Code via the Edge\n> DevTools for VS Code extension .\n\nThis is a talk that I\u2019ve given at CityJS this September. I am a principal\nproduct manager for developer tools in Microsoft Edge and these are things I\nencountered during working on the tools, documenting them and going through\nuser feedback.\n\nYou can watch the recording of the talk on Youtube .\n\nHere\u2019s a write-up of all the things I covered:\n\n## 1\\. Console is much more than `log()`! (All browsers with developer tools\nfollowing the standard)\n\nThere is no doubt that, besides the Elements tool, Console is the most used\npart of the browser developer tools. Specificially, people love to debug by\nputting a `console.log()` in their code to learn what\u2019s going on. There are a\nfew problems with that, and there are better ways to debug scripts, but as\nthis is what people do, let\u2019s talk how to make that experience better.\n\nThe first problem is log messages that aren\u2019t removed when a product goes live\nclogging up the Console. Finding the information you\u2019re looking for becomes\ndaunting and the best way to work with that is to learn about the console\nfiltering options available to you . Using these you can filter the reporting\nof the console to the things you care about and block out a lot of the noise.\n\n### What is that you\u2019re logging?\n\nThe next problem with using `console.log()` is that we seem to only log values\nand forget to add where they come from. For example, when you use the\nfollowing code, you get a list of numbers, but you don\u2019t know what is what.\n\n    \n    \n    console.log(width) console.log(height)  \n  \n---  \n  \nconsole.log(width) console.log(height)\n\nThe easiest way to work around that issue is to wrap the things you want to\nlog in curly braces. The console then logs both the name and the value of what\nyou want to know about.\n\n    \n    \n    console.log({width}) console.log({height})  \n  \n---  \n  \nconsole.log({width}) console.log({height})\n\n### Adding to your console vocabulary\n\nIn addition to `console.log()` you have a lot more methods you can use . For\nexample, `console.warn()` logs a warning, `console.info()` an informational\nmessage, and `console.error()` an error message. This not only results in\nslighty different displays in the console, but it also gives your messages a\ndifferent log level, which means it is easier to filter for them.\n\n### Errors and assertions in Console\n\nDisplaying an error in the console is different to throwing an error, but it\nstill is a good idea to show the severity of an issue to the person\nmaintaining or debugging the product. Another interesting method is\n`console.assert()`, which only logs a message when a certain condition is met.\nOften you find yourself writing an `if` statement with a `console.log()`\ninside. Using `assert()` makes that one redundant and you have one less thing\nto worry about when cleaning up your debugging code.\n\n### Tracing where something came from\n\nOften you find yourself adding a `console.log(\u2018called\u2019)` or similar to test if\na certain functionality is even triggered. Once you have that the next thing\nyou normally want to find out what called that method. That\u2019s what\n`console.trace()` is for, as it doesn\u2019t only tell you that something was\ncalled, but also where the call came from.\n\n### Grouping console messages\n\nIf you have a lot to log, you can use `console.group(\u2018name\u2019)` and\n`console.groupEnd(\u2018name\u2019)` to wrap the messages in collapsible and expandable\nmessages in the Console. You can even define if the groups should be expanded\nor collapsed by default.\n\n### Displaying and filtering lots of information in the console as tables\n\nIf you want to display a lot of of information as a log, it can become\ndaunting to read the information. The `console.table()` method displays array-\nlike data as a table in the console, and you can filter what you want to\ndisplay by giving it an array of the properties you want to see.\n\nFor example, you can use `let elms =\ndocument.querySelectorAll(\u2018:is(h1,p,script\u2019)` to get all H1, paragraph and\nscript elements from the document and `console.table(elms)` to display this\ninformation as a table. As the different elements have a boatload of\nattributes and properties, the resulting table is pretty unreadable. If you\nfilter down to what you are interested in by using\n`console.table(elms,[\u2018nodeName\u2019, \u2018innerText\u2019, \u2018offsetHeight\u2019])` you get a\ntable with only these properties and their values.\n\nThe table structure is maintained when you copy and paste this information,\nwhich makes it a wonderful tool to get data into Excel or Word, for example.\n\n### Blinging it up: $() and $$()\n\nThe console comes with a lot of convenience methods you can use called the\nConsole Utilities . Two very useful ones are `$()` and `$$()` which are\nreplacements for `document.querySelector()` and `document.querySelectorAll()`\nrespectively. These not only return the nodeList you expect, but also cast the\nresults to arrays, which means you can use `map()` and `filter()` on the\nresults directly. The following code would grab all the links of the current\ndocument and return an Array with objects that contain only the `href` and\n`innerText` properties of each link as `url` and `text` properties.\n\n    \n    \n    $$('a').map(a => { return {url: a.href, text: a.innerText} })  \n  \n---  \n  \n$$('a').map(a => { return {url: a.href, text: a.innerText} })\n\n## 2\\. You can log without source access \u2013 live expressions and logpoints\n(Chromium browsers)\n\nThe normal way to add a `console.log()` is to put it inside your code at the\nplace you want to get the information. But you can also get insights into code\nyou can\u2019t access and change. Live expressions are a great way to log\ninformation without changing your code. They are also incredible to log values\nthat change constantly without flooding the console and thus slowing down your\nproduct. You can see the difference in the following screencast:\n\nLogpoints are a special kind of breakpoint. You can right-click any line in a\nJavaScript in the Sources tool of the Developer Tools and set a logpoint. You\nget asked to provide an expression you\u2019d like to log and will get its value in\nthe console when the line of code is executed. This means you can technically\ninject a `console.log()` anywhere on the web. I wrote about logpoints back in\nAugust and you can see a demo in the following screencast:\n\n## 3\\. You can log outside the browser \u2013 VS Code debugger (Chromium Browsers\nand VS Code)\n\nWhen you start a debugging session in Visual Studio Code, you can spawn a\nbrowser instance and the Debug Console becomes the Console you are used to\nfrom the browser developer tools. I blogged about this in July in detail, so\nyou can read up there how to do that . There is also more in the official\ndocumentation.\n\nYou can also watch this one minute video of me showing the functionality:\n\n## 4\\. You can inject code into any site \u2013 snippets and overrides. (Chromium\nBrowsers)\n\nSnippets are a way in Developer Tools to run a script against the current web\nsite. You can use the Console Utilities in these scripts and it is a great way\nto write and store complex DOM manipulation scripts you normally execute in\nthe Console. You can run your scripts in the window context of the current\ndocument either from the snippets editor or from the command menu. In the\nlatter case, start your command with an ! and type the name of the snippet you\nwant to run.\n\nOverrides allow you to store local copies of remote scripts and override them\nwhen the page loads. This is great if you have, for example, a slow build\nprocess for your whole application and you want to try something out. It is\nalso a great tool to replace annoying scripts from third party web sites\nwithout having to use a browser extension.\n\n## 5\\. You can inspect and debug much more than you know! (Chromium Browsers)\n\nYou may know the Chromium developer tools from browsers like Google Chrome,\nBrave or Microsoft Edge, but they are available in a lot more environments.\nAny app that\u2019s based on Electron can have them enabled and you can use the\nTools to peek under the hood and see how the product was done. This works, for\nexample, in GitHub Desktop, Visual Studio Code, or you can even debug the\nDeveloper Tools of the browser using Developer Tools!\n\nIf you inspect the Developer Tools, you will see that they are written in\nHTML, CSS and TypeScript. It is an exciting environment to use these\ntechnologies, as you you know the rendering engine your code will run in \u2013\nsomething you never know on the web.\n\n### Edge Developer Tools in Visual Studio Code (Microsoft Edge via a VS Code\nextension)\n\nThe embeddable nature of the tools also allowed us to offer you a way to use\nthem outside the browser. The Microsoft Edge Tools for Visual Studio Code\nextension brings the tools to Visual Studio Code. That way you can use the\nvisual debugging tools right next to your code editor and you don\u2019t need to\njump between the two all the time.This also ties in with the \u201cConsole in\nVisual Studio Code\u201d trick mentioned earlier. When you start a debugging\nsession and you click the Developer Tools icon, the tools will open or \u2013 the\nfirst time \u2013 you will be prompted to install the extension.\n\n## 6\\. Some dirty secrets...\n\nWorking intimately with developer tools and getting feedback and usage\ninformation taught me a few dirty secrets. The first one is that whilst we are\nall super excited about all the amazing features of developer tools, users\nonly use a very small percentage of them. Many things heralded as the best\nthing since sliced bread in presentations and video tutorials are hardly every\nopened, let alone used. I thought this was about a lack of documentation and\nwe spent a massive amount of time to update the DevTools documentation to\nensure everything in them is described and explained, but that wasn\u2019t it.\nDocumentation is something people seem to go to as a last resort when they are\nstuck and Google/Stack Overflow/Social channels didn\u2019t yield any results.\n\n### Developer tools have become complex and are overwhelming \u2013 a few ideas how\nto fix that (Microsoft Edge)\n\nIt might be that the plain fact is that the Developer Tools of browsers grew\norganically over the years and can be incredibly overwhelming to look at. And\nthat bothers me and I think we should do better. Here\u2019s my mantra when it\ncomes to tools for developers:\n\n> Developer tools should not expect people to be experts but turn them into\n> experts over time.\n\nWe\u2019re working on a few ideas to make that easier, and you will soon see those\nin Microsoft Edge. One idea we had is a \u201cFocus Mode\u201d. Instead of showing you\nall the tools and tabs we sorted the tools into different use cases, like\n\u201cElements/CSS debugging\u201d, \u201cSources/JavaScript Debugging\u201d or \u201cNetwork\ninspection\u201d. We then show only the relevant tools and hide all the ones that\nmay be confusing or in the way.\n\nAnother feature we are working on are \u201cinformational overlays\u201d. You get a help\nbutton that allows you to turn on overlays for the developer tools, explaining\nwhat each of the tools is, how to use it and providing links to the\ndocumentation. We hope that this would make it easier for people to learn\nabout more features.\n\n### There is still a disconnect between authoring code and debugging the\noutcome (Microsoft Edge)\n\nWhilst it is amazing what tools provide us these days there is still a\ndisconnect between authoring and debugging. Most of the time we write our\ncode, create the app and then go to the browser to see what doesn\u2019t work. We\nthen use the browser developer tools to tweak and fix these issues. And then\ncomes the big issue we still need to fix: how do you get the changes you\ncreated using the browser developer tools back into your code? Most of the\ntime, the answer is \u201ccopy and paste or try to remember what needs changing\u201d.\n\nWe\u2019re currently working on two ways to make this easier. One is to replace the\nin-devtools editor with Visual Studio Code when it is available and to change\nfiles on the hard drive as you use the browser developer tools. The other is\npart of the VS Code extension and changes the source code in the editor as you\nuse the developer tools but still gives you the final say in changing the file\non disk. I described the problem and the possible solutions on the Edge blog\nor you can watch the following two screencasts to see them in action.\n\nCSS Mirroring in Visual Studio Code:\n\nWhat if... Visual Studio Code became the editor of in-browser Developer Tools?\n\n## 7\\. You\u2019re the audience and the clients of Developer Tools! (Applies to all\nbrowsers, but channels shown here are Microsoft Edge only)\n\nAs a developer, you are the main audience for Developer Tools. We are open to\nyour feedback and many of the recent changes to the tools are direct results\nfrom demands from outside developers. We try to make this as easy as possible\nby providing in-context ways to contact us directly. For example, the Visual\nStudio Code extension has prominent links and buttons for you to report issues\nand request features.\n\nThe source code of the extension is also on GitHub and you can file issues\nthere.\n\nThe in-browser developer tools also have a direct button to give us feedback.\nTo make it easier for you to provide actionable feedback, the button includes\na lot of automatic information.\n\nIt records automatically what URL the issue happened on, takes a screenshot to\ninclude and offers to send diagnostic data. We also ask for you to provide an\nemail in case we need more information and you can add attachments and info\nhow to recreate the issue. We check this feedback daily, and a lot of great\ninventions and bug fixes came from that source.\n\nShare on Mastodon (needs instance)\n\nShare on Twitter\n\n## My other work:\n\n  * The Developer Advocacy Handbook\n\n    * Buy it on Amazon\n    * Buy it on Leanpub\n  * Skillshare Classes:\n\n    * Tools and Tips to Optimize Your Workflow as a Developer\n    * Tools for Improving Product Accessibility\n    * The JavaScript Toolkit: Write Cleaner, Faster & Better Code\n    * Demystifying Artificial Intelligence: Understanding Machine Learning\n\nSkip to search\n\nChristian Heilmann is the blog of Christian Heilmann\nchris@christianheilmann.com (Please do not contact me about guest posts, I\ndon't do those!) a Principal Program Manager living and working in Berlin,\nGermany.\n\nTheme by Chris Heilmann. SVG Icons by Dan Klammer . Hosted by MediaTemple.\nPowered by Coffee and Spotify Radio.\n\nGet the feed, all the cool kids use RSS!\n\nNotifications\n\n", "frontpage": false}
