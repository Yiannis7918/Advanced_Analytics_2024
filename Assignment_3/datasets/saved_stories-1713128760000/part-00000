{"aid": "40031612", "title": "Markdown with Vim, Emacs, Sublime Text 4 and Visual Studio Code", "url": "https://francopasut.netlify.app/post/markdown-vim-emacs-sublime-vscode/", "domain": "francopasut.netlify.app", "votes": 2, "user": "JNRowe", "posted_at": "2024-04-14 15:05:26", "comments": 0, "source_title": "Markdown with Vim, Emacs, Sublime Text 4 and Visual Studio Code | FP Site", "source_text": "Markdown with Vim, Emacs, Sublime Text 4 and Visual Studio Code | FP Site\n\n# Search\n\n# Markdown with Vim, Emacs, Sublime Text 4 and Visual Studio Code\n\nLast updated on Apr 13, 2024 9 min read Blog\n\nEditors for Markdown\n\nAbstract:\n\nHow are four generalist editors, i.e., designed to be used with a wide range\nof programming languages and text files, performing when writing documents in\nMarkdown language? This is the subject of this article based on my personal\nexperiences in using Vim, Emacs, Sublime Text 4 and Visual Studio Code both\ndirectly and with extensions dedicated to the above mentioned markup language.\n\n  * 1\\. Introduction.\n  * 2\\. Vim and Markdown.\n\n    * 2.1. Vim without plugins.\n    * 2.2. Vim with the plugin vim-markdown.\n    * 2.3. Vim with the plugin UltiSnips.\n    * 2.4. Vim and Markdown preview.\n  * 3\\. Emacs and Markdown.\n\n    * 3.1. Emacs without plugins.\n    * 3.2. Emacs with markdown-mode.\n    * 3.3. Emacs and preview in Markdown.\n  * 4\\. Sublime Text 4 and Markdown.\n\n    * 4.1. Sublime Text 4 without plugins.\n    * 4.2. Sublime Text 4 with the plugin \u201cMarkdownEditing\u201d.\n    * 4.3. Sublime Text 4 and preview in Markdown.\n  * 5\\. Visual Studio Code and Markdown.\n\n    * 5.1. VSCode without plugins\n    * 5.2. VSCode with the plugin \u201cMarkdown All in One\u201d.\n  * 6\\. In summary.\n\n## 1\\. Introduction.\n\nMarkdown is a simple markup language that is within anyone\u2019s reach, compatible\nwith HTML, and allows very elegant, well-formatted text to be written for both\nweb and print publication.\n\nThis article, however, is not about the language itself, which, moreover, has\nbeen described extensively on the Web, but about how various command-line\neditors allow one to write in Markdown.\n\nA feature of both markdown and programming languages is, in fact, the\nusability of any plain-text editor to write related code.\n\nThe article in based on my personal experience with Vim, Emacs, Sublime Text\nand Visual Studio Code, on three main points:\n\n  1. Editor behavior without plugins or extensions installed.\n  2. Behavior with Markdown language-specific plugins or extensions.\n  3. Preview handling.\n\n## 2\\. Vim and Markdown.\n\nVim can be a powerful writing tool for Markdown as well, as for any other\nlanguage, provided the initial hurdle of the learning phase is passed.\n\n### 2.1. Vim without plugins.\n\nWithout plugin the .md files are handled as simple text documents without any\ndedicated function.\n\nIn practice: the \u201cadded value\u201d of Vim is Vim itself, with its own original\nmodal writing.\n\nThe Vim user community has, however, developed some very useful extensions for\nwriting in Markdown, including \"vim-markdown \u201c and \"UltiSnips \u201c.\n\n### 2.2. Vim with the plugin vim-markdown.\n\nThe plugin vim-markdown is useful for many functions including: folding,\nconcealing, moving between section names, TOC (Table Of Contents).\n\nIn the programmer\u2019s page the features made available by the plugin are\nanalytically described.\n\nI report, in this article, only the part related to TOC:\n\n> :Toc: create a quickfix vertical window navigable table of contents with the\n> headers.\n>\n> Hit on a line to jump to the corresponding line of the markdown file.\n>\n> :Toch: Same as :Toc but in an horizontal window.\n>\n> :Toct: Same as :Toc but in a new tab.\n>\n> :Tocv: Same as :Toc for symmetry with :Toch and :Tocv.\n>\n> :InsertToc: Insert table of contents at the current line.\n\n### 2.3. Vim with the plugin UltiSnips.\n\nAn excellent plugin for Vim is UltiSnips.\n\nCollections of snippets dedicated to that plugin can be found at honza/vim-\nsnippets.\n\nOn the subject I refer to my following two articles:\n\n  * \u201cVim, UltiSnips and Honza vim-snippets: difference and management of snippets and UltiSnips folders\u201d\n  * \u201cVim, Markdown, Snippets, UltiSnips: how to get a well-formatted link with a single command.\u201d\n\nThe first article is on handling snippets in Vim with the UnltiSnip while the\nsecond contains a custom snippet that I find very useful for creating\nhyperlinks when descriptive text is already present in documents.\n\n### 2.4. Vim and Markdown preview.\n\nRegarding preview handling I recall two others of mine:\n\n  * \u201cVim and Preview in Markdown\u201d,\n  * \u201cMarkdown in Firefox\u201d.\n\n## 3\\. Emacs and Markdown.\n\nEmacs is another highly customizable and extensible editor with a very large\nbase of additional programs.\n\n### 3.1. Emacs without plugins.\n\nOpening a \u201c.md\u201d file with Emacs without additional packages activates the\n\u201cFundamental\u201d mode, that is, the basic mode of the editor.\n\nIn this mode there is no dedicated Markdown functionality and you can use the\neditor with its native features as if for any text document.\n\n### 3.2. Emacs with markdown-mode.\n\nTo add specific functionality to documents written in Markdown, the markdown-\nmode package must be installed.\n\nI reproduce the screenshot taken from the actual start page of the plugin:\n\nThe installation string with the Melpa library is as follows: M-x package-\ninstall RET markdown-mode RET .\n\nFor Straight with use-package, which is my current configuration, the\nfollowing configuration needs to be entered in .emacs:\n\n    \n    \n    (use-package markdown-mode :straight t :mode (\"README\\.md\\\" . gfm-mode) :init (setq markdown-command \"markdown\"))\n\nA remark: on the net you can find the use-package configuration associated\nwith the multimarkdown command. I preferred to modify that configuration and\nassociate it with the markdown command for ease of installation.\n\nThe multimarkdown command, in fact, must be compiled from source, as indicated\non the dedicated page on GitHub.\n\nWith the markdown-mode package, a menu indicating the main operations is also\ninstalled in the top bar:\n\nThe menu is very useful for having at your hand the main key combinations of\nthe plugin.\n\nBy using this package, document structuring management is similar to Org-mode,\nwith Tab key to expand or collapse single headings and Shift-Tab to expand or\ncollapse all headings simultaneously.\n\nAlso the basic commands for moving between paragraphs are the same as in Org-\nmode:\n\n  * C-c C-n to jump to the next header of any level.\n  * C-c C-p to jump to the previous header of any level.\n  * C-c C-f to jump to the next header of the same level.\n  * C-c C-b to jump to the previous header of the same level.\n  * C-c C-u to move up a level.\n\nThese combinations, like many others, are also given in the menu dedicated to\nMarkdown.\n\nYou can also find che analytical description of the commands at package page.\n\n### 3.3. Emacs and preview in Markdown.\n\nAmong the commands added by the plugin there is also, as can be seen in the\nprevious image, the Preview & Export item to launch both the preview on\nbrowser (C-c C-c p) and the Live Export (C-c C-c l) on separate Emacs window.\n\nEmacs uses its own configuration for the preview browser, independent of the\n\u201cdefault\u201d operating system browser.\n\nIn the following examples, the customization allows Opera to be launched\ninstead of Firefox.\n\nTo change the configuration with Melpa package system, the following snippet\nin .emacs is used:\n\n    \n    \n    (setq browse-url-browser-function 'browse-url-generic browse-url-generic-program \"opera\")\n\nWith the use-package system with straight.el you can add a fragment to the\nconfiguration already given above.\n\nThe fragment dedicated to the browser starts from the line containing the\n:config command:\n\n    \n    \n    (use-package markdown-mode :mode (\"README\\\\.md\\\\'\" . gfm-mode) :init (setq markdown-command \"markdown\") :config (setq browse-url-browser-function 'browse-url-generic browse-url-generic-program \"opera\"))\n\n## 4\\. Sublime Text 4 and Markdown.\n\nOne of the main new features introduced by Sublime Text compared to previous\neditors is the Command Palette.\n\nThanks to the Command Palette you only need to remember one key combination,\ntypically ctrl + shift + p (Windows, Linux) or \u2318 + \u21e7 + p (on Mac), for all\ncommands.\n\nThis makes it much easier to memorize specific combinations, which can also be\ntyped directly to avoid the intermediate step of the Command Palette itself.\n\n### 4.1. Sublime Text 4 without plugins.\n\nIn basic mode, Sublime Text 4 has a very interesting behavior: even natively,\nthe editor recognizes the language from the extension of the document name and\ninserts the label \u201cMarkdown\u201d in the lower right corner, with activation the\nCtrl-r key combination to jump between paragraphs.\n\n### 4.2. Sublime Text 4 with the plugin \u201cMarkdownEditing\u201d.\n\nA great plugin is Markdown Editing.\n\nAfter the plugin is installed, you can activate its functions via the Palette.\n\nIt is enough, therefore, to open the Command Palette with ctrl + shift + p\n(Windows, Linux) or \u2318 + \u21e7 + p (on Mac) and press the required command, e.g.\nfold or link, and run the command that results next to the name\nMarkdownEditing.\n\nTyping in the Command Palette the string MarkdownEditing: will give you the\nfull list of commands available with the plugin.\n\n### 4.3. Sublime Text 4 and preview in Markdown.\n\nFor previewing you can install the \u201cMarkdown Preview\u201d plugin, activate the\ncommand list with ctrl + shift + p, run the command Markdown Preview: Preview\nin browser and select markdown.\n\n## 5\\. Visual Studio Code and Markdown.\n\nFinally: Visual Studio Code, hereafter VSCode for short.\n\nIt is the most recent editor of those mentioned in this article.\n\nVSCode also has the Command Palette, already described for Sublime Text, which\ncan be activated with the Ctrl + Shift + P command.\n\n### 5.1. VSCode without plugins\n\nEven without any additions, VSCode allows you to view the preview for\ndocuments written in Markdown.\n\nThe built-in preview must be activated by the combination Ctr+K V to open a\nside-by-side window or Ctrl+Shift V to open it a separate tab.\n\nA very useful feature: the preview automatically follows the position of the\ncursor in the document and automatically responds to mouse scrolling.\n\nAnother built-in feature is the lateral Outline based on the paragraph header\nat the various levels. It is located in the Explorer window on the left side\nof the screen.\n\nThe Outline can also be generated with the Ctrl+Shift O command to quickly\njump to any paragraph in the document.\n\nIn addition, VSCode has some snippets to quickly insert various language\nelements. The snippets are activated with the Ctrl+Space command.\n\nThus, VSCode has a very advanced native set of functions dedicated to the\nMarkdown language.\n\n### 5.2. VSCode with the plugin \u201cMarkdown All in One\u201d.\n\nOf course, there are various plugins that extend of VSCode for Markdown.\n\nMy favorite at this time is Markdown All In One which allows, among other\nfeatures, to create an automatic Table Of Contents (TOC) anywhere in the\ndocument and to add paragraph numbering.\n\nFor TOC creation, simply start at the Command Palette and type \u201ctable\u201d to get\ncommands for both creating and updating the table of contents.\n\nFor automatic headers numbering you again start from the Command Palette by\ntyping the word \u201cnumbers\u201d, even partially, to get the command to create/update\nor remove the numbering.\n\nIt is also possible to generate an HTML document exported from the Markdown\ndocument, by typing the word \u201chtml\u201d in the Command Palette.\n\n## 6\\. In summary.\n\nWhat program do I use to write in Markdown?\n\nI try to use all of them.\n\nHowever, I prefer Vim when I want to do some mental training and Visual Studio\nCode when I want to write \u201cquietly\u201d by automatically getting a preview view,\ntable of contents and paragraph numbering.\n\nThank you for your attention.\n\nMarkdown Emacs Vim Sublime Text Visual Studio Code\n\n###### Lawyer\n\nLet\u2019s talk about technology?\n\nPrivacy Policy\n\nFP Site\n\nPublished with Hugo Blox Builder \u2014 the free, open source website builder that\nempowers creators.\n\n##### Cite\n\nCopy Download\n\n", "frontpage": false}
