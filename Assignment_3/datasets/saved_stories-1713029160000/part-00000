{"aid": "40022330", "title": "De-risking custom technology projects (2019)", "url": "https://github.com/18F/technology-budgeting/blob/master/handbook.md", "domain": "github.com/18f", "votes": 1, "user": "jawns", "posted_at": "2024-04-13 11:24:01", "comments": 0, "source_title": "technology-budgeting/handbook.md at master \u00b7 18F/technology-budgeting", "source_text": "technology-budgeting/handbook.md at master \u00b7 18F/technology-budgeting \u00b7 GitHub\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nThis repository has been archived by the owner on Oct 9, 2020. It is now read-\nonly.\n\n18F / technology-budgeting Public archive\n\n  * Notifications\n  * Fork 66\n  * Star 492\n\n/\n\n# handbook.md\n\n## Latest commit\n\nWaldo Jaquith\n\nMake changes required by GSA OSC\n\n080ec2e \u00b7\n\n## History\n\nHistory\n\n603 lines (366 loc) \u00b7 74.2 KB\n\n/\n\n# handbook.md\n\n## File metadata and controls\n\n603 lines (366 loc) \u00b7 74.2 KB\n\nRaw\n\n# De-risking custom technology projects\n\n## A handbook for state grantee budgeting and oversight\n\nAugust 5, 2019\n\nBy Robin Carnahan, Randy Hart, and Waldo Jaquith\n\n18F, Technology Transformation Service, General Services Administration\n\n## Table of contents\n\n  * Introduction\n  * Basic principles of modern software design\n\n    * User-centered design\n    * Agile software development\n    * Product ownership\n    * DevOps\n    * Building with loosely coupled parts\n    * Modular contracting\n  * Best practices for budgeting and overseeing tech projects\n\n    * Think about risk in a new way\n    * Procure services, not software\n    * Beware the customized commercial software trap\n    * Require demos, not memos\n    * Hire tech talent in-house\n    * Minimize the cost of change\n    * Measure success based on iterative outcomes, not project milestones\n    * Limit total spending\n    * Limit contract sizes\n    * Fund systems, not monoliths\n    * Expand your vendor pool\n    * Share your software\n    * Budget for software as an operational expense\n    * Ask technical questions of agencies\n  * Appendix A: Questions to ask\n  * Appendix B: Sample Quality Assessment Surveillance Plan\n\n## Introduction\n\nOnly 13% of large government software projects are successful.^1 State IT\nprojects, in particular, are often challenged because states lack basic\nknowledge about modern software development, relying on outdated procurement\nprocesses. Every year, the federal government matches billions of dollars in\nfunding to state and local governments to maintain and modernize IT systems\nused to implement federal programs such as Medicaid, child welfare benefits,\nhousing, and unemployment insurance. Efforts to modernize those legacy systems\nfail at an alarmingly high rate and at great cost to the federal budget.\n\nState governments are increasingly reliant on modern software and hardware to\nimplement federal programs and deliver essential services to the public, and\nthe success of any major policy initiative depends on the success of the\nunderlying software infrastructure. Government agencies all confront similar\nchallenges, facing budget and staffing constraints while struggling to\nmodernize legacy technology systems that are out-of-date, inflexible,\nexpensive, and ineffective.^2 Government officials and agencies often rely on\nthe same legacy processes that led to problems in the first place.\n\nThe public deserves a government that provides the same world-class technology\nthey get from the commercial marketplace. Trust in government depends on it.\n\nThis handbook is designed for executives, budget specialists, legislators, and\nother \"non-technical\" decision-makers who fund or oversee state government\ntechnology projects that receive federal funding and implement the necessary\ntechnology to support federal programs. It can help you set these projects up\nfor success by asking the right questions, identifying the right outcomes, and\nequally important, empowering you with a basic knowledge of the fundamental\nprinciples of modern software design.\n\nThis handbook also gives you the tools you need to start tackling related\nproblems like:\n\n  * The need to use, maintain, and modernize legacy systems simultaneously\n  * Lock-in from legacy commercial arrangements\n  * Siloed organizations and risk-averse cultures\n  * Long budget cycles that don\u2019t always match modern software design practices\n  * Security threats\n  * Hiring, staffing, and other resource constraints\n\nThis is written specifically for procurement of custom software, but it\u2019s\nimportant to recognize that commercial off-the-shelf software (COTS) is often\ncustom and Software as a Service (SaaS) often requires custom code. Once any\ncustomization is made, the bulk of this advice in this handbook applies to\nthese commercial offerings. (See \"Beware the customized commercial software\ntrap\" for details.)\n\nAs government leaders, we must be good stewards of public money by demanding\neasy-to-use, cost-effective, sustainable digital tools for use by the public\nand civil servants. This handbook will help you do just that.\n\n### About the authors\n\nWe work for 18F, part of the Technology Transformation Services team at the\nGeneral Services Administration (GSA). Collectively, the three of us have many\nyears of experience in government procurement, software development, and\nstate-level elective office.\n\nIn work funded by GSA\u2019s 10x, we spent a year exploring how to drive down the\ncost of federal technology grants to states while simultaneously improving\noutcomes. Federal grants provide 31% of state budgets, and as a major investor\nin major state software systems, the federal government is keenly interested\nin ensuring a good return on that investment.^3 To accomplish that, we met\nwith state legislators, legislative fiscal staff, state budget officers,\ncontracting officers, and gubernatorial policy advisors. This handbook came of\nlearning from and teaching hundreds of people from dozens of states. We\u2019re\ngrateful to the many people who contributed their time and knowledge\nthroughout that process.\n\n## Basic principles of modern software design\n\nA technology project\u2019s odds of success improve when the \"non-technical\"\ngovernment leaders who fund and oversee it understand six basics concepts of\nmodern software development: user-centered design, agile software development,\nDevOps, building with loosely coupled parts, modular contracting, and product\nownership. You don\u2019t have to be a technologist to understand these general\nconcepts. Once you grasp them, it\u2019ll feel like you\u2019ve gained a new super\npower, allowing you to cut through the jargon and technical detail, and stay\nfocused on the basics of successfully guiding any software project.\n\n### User-centered design\n\nAll software development should be centered on the needs of the software\u2019s\nactual end users, the specific people who are expected to use it. These \"end\nusers\" may be applicants for benefits, call center workers, case workers,\nother state employees or any of innumerable other groups.\n\nDesigning with and for users reduces project risks by ensuring the software is\nsolving actual problems (as opposed to what a few stakeholders think the\nproblems actually are). These problems are identified via a variety of\nresearch tactics, including interviews and testing for usability.\n\nIn user-centered design, all work is in the service of those end users\u2019 needs.\nThat work is identified and prioritized in close and regular collaboration\nwith end users, and is informed by, but not subservient to, any technical\nconstraints. (That is, the goal of the work is to deliver value to users,\nwhich involves dealing with the realities of approved programming languages or\nserver software, but work should never be omitted because of the perception\nthat technical constraints would make it impossible.) The technical team and\nend users regularly review the work, as it is being performed, and the\ndevelopment work on the new software is not considered finished until those\nend users agree that their needs have been met. Designing with and for users\nreduces project risks by ensuring the software is solving users\u2019 problems.\n\n### Agile software development\n\nDetailed, long-term plans for major, custom software projects have long been\nthe norm in government. But, as software engineers and policy makers have\nlearned over the years, those plans are never correct. They need a lot of\ncostly modifications, leading to requests for more money to pay for \"change\norders\". It\u2019s time for government executives and budget officials to stop\nasking for detailed long-term plans, and instead to budget for software\nprojects in a new way.\n\nPlanning an entire project upfront is known as \"waterfall\" development.\nImagine planning a month-long family vacation of driving around the United\nStates. Under waterfall, this would entail planning up front each day\u2019s\nagenda, including the route driven, booking every hotel room, pre-paying for\nevery meal, pre-buying tickets for admission to attractions, etc. This would\nnever work because things change, unexpected options come up, and no rational\nperson would want to lock in every decision at the start of the journey when\nthey don\u2019t know what the journey holds. Instead, most people would map out the\ngeneral route to be taken and plan a few major stops \u2014 the specifics would be\nsorted out as they progressed along the way.\n\n\"Agile software development\" refers to using this trip-planning methodology\nfor building and modernizing software systems. Instead of relying on years of\ncostly planning and \"requirements gathering\" before beginning to write actual\nsoftware, agile development projects are planned only in broad strokes, with a\nwell defined description of the overall project goal and a strong preference\nfor just getting started. A small, empowered, self-motivated team (usually 5-9\npeople, including developers, product managers, user researchers, writers,\nand/or security experts) is dedicated to accomplishing that goal, using user-\ncentered design, working in two-week cycles to deliver some actual working\nsoftware.\n\nOn day one, the team plans only what they\u2019ll do for the next two weeks. (The\nlength of a project\u2019s cycles can be as brief as one week or as long as four\nweeks \u2014 two weeks is the most common.) Each task they\u2019ll work on is in the\nform of a \"user story\" \u2014 a specific user need revealed by user research.^4 The\nentire collection of user stories to be worked on is called the \"backlog.\"\n\nThe team works on a selected group of user stories for two weeks and, at the\nend, the team reviews the work that they did, tests it with end users, and\nthen plans the next two weeks by pulling more user stories from the backlog.\nRepeat. Each of these two-week cycles is referred to as a \"sprint.\"\n\nIn the beginning, the software they produce may not seem like much (and may\neven be replaced by something else later), but it will gradually and\nsystematically inform the project\u2019s technical approach and help the team\nsensibly integrate the project into an agency\u2019s existing legacy system.\n\nFunctioning software is delivered at the end of each sprint, without exception\n\u2014 fully-tested, fully-documented, ready to be used. In this way, value is\ndelivered constantly, until the software is good enough to be rolled out for\nbroad use. The team continues to work until they accomplish all of the goals\nor they run out of money, whichever happens first.^5\n\nThe vendor is paid for their employees\u2019 time, not for a software system.\nEverything created by the vendor \u2014 software, documentation, research, designs,\neverything \u2014 is owned by government, delivered to government at the end of\neach sprint. Technology changes, government policies change, regulations\nchange, laws change, and leadership\u2019s priorities change \u2014 any project that is\nplanned in great detail up front will be unable to adapt to those changes, and\nwill be at significant risk of failure, significant cost and deadline\noverruns, or costly \"change orders.\"\n\nBy coupling agile with user-centered design, a development team can constantly\niterate toward solving the needs of end users in ways that would have been\nimpossible to learn about up front.\n\nEarlier this year the U.S. Department of Defense\u2019s Defense Innovation Board\nreleased its Software Acquisition and Practices (SWAP) Study including a\nconcept paper on \"Detecting Agile BS,\" which provides a useful synopsis of\nagile practices, and a series of questions to help non-technical leaders\nunderstand whether those practices are being followed.\n\n### Product ownership\n\nTaking back ownership of government software projects requires government\nteams to focus on outcomes, not outputs. This means shifting from some of the\ntraditional Program Management Body of Knowledge practices to a product-\noriented mindset.\n\nThe word \"product\" may sound unusual in a government context, but it\u2019s an\nimportant bit of tech lingo. \"Product\" is a shorthand for whatever the thing\nis that\u2019s being created: a website, an iOS app, an intranet application, etc.\nAlthough the word makes more sense for a business that\u2019s selling a literal\nproduct, everything else about the concept translates to government perfectly.\n\nThe product owner is the key person for any software project, and must be a\ngovernment employee. The product owner works with users, stakeholders,\ntechnologists, and the vendor to envision the direction for the product, with\nan eye toward delivering value to end users as quickly as possible. They\niteratively prioritize and define the work for the product team, as part of\nthe agile process. They measure progress against clear performance indicators,\nand communicate with stakeholders and the cross-functional team that is\nbuilding the product.\n\nThe product owner doesn\u2019t need to be a strong technologist. Instead, they\nshould know the users of the system, the business (for example, Medicaid\ninsurance or DMV services), and policy constraints.\n\nA strong product owner ensures that the vision is clear, the strategy is\nclear, there is space for teams building the software to learn, and that they\nare building or buying the right thing to incrementally show value to users.\nThey prioritize ruthlessly to ensure that the product serves user needs, and\nthat activity and attention is focused on the highest-priority needs. They are\nempowered by their agency to represent stakeholders in making rapid product\ndecisions without the need for many layers of approval. This positioning\nensures that the product owner understands everything that the development\nteam is doing and that the needs of government are fully represented.\n\nThis is different than typical project management in government IT. The\nproduct owner won\u2019t have Gantt charts or a detailed 5-year plan. But they will\nhave a vision for the outcomes that will be delivered to users, and have a\npath to executing. Their most important job is to understand what the\ndevelopment team is doing and to make sure it strikes the right balance\nbetween the needs of government and the needs of end users.\n\nIt\u2019s possible for a first-time product owner to learn as they go, but it\u2019s\nbetter to be trained in advance. There are many sources of agile and scrum\ntraining, some specifically for product owners. These range from YouTube video\nseries to in-person, multi-day classes to become a \"Certified Scrum Product\nOwner.\" The more important the project, the more formal and rigorous that the\nproduct owner\u2019s training should be.\n\n### DevOps\n\nHistorically, the teams building software have been separate from the IT teams\nthat are responsible for operating the software once it\u2019s ready for use. A\nvendor might spend years building new software, and then a government IT team\n(or a vendor filling that role) might then require many months of work to get\nthat software to function correctly on their servers. This is usually\naccompanied by frustration and finger-pointing, and can lead to project\nfailures. To address this, government agencies often insist that the vendor\nbuilding the software also host it indefinitely on the vendor\u2019s\ninfrastructure, which has the effect of ruling out most software vendors (who\nare not in the hosting business), and creating vendor lock-in with its\nassociated high prices. Relying on these old approaches will get you less and\ncost more than adopting the modern software tools that are standard in the\nprivate sector.\n\nThe way to address this is with DevOps. This is the practice of coordinating\nthe work of these two groups to automate the work that goes into testing\nsoftware and moving it to a live server where people can use it \u2014 merging\nsoftware development and system operations. The developers write a series of\nautomated processes for ensuring that the software will function properly in\nproduction, over the course of writing the software itself. Developers cannot\nmerely hand their completed work to the system operations team and declare\n\"hey, it works for us\" \u2014 they are responsible, both practically and\ncontractually, for their code working properly.^6\n\nOdds are good that most of the software you use every day, whether on your\nphone or your computer, was written just like this. Under DevOps, testing\nsoftware quality is automatic, testing software security is automatic, merging\nmultiple developers\u2019 work is automatic, and moving completed software to\nservers is automatic. (The incorporation of security testing in DevOps is\nsometimes labeled as \"DevSecOps.\")\n\n### Building with loosely coupled parts\n\nLarge, complex software projects tend to collapse under the weight of\nadministration. No single developer can understand the entire system that\nthey\u2019re contributing to, yet each new member added to a project team increases\nthe complexity of the entire team\u2019s interactions, necessitating new\nsupervisory roles like \u201csoftware architects,\u201d with whom developers must check\nbefore doing any work. The contributors need to coordinate carefully to avoid\nconflict between their efforts. As a team grows, they\u2019re forced to spend\nincreasing amounts of time managing the project, and decreasing amounts of\ntime actually doing the work.\n\nTo avoid this fate, it\u2019s smarter to break large projects into a handful of\nsmall, quasi-independent software projects. In this model, each component\ncommunicates with other components through simple, modular standards, so that\nany one piece can be swapped out at any time. Instead of building a monolith\nthat everybody will lament in a few years, you build a little ecosystem, in\nwhich each piece can be upgraded and modified easily, as changing needs will\ndemand. Each component is maintained by a single agile team, which documents\nthe component\u2019s application programming interface (API) \u2014 the grammatical\nrules that other components can use to communicate with it. The teams\u2019 need to\ncoordinate is minimal, because they can simply follow the API documentation\nfor the other components that they need to interface with.\n\nWhen each component uses abstracted APIs (think of them as common standards\nfor using that technology), this is known as using \"service-oriented\narchitecture\" (SOA). This is the same as the concept of \"interchangeable\nparts\" that made the industrial revolution possible. Standardized couplings\nare the underlying concept behind cloud computing, electrical outlets, USB,\nLegos, trains, and countless other modern products and practices.\n\nBuilding IT systems using loosely coupled parts, connected by open and\navailable APIs, is the \"magic bullet\" that allows for flexible, sustainable\nsystems that meet user needs and cost less over time.\n\n### Modular contracting\n\nBy combining user-centered design, agile, product ownership, DevOps, and\nbuilding with loosely coupled parts, it\u2019s possible to break up a large, risky\ncontract into a handful of smaller contracts. A contract should be small\nenough that the agency will have no compunction about giving no further work\nto a non-performing vendor, replacing them with a new vendor. (See \"Procure\nservices, not software\" for how this is done.) The rest of the vendors will\ncontinue working, so the total loss of velocity will be minimal. A new vendor\nshould have no difficulty taking over for the old one, since the old one was\ndelivering completed, documented, tested software every two weeks. Another\nbenefit is that small contracts may come in under your state\u2019s simplified\nprocurement threshold, meaning that agencies can write a request for\nproposals, publish it, and award a contract, all within 90 days or so.\n\nThere are vendor teams that specialize in working as we\u2019ve described here. As\na rule of thumb, an agile development team of 5\u20139 people costs between\n$1\u20132M/year, depending on their geographic location.\n\nThis approach will require coordination and buy-in from your procurement\nteams. Procurement personnel are often accustomed to the traditional approach\nof outsourcing IT projects: one large procurement based on lengthy RFP\ndocuments, asking for lengthy proposals and outdated, waterfall-style\ncertifications and qualifications from vendors. Generally, vendors that use\nagile, user-centered methods don\u2019t have any idea what \"CMMI\" or \"EVMS\" is \u2014\nsuch standards are no longer considered best practices for creating flexible\nand cost-effective software systems. This is a barrier to entry for many of\nthe vendors that might be new to government and don\u2019t want to expend all of\nthe resources required to write a proposal.\n\n* * *\n\nModern software development processes are founded on user-centered design,\nagile software development, product ownership, DevOps, building with loosely\ncoupled parts, and modular contracting. By understanding those core concepts,\nyou\u2019re in a great position to understand how to budget for software more\neffectively, and to understand the rest of this handbook.\n\n## Best practices for budgeting and overseeing tech projects\n\n### Think about risk in a new way\n\nOver the past several decades, government agencies have turned away from using\nin-house staff, relying on outside vendors to build their mission-critical\ntechnology. The decisions to do this were based on trade-offs that seemed like\nlower-risk options \u2014 often driven by limited capacity and promises of cheaper\n\"off the shelf\" tools offered by government contractors.\n\nHowever, we\u2019ve learned from examples like Healthcare.gov that while government\ncan easily outsource the work of creating new technology systems, it cannot\noutsource the risk of failure.^7 Projects that go wrong reflect back on their\nagencies, not contractors or software providers.\n\nGovernment is ultimately accountable for its mission, so agencies need to have\ncontrol of and responsibility for the projects that support that mission. The\nproblem an IT budget request aims to solve is not a technical problem; it is a\nproblem related to fulfilling the agency\u2019s mission, and technology is simply a\nmeans to that end.\n\nThis doesn\u2019t mean agencies need to do all the work in-house; however, it does\nmean agencies need to set clear expectations about human outcomes and\ntechnical standards related to data security, use, interoperability,\nmonitoring, and evaluation.\n\nTechnical knowledge is cheap and abundant, but knowing how to run a state\nagency is a rare and valuable skill. Government must embrace and own its\nresponsibility and risk of failure, recognizing that technology vendors are\nhired only to help and should be easily replaceable if they don\u2019t deliver.\n\n#### Checklist\n\n  * The project has a dedicated, empowered product owner who is an employee of the mission agency \u2014 not a contractor, and not an employee of the state\u2019s IT agency\n  * Stakeholders recognize that the existing approach (waterfall development) fails the majority of the time, and that moving to agile development and modular procurement is, in fact, significantly less risky\n  * Stakeholders regard outside vendors as interchangeable tools to accomplish a goal, rather than as the \"owners\" of a project or its outcome\n\n#### Key questions\n\n  * Are there identified and trained government employees (not contractors) that will serve as dedicated and empowered product owners to set direction, prioritize, and oversee the work of the development team?\n  * Is there a chain of support for this new approach within the agency all the way up to the governor\u2019s office, central IT, legal and procurement offices, as well as the legislature? Are any of those stakeholders able to block adoption of this new approach? If so, what is the path to escalating issues, ensuring alignment, and preventing those internal blockers from putting the project at risk?\n  * How is the agency taking responsibility for leading the project and owning the results, rather than trying to outsource risk to a vendor through the contracting process?\n\n### Procure services, not software\n\nDon\u2019t think of procuring custom software as buying a thing. Instead, think of\nit as buying a service: the service of a team of developers and designers\nperforming work as prioritized by the product owner. This reframing leads to a\ncompletely different approach \u2014 a much simpler approach \u2014 to the RFP and to\nthe contract, and is an important distinction for contracting officers.\n\nYour RFP should describe the overall goal of the work, and should include a\nfirst attempt at a product backlog \u2014 a list of the work that will be done \u2014\nput together by the product owner. This should look like a list of user\nstories \u2014 tasks to be performed to address the needs of end users \u2014 that the\nwork is likely to address, clearly labeled as indicative of the types of work\nthat\u2019s likely to be involved, rather than a fixed scope of work. The RFP\nshould also acknowledge there will be constant change to the work based on\nshifting priorities and ongoing user research; change is expected, and it\u2019s\neasy to change software when it\u2019s built in modern ways.\n\nThe RFP should use a Statement of Objectives rather than a Statement of Work \u2014\nthat is, it should state the objectives of the project, rather than the\nspecifics of a product that the vendor should produce. Using a SOO instead of\na SOW eliminates \"change orders\" from vendors, because the scope of work is\nwhatever the team is directed to do. (If an ostensibly \"agile\" vendor mentions\nchange orders, that\u2019s a red flag.)\n\nTo ensure vendors deliver work that meets the needed technical specifications,\nit is important that the RFP include a Quality Assessment Surveillance Plan\n(QASP) that is appropriate for agile development methods, requiring that the\nsoftware be inspected at the end of each sprint to ensure that it is tested,\nsecure, accessible, documented, and deployed.^8 (See Appendix B for sample\nQASP.) Meeting this requirement requires regular demonstrations of actual,\nworking software, not memos or descriptions of what a system is supposed to do\nin the future.\n\nHistorically, there has been pressure to only use firm fixed price contracts,\non the assumption that this reduces risk. However, if you are in a position to\nconstantly measure software quality, then a time and materials contract \u2014 with\na ceiling on total spending \u2014 allows for more flexibility for the software\ndevelopment team. A time and materials contract also allows for much easier\nescape clauses if the direction of the work changes or the vendor team is not\nproducing quality software. If a vendor team\u2019s work is inadequate, or their\nskills prove inappropriate, then no further work need be assigned to that\nvendor (effectively terminating the contract), and the vendor can be replaced.\n\n#### Checklist\n\n  * The project has a dedicated, empowered product owner who is an employee of the agency \u2014 not a contractor, and not an employee of the state\u2019s IT agency \u2014 whose job it is to prioritize work for the development team\n  * An agency contracting officer has embraced this project, and is enthusiastic about procuring software in new ways\n  * The RFP will be solely about procuring development services, not about procuring a tangible thing\n  * The RFP will require a cross-functional team of designers, user researchers, and developers\n  * The RFP will be no more than 20 pages in length\n  * A backlog of at least a dozen user stories has been created and added to the RFP\n  * A time and materials contract (with a cap) will be used\n  * The simplest available procurement vehicle that provides access to the targeted vendors will be used\n\n#### Key questions\n\n  * Is the product owner empowered to rapidly make authoritative decisions on behalf of the agency?\n  * Is the product owner prepared to spend most of their work hours fulfilling the requirements of this new role?\n  * Is agency leadership prepared to have product decisions led by identified user needs, based on direct conversations with those users, rather than leadership\u2019s personal preferences?\n  * Does the RFP establish clear requirements about the regular delivery of working code, documentation, testing, and ownership of all work products remaining with the state?\n\n### Beware the customized commercial software trap\n\nCommercial off-the-shelf software (COTS) and Software as a Service (SaaS) can\nbe great ways to rapidly procure new software or infrastructure without having\nto build it from scratch. For example, it makes perfect sense to buy a COTS\nword processor instead of building your own custom word processor.\n\nBut for major procurements of specialized, mission-critical technology, be\nextremely wary of claims that COTS or SaaS will work \"out of the box.\" Vendors\nwill often pitch their \"customizable COTS\" and SaaS as a magic bullet,\npromising that it will handle your unique regulatory and process requirements.\nAnd it might \u2014 but likely only after extensive modifications.\n\nBefore signing on to those tools, first talk to other state agencies that have\nused those customized products. Chances are you\u2019ll learn that what\u2019s being\nsold as an out of the box solution takes a lot more time and money to\ncustomize than you\u2019ve anticipated.\n\nInstead of mandating any one solution at the budgeting stage, give agencies\nthe space to determine whether to buy or build various pieces of the system.\nIf the budget allocation mandates COTS, then the agency is likely to wind up\nlocked into a highly modified version of a COTS product, cut off from all\nfuture upgrades by those modifications without significant expense. Likewise,\nmandating SaaS is likely to force the agency to cram their needs into a SaaS\nproduct like an ill-fitting shoe, while spending a significant amount of\nadditional money on a \"software integrator\" to connect it to their existing\nlegacy system, leading to the same type of undesirable lock-in.\n\nIt may well make sense to use COTS or SaaS as the core of a major new agency\nsystem. But the legislature and the agency needs to go into that with eyes\nwide open, recognizing that they\u2019re not likely to get a completely turnkey\nCOTS or SaaS solution for specialized agency software.\n\n#### Checklist\n\n  * The budget allocation does not mandate the use of COTS, SaaS, or custom software, but allows the agency to fund a combination of those as they find necessary\n  * Vendors\u2019 claims that their COTS or SaaS product will work immediately, without burdensome modification or customization, are independently investigated by talking to other states and agencies that have used those products and gone through the customization and deployment process\n\n#### Key questions\n\n  * How will COTS software updates be made once the product has been customized to meet the agency\u2019s needs? How much further customization will be required to integrate those modifications, and who will pay for those updates?\n  * What happens if the SaaS vendor goes out of business one day without warning?\n  * Will the state have no-cost, easy access to its data, data models, and APIs?\n\n### Require demos, not memos\n\nHistorically, progress in software development projects has been measured by\ncomparing the work that has been done to the schedule of work to be done that\nwas established at the outset. This is done by producing artifacts like Gantt\ncharts and lists of completed tasks. But this doesn\u2019t work \u2014 agile software\ndevelopment is premised on the idea that this doesn\u2019t work. Modern software\ndevelopment teams have never heard of \"CMMI\" or \"Earned Value Management\nSystems,\" and won\u2019t bid on work that includes these requirements.\n\nA better philosophy is demos, not memos. Instead of measuring progress by\nlooking at purpose-made artifacts, look at the actual work that is being done.\nJoin the reviews that are held at the end of each sprint, where the work done\nin that sprint is demonstrated to the project team and invited end users. Try\nout the website. Install the app. Ask for a \"burn down chart\" \u2014 a graph of\nwork that remains to be done and how much time that will take.\n\nAn important part of ensuring that progress isn\u2019t illusory is for the contract\nto include a Quality Assurance Surveillance Plan (QASP) that requires, at the\nend of each sprint, that all work meet specific standards. The QASP describes\nthe method by which the government will determine that the vendor\u2019s work is of\nsufficient quality to accept at the end of each sprint, enabling the vendor to\nperform those same tests to ensure that there will be no surprises. (See\nAppendix B for a sample QASP.)\n\nThe QASP does not require producing any artifacts explicitly for the purpose\nof monitoring the work \u2014 the way to monitor the work is by seeing if it\nactually works. This is a very different way to monitor the progress of a\ntechnology project. It has the added benefit of being a more objective,\nobservable, functional test than requiring subjective or legal interpretations\nabout whether the work satisfies a long series of system requirements.\n\n#### Checklist\n\n  * An empowered, dedicated government employee will serve as the product owner\n  * There will be no planning or reporting requirements that run counter to agile (i.e., there are no dates by which specific tasks are to be completed and no specifications of exact functionality that will be required \u2014 whether in the RFP, the acquisition plan, or legislation)\n  * There will be a government-employed software developer who will ensure compliance with the QASP at the end of each sprint\n  * People providing oversight, above the level of the government product owner, are willing to primarily receive \"reports\" in the form of demonstrations of functioning software and burn down charts, combined with a review of user stories that have been completed and those that remain to be completed\n  * There is an identified person within the agency who is prepared to provide repeated explanations of progress to each level of oversight, because artifacts of measuring progress on an agile project are unfamiliar to people accustomed to waterfall projects\n\n#### Key questions\n\n  * Is it feasible to provide the end-to-end support for such a radically different approach to measuring progress, from the agency to the governor\u2019s office to the legislature? Is there anybody with the power to dig in their heels and demand a Gantt chart, thus potentially making agile methodology non-viable?\n  * Whose job will it be to report progress up and out of the agency, e.g., to a legislative oversight committee?\n\n### Hire tech talent in-house\n\nIf nobody in the budget office or budget committee has experience with\nsoftware development, then they are not well-equipped to consider a software\ndevelopment funding request. The same is true of agencies \u2014if nobody in\nproject leadership has experience with software development, then the agency\nis not well-equipped to lead a software development project successfully. The\nburden is on the governor\u2019s office, legislators, and agency heads to ensure\nthat their respective organizations prioritize hiring people who have this\nexperience.\n\nWhile it may be tempting to solve this knowledge gap by relying on somebody\nfrom the state\u2019s central IT department, or by relying on a vendor, ultimately\nmission agencies must have the knowledge in-house to comprehend what they\nneed, what they should be asking of vendors, and assessing the work done by\nvendors.\n\nTo determine if your budget office or your leadership has the experience to\nconsider software requests or lead software projects, start by asking around.\nAll but the smallest agencies will have technical staff who can join project\nleadership, although vanishingly few budget offices currently employ software\ndevelopers.\n\nIf you don\u2019t currently have the knowledge you need in-house, you\u2019ll need to\nhire someone who does \u2014 even if only seasonally or on contract. A developer or\ndesigner with experience building modern software, ideally for government, is\nyour best bet. Also, consider authorizing one or more employees to spend some\nof their training time learning the basics of agile software development \u2014\nthere are coding \"bootcamps\" throughout the U.S., including some online-only\noptions.\n\nThe personnel cost of bringing in a developer or upskilling your current\nemployees is miniscule in comparison to spending on technology. And once an\nemployee has monitored an agile project from start to finish, they\u2019ll be\nbetter equipped to consider future budget requests for custom software.\n\nLikewise, mission agencies must directly employ enough developers that they\ncan oversee the work being done by vendors. They\u2019ll represent the contracting\nofficer, ensuring that vendors\u2019 work is of a high quality and that vendors are\nworking on the right things.\n\nAlthough software is never \"done\" \u2014 you\u2019ll always need to adapt to changing\ntechnology, policy, regulations, laws, and user needs \u2014 there will be a point\nwhen you need far fewer developers to continue that work. At that point it\nbecomes especially important to have multiple agency employees who fully grasp\nthe software, who are capable of maintaining it.\n\nFor larger projects, you\u2019ll need to contract for a development team\nindefinitely, under the oversight of a government product owner. Under\nwaterfall, this travels under the name of \"Operations and Maintenance,\" but\nunder agile, O&M is simply continued user research, design, software\ndevelopment, etc.^9\n\n#### Checklist\n\n  * There are one or more budget-office employees with experience developing complex, custom software in an agile environment who will assist in evaluating custom-software budget requests\n  * If there are no budget-office employees with relevant experience, the legislature has a contract with a non-conflicted vendor \u2014 one with no other contracts with the state and no ties or partnerships with any COTS products\n  * The agency has identified a specific government employee who will be providing technical leadership for the project, along with evidence of their experience developing custom software in an agile environment\n\n#### Key questions\n\n  * When a vendor delivers code at the end of every sprint, which specific government employee will inspect that code to ensure quality?\n  * If an agency says they need $10 million to complete a specific software project, which budget office employee is equipped to know whether that\u2019s an appropriate price? Which specific legislative budget committee employee is equipped to know whether that\u2019s an appropriate price?\n  * When the procurement is complete, who will maintain the software? Does the agency employ people who know how to maintain it? Will they be brought into the development process so that they can learn about it as it\u2019s built and help ensure it\u2019s something they\u2019re capable of supporting?\n\n### Minimize the cost of change\n\nYour state government will exist longer than any piece of software. And that\nmeans one day, your exciting new software system could someday become your\nhard-to-use, old software system.\n\nAs good as software may be today, eventually you\u2019ll need to switch to a new\nsystem \u2013 whether that\u2019s in whole or in part. And acquiring software as a\ncompleted monolith guarantees it will gradually become unable to support an\nagency\u2019s needs.\n\nTechnology changes, government policies change, regulations change, laws\nchange, federal grant requirements change, and leadership\u2019s priorities change\n\u2014 any project that is planned in great detail up front will be unable to adapt\nto those changes, and will be at significant risk of failure, significant cost\nand deadline overruns, or costly \"change orders.\"\n\nSo rather than acquiring one giant piece of proprietary software, insist that\nyour vendors default to practices like using open-source software and service-\noriented architecture. That way, you can optimize for reducing the cost of\nupdating and changing the system from the beginning.\n\n#### Checklist\n\n  * Systems, whether cloud-native or being moved to the cloud, will use service-oriented architecture (SOA) that is vendor- and product-agnostic\n  * To ensure data portability, files will be stored in open, non-patented formats supported by multiple vendors\n  * APIs will use open schemas\n  * To avoid product lock-in, open source software will be used instead of commercial software whenever possible\n  * Government will own all vendor work products\n  * If using COTS components, the vendor will provide a path to leave for a competitor \u2014 both contractually and technologically \u2014 with a cost-effective way to export all stored data\n\n#### Key questions\n\n  * What is the plan for reducing the time and cost of future updates to the system due to technology, policy, or vendor changes?\n  * How much will it cost to change the system to reflect needed technology or policy changes?\n  * Are the APIs open and usable by other vendors?\n  * Are the data formats standardized, open, and usable by other vendors?\n  * Keeping a software system up-to-date will take regular, on-going work \u2014 what is the plan to do that?\n\n### Measure success based on iterative outcomes, not project milestones\n\nValue shouldn\u2019t come at the end of a project \u2014 it must be provided to end\nusers within no more than six months of the contract being awarded, and\nconstantly from there on out. At the end of the first sprint, working code\nmust be delivered to the agency for its review, and that must continue with\nevery subsequent sprint. End users should evaluate work at the end of each\nsprint, regardless of whether the work has yet been deployed for daily use.\n\nDon\u2019t measure progress in \"story points,\" lines of code written, person-hours\nof work, etc. The only measure of success that matters is what value has been\ndelivered to end users. This is best assessed by attending semi-weekly sprint\nreviews and talking to both the scrum master and the government product owner.\n\n#### Checklist\n\n  * The vendor team will use agile\n  * The vendor will be required to deploy functioning software into a government-owned environment at the end of each sprint\n  * The project team will interview and test their work with end users routinely, both to inform planned work and to determine whether the work already done is correct\n  * The RFP will have no mention of a detailed project schedule, and there will be no mention of Gantt charts or Independent Validation and Verification (IV&V) contracts\n  * A legislative staffer will be assigned to provide oversight of the project, and will coordinate with project leadership to monitor progress by periodically attending sprint reviews\n\n#### Key questions\n\n  * Can the requesting agency deliver value to end users within six months? What, specifically, is that value?\n  * Is the agency prepared for the vendor to continuously interview and test their work with actual end users of the software \u2014 perhaps including agency employees?\n\n### Limit total spending\n\nThe greater the amount of money spent on a software project, the greater the\nodds of failure. As a general rule, plan to spend no more than $10 million on\nan entire project.^10 (There are rare exceptions for extraordinarily complex\nsystems like unemployment insurance, Medicaid Eligibility & Enrollment, and\nMedicaid Management Information Systems.)\n\n#### Checklist\n\n  * The requesting agency understands they\u2019re not being given a small percentage of the resources they believe they need \u2014 instead, they\u2019re being given an entirely new process to procure software, as well as adequate funding under that model\n\n#### Key questions\n\n  * If the project \"requires\" $20 million in funding, what value can be delivered to end users with $10 million? Or $2 million? (If the answer is \"none,\" then this is a project doomed to fail)\n  * When this spending is matched by federal dollars \u2014 especially at a highly-leveraged rate, like the 9:1 match provided by the Centers for Medicare & Medicaid Services for Medicaid Management Information Systems \u2014 is anybody going to get in trouble for leaving money on the table?\n  * Is there somebody whose performance is measured by how much grant funding they raise and who has an incentive to demand that $100 million be spent, instead of $10 million?\n\n### Limit contract sizes\n\nUsing a single vendor over a long period of time, or for a large number of\nteams, may feel more comfortable, but it inevitably leads to vendor lock-in.\nBreaking up projects into several small contracts incentivizes vendors to\nbuild a sustainable software ecosystem, instead of a monolith, and makes each\ncontract small enough that the odds of success increase markedly.^11\n\nRequire that no more than $2 million be spent on any single contract annually,\nand that no contract last for more than three years, including option periods.\nThat way, you\u2019ll get no more than two development teams from a single vendor.\nIf the project needs more development teams, obtain them from another vendor\nand have them work separately. Limit the RFP, too, keeping it below 20 pages;\ndon\u2019t spend any longer than 60 days writing it.\n\nIn addition to preventing lock-in, there\u2019s another benefit to using smaller\ncontracts: they\u2019re less likely to be protested, because the dollar value\ndoesn\u2019t justify the trouble and legal costs. If you\u2019re respectful and\ntransparent with vendors, and don\u2019t require hundreds of pages of proposals,\nthey will likely want to do business with your agencies in the future.\n\nAs the number of people who work on a project increases, so does the amount of\ntime that all of those people have to spend coordinating with each other. The\nsolution to this is to have them work in parallel, which is possible when\nbuilding with loosely coupled parts. Having more than one vendor team working\non your project also provides you with more competitive options if you need to\nchange vendors.\n\n#### Checklist\n\n  * If the project will require multiple contracts, the scope of the first contract has been identified, and there is a general idea of what some other contracts may be comprised of\n  * If there will be more than one development team, service-oriented architecture (SOA) will be employed\n  * When possible, contracts will be sized within the simplified procurement threshold so they can be awarded quickly and easily\n  * The identified first project has relatively low technical complexity, low political risk, and high end-user value, so that teams can start practicing working this way while experimenting and learning in a relatively low-risk environment\n\n#### Key questions\n\n  * Have the relevant contracting officers read this handbook?\n  * Do the contracting officers understand that they\u2019re not being asked to do all of the work that goes into a $50 million contract? Do they understand that $2 million contracts are far easier to award and that, under agile, they\u2019ll also be much easier to manage?\n\n### Fund systems, not monoliths\n\nDon\u2019t replace the old legacy system with a new legacy system. Insist on\nloosely coupled systems that are built incrementally. That way, they\u2019ll never\nneed to be replaced wholesale \u2014 they\u2019ll just replace individual components as\nthe need arises.\n\n#### Checklist\n\n  * Each contract will be written to deliver value to end users \u2014 they\u2019re not for \"maintaining servers\" or \"setting up a database,\" but for \"adding a web-based permit application system\" or \"simplifying the intake process\"\n  * There will be no single \"enterprise architect,\" because the architecture will emerge iteratively throughout the agile process\n  * If the project is large enough that it will include multiple scrum teams working simultaneously, there is no expectation that all members of all teams will ever be in meetings together\n  * The RFP will specify the use of service-oriented architecture for each component\n\n#### Key questions\n\n  * Is there a single point of failure that can bring the whole system down? (If so, that\u2019s probably monolith, not a system.)\n  * If one vendor\u2019s contract needs to be terminated for non-performance, can the others continue to work without interruption?\n\n### Expand your vendor pool\n\nYour existing vendors are unlikely to employ the modern software development\npractices outlined in this handbook \u2014 they were hired for their legacy\npractices back when that was what you needed. To find vendors who meet your\nnew needs, you\u2019ll likely need to identify and attract new companies that use\nmodern software development practices.\n\nIf it is important to get bids from in-state vendors, then know that odds are\ngood that there are many qualified small businesses that can deliver agile\ndevelopment programs in your state.^12 However, if you want to drive down the\nprice of bids, then it\u2019s important to consider working with remote or\ndistributed (rather than on-site) vendor teams.\n\nIn places like California, Washington, New York, Virginia, and Maryland, the\ncost of an agile team can be easily twice the cost of a team in the Midwest or\nthe northern plains \u2014 a difference of over $1 million each year with no\ndifference in quality. That\u2019s a price point at which it\u2019s worth rethinking how\nimportant it is that the team be local, or even in-state.^13 Encouraging\ndistributed vendor teams also gives you access to a wider talent pool, so it\u2019s\nsmart to embrace distributed working best practices to engage with development\nteams^14 and only require on-site visits when necessary (such as for user\nresearch).\n\nHow do you find those qualified small businesses? There are a number of cities\nand states that have created a pool of agile software vendors. For example,\nCalifornia\u2019s Department of Technology has a vendor pool that adds new\ncompanies on a rolling basis. Seek out and draw from these vendor pools, and\ninclude some of these companies in future RFP processes. Also, ask around\namong colleagues in other state agencies to see if they can recommend any\nvendors to include. Finally, try thinking like a software developer looking\nfor a job, and check out sites that are well-known for posting job\nopportunities and professional networking, to identify agile vendors in your\nstate. This entire process only takes a few hours.\n\nAlthough the procurement team will be tempted to seek out vendors who have\npreviously built a near-identical system, that\u2019s both unnecessary and limits\nthe vendor pool to just a few big, international companies. Instead, they\nshould widen their scope to look for vendors that have built something\nanalogous. A vendor that has built a website to book rental cars can build a\nwebsite to apply for backcountry camping permits. A lead developer who has\nbuilt a database to track the positions of comets can build a database to\ntrack state-owned vehicles. By seeking relevant expertise with this axis, the\nprocurement team will find plenty of developers who can get the job done.\n\n#### Checklist\n\n  * The RFP will be streamlined (no more than 20 pages), and comprehensible by software developers who do not normally work with government\n  * The acquisition plan includes reaching out to small vendors to encourage them to bid\n  * The RFP will not be hidden on a registration-required procurement website, but published openly on the web so the vendor community can share it\n  * The RFP will require that vendors name their key personnel in their proposals \u2014 no more than three people \u2014 such as the lead developer or the lead designer\n  * The acquisition plan includes interviewing the finalists about their proposed approach, questioning the named key personnel, not the vendor\u2019s sales staff\n  * Vendor employees will not be required to work on-site at a government facility\n  * Vendor teams and the government product owner will be permitted to use a desktop-based video call service, a real-time chat tool, and a public, Git-based version-control system, such as those available for use by remote employees of the General Service Administration and other tools commonly used by agile development teams\n\n#### Key questions\n\n  * Are there any benefits \u2014 political or otherwise \u2014 to awarding contracts to in-state vendors, or even requirements to do so? Might that limit the degree to which you can expand your vendor pool?\n  * Is $1 million per year savings for each scrum team sufficient to overcome any objections to remote teams?\n  * Has lightweight market research been done to know what vendors will be targeted with the RFP, rather than only issuing an RFI and hoping for the best?\n\n### Share your software\n\nAn agency\u2019s software is likely to be useful, in whole or in part, to other\nagencies within the state, to local and regional governments within the state,\nor to similar agencies in other states. Additionally, in many states software\ncreated as a work of government is inherently in the public domain, which\nmeans an open-records request is all that\u2019s necessary for software to become\npublic.\n\nIf the software is published openly, vendors\u2019 employees will be eager to work\non it \u2014 it becomes a rare case of work that they can add to their portfolio\nfor future jobs or share with friends, which helps to ensure that you\u2019re\ngetting their best work. Also, additional RFPs issued for the project can\ndirect vendors to the code that\u2019s already been written, allowing them to see\nexactly what they\u2019ll be working on or interfacing with. A federal agency\nfunding the work may be eager to find ways to share your software with other\nstates that they\u2019re also funding.\n\n#### Checklist\n\n  * The RFP will require that software source code be written and maintained in public on a social-coding platform (e.g., GitHub or GitLab), from day one\n  * The RFP will require that software be explicitly dedicated to the public domain or published under an open source license\n  * The RFP will use best security practices by requiring that software be strictly separated from data and secrets (e.g., passwords), with automated testing to make sure that separation is maintained\n  * The RFP will require that software be documented sufficiently well that a developer with no connection to the project can use it to run their own copy of the software\n\n#### Key questions\n\n  * Will the state or agency security office bristle at the prospect of publishing open-source software and block deployment of the software?\n  * Are there other agencies in the state or elsewhere around the country who are likely to benefit from this software? Can they be consulted prior to and during the development process?\n  * Will the agency\u2019s office of general counsel (or its equivalent) object to publishing software in the public domain or under an OSI-approved open source license?\n\n### Budget for software as an operational expense\n\nUnlike bridges or other capital infrastructure projects, custom software is\nnever \"done,\" so it\u2019s important to plan for it to be modified continuously.\nThat way it can serve today\u2019s agency needs, not yesterday\u2019s.\n\nFor small systems, this may require adding one or fewer FTEs to the agency\u2019s\nstaff of software developers. For large, flagship systems, this may require\nprocuring a team of developers to continually develop and maintain the\nsoftware.\n\nSoftware maintenance is sometimes budgeted for as if it is a different\nactivity than initially building software, but that is a mistake. Maintaining\nsoftware should mean simply continuing to modify it in response to identified\nuser needs, which change continuously along with laws, regulations, policies,\nbest practices, and technology. This requires the same skill sets,\nmethodology, and tasks as building a system in the first place. A proposal to\ntransition software development into an \"operations and maintenance\" (\"O&M\")\nphase should be seen as a red flag,\n\nRule of thumb: a \"scrum team\" of 5\u20139 developers costs $1\u20132 million per year,\ndepending on the cost of living in the area where the developers reside.\nFunding can be ramped up over the course of several budget cycles, as the\nrequesting agency demonstrates that they\u2019re successfully reducing risk,\ncontrolling costs, and delivering iteratively to end users.\n\nUltimately, this can provide agencies with a predictable source of funding for\nsoftware projects \u2014 replacing unpredictable capital expenditures \u2014 while\nsimultaneously providing the legislature with a predictable annual cost for\nall agency software projects.\n\n#### Checklist\n\n  * The agency recognizes that software must be improved continuously as long as it is in use, because \"maintenance\" is functionally the same as building software in the first place\n  * The agency plans to procure agile development services\n  * You have talked with the requesting agency to determine if they would prefer to receive funding over years, as a predictable stream of operational funding, instead of as a lump sum\n  * This approach has been coordinated with the governor\u2019s office, the budget office, agencies, and the state IT agency \u2014 this is likely a radical change that will require trust and cooperation between all parties\n  * If an agency\u2019s request is at a high risk of failure, you will allocate only a few million dollars in the first year, increasing funding as the project delivers value\n\n#### Key questions\n\n  * Is the requested funding going to be spent within a single budget period?\n  * Perhaps $50 million is being requested, but what value can be delivered to end users with $2 million? And the next $2 million? And so on?\n  * Is a federal agency funding the work amenable to taking an operational approach to the funding?\n\n### Ask technical questions of agencies\n\nBudget requests for custom software often feature non-technical people making\na technical proposal to other non-technical people. This process doesn\u2019t lend\nitself to asking key questions, such as many of those found throughout this\nhandbook. It is important to ask all of those difficult technical questions,\nand to insist on getting the right answers (see Appendix A for sample\nquestions and answers).\n\nIt is no kindness to fund a project that is going to fail. If the agency\ndoesn\u2019t know exactly what they want to buy, they\u2019re not going to get it.\n\n#### Checklist\n\n  * The agency will rely on the U.S. Digital Service\u2019s Digital Services Playbook\n  * If building a website, the agency will direct the vendor to use the United States Web Design System (USWDS)\n  * The agency will adhere to the Defense Innovation Board\u2019s \"Ten Commandments of Software\"\n  * The agency has read this handbook\n  * The rules and questions found in the Defense Innovation Board\u2019s \"Detecting Agile BS\" guide have been applied to and asked of the agency, and their answers are satisfactory\n\n#### Key questions\n\n  * What exactly does the agency want to buy? Why? Who will benefit?\n  * Which parts of the system will be custom? Which will be actual (not customized) COTS? How much will those updates cost? What will be done when a commercial component ends production \u2014 e.g., if the database company goes out of business?\n  * Who are the end users of your system? Have you talked to them? What do they want?\n  * Are you prepared for when changes need to be made?\n  * How much will it cost to move to a new system?\n  * What are you doing to avoid paying expensive change fees in the future?\n\n## Appendix A: Questions to ask\n\nWhen you are considering a budget request for a custom software project, it\nwill be difficult to consult this entire handbook to find the right questions\nto ask. Here are some basic, open-ended questions that you can ask to\ndetermine if a project is set up for success.\n\n### What are the goals of the project? What outcomes are prioritized?\n\nWrong answer: Anything technical in nature, instead of about improving the\nuser experience.\n\nRight answer: One or more specific user needs are named.\n\n### What is the user need that this project will address?\n\nWrong answer: Anything that doesn\u2019t name clear needs of end users identified\nvia user research.\n\nRight answer: The agency has determined specific needs based on interviews\nwith end users, and can name several of those needs specifically.\n\n### If the selected vendor doesn\u2019t perform adequately, how difficult will it\nbe to terminate the contract? How long will it take to replace them with\nanother vendor? How much do you think that will cost?\n\nWrong answer: \"We would be very reluctant to terminate the contract. It would\ntake months or years to replace them with a new vendor. Significant staff time\nwould be required to do that, and it would set our project back by many\nmonths. Once we have a system, we\u2019d have to start all over if we decide to\nchange vendors.\"\n\nRight answer: \"It will be a time and materials contract, so we could stop\nassigning work to the vendor at any time, and that would be the functional end\nof the contract. We could reissue the RFP and have a new vendor onboarded\nwithin six weeks. It would require a small amount of staff time, and it would\nset the project back only by those six weeks.\"\n\n### Will the RFP include requirements for how the system will operate? If so,\nhow many requirements are included?\n\nWrong answer: \"We\u2019ve spent the past year reviewing our business requirements,\nand we\u2019ve written hundreds of requirements to include in the RFP, to ensure\nthat we get exactly what we need.\"\n\nRight answer: \"We\u2019re more focused on the outcomes we want from the new system.\nWe\u2019ve developed a backlog of user stories to help guide the team\u2019s work,\nrather than producing a detailed list technical requirements.\"\n\n### How long do you expect the RFP will be?\n\nWrong answer: \"We\u2019ve developed several hundred pages of system requirements\nalong with 50 more pages of standard terms and conditions.\"\n\nRight answer: \"Less than 20 pages, and we expect to keep this under the\nstate\u2019s simplified procurement threshold, to make it easier, cheaper, and\nfaster for new vendors to bid on the project.\"\n\n### Do you anticipate issuing a fixed price contract, or a time and materials\ncontract?\n\nWrong answer: \"Fixed price, because it\u2019s the best way to control vendor\ncosts.\"\n\nRight answer: \"Time and materials, because it\u2019s the best way to retain the\nflexibility we need to respond to user needs, manage to unforeseen technical\nchallenges, and ensure vendors that aren\u2019t delivering what we need can be\nchanged without putting the project at risk.\"\n\n### What value will be delivered to the users within six months?\n\nWrong answer: \"None \u2014 it won\u2019t be ready by then. We plan to show it to users\nwhen everything is finished.\"\n\nRight answer: Specific examples are named.\n\n### Who will be the product owner?\n\nWrong answer: \"What is a \u2019product owner\u2019?\"\n\nRight answer: A specific person is named, or they\u2019re training in-house staff\nto take on this role.\n\n### What software development process will be used?\n\nWrong answer: \"Waterfall,\" or any answer that indicates a lack of\ncomprehension.\n\nRight answer: \"Agile,\" \"Extreme Programming\" (XP), or \"Scrum\" are all\nacceptable answers.\n\n### On the team that prepared this request, who has experience developing\nsoftware?\n\nWrong answer: \"Nobody.\"\n\nRight answer: A specific person is named.\n\n### How often will work be deployed into production?\n\nWrong answer: \"When it\u2019s done.\"\n\nRight answer: \"At the end of each sprint.\"\n\n### Will the project automate testing? Integration? Deployment? Security\ntests?\n\nWrong answer: \"We\u2019re looking into that.\"\n\nRight answer: \"Yes, from day one.\"\n\n### How much will change orders cost?\n\nWrong answer: Any response that foresees change orders of any kind.\n\nRight answer: \"We expect the system to change constantly in response to new\nuser needs, new technology and new policy so that\u2019s why we\u2019re using a time and\nmaterials contract and an agile development approach to lower the cost of\nresponding to these changes.\"\n\n### How will you know if the project is on track and that contractors are\ndelivering as promised?\n\nWrong answer: \"We\u2019re contracting with an independent verification and\nvalidation (IV&V) expert to provide us with monthly reports on the project\u2019s\nstatus.\"\n\nRight answer: \"Vendors will provide frequent demonstrations of working\nsoftware that reflect our priorities, meet the technical standards of the\nQASP, and provide value to end users. If these standards are not met, and\nvalue to end users isn\u2019t shown within six months, they\u2019ll be terminated.\"\n\n### Who will own the software?\n\nWrong answer: \"The vendor.\"\n\nRight answer: \"The state\" or \"it will be committed to the public domain.\"\n\n## Appendix B: Sample Quality Assessment Surveillance Plan (QASP)\n\nPer the \"Require demos, not memos\" best practice, here is a sample QASP, which\nshould be incorporated into agile software RFPs.\n\nDeliverable| Performance Standard(s)| Acceptable Quality Level| Method of\nAssessment  \n---|---|---|---  \nTested Code| Code delivered under the order must have substantial test code\ncoverage and a clean code baseVersion-controlled, public repository of code\ncomprising the product, which will remain in the government domain| Minimum of\n90% test coverage of all code| Combination of manual review and automated\ntesting  \nProperly Styled Code| GSA 18F Front-End Guide| 0 linting errors and 0\nwarnings| Combination of manual review and automated testing  \nAccessibility| Web Content Accessibility Guidelines 2.1 AA standards| 0 errors\nreported using an automated scanner, and 0 errors reported in manual testing|\nPa11y  \nDeployed| Code must successfully build and deploy into staging environment|\nSuccessful build with a single command| Combination of manual review and\nautomated testing  \nDocumented| All dependencies are listed and the licenses are documented. Major\nfunctionality in the software/source code is documented. Individual methods\nare documented inline using comments that permit the use of documentation-\ngeneration tools such as JSDoc. A system diagram is provided| Combination of\nmanual review and automated testing, if available| Manual review  \nSecurity| OWASP Application Security Verification Standard 4.0, Level 2| Code\nsubmitted must be free of medium- and high-level static and dynamic security\nvulnerabilities| Clean tests from a static testing SaaS (such as npm audit)\nand from OWASP ZAP, along with documentation explaining any false positives  \nUser research| Usability testing and other user research methods must be\nconducted at regular intervals throughout the development process (not just at\nthe beginning or end)| Artifacts from usability testing and/or other research\nmethods with end users are available at the end of every applicable sprint, in\naccordance with the vendor\u2019s research plan| Manual review  \n  \n## Endnotes\n\n1\\. Projects valued at $6M or greater, in Europe and the United States, that\nwere completed satisfactorily, on time, and within budget. From The Standish\nGroup\u2019s \"Haze,\" based on their CHAOS database. \u21a9\ufe0e\n\n2\\. Of the $90 billion in federal IT spending in FY2019, 80% is allocated for\nmaintenance of legacy software, according to the GAO\u2019s June 2019 report,\n\"Agencies Need to Develop Modernization Plans for Critical Legacy Systems.\"\nThey write that inadequately-maintained legacy software leads to security\nrisks, unmet mission needs, staffing issues, and increased costs. \u21a9\ufe0e\n\n3\\. The National Association of State Budget Officers\u2019 \u201c2018 State Expenditure\nReport\u201d finds that federal grants provide an average of 31.2% of each state\u2019s\nbudget, climbing by 5.7% in FY2018. \u21a9\ufe0e\n\n4\\. A user story reads in form of \"as a [role], I need [this thing], so I can\n[accomplish this].\" For example, \"as a social worker, I need case notes to be\ncached on my phone, so that I can access case notes in areas without mobile\nphone service.\" All technical work is done in the service of addressing a user\nstory. \u21a9\ufe0e\n\n5\\. Stack Overflow\u2019s 2018 survey of 57,075 developers found that 85% of\nprofessional software developers use agile. And a 2015 study by Hewlett\nPackard found that \"the vast majority of organizations [they] surveyed\nreported that today they primarily use Agile methods.\" The process described\nhere is not extraordinary in any way. \u21a9\ufe0e\n\n6\\. For more on DevOps, see the Defense Innovation Board\u2019s \"Is Your\nDevelopment Environment Holding You Back? A DIB Guide for the Acquisition\nCommunity.\" \u21a9\ufe0e\n\n7\\. For details, see the U.S. Department of Health & Human Services\u2019 Office of\nthe Inspector General report about the Healthcare.gov failure, \"Case Study of\nCMS Management of the Federal Marketplace\" and Harvard Business School case\nstudy, \"The Spectacular Fall and Fix of HealthCare.gov.\" \u21a9\ufe0e\n\n8\\. For an example RFP, see the U.S. Tax Court\u2019s 2018 EF-CMS RFQ, which\nincludes a QASP, under the \"Deliverables and Performance Standards\" section.\n\u21a9\ufe0e\n\n9\\. For more about the difference between O&M and continuous agile\ndevelopment, read \"Software maintenance is an anti-pattern\" on the 18F blog.\n\u21a9\ufe0e\n\n10\\. In The Standish Group\u2019s 2014 CHAOS Report, based on a survey of 25,000\nsoftware projects, they found that software projects that cost more than $10\nmillion succeed only 8% of the time. Outcomes improve substantially as the\ndollar value is reduced, peaking at a 70% success rate for projects under $1\nmillion. \u21a9\ufe0e\n\n11\\. In The Standish Group\u2019s 2014 CHAOS Report, based on a survey of 25,000\nsoftware projects, they found that software projects\u2019 outcomes get worse as\nmore money is spent. Limiting the spending on each contract segments the\nproject into smaller components, making each component \u2014 and the entire\nproject \u2014 more likely to succeed. \u21a9\ufe0e\n\n12\\. Alaska\u2019s Department of Health & Social Services faced this challenge in\n2017, and their Contracts and Procurement Manager wrote about the process that\nthey used to attract small, agile, Alaskan vendors in \"How Alaska is using\ntransparency to attract modern software vendors.\" \u21a9\ufe0e\n\n13\\. The Bureau of Labor Statistics provides state-level wage information for\nsoftware developers, which shows that the difference between the most\nexpensive developers (Washington state) and the least expensive (Puerto Rico)\nis a 150% wage gap. Even within states there can be tremendous variation in\nlabor costs between urban areas and rural areas. As a result, insisting that\nvendor teams work on-site can double the cost of software. \u21a9\ufe0e\n\n14\\. See \"18F\u2019s best practices for making distributed teams work\" for\nspecifics. \u21a9\ufe0e\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
