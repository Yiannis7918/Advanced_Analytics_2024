{"aid": "40087091", "title": "Dev/Prod Parity with HTTPS on Localhost", "url": "https://noop.dev/blog/https-traffic-routing-for-localhost/", "domain": "noop.dev", "votes": 1, "user": "milin82", "posted_at": "2024-04-19 14:14:12", "comments": 0, "source_title": "HTTPS Traffic Routing for Localhost", "source_text": "HTTPS Traffic Routing for Localhost\n\nnoop_\n\nBlog Docs Community Changelog Log in\n\n  * Blog\n  * Docs\n  * Community\n  * Changelog\n  * Log in\n\n#### Recent posts\n\n  * Blog\n\nTest Cloud Deployments Locally 2024-04-10\n\n  * Blog\n\nHTTPS Traffic Routing for Localhost 2024-03-27\n\n  * Blog\n\nBuild Apps Not Infrastructure 2024-03-20\n\n  * Blog\n\nAnnouncing Workshop 2024-02-28\n\n  * Guide\n\nLaunch a Rails App 2024-01-26\n\n  * All posts \u2192\n\nBlog\n\nMarch 27, 2024\n\n# HTTPS Traffic Routing for Localhost\n\nJoe Kendall\n\nIntroduce Dev/Prod Parity with HTTPS on localhost without changing your\nexisting development setup or sending local traffic over the Internet.\n\nOne of the most common divergences between local development and production\ndeployment is the lack of HTTPS on localhost. It\u2019s not surprising that the\nproblem exists, solutions and workarounds are usually tedious and still\ndivergent.\n\nNoop Workshop provides HTTPS Endpoints with customizable subdomains (i.e.\nmyapp.local.noop.app). Certificates are managed automatically and no Traffic\nleaves the development machine. Get started.\n\nWorkshop adds a routing layer on top of your local development environment, in\nmost cases it doesn\u2019t require changes to the existing setup. Of course, it\u2019s\npossible to run your entire local dev environment in Workshop (that will be\nthe topic of another post).\n\nHTTPS for local development is becoming increasingly necessary. As apps become\nmore complicated and require stricter security controls the lack of HTTPS\nlocally, creates a bigger divide between the deployed environment and local\ndevelopment. On top of that, some development scenarios, certain OAuth2\nproviders for example, require HTTPS, period. Without HTTPS there\u2019s no hope\nfor developing those features. Of course, solutions and workarounds exist. But\nwe think they can be easier to use.\n\nWorkshop manages endpoint traffic similar to the routing systems of popular\nCDNs. Once an endpoint is created, routing rules are configured to get the\ntraffic to the right place, in this case, your local development environment.\nWorkshop hosts and manages certificates at the routing layer leaving the\napplication process to run unchanged.\n\n## Get Started\n\nHere\u2019s how to set up HTTPS Endpoints locally with Noop:\n\n### 1\\. Install Noop Desktop\n\nDownload Noop Linux\n\nmacOS (Apple Silicon)macOS (Intel)WindowsLinux\n\nReleases\n\n### Be the first to know!\n\nLinux support isn't available today, but we are working on it.\n\n### 2\\. Create an Endpoint\n\nThe first thing that needs to be done is to create an Endpoint. The endpoint\nis a host name that resolves and routes Traffic.\n\nGive the endpoint a name.\n\nAnd done.\n\n### 3\\. Point the Endoint at a Local Webserver\n\nNext we\u2019ll configure the Route that will forward traffic from our Endpoint to\nthe local webserver. Important note, some frameworks require a flag to expose\ntheir port on the host network. Using the popular Javascript framework vite\nfor example requires a --host flag.\n\nOnce we know the host IP address we can configure the proxy route. Start by\ncreating a route:\n\nIn this particular example we will send all Traffic to the local webserver (we\ncould also limit the Traffic to specific paths, HTTP methods and other more\nfine grained criteria).\n\nOnce the address, port, security (in this case the target will be HTTP) and\nRoute matching criteria are set, update the Endpoint routes:\n\nOnce that\u2019s complete, the chosen endpoint will forward traffic to our\nwebserver running on the host machine.\n\n## How it Works\n\n  * Once Workshop is installed it downloads an SSL certificate for *.local.noop.app.\n  * There is an DNS A record for *.local.noop.app that points to 127.0.0.1\n  * Workshop starts a Traffic routing process running on the local machine on port 443\n  * The routing process uses the certificate to sign requests and forward them to your local web server process\n  * All certificate renewals are handled by Workshop, it\u2019s not something you ever need to think about\n\n## Other Notes\n\nThe articles linked above cover some of the alternatives. Also worth\nmentioning: certain frameworks attempt to solve the problem automatically, and\nsome development environments can be modified to create an HTTPS layer,\nsimilar to a load balancer or CDN in a cloud environment (a Traefik container\nin a Docker Compose app, for example).\n\n## On this page\n\n  1. Get Started\n\n    1. 1\\. Install Noop Desktop\n\n    2. 2\\. Create an Endpoint\n\n    3. 3\\. Point the Endoint at a Local Webserver\n\n  2. How it Works\n\n  3. Other Notes\n\n## Footer\n\n### Support\n\n  * Documentation\n  * Community\n  * Help and Advice\n\n### Company\n\n  * Blog\n  * Changelog\n\n### Legal\n\n  * Privacy\n  * Terms\n  * License\n\nInstagram X.com GitHub\n\n\u00a9 2024 Noop, Inc. All rights reserved.\n\nThis website uses cookies to collect visitor analytics data (Google Analytics)\nand provide interactive support through our chat widget (Intercom). See our\nPrivacy Policy.\n\n", "frontpage": false}
