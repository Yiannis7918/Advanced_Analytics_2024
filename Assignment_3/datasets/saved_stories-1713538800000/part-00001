{"aid": "40084633", "title": "Unleash Git Power with User Configuration", "url": "https://8hob.io/posts/unleash-git-power-with-user-configuration/", "domain": "8hob.io", "votes": 1, "user": "xuhdev", "posted_at": "2024-04-19 08:57:18", "comments": 0, "source_title": "Unleash Git Power with User Configuration", "source_text": "Unleash Git Power with User Configuration | 8 Hobbies Technology\n\nHome \u00bb Posts \u00bb Miscellanous\n\n# Unleash Git Power with User Configuration\n\nApril 11, 2024 \u00b7 (updated April 16, 2024) \u00b7 4 min \u00b7 709 words \u00b7 8 Hobbies\n\nGit is an open source distributed version control system. It is currently the\nmost popular version control system according to various surveys, and has been\nthe core driver of many popular development platforms, such as GitHub, GitLab,\nBitbucket, etc.\n\nWhile Git comes with a decent default configuration, it is far from the full\npower of Git. In this post, we will walk through some Git user configuration\nthat unleash more power within Git.\n\n## Configuration#\n\n### commit.verbose#\n\n    \n    \n    git config --global commit.verbose true\n\nTurning commit.verbose on enables Git to show what changes would be committed\nat the bottom of the commit message. Below is a sample output after running\ngit commit:\n\n    \n    \n    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n\n|\n\n    \n    \n    Correct a typo in comment # Please enter the commit message for your changes. Lines starting # with '#' will be ignored, and an empty message aborts the commit. # # On branch typo # Changes to be committed: # modified: src/is-one-of.ts # # ------------------------ >8 ------------------------ # Do not modify or remove the line above. # Everything below it will be ignored. diff --git a/src/is-one-of.ts b/src/is-one-of.ts index ce96317cfd92..c89d482908a2 100644 --- a/src/is-one-of.ts +++ b/src/is-one-of.ts @@ -14,7 +14,7 @@ * * This makes sense, because when `fruits` is dynamically constructed by the logic of the program, * an unmatched element type is not intended and likely an error. However, the third line in the - * above code snippet would fail to compile if array contains literal types: + * above code snippet would fail to compile if `fruits` contains literal types: * * ```ts * const fruits = [\"apple\", \"orange\", \"grape\"] as const; // or new Set([\"apple\", \"orange\", \"grape\"] as const);  \n  \n---|---  \n  \nBefore turning on commit.verbose, git commit would not show the highlighted\nlines (lines 12\u201324).\n\n### diff.colorMoved#\n\n    \n    \n    git config --global diff.colorMoved default git config --global diff.colorMovedWS allow-indentation-change\n\ndiff.colorMoved and diff.colorMovedWS control how Git displays moved lines\nwhen showing diff. Setting diff.Moved to default enables moved line detection.\nSetting diff.colorMovedWS to allow-indentaiton-change to ignore whitespace in\nmoved line detection. In effect, setting these options make Git display moved\nlines differently from changed lines:\n\nBefore| After  \n---|---  \n  \n### column.ui#\n\n    \n    \n    git config --global column.ui always\n\ncolumn.ui specifies whether supported commands, such as git branch, git tags,\netc. should output in columns. For example, without the settings above, git\nbranch would output all branches, one occupying each line:\n\n    \n    \n    $ git branch branch1 branch2 branch3 * branch4 master\n\nAfter setting column.ui to always, the same command outputs branches in\ncolumns:\n\n    \n    \n    $ git branch branch1 branch2 branch3 * branch4 master\n\nThis is especially helpful when the number of output is large.\n\n### blame.coloring#\n\n    \n    \n    git config --global blame.coloring highlightRecent\n\nblame.coloring controls the coloring scheme of the output of git blame. By\nsetting it to highlightRecent, recent changes are highlighted. In the example\nbelow, the most recent changes are highlighted in red, while the earlier\nchanges are highlighted in light blue.\n\n### fetch.prune#\n\n    \n    \n    git config --global fetch.prune true\n\nSetting fetch.prune to true removes any remote-tracking references that no\nlonger exist on the remote when fetching. This includes branches that only\nexisted on remote and were deleted later. By deleting these branches locally\nafter they are deleted on the remote, Git makes the local repository cleaner.\n\n### status.showStash#\n\n    \n    \n    git config --global showStash true\n\nSetting status.showStash to true makes git status also display stash\ninformation. This helps uncover forgotten stashed changes.\n\n### log.follow#\n\n    \n    \n    git config --global log.follow true\n\nSetting log.follow to true continues listing the history of a single file\nbeyond renaming.\n\nFor example, let us consider a file that has been renamed from Changelog-\nlatest.txt to Changelog-1.0.txt in a repository. After setting log.follow to\ntrue, git log Changelog-1.0.txt shows changes that have occurred both before\nand after the renaming. Otherwise, Git would only show the changes that have\noccurred after the renaming.\n\n### fetch.parallel#\n\n    \n    \n    git config --global fetch.parallel 0\n\nfetch.parallel controls the maximal number of fetch operations to be run in\nparallel at a time. With fetch.parallel set to 0, Git uses a reasonable\nmaximal number and speeds up fetching.\n\n### user.useConfigOnly#\n\n    \n    \n    git config --global user.useConfigOnly true\n\nSetting user.useConfigOnly to true prevents Git from guessing user\u2019s name and\nemail when they are unspecified. If you use multiple Git identities, this can\nbe useful to prevent confusion.\n\n  * Git\n\nWould like to comment? Feel free to send an email to hong AT 8hobbies DOT com!\n\n\u00a9 2024 8 Hobbies, LLC \u00b7 Privacy Policy \u00b7 Powered by Hugo & PaperMod\n\nDisclaimer: The content of this website is distributed in the hope that it\nwill be useful, but without any warranty; without even the implied warranty of\nmerchantability or fitness for a particular purpose.\n\n", "frontpage": false}
