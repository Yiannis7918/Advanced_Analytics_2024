{"aid": "40021782", "title": "Emacs Info Expressions", "url": "https://susam.net/emacs-info-expressions.html", "domain": "susam.net", "votes": 1, "user": "susam", "posted_at": "2024-04-13 09:36:48", "comments": 0, "source_title": "Emacs Info Expressions - Susam Pal", "source_text": "Emacs Info Expressions - Susam Pal\n\n# Emacs Info Expressions\n\nBy Susam Pal on 12 Apr 2024\n\nOn #emacs IRC or Matrix channels, we often share references to the built-in\nEmacs documentation as Elisp expressions that look like this:\n\n    \n    \n    (info \"(emacs) Basic Undo\")\n\nHere is another example:\n\n    \n    \n    (info \"(emacs) Word Search\")\n\nIf the person on the other end evaluates this Elisp expression in their Emacs,\nthen they land on the corresponding section of the manual. For example, if the\nabove Elisp expression is evaluated, Emacs shows the section \"Word Search\" in\nthe built-in documentation browser.\n\nIsn't it clumsy to type Elisp expressions like this to share a pointer to a\nsection of a manual with others? Turns out, it is not. This is Emacs, so of\ncourse there are key-bindings to create these Elisp expressions automatically.\nFor example, say, while helping another Emacs user we type M-x info-apropos\nRET version control RET and land on the section \"Branches\" and realise that\nthis is the section that the person we are trying to help should read. Now\nwhen we are on this section, we can simply type c and Emacs will copy the name\nof the current Info node to the kill ring. This name looks like this:\n\n    \n    \n    (emacs) Branches\n\nNow we can go to the *scratch* buffer (or any buffer) and type the following\non a fresh new line to create the Elisp expression:\n\n    \n    \n    \" \" C-b C-y C-a C-SPC C-e M-( info C-a C-k C-/\n\nThis creates the following Elisp expression we need and copies it to the kill\nring:\n\n    \n    \n    (info \"(emacs) Branches\")\n\nThat's how I do it. The above rather long key sequence first types two double-\nquotes next to each other (\" \"), then moves the cursor back to go within the\ndouble-quotes (C-b), then pastes the text (emacs) Branches from the kill ring\n(C-y), then selects the pasted text (C-a C-SPC C-e), then surrounds it within\nparentheses (M-(), then inserts the text info just after the opening\nparentheses, and finally we copy the resulting expression to the kill ring\n(C-a C-k C-/).\n\nThis may seem like a lot of work but for someone like me who has been using\nEmacs for many years now, all of this muscle memory, so I happen to type them\nwithout even realising what I am typing. It is sort of like playing the piano.\nWhen you play your favourite song on the piano, you don't think of the keys\nyou are pressing. It is all muscle memory. You just let your brain and fingers\ndo the work and your conscious being can simply enjoy the music. It's like\nthat with Emacs too.\n\nNevertheless, you don't have to form these Elisp expressions in exactly this\nway. As long as you type c in the Emacs info buffer, the name of the current\nInfo node is copied to the kill ring. After that you could copy that node name\nto anywhere you like and the form info expression out of it anyway you like.\nThat could mean typing out the rest of the expression manually or recording a\nkeyboard macro or writing a little helper Elisp function that does this for\nyou everytime you need to do this.\n\nThe person who receives this info expression can visit the corresponding\nsection of the manual simply by evaluating it. For example, after copying the\nexpression in Emacs, they could simply type C-y C-e to paste the expression\ninto a buffer and evaluate it immediately. Alternatively, they might want to\ntype M-: C-y RET to bring the eval-expression minibuffer, paste the\nexpression, and evaluate it.\n\nComments | #emacs | #technology\n\n\u00a9 2001\u20132024 Susam Pal\n\n", "frontpage": false}
