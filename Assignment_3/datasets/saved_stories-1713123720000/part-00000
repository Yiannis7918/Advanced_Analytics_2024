{"aid": "40030968", "title": "Lessons from Individual Master File, the Software Modernization Project", "url": "https://spin.atomicobject.com/modernize-individual-master-file/", "domain": "atomicobject.com", "votes": 1, "user": "ingve", "posted_at": "2024-04-14 13:41:42", "comments": 0, "source_title": "From COBOL to the Cloud? Lessons from Individual Master File, the Massive Software Modernization Project", "source_text": "IRS & Individual Master File: Lessons in Software Modernization\n\n\u2190 Back to Blog Home\n\n# From COBOL to the Cloud? Lessons from Individual Master File, the Massive\nSoftware Modernization Project\n\nEvolving the Industry\n\nby: Brittany Hunter\n\nApril 14, 2024\n\n  * Twitter\n  * Facebook\n  * Linkedin\n  * Hackernews\n\n### Article summary\n\n  * Lesson 1: Buy for capabilities and trust, not price.\n  * Lesson 2: Falling behind is risky and costly.\n  * Lesson 3: Business logic changes lead to complexity and modernization cost increases.\n  * Lessons from Individual Master File\n\nIn the 1960s, as the Apollo missions were getting underway, another government\nagency was quietly making their own strides in technology: the IRS, with help\nfrom IBM, began using the Individual Master File (IMF). The IMF is a running\nrecord of individual tax events for each taxpayer in the U.S., spanning\ndecades. The IMF is written in assembly and COBOL. The IRS relies on this\nantiquated program to this day, despite billions of dollars spent and several\nfailed attempts to modernize it.\n\nI love a good software project story, and the IRS\u2019 story is a juicy one.\nReports of their difficulty with technology modernization begin in the 1980s\nand continue today. Currently, they project that the IMF will finally be\nretired in 2030. It is the oldest technology system still operational in the\nUS government. In honor of Tax Season 2024, I thought it would be fun to look\nat what we can learn from the IRS\u2019 failures in software modernization.\n\n## Lesson 1: Buy for capabilities and trust, not price.\n\nIn 1986, the IRS canceled a $76 million, multi-year effort to replace its\naging computer system. This happened after years of fraught tax seasons, with\ndelays, errors, and lost records holding back taxpayers\u2019 tax returns. After a\nshady bidding process, the losing vendors protested that the system selected\nwasn\u2019t capable of running COBOL to federal standards. An administrative judge\nruled that the contract was full of errors. Additionally, it underestimated\nthe true cost of the system, which he placed at $101 million. An agency\nofficial testified that \u201cthoroughness took a back seat to expediency\u201d in the\nvendor selection process and was quoted as saying, \u201cI basically pretty much\nstarted accepting the bottom-line figures in the proposals.\u201d\n\nFortunately, hardware compatibility is much less of a factor in the buying\nprocess these days. But here\u2019s the reality: software modernization projects\nare rife with complexity and unknowns. It is impossible to accurately estimate\nhow long it will take to replace functionality built up for years or decades.\nLooking at the bottom-line cost is not the best barometer for a vendor\u2019s\nability to smoothly transition you from your old system to a shiny new one.\nAnd, as much as you need to get this long-procrastinated project underway,\nrushing through the bidding process can be a huge mistake.\n\n### Key Takeaway\n\nTake your time when selecting a vendor. Pay attention to how deeply they seek\nto understand your business and your needs. When competing vendors come in\nwith differing estimates, discuss with them and see how they respond. Most\nmodernization projects are both difficult and essential. Choose the vendor you\nfeel excited to work with and believe can get the job done.\n\n## Lesson 2: Falling behind is risky and costly.\n\nThis interesting nugget from a 1990 New York Times article caught my eye:\n\nIn 1976, concerned about the misuse of I.R.S. data during the Nixon\nAdministration, President Carter and Congress joined in halting an I.R.S. plan\nto purchase a new generation of computer equipment. Instead, the agency was\ninstructed to make incremental improvements in its existing systems.\n\nIs it possible the repercussions of this decision are felt by the IRS to this\nday? By 1976, their existing computer systems were a decade old. Throughout\nthe 1980s, project after project to revitalize their key systems were started,\nand then scrapped. Meanwhile, the technology aged and their reliance on it\ngrew \u2013 as did the cost to upgrade.\n\nIt is always easier and cheaper to upgrade to the next version of something,\nversus skipping a generation (or 10). It can be tough to invest to upgrade\nsomething that seems to be working \u201cjust fine\u201d and kick that cost down the\nroad. But those costs pile up.\n\n### Key Takeaway\n\nIf your business depends on your custom software to run, it is essential to\nkeep your software in good shape. Invest in ongoing maintenance to upgrade\nlibraries and frameworks, maintain security, and monitor performance. And the\nminute your technology\u2019s end-of-life is announced, it\u2019s past time to modernize\nor migrate to a new platform.\n\n## Lesson 3: Business logic changes lead to complexity and modernization cost\nincreases.\n\nOne of the key difficulties of replacing the Individual Master File is that\nthe tax code has changed over time. Each update of the tax code required\nchanges to the IMF and how it handles the data contained within it. Old\nentries needed to be preserved, but new entries needed to adhere to updated\nstandards. This created enormous complexity in the IMF. And, the complexity\nwill continue to grow with every tax code change, until the IRS can retire it.\n\nThis complexity was on full display in 2021, when the IRS needed to deliver\nCARES Act economic stimulus payments on a quick timeline. I can only imagine\nhow stressed those programmers were, trying to update the Individual Master\nFile in time to issue payments. They actually missed the deadline. Many edge\ncases resulted in many people not getting payments, or getting them late. And\nlatent code from a 2007 update (the last time the government issued an\neconomic stimulus payment) sent false information about their stimulus payment\nand tax liability to over 109,000 people. What\u2019s more, key people were\ndiverted from the replacement effort to support the changes needed to comply\nwith the CARES Act \u2013 directly contributing to the ongoing schedule delays.\n\n### Key Takeaway\n\nIt\u2019s important to recognize that the longer your business software has been in\nuse, the more difficult it will be to replace. You\u2019ll be faced with tough\ntradeoffs. Responding to urgent business needs can impact the delivery\ntimeline for your new software. It\u2019s critical to minimize disruption wherever\npossible, to keep moving forward. Work to decrease dependence on the old\nsystem: instead of trying to move things over all at once, try to build in a\nway that segments of the business can move over. Invest in building mechanisms\nto import records from the old system on demand or to keep the two systems in\nsync during the modernization process.\n\n## Lessons from Individual Master File\n\nSoftware modernization projects are difficult and painful for businesses to\nundertake. If your business depends on software (and what business doesn\u2019t?),\nyour best way to avoid this pain and difficulty is to keep investing in your\nsoftware. Don\u2019t defer maintenance, and proactively plan when it\u2019s time to\nmigrate to a new technology platform. Don\u2019t use niche, emerging, or\nproprietary technologies to drive your business \u2013 look for widely-used,\nactively-maintained frameworks and platforms. Think and budget for the long\nterm when it comes to adopting new technology in your business. It\u2019s easy to\nbecome dependent on software, and difficult and expensive to manage big\nchanges.\n\nSoftwarebusinessmodernization\n\nBrittany Hunter Determined to help you envision, build, and launch the best\npossible product, on-time and on-budget. Passionate practitioner of human-\ncentered design, and a firm believer in whole-team collaboration.\n\nAll Posts \u2192\n\n### Related Posts\n\n  * Evolving the Industry\n\n## Why We Should Stop Using Chromium-Based Browsers\n\n  * Evolving the Industry\n\n## Open Source Insights and Innovations: Reflections on All Things Open 2023\n\n  * Evolving the Industry\n\n## Is AI an Existential Threat to Tech Workers?\n\n## Keep up with our latest posts.\n\nWe\u2019ll send our latest tips, learnings, and case studies from the Atomic\nbraintrust on a monthly basis.\n\n[mailpoet_form id=\"1\"]\n\nConversation\n\n### Join the conversation Cancel reply\n\n### The Software Life Category\n\n  * Growing as Makers\n  * Extracurricular Activities\n  * Evolving the Industry\n  * Personal Optimization\n\nRelated Posts\n\nEvolving the Industry\n\n# Why We Should Stop Using Chromium-Based Browsers\n\nEvolving the Industry\n\n# Open Source Insights and Innovations: Reflections on All Things Open 2023\n\nEvolving the Industry\n\n# Is AI an Existential Threat to Tech Workers?\n\n### Tell Us About Your Project\n\nWe\u2019d love to talk with you about your next great software project. Fill out\nthis form and we\u2019ll get back to you within two business days.\n\nShare Your Project\n\nAtomic is a software design + development consultancy.\n\n\u00a9 2024 Atomic Object LLC\n\n##### Explore\n\n  * Careers\n  * Diversity\n  * Resources\n  * Atomic Blog\n\n##### Offices\n\n  * Grand Rapids\n  * Ann Arbor\n  * Chicago\n  * Raleigh-Durham\n\n##### Details\n\n  * Contact\n  * Media\n  * Privacy Policy\n\n", "frontpage": false}
