{"aid": "40088725", "title": "ReScript 11.1 is out Unleashing ReScript from React", "url": "https://rescript-lang.org/blog/release-11-1-0", "domain": "rescript-lang.org", "votes": 1, "user": "jderochervlk", "posted_at": "2024-04-19 16:22:42", "comments": 0, "source_title": "ReScript 11.1 | ReScript Blog", "source_text": "ReScript 11.1 | ReScript Blog\n\nApr 19, 2024\n\n# ReScript 11.1\n\nUnleashing ReScript from React\n\nReScript Team\n\nCore Development\n\nAt the beginning of the year, the ReScript team released ReScript 11.0, which\nlaid ground work for a lot of possible improvements to make it easier to\ninteract with the JavaScript ecosystem.\n\nThis next minor has some wonderful additions to the ReScript toolbelt for you\ntoday.\n\nUse your favorite package manager to install the new compiler release, e.g.:\n\n    \n    \n    SH\n    \n    npm install rescript@11.1\n\nFind a list of all the new features below:\n\n## JSX for more than React\n\nHistorically, ReScript has focused mainly on React for its frontend support.\nThis has led to ReScript having a great JSX transform built into the language\nitself. However, that JSX transform has been quite difficult to use with\nanything but React.\n\nWith v11.1, that changes! The JSX transform can now be configured to work with\nany framework. First class React support is of course still the same, and\nremains a priority. This makes it possible to integrate any other framework's\nJSX idiomatically in ReScript. And, all the tooling like autocompletion of\nprop names and types just works.\n\nMany popular frameworks like Vue and Preact use JSX. But, JSX is also becoming\nmore and more ubiquitous, and these days JSX can also be used for everything\nfrom building CLI apps to responsive e-mail templating. We're happy that\nReScript users will now be able to leverage all of these innovations in a more\nidiomatic way than before.\n\nHere's an example of what a Preact integration could look like:\n\n    \n    \n    RESCRIPT\n    \n    // Greet.res // @jsx.component works the same as @react.component does in React @jsx.component let make = (~name) => { <div> {Preact.string(\"Hello \" ++ name)} </div> }\n\nRead more in the new documentation on the generic JSX transform.\n\n## Tagged template literals\n\nThis release comes with support for tagged templates.\n\nA tag function in JavaScript is a function that expects an array of strings\nand variadic parameters as input. Now it's possibe to bind to such functions\nwith the new @taggedTemplate decorator:\n\nReScriptJS Output\n\n    \n    \n    // see https://bun.sh/docs/runtime/shell type result = {exitCode: int} @module(\"bun\") @taggedTemplate external sh: (array<string>, array<string>) => promise<result> = \"$\" let filename = \"index.res\" let result = await sh`ls ${filename}`\n\nOf course you can also create your own tag function in ReScript now as well,\nit is just a function with the following signature.\n\n    \n    \n    RESCRIPT\n    \n    let myTagFunction : (array<string>, array<'param>) => 'output\n\nRefer to the docs to find a detailed example.\n\n## Import attributes\n\nImport attributes is a JS feature that is currently in standardization, but is\nalready implemented by many JS tools. Now, ReScript supports it too, as long\nas the compiler is configured to output ES6.\n\nReScriptJS Output\n\n    \n    \n    @module({from: \"./myJson.json\", with: {type_: \"json\", \\\"some-identifier\": \"yep\"}}) external myJson: Js.Json.t = \"default\" Console.log(myJson) @module({from: \"./myCss.css\", with: {type_: \"css\", \\\"some-identifier\": \"yep\"}}) external buttonCss: string = \"button\" Console.log(buttonCss)\n\n## BigInt support\n\nReScript now natively supports JavaScript's bigint type.\n\nReScriptJS Output\n\n    \n    \n    open! Js.BigInt let a = 9007199254740991n + 9007199254740991n let b = 2n ** 2n\n\nSee big integer docs for more.\n\n## Array spread syntax\n\nThe spread syntax, which was already supported for records and lists for a\nlong time, now also supports arrays!\n\n    \n    \n    RESCRIPT\n    \n    let animals = [\"\ud83d\udc36\", \"\ud83d\udc31\", \"\ud83d\udc37\"] let moreAnimals = [...animals, \"\ud83d\udc14\", \"\ud83d\udc34\", \"\ud83d\udc2e\"]\n\n## Hyphens in JSX tag names\n\nWe lifted restrictions on JSX tag names. This means you no longer need to\nescape tag names that contain hyphens:\n\nPreviously:\n\n    \n    \n    RESCRIPT\n    \n    let x = <\\\"custom-tag\" />\n\nNow:\n\n    \n    \n    RESCRIPT\n    \n    let x = <custom-tag />\n\nThis is particularly useful when dealing with web components, where element\nnames tend to use hyphens.\n\n## Omit trailing undefined in external function calls\n\nReScript 11's uncurried mode allows for much more ergonomic external function\nbindings, because trailing units are not needed anymore. But, this comes with\na potential problem. All arguments, whether they're actually supplied or not,\nwere printed as undefined in the resulting JS. This is handled better now, as\ntrailing undefineds are automatically omitted.\n\nReScriptJS Output (ReScript 11.0)JS Output (ReScript 11.1)\n\n    \n    \n    @val external stringify: ( 'a, ~replacer: (string, JSON.t) => JSON.t=?, ~space: int=?, ) => string = \"JSON.stringify\" let obj = {\"test\": 1} let result = stringify(obj) let result2 = stringify(obj, ~space=2)\n\n## %todo and warn-error\n\nInspired by languages like Elm or Gleam, we introduced a new extension point:\n%todo.\n\nIt is used to tell the compiler that some code still needs to be implemented\nand it will crash when executed.\n\nReScriptJS Output\n\n    \n    \n    let implementMeLater = (): string => %todo(\"This should return a string eventually.\") let x = implementMeLater() Console.log(x->String.includes(\"x\"))\n\nWe also made the compiler's -warn-error flag accessible by the build system,\nso that %todos and other warnings can be turned into errors in production\nbuilds.\n\n    \n    \n    SH\n    \n    rescript -warn-error +110\n\nSee \"Compile with stricter errors in CI\".\n\n## Other changes\n\nOf course we also got a bunch of other changes and bug fixes in this release.\nCheck out the compiler changelog if you are interested.\n\n## v12 is next\n\nv11.1 marks the completion of the v11 versions feature wise. We will of course\ncontinue to support the v11 release series with bug fixes and other important\nupdates. However, our focus for new feature development will move to v12.\nYou'll hear more about v12 and the plans for that version soon.\n\n## Acknowledgements\n\nOnce again we want to thank everyone from the community who volunteered their\nprecious time to support this project with contributions of any kind, from\ndocumentation, to PRs, to discussions in the forum. But especially we want to\nthank the following people, who helped landing this release:\n\n@cknitt, @cometkim, @cristianoc, @diogomqbm, @enzo-pellegrini,\n@fhammerschmidt, @glennsl, @JonoPrest, @mununki, @kevinbarabash, @shulhi,\n@tsnobip, @zth.\n\n## That's it\n\nWe hope you enjoy the newest improvements as much as we do.\n\nIf you find any problems with this new release, make sure to report them here:\n\n  * rescript-lang/rescript-compiler\n\nWant to read more?\n\nBack to Overview\n\n\u00a9 2024 The ReScript Project\n\nSoftware and assets distribution powered by KeyCDN.\n\nAbout\n\n  * Community\n  * ReScript Association\n\nFind us on\n\n", "frontpage": false}
