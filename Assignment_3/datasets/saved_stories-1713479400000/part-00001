{"aid": "40077907", "title": "Penny, a Next.js v14 example project", "url": "https://github.com/takeshape/penny", "domain": "github.com/takeshape", "votes": 1, "user": "mcat", "posted_at": "2024-04-18 16:27:57", "comments": 0, "source_title": "GitHub - takeshape/penny: Penny - A production-ready, next.js v14, composable commerce starter, using TakeShape's API Mesh", "source_text": "GitHub - takeshape/penny: Penny - A production-ready, next.js v14, composable\ncommerce starter, using TakeShape's API Mesh\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ntakeshape / penny Public template\n\n  * Notifications\n  * Fork 6\n  * Star 62\n\nPenny - A production-ready, next.js v14, composable commerce starter, using\nTakeShape's API Mesh\n\npenny-takeshape.vercel.app\n\n### License\n\nMIT license\n\n62 stars 6 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# takeshape/penny\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n9 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nactions-userLighthouse Score [skip ci]Mar 27, 2024c33f431 \u00b7 Mar 27, 2024Mar\n27, 2024\n\n## History\n\n1,197 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### .husky\n\n|\n\n### .husky\n\n| update hook| Mar 21, 2023  \n  \n### .lighthouse\n\n|\n\n### .lighthouse\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### .storybook\n\n|\n\n### .storybook\n\n| Update deps and cleanup - Next.js v14 Prep (#203)| Mar 19, 2024  \n  \n### .takeshape/pattern\n\n|\n\n### .takeshape/pattern\n\n| Remove unused Shapes with outdated/broken schemas (#188)| Jul 7, 2023  \n  \n### .vitest\n\n|\n\n### .vitest\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### .vscode\n\n|\n\n### .vscode\n\n| Add product cart checkout e2e (#191)| Jan 24, 2024  \n  \n### docs/trustpilot\n\n|\n\n### docs/trustpilot\n\n| Disable Trustpilot by default (#142)| Jan 4, 2023  \n  \n### keys\n\n|\n\n### keys\n\n| clean up oidc lib| May 12, 2022  \n  \n### mocks\n\n|\n\n### mocks\n\n| Update deps and cleanup - Next.js v14 Prep (#203)| Mar 19, 2024  \n  \n### playwright\n\n|\n\n### playwright\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### public\n\n|\n\n### public\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### readme-images\n\n|\n\n### readme-images\n\n| Use next-recaptcha-v3 pkg (#153)| Jan 27, 2023  \n  \n### scripts\n\n|\n\n### scripts\n\n| Improve branches workflow (#156)| Mar 21, 2023  \n  \n### src\n\n|\n\n### src\n\n| fix base url| Mar 27, 2024  \n  \n### .editorconfig\n\n|\n\n### .editorconfig\n\n| Disable Trustpilot by default (#142)| Jan 4, 2023  \n  \n### .env\n\n|\n\n### .env\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### .env-example\n\n|\n\n### .env-example\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### .env.local-example\n\n|\n\n### .env.local-example\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### .env.test\n\n|\n\n### .env.test\n\n| Implement sentry via the simpler libs Sentry (#137)| Dec 6, 2022  \n  \n### .env.test-example\n\n|\n\n### .env.test-example\n\n| Clarify env files (#135)| Nov 29, 2022  \n  \n### .eslintignore\n\n|\n\n### .eslintignore\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### .eslintrc.json\n\n|\n\n### .eslintrc.json\n\n| Update deps and cleanup - Next.js v14 Prep (#203)| Mar 19, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Update deps and cleanup - Next.js v14 Prep (#203)| Mar 19, 2024  \n  \n### .node-version\n\n|\n\n### .node-version\n\n| Update deps and cleanup - Next.js v14 Prep (#203)| Mar 19, 2024  \n  \n### .prettierignore\n\n|\n\n### .prettierignore\n\n| move to src directory| Apr 27, 2022  \n  \n### .prettierrc.json\n\n|\n\n### .prettierrc.json\n\n| update deps, cleanup| Apr 25, 2022  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Update deps and cleanup - Next.js v14 Prep (#203)| Mar 19, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Lighthouse Score [skip ci]| Mar 27, 2024  \n  \n### codegen.storefront.config.ts\n\n|\n\n### codegen.storefront.config.ts\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### codegen.takeshape.config.ts\n\n|\n\n### codegen.takeshape.config.ts\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### next-env.d.ts\n\n|\n\n### next-env.d.ts\n\n| Initial commit| Apr 21, 2022  \n  \n### next.config.mjs\n\n|\n\n### next.config.mjs\n\n| remove redirect| Mar 27, 2024  \n  \n### package-lock.json\n\n|\n\n### package-lock.json\n\n| update jwks_uri generation| Mar 27, 2024  \n  \n### package.json\n\n|\n\n### package.json\n\n| update jwks_uri generation| Mar 27, 2024  \n  \n### playwright.config.ts\n\n|\n\n### playwright.config.ts\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### postcss.config.js\n\n|\n\n### postcss.config.js\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### sentry.client.config.ts\n\n|\n\n### sentry.client.config.ts\n\n| Update deps and cleanup - Next.js v14 Prep (#203)| Mar 19, 2024  \n  \n### sentry.edge.config.ts\n\n|\n\n### sentry.edge.config.ts\n\n| Update deps and cleanup - Next.js v14 Prep (#203)| Mar 19, 2024  \n  \n### sentry.server.config.ts\n\n|\n\n### sentry.server.config.ts\n\n| Update deps and cleanup - Next.js v14 Prep (#203)| Mar 19, 2024  \n  \n### tailwind.config.ts\n\n|\n\n### tailwind.config.ts\n\n| Update deps and cleanup - Next.js v14 Prep (#203)| Mar 19, 2024  \n  \n### tsconfig.json\n\n|\n\n### tsconfig.json\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n### vitest.config.mts\n\n|\n\n### vitest.config.mts\n\n| Update Penny to use the app folder (#204)| Mar 21, 2024  \n  \n## Repository files navigation\n\n# Penny\n\nAn e-commerce starter kit by TakeShape.\n\nCheck out the store now at https://penny-demo.takeshape.io/.\n\n  * Deployed on Netlify: https://penny-ecommerce.netlify.app\n  * Deployed on Vercel: https://penny-ecommerce.vercel.app\n\nImportant\n\nIn order to checkout in the demo you will need to enter the store password\ntest1234\n\nYou can clone this repo with git to run the Next.js frontend locally (git\nclone https://github.com/takeshape/penny). To connect it to a GraphQL backend\nthat TakeShape provides, just deploy the pattern in the .takeshape/pattern\ndirectory. The instructions section of this README will teach you how to do\nthat.\n\n## Lighthouse Report: mobile\n\nCategory| Score  \n---|---  \nPath: /| Report  \n\ud83d\udfe2 Performance| 100  \n\ud83d\udfe2 Accessibility| 100  \n\ud83d\udfe2 Best practices| 96  \n\ud83d\udfe2 SEO| 100  \nPath: /products/basic-tee-6-pack| Report  \n\ud83d\udfe2 Performance| 100  \n\ud83d\udfe2 Accessibility| 99  \n\ud83d\udfe2 Best practices| 96  \n\ud83d\udfe2 SEO| 100  \nPath: /collections/men| Report  \n\ud83d\udfe2 Performance| 100  \n\ud83d\udfe2 Accessibility| 100  \n\ud83d\udfe2 Best practices| 96  \n\ud83d\udfe2 SEO| 100  \n  \n### The TakeShape project pattern\n\nThis starter project composes the following services into a unified GraphQL\nAPI:\n\n  * Shopify Admin and Storefront for customer data, product info and payment processing\n  * OpenID for identity management\n  * ReCAPTCHA for security\n  * Gorgias for customer support\n  * Klaviyo for newsletter subscriptions\n  * REVIEWS.io for product reviews\n  * Trustpilot for product reviews\n  * Voucherify for customer loyalty rewards\n  * Ship Engine for shipping management\n\nTakeShape is also providing performance and data services for the storefront:\n\n  * TakeShape's API Indexing speeds up product queries by 10x and enables lighting fast product search on the frontend\n  * TakeShape's ShapeDB hosts some of the custom content used in this build.\n\n    \n    \n    graph TD A[Frontend Next.js Client] --> |Unified GraphQL API| Mesh{TakeShape's API Mesh} Mesh --> |User Authentication| OpenID[OpenID connect] Mesh --> |DDoS prevention| reCAPTCHA Mesh --> P{Products} P --> Shopify[Shopify Admin and Storefront] P --> Recharge[Recharge] Mesh --> UP{User Profile} UP --> |Orders, and Customer Data| Shopify UP --> |Subscripitons, and Customer Data| Recharge UP --> |Newsletter| Klaviyo P --> |Product Reviews| REVIEWS.io UP --> |Reviews Written| REVIEWS.io UP --> |Shipping info| ShipEngine UP --> |Loyalty Points| Voucherify UP --> |Customer Support| Gorgias\n\n### The frontend stack\n\nThe frontend codebase was built with many features that are important for\nmodern composable e-commerce storefronts, including:\n\n### Frameworks, language and styling\n\nHere are the frameworks, language and styling options we went with for this\nbuild:\n\n  * Next.js to build the pages and bundle the frontend application\n  * NextAuth for user authentication against TakeShape and Shopify\n  * TypeScript for type safety and documentation\n  * Apollo Client for efficient GraphQL queries against TakeShape\n  * Jotai for optimized component state management\n  * Storybook for rapid UI prototyping and review\n  * Tailwind CSS for beautiful styles.\n\n### Continuous Integration\n\nNumerous CI tools have been configured with GitHub Actions. You'll have a\nstarting point that is easy to test, and easy to keep error-free and\nperformant.\n\n#### Unit Tests\n\n  * Vitest for React component and unit testing.\n  * ESLint for code style and quality.\n  * TypeScript ensures a type-safe codebase.\n  * GraphQL Codegen extend type-safety to all your GraphQL queries.\n\n#### E2E Tests\n\n  * Playwright for frontend end-to-end testing and API service mocking\n\n#### Performance Tests\n\n  * Lighthouse for SEO and browser performance metrics\n\nSet up your lighthouse testing paths in .lighthouse/testPaths.json. By default\nyour homepage will be tested.\n\nIMPORTANT\n\nIf you have branch protections in place on your main branch you will need to\ninclude a repo secret PROTECTED_PUSH_TOKEN that is a GitHub personal access\ntoken (PAT) with the repo scopes and which is an admin on the project repo.\n\nIf you are not using branch protection rules you can replace ${{\nsecrets.PROTECTED_PUSH_TOKEN }} with ${{ secrets.GITHUB_TOKEN }} in the\nlighthouse.yml workflow file.\n\n#### Snapshots\n\n  * Chromatic hosts Storybook stories and provides visual snapshot comparisons\n\n### Runtime error reporting\n\n  * Sentry for error reporting and health monitoring with their Next.js-specific SDK.\n\n#### TakeShape specific-tools\n\nWe also used a few tools from TakeShape's ecosystem to simplify our workflow\nand improve the development process:\n\n  * Next-Auth-All-Access \u2014 A NextAuth wrapper that provides JWKS-verifiable access tokens for third-party APIs.\n  * @takeshape/graphql-validate \u2014 GraphQL query validation against your TakeShape API.\n  * @takeshape/nextjs \u2014 Branch workflow and supporting utilties.\n\n# Screenshot\n\n# Getting Started\n\nTo get started with TakeShape you need to perform these steps:\n\n  1. Create a new Github repository for your Project and configure .env\n  2. Deploy Penny to a new TakeShape Project\n  3. Configure Shopify Admin and Shopify Storefront services\n  4. Run npm run dev to try out Penny with only Shopify enabled\n  5. Configure additional services and customize your Penny project!\n\n### Create a new Github repository for your Project\n\n  1. Create a new repository using this repository as a template:\n\n  2. Clone your new repository\n\n  3. Navigate to the project directory in your local terminal and run the npm install command to install all dependencies.\n\n  4. Set up your environment variables.\n\n  * Every project will contain a mix of variables defined in .env files and runtime variables defined in a hosting provider.\n\n  * Create your project's .env starter files. Run npm run prepare-env. This repo already contains some .env files used for the demo, so you will be prompted to overwrite those files.\n\n  * Because many variables are required to get a fully functional project you should ensure all your services are configured before customizing the .env files. Take a look at the .env files now to get a sense of what you'll need before you run the project, and take note of where the various keys and secrets live along the way.\n\n  * .env contains common variables for all runtimes. You can define publicly available variables here. In most cases these are prefixed with NEXT_PUBLIC. This file is checked into your repo.\n\n    * Even though there are fallbacks, you should set NEXT_PUBLIC_CANONICAL_URL in this file to the canonical URL of your site. This is important for accurate sitemap generation and to ensure the OpenID config can load correctly.\n  * .env.local contains variables to use during local development. This file is not checked into your repo and can contain all the secrets you need to get your local development environment running, as well as overrides for common .env variables.\n\n  * .env.test contains variables and overrides only used when running tests, like jest.\n\n> Warning Never check secrets into your repo!\n\n  4. Add secrets needed for Github Actions. You can do this by going to your Github project settings then Secrets / Actions. You'll need the following secrets:\n\n  * CHROMATIC_PROJECT_TOKEN if using Chromatic.\n  * TAKESHAPE_API_KEY - Create a TakeShape API key with access to your project and full branch permissions.\n\n### Deploy Penny to a new TakeShape Project\n\n  1. Create a TakeShape project using the pattern in this repo. This button will deploy the project for you:\n\n  2. Generate an anonymous and a webhook TakeShape API key. You need these two API keys, and they must have different permissions scopes. Here's how to create them:\n\n  * Navigate to the Settings tab in your TakeShape project's dashboard.\n\n  * Select the API Keys option in the left sidebar.\n\n  * Select the New API Key button at the top-right of the page.\n\n  * Name the first API Key anything you want; just be sure to grant it anonymous permissions.\n\n  * Save the key in your .env file as NEXT_PUBLIC_TAKESHAPE_ANONYMOUS_API_KEY.\n\n  3. Get your TakeShape project's API Endpoint. Here's how:\n\n  * Navigate to the Home tab of your TakeShape project's dashboard in the web client. Scroll down to the Useful Snippets section, and copy the API Endpoint there.\n\n  * Save the endpoint in your .env file as NEXT_PUBLIC_TAKESHAPE_API_URL.\n\n  4. Commit changes to .env\n\n### NextAuth and OpenID\n\nThis project uses NextAuth in combination with the @takeshape/next-auth-all-\naccess package for user authentication. It also uses OpenID for identity\nmanagement. The following instructions will walk you through setting up OpenID\nas a service provider in your TakeShape project, and configuring NextAuth with\n@takeshape/next-auth-all-access.\n\n#### Setting up OpenID\n\n  1. In the Home tab of your TakeShape project, select OpenID from the list of services. You will be taken to the OpenID service configuration page.\n\n  2. Add your store's URL to the Issuer URL field, and enter the same URL with /api/oidc/.well-known/openid-configuration appended to the end of it in the OpenID Configuration URL.\n\n> Note: Your store URL should be the public-facing URL of your website, not\n> necessarily your myshopify.com URL.\n\n  3. Copy the generated url in the Audience field and save it somewhere secure. You'll need it for your one of your project's environment variables.\n\n  4. Select the Save button at the top-right of the OpenID service page.\n\n  5. Update your .env file in your Next.js project's directory with the following variables:\n\n  * Add a NEXT_PUBLIC_TAKESHAPE_AUTH_AUDIENCE variable with the generated Audience URL from your OpenID provider.\n  * Add a NEXT_PUBLIC_TAKESHAPE_AUTH_ISSUER variable with the same URL you provided for the Issuer URL field on your OpenID provider. This should be your store's URL.\n  * If you haven't already, set your NEXT_PUBLIC_CANONICAL_URL to your production site's canonical URL. This will avoid any resolution issues with your JWKS file.\n\n#### Setting up NextAuth\n\nUse our @takeshape/next-auth-all-access package to create and sign an access\ntoken for your logged-in users.\n\nTo generate your keypair, use the following command from the root of your\nproject repo and follow the printed instructions.\n\n    \n    \n    npx @takeshape/next-auth-all-access generate-keys\n\nYou will then need to follow these steps:\n\n  1. Add the variable ALLACCESS_PRIVATE_KEY with your private key to your .env.local file and to your hosting provider's environment.\n\n  2. Commit the ./keys/jwks.json file to your repo, push, and build. Your key will need to be web accessible at the URL you configured in TakeShape before authentication will work.\n\n### Shopify Admin and Shopify Storefront\n\n> Warning Connecting this project to a live Shopify store WILL enable real\n> purchases. If you just want to play around without risking real charges, set\n> your store's payments to Test Mode and use appropriately scoped Shopify API\n> keys. When testing purchases, always use Shopify's accepted fake credit card\n> information.\n\nThis project uses Shopify for e-commerce functionality. These instructions\nassume you've already created a Shopify store. You don't need to have Shopify\nPlus to use any of the features described here.\n\nFollow these instructions to connect your Shopify store's Admin and Storefront\nAPIs to both your TakeShape project and the frontend Next.js project.\n\n  1. Create a Shopify store if you don't already have one.\n\n  2. Navigate to your store's admin site by visiting https://your-store.myshopify.com/admin, substituting \"your-store\" with the name of your store.\n\n  3. Configure your Shopify checkout experience.\n\nThis project uses Shopify's checkout experience. That means when a customer is\nready to purchase, they are redirected to a checkout flow that Shopify\ngenerates. The only downside is, Shopify's checkout flow will send users to\nyour Shopify store, not your Penny store, when they're done. To force\nShopify's checkout experience to redirect to your Penny storefront, you must\nuse their Liquid templating language. These instructions show you how:\n\n  * In your store's admin UI, select the \u2699 Settings button. A settings menu will appear. Select Checkout on the left.\n\n  * Scroll down to the Order status page settings. In the Additional Scripts text area, add the following script. There are two URLs the order can possibly be redirected to. Be sure to add your store's root URL to the second one, under the {% else %}:\n    \n        {% if checkout.attributes.redirect_origin %} <script> window.location = \"{{ checkout.attributes.redirect_origin }}/?shopify_checkout_action=success\"; </script> {% else %} <script> window.location = \"https://your-shopify-store.com/?shopify_checkout_action=success\"; </script> {% endif %}\n\n  * Save your changes.\n\nConfigure your checkout process to work with this headless store. Stay in the\nCheckout section of the Settings menu in your store's admin UI.\n\n  * Under Customer Accounts, select Accounts are optional. This allows customers to create checkouts as guests.\n\n  * Under Customer Contact Method, select Phone number or email.\n\n  * The Customer information settings can be changed to suit your needs. This is how we have it configured in our build:\n\n    * Full name: Only require last name\n    * Company name: Don't Include\n    * Address line 2 (apartment, unit, etc.): Optional\n    * Shipping address phone number: Don't include\n  * Save your changes.\n\n> If you want to test this app without enabling real payments, it's best to\n> set up test payments while you're in Shopify's admin UI. Follow Shopify's\n> instructions for setting up test payments in your store.\n\nShopify's support for allowing headless checkout on password protected stores\nhas proven erratic, so it is not recommended that you password protect your\nShopify store when using Penny. Instead you should update your Shopify theme\nto redirect users to your Penny site and set up a robots.txt file to prevent\nindexing of your Shopify native store.\n\nThe shopify-headless-theme is an excellent option.\n\n  4. Get your Storefront API keys.\n\n  * In the navigation on the left side of your store's admin page, select Apps. A dropdown window should appear. Select \u2699 App and Sales Channel Settings as shown in the image below.\n\n  * Select the Develop apps for your store button. On the next page, titled \"App Development,\" select Create an app and name the app whatever you'd like.\n\n  * You'll be taken to your app's settings page. Under the Overview tab, you'll see \"Select your scopes to get started.\" Start with Configure Storefront API scopes.\n\n  * Enable the following scopes:\n\n    * unauthenticated_write_checkouts\n    * unauthenticated_read_checkouts\n    * unauthenticated_write_customers\n    * unauthenticated_read_customers\n    * unauthenticated_read_product_listings\n    * unauthenticated_read_selling_plans\n    * unauthenticated_read_product_inventory\n    * unauthenticated_read_product_tags\n\nThen select Save at the top right of the page.\n\n  * Now select the API credentials tab. You'll see a section titled Access tokens. Select the Install app button within this section (not the button at the top-right).\n  * You will now see a Storefront API access token. Copy it and save it. You'll need it to configure Shopify Storefront in your TakeShape project.\n\n  * Go back to the Configuration tab for your app. At this point you have as Storefront API integration but no Admin API integration. Next to Admin API integration click Configure.\n  * Select all access scopes and click Save.\n  * Go to the API credentials tab again. Now you can copy your \"Admin API access token\" and \"API secret key\". You'll need these to configure the Shopify Admin API in your TakeShape project.\n\n#### Connecting the Shopify services to TakeShape\n\nTo use Shopify with this project, you'll need to connect your Shopify Admin\nAPI and Shopify Storefront API as two separate services. The Shopify app you\nmade in the previous step will be used for both.\n\n##### Connecting Shopify Admin\n\n  * Navigate to your TakeShape project's dashboard and select the Home tab. Select the Shopify service.\n  * Add your store's myshopify.com URL to the myshopify.com URL field. The format of the URL is your store's name + myshopify.com. https://your-shop.myshopify.com\n  * Under Authentiaction, enter the Admin API access token and API secret key from the previous step.\n  * Select Save\n\n##### Connecting Shopify Storefront\n\n  * Navigate to the Home tab of your TakeShape project.\n  * Select the Shopify Storefront service. It will be a generic GraphQL service, with the GraphQL logo.\n  * In the Endpoint field, enter your store's Shopify Storefront endpoint. It will be of this format:\n\n    \n    \n    https://[STORE_NAME].myshopify.com/api/2022-04/graphql.json\n\nFor example:\n\n    \n    \n    https://example-store.myshopify.com/api/2022-04/graphql.json\n\n  * For Authentication Type, select Bearer Token.\n  * In the Header field, enter X-Shopify-Storefront-Access-Token.\n  * In the Token field, enter the Storefront API access token you copied from your store's myshopify.com/admin page.\n\nYou will also need to add your Shopify Storefront information to your .env.\nThis is all public information, and can be included in the .env file that is\nchecked into the repo.\n\nAdd or update the lines NEXT_PUBLIC_SHOPIFY_STOREFRONT_TOKEN and\nNEXT_PUBLIC_SHOPIFY_STOREFRONT_URL in your .env file.\n\nNow your Shopify store is configured for this project.\n\n## Recharge Subscriptions\n\nYou will need to set up a free Recharge Subscriptions Shopify app and account\nto use subscriptions in Penny. You can follow their guide if you are\nunfamiliar.\n\nOnce Recharge is configured, you will need to get an API token. Go to Apps >\nAPI Tokens > Create an API token. At a minimum you'll want to provide read &\nwrite access to the following scopes: orders, discounts, subscriptions,\npayments, payment methods, customers, products, customer notifications. You\nwill then enter this API token in your Recharge service config in TakeShape.\n\nFor a product to appear with subscription options in your Penny site, you'll\nneed to add it as a subscription-enabled product in Recharge. Go to Products >\nProducts > Add products in the Recharge admin, search for and add your item.\n\n## REVIEWS.io\n\nThe following section describes how to connect REVIEWS.io to your Penny\npattern in TakeShape. To learn how to connect REVIEWS.io to any TakeShape\nproject, check out our docs.\n\n  1. First, you'll need your Store ID and API Key from REVIEWS.io\n\n  * Navigate to API integrations by clicking here, or follow the below instructions.\n  * On your REVIEWS.io dashboard, select Integrations in the navigation on the left. Select API in the list of integrations.\n  * Under API Credentials, copy and save the Store ID and API Key\n\n  2. Navigate to your TakeShape project's dashboard and select REVIEWS.io under the Services list in the Home tab.\n\n  3. Under Store ID, paste your Store ID, and under API Key, paste your API Key. Save your service.\n\n  4. Lastly, you'll need to enable Reviews.IO in src/config/reviews.ts by setting enableReviewsIo to true.\n\n## ShipEngine\n\nThe client frontend project supports the shipping information added to the\nShopify graph by the ShipEngine Shopify Application. All you need to do is\nconnect ShipEngine to your Shopify store in the Shopify admin and you're set!\n\n## Voucherify\n\nThe following section describes how to connect Voucherify to your Penny\npattern in TakeShape. To learn how to connect Voucherify to any TakeShape\nproject, check out our REST provider docs. Using our generic REST provider,\nyou can connect most arbitrary REST APIs, including Voucherify.\n\n  1. Get your Application ID from Voucherify.\n\n  * From your Voucherify dashboard, select Project Settings \u2192 Application Keys. Create your keys. You will be given an Application ID and a Secret Key.\n\n  2. Navigate to your TakeShape project's dashboard and select Voucherify under your services list.\n\n  3. Under Authentication, set the Header to X-App-Id and the Token to your App ID. Save your service.\n\n  4. Connect Vourcherify to your Shopify store in the Shopify admin and your purchases will be applied to your customer accounts, and will be available via the getMyLoyaltyCard query.\n\n## Klaviyo\n\nThe following section describes how to connect Klaviyo to your Penny pattern\nin TakeShape. To learn how to connect Klaviyo to any TakeShape project, check\nout our docs.\n\n  1. First, get your api key for Klaviyo.\n\n  * Log into your Klaviyo account and navigate to Account \u2192 Settings \u2192 API Keys.\n\n  2. On your TakeShape project's dashboard, navigate to the Home tab and select Klaviyo from the list of services.\n\n  3. In the Authentication field, add your Klaviyo API key, and select the Save button at the top-right of the page.\n\n  4. Be sure to set the NEXT_PUBLIC_DEFAULT_KLAVIYO_LIST_ID to the ID of your preferred Klaviyo newsletter, either in a .env file or in your hosting provider.\n\n## reCAPTCHA\n\nHere we describe how to use reCAPTCHA and TakeShape to protect specific\nqueries from abuse. Penny is configured to prevent abuse of the contact form,\nthe newsletter signup form, and the account registration form.\n\n> Don't want to use reCAPTCHA? reCAPTCHA can be disabled in the client by\n> removing NEXT_PUBLIC_RECAPTCHA_SITE_KEY from the env and removing any\n> conditional resolver resolution from the schema that depends on reCAPTCHA,\n> e.g. \"if\": \"$resolvers.recaptcha.success == true\". Check out our docs on\n> editing a TakeShape project schema.\n\n> Because reCAPTCHA is tied to a specific host in the Google settings you will\n> either need to use a custom domain and allow a wildcard subdomain for your\n> preview builds, e.g., *.mysite.com allows preview-acbiou43891239.mysite.com\n> or configure your project to disable reCAPTCHA for builds on domains you do\n> not want to whitelist.\n\n  1. First, get your Site Secret from reCAPTCHA. If you need to create an account, visit Google's ReCAPTCHA site registration page.\n\n  * Log into Google's reCAPTCHA admin and create your site (or select it, if you already have one). It's important that you select reCAPTCHA v3 for Penny to work as intended. Whitelist any domains you know you'll need at this time. Don't worry, this can be changed later.\n\n  * On the Settings page, select the reCAPTCHA keys dropdown to reveal your Site Key and Secret Key. Copy them somewhere secure, or leave this tab open. You'll need them to connect reCAPTCHA to your TakeShape project.\n\n  2. Create a NEXT_PUBLIC_RECAPTCHA_SITE_KEY environment variable in your hosting provider or in your .env file, and set the value to your Site Key from the reCAPTCHA settings.\n\n  3. Navigate to your TakeShape project's dashboard, select the Home tab and select ReCAPTCHA from the list of services. You'll be taken to the ReCAPTCHA service page.\n\n  * In the Endpoint field, enter https://www.google.com/recaptcha/api.\n\n  * In the Authentication Type field, ensure Query Parameter is selected.\n\n  * Under Authentication, enter secret as the value for the Query Param field. Enter your Site Secret as the value for the Token field.\n\n  * Select the Save button at the top-right of the page.\n\n## Gorgias\n\nThe following section describes how to connect Gorgias to your Penny pattern\nin TakeShape. To learn how to connect Gorgias to any TakeShape project, check\nout our REST provider docs. Using our generic REST provider, you can connect\nmost arbitrary REST APIs, including Gorgias.\n\n  1. You'll need your Gorgias API Endpoint, email address, and a Password API Key. Gorgias uses Basic Auth, which takes a username and password. Your username will be your Gorgias account email address, and your password will be a generated key from Gorgias.\n\n  * Navigate to your Gorgias dashboard and select the three dots at the top-left. The button will be labeled Ticket if you're in the Ticket view of the dashboard, but will change its label based on which view you're in. In the drop-down menu that appears, select Settings. You should be taken to the Settings view.\n\n  * In the Settings view, select the REST API option in the menu on the left. You'll see the REST API panel. Note the Base API URL. You'll need that to connect Gorgias to TakeShape.\n\n  * Select the Create API Key button under the Password (API Key) heading.\n\n  * Leave this tab open, or copy your Base API URL, Username, and Password over to a secure location. It's time to set up Gorgias in TakeShape.\n\n  2. On your TakeShape project's dashboard, navigate to the Home tab and select Gorgias from the list of services. You'll be taken to the Generic REST service page for Gorgias.\n\n  * In the Endpoint field, add your Base API URL.\n\n  * In the Authentication Type field, ensure Basic Auth is selected.\n\n  * Under Authentication, add your email address in the Username field, and your API Key in the Password field.\n\n  * Select the Save button at the top-right of the page.\n\n## Zendesk\n\nThe following section describes how to connect Zendesk to your Penny pattern\nin TakeShape. To learn how to connect Zendesk to any TakeShape project, check\nout our REST provider docs. Using our generic REST provider, you can connect\nmost arbitrary REST APIs, including Zendesk.\n\n  1. On your TakeShape project's dashboard, navigate to the Home tab and select Zendesk from the list of services. You'll be taken to the Generic REST service page for Zendesk.\n  2. In the Endpoint field, add your Zendesk domain. This is the domain you use to access the Zendesk Admin Center (e.g., https://your-store.zendesk.com).\n  3. Select the Save button at the top-right of the page.\n\nZendesk allows for the creation of up to 5 requests per hour without the need\nfor authentication. If you need to handle a larger volume of requests, options\ninclude authenticating end users with Zendesk and using the same Requests\nendpoint or using the Tickets endpoint as an authenticated Zendesk agent.\n\n## Sentry\n\nTo use Sentry with this project, you need your project's Data Source Name, as\nwell as your sentry org slug and project name.\n\n> If you don't want to use Sentry do not set the NEXT_PUBLIC_SENTRY_DSN\n> environment variable and it will not be loaded.\n\n  1. Find your Sentry DSN.\n\n  * Log into Sentry, and select your project. If you don't have a sentry project ready, create a Next.js project.\n\n  * Select Settings in the sidebar on the left, and scroll down to select Client Keys (DSN). You will see the Client Keys panel.\n\n  * Save your DSN. You can set it in your .env or .env.local or your hosting provider's UI as NEXT_PUBLIC_SENTRY_DSN.\n\n  2. Create a Sentry auth token.\n\n  * Head to Settings, then Auth Tokens.\n\n  * Set the SENTRY_AUTH_TOKEN value in your .env.local or in your hosting provider's UI.\n\n  3. Find your sentry org slug.\n\n  * Head to Settings, then General Settings. At the top of the page you should see Organization Slug. Copy the value there.\n\n  * Set this value in your checked in .env file.\n\n  4. Find your sentry project name.\n\n  * Head to Settings, then Projects. You'll see a list of projects. Select the Next.js project you want to use.\n\n  * Under the Project Details section on the next page, you'll see a Name field. Copy that value.\n\n  * Set the value from the Name field to the SENTRY_PROJECT variable in your checked in .env file.\n\n## Multipass\n\nFor Shopify Plus users, this project supports sign in with Google, in addition\nto the regular Shopify sign in. To set it up you need to provide the secret\nenv vars SHOPIFY_MULTIPASS_SECRET, GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, and\nset the public env var NEXT_PUBLIC_SHOPIFY_USE_MULTIPASS='true'. Because we're\nusing NextAuth.js it's very easy to support almost any identity provider via a\nsimple import in pages/api/[...nextauth].ts and following the configuration\ninstructions from Next Auth for that provider.\n\n### Important!\n\nBecause of how the Google OAuth2 service works, you cannot use wildcard\ncallback urls. This precludes the easy use of Google auth in Vercel preview\nenvironments, which use dynamic URLs. It is recommended you unset\nNEXT_PUBLIC_SHOPIFY_USE_MULTIPASS for preview environments and configure it on\na case-by-case basis.\n\n## Type generation\n\nYour project is configured to generate types for the GraphQL APIs in use. Run\nnpm run graphql:typegen before running the site locally to generate query-\nspecific types. This is a big advantage of the TakeShape GraphQL mesh \u2014 you\nwill have your queries and responses fully typed, and can develop efficiently\nand safely.\n\n## Playwright End-to-End (E2E) Testing\n\n### Local test development\n\nYou can run and develop your Playwright tests locally using the following\nprocess:\n\n  1. Edit your .env.local file and ensure your have the correct environment variables set for your personal project.\n  2. Start a Next.js server, npm run dev will do.\n  3. In another process (terminal) run npm run playwright:ui\n  4. Work within the Playwright UI to run and debug your tests.\n\n### CI\n\nMake sure you have set these environment variables in your repository:\n\n  * PLAYWRIGHT_TEST_BASE_URL - this will be set automatically by the GitHub Actions workflow;\n  * PLAYWRIGHT_PRODUCT_NAME_INSTOCK - a product name to find in a collection and use in tests;\n  * PLAYWRIGHT_PRODUCT_SIZE_INSTOCK and PLAYWRIGHT_PRODUCT_COLOR_INSTOCK - should be the combination of size and color for your PLAYWRIGHT_PRODUCT_NAME_INSTOCK product;\n  * PLAYWRIGHT_PRODUCT_NAME_OUTOFSTOCK - a product name to find in a collection and use in tests;\n  * PLAYWRIGHT_PRODUCT_SIZE_OUTOFSTOCK and PLAYWRIGHT_PRODUCT_COLOR_OUTOFSTOCK - should be the combination of size and color for your PLAYWRIGHT_PRODUCT_NAME_OUTOFSTOCK product;\n  * PLAYWRIGHT_COLLECTION_NAME - the name of the collection that your PLAYWRIGHT_PRODUCT_NAME_INSTOCK and PLAYWRIGHT_PRODUCT_NAME_OUTOFSTOCK relate to;\n  * PLAYWRIGHT_BRAND_NAME - any brand name in your store;\n  * PLAYWRIGHT_USER_EMAIL - test user email already registered in the system, it's used for authenticated feature testing like account settings, etc.;\n  * PLAYWRIGHT_USER_PASSWORD - test user password.\n\n# Deploying to production\n\n> When deploying this project to production, be sure to replace all public\n> placeholder assets.\n\n### Choosing a hosting platform\n\nVercel is the company that created Next.js, and they have useful github\nworkflow tools for projects like this.\n\nTo learn more about deploying with Vercel, check out their comprehensive\nguide.\n\nNetlify is a popular alternative that you can also check out. They offer a\nsimilar deploy preview tool.\n\nTo learn more about deploying with Netlify, check out their comprehensive\nguide.\n\nBoth services offer preview deployments, which we've enabled on our PRs.\n\n# GitHub Actions\n\nIf you are using the included workflows you will get a great CI process that\nincludes:\n\n  * Unit tests on every PR\n  * Playwright E2E Testing on every PR\n  * Storybook deploys and testing with Chromatic\n  * Automated Lighthouse scores on every PR and on production deploys\n\n## Setting up continuous integration\n\nAdd the following to your hosting platform's environment variables\n\n  * TAKESHAPE_API_TOKEN (same as Github Actions secrets)\n\n## E2E testing\n\nPlaywright will work without additional configuration. If you want to use the\nS3 hosting option for Playwright reports, you will need to add some variables\nto your repository. Add the following:\n\n### Secrets\n\nYou AWS credentials:\n\n  * AWS_ACCESS_KEY_ID\n  * AWS_SECRET_ACCESS_KEY\n\n### Variables\n\nYour S3 details:\n\n  * PLAYWRIGHT_S3_URL - Example: https://dbr9n5zkng988.cloudfront.net/\n  * PLAYWRIGHT_S3_BUCKET - Example: my-playwright-bucket\n  * PLAYWRIGHT_S3_REGION - Example: us-east-1\n\n# TakeShape Branches\n\n> Warning TakeShape Branches are not compatible with GitHub merge queues. You\n> can still use a merge queue, but will not be able to access your development\n> branches automatically in it.\n\nTakeShape Branches allows you to create separate copies of your production API\nfor use in your development process. This is great for multiple developers\nworking on a project so they can all make changes to the production API that\nget merged intelligently and automatically. It can even be helpful for a solo\ndeveloper who wants to prototype changes without affecting the production API.\n\nThis project is set up to make working with TakeShape Branches easy and fully\nintegrated into your workflow with the following features.\n\n## Setup\n\nThis project is fully configured for TakeShape Branches. To enable the\nworkflow and features:\n\n  1. Create an API key in TakeShape with a dev role.\n  2. Add a TAKESHAPE_API_KEY variable to your local .env.local file and your remote CI environments with the new API key.\n\n## Branch creation\n\nWhen you run npm install a git hooks for post-checkout and post-merge are\ninstalled. Using the post-checkout hook here, a prompt will be presented\nwhenever you run git checkout -b my_new_branch.\n\n  * A git post-checkout hook that will prompt you to create a same-named TakeShape API branch whenever you create a new branch.\n  * A process by which the HEAD of you API branch URL is acquired before running your development site (npm run dev)\n  * Providing versioned API URLs:\n\n    * For your PR, your preview site will use the API version and branch that matches your commit.\n    * For your CI process, your tests will run using the same branch that matches the commit.\n    * For your production site, it will always run with the exact API version that matches the commit which triggered the build. Any changes to your production API will not take effect on your production site until you run a new build.\n  * If you are incorporating branch promtion into your Vercel deployment you will need to provide a GITHUB_TOKEN env variable with sufficient access to read your repo PRs, which is required to determine which branch needs to be promoted.\n\nYou can read more about our Branches feature and workflow in our Work with\nBranches guide.\n\n## Shopify password reset / customer invite emails\n\nPenny provides custom password reset and customer activation pages. They are\nat paths that mirror the Shopify URL structure:\n\n  * /account/reset\n  * /account/activate\n\n### Update the customer account invite template\n\nYou can follow the instructions from Shopify, but in short you want to:\n\n  1. In your Shopify store go to Settings > Notifications > Customer account invite\n  2. Update the Activate your account button with a URL for your site, like this:\n\n    \n    \n    <td class=\"button__cell\"> <a href=\"https://my-penny-website.ecommerce/account/activate?activationUrl={{ customer.account_activation_url }}\" class=\"button__text\" >Activate your account</a > </td>\n\n### Update the customer account password reset template\n\nThe steps here are very similar to above. Shopify covers this in-depth as\nwell, but the basic steps are:\n\n  1. In your Shopify store go to Settings > Notifications > Customer account password reset\n  2. Update the Reset your password button with a URL for your site, like this:\n\n    \n    \n    <td class=\"button__cell\"> <a href=\"https://my-penny-website.ecommerce/account/reset?resetUrl={{ customer.reset_password_url }}\" class=\"button__text\" >Reset your password</a > </td>\n\n### IMPORTANT\n\nIf you use the automated Lighthouse (Production) workflow, you must add the\nfollowing to your Vercel Ignored Build Step settings, otherwise you'll end up\nwith an infinite prod deploy loop:\n\nIn Project Settings > Git add to Ignored Build Strp this command:\n\n    \n    \n    bash scripts/ignore-build.sh\n\n### IMPORTANT - Development notes\n\n  * Components with state coming from localstorage via Jotai's atomWithStorage should be wrapped in the <ClientOnly /> component. This prevents rendering mismatches and stale / incorrect info.\n\n  * The Shopify store is configured to redirect after checkout via the \"Additional scripts\" field (see the docs) for the order status page and uses the redirect_origin attribute set at cart creation:\n\n  * Shopify must use the 2023-04 endpoint or newer, like this: Admin API: https://shopify-shop-name.myshopify.com/admin/api/2023-04/graphql.json Storefront API: https://deluxe-sample-project.myshopify.com/api/2023-04/graphql.json\n\nAdd this snippet to your checkout template.\n\n    \n    \n    {% if checkout.attributes.redirect_origin %} <script> window.location = \"{{ checkout.attributes.redirect_origin }}/?shopify_checkout_action=success\"; </script> {% else %} <script> window.location = \"https://your-shopify-store.com?shopify_checkout_action=success\"; </script> {% endif %}\n\nYou can also set your own redirect_origin with the shopifyCheckoutRedirectUrl\nvariable exported from src/config/shopify.ts. Note that {{origin}} is\navailable as a replacement variable, for example, this will redirect you to\nthe same origin, at the path /foo \u2014 {{origin}}/foo.\n\n  * Captcha can be disabled in the client by removing NEXT_PUBLIC_RECAPTCHA_SITE_KEY from the env. The Takeshape API will still require Captcha unless the Captcha compose step and \"if\": \"$resolvers.recaptcha.success == true\" is removed from the relevant mutations in the project schema.\n\n# Credits\n\n  * This project uses credit card icons from svg-credit-card-payment-icons\n\n# Dependency Notes\n\n  * No issues...\n\n# Copyright and License\n\nCopyright TakeShape, Inc. 2023\n\nPenny is MIT licensed.\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\nLicense for the specific language governing permissions and limitations under\nthe License.\n\n## About\n\nPenny - A production-ready, next.js v14, composable commerce starter, using\nTakeShape's API Mesh\n\npenny-takeshape.vercel.app\n\n### Topics\n\nreact graphql ecommerce typescript apollo jest nextjs storybook takeshape\nplaywright\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\nCustom properties\n\n### Stars\n\n62 stars\n\n### Watchers\n\n5 watching\n\n### Forks\n\n6 forks\n\nReport repository\n\n## Contributors 9\n\n## Languages\n\n  * TypeScript 98.0%\n  * JavaScript 1.9%\n  * Other 0.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
