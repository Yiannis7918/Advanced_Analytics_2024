{"aid": "40028555", "title": "Doom as an Interface for Process Management (2000)", "url": "https://www.cs.unm.edu/~dlchao/flake/doom/chi/chi.html", "domain": "unm.edu", "votes": 1, "user": "swidi", "posted_at": "2024-04-14 04:04:09", "comments": 0, "source_title": "Doom as an Interface for Process Management", "source_text": "Doom as an Interface for Process Management\n\n> Permission to make digital or hard copies of all or part of this work for\n> personal or classroom use is granted without fee provided that copies are\n> not made or distributed for profit or commercial advantage and that copies\n> bear this notice and the full citation on the first page. To copy otherwise,\n> or republish, to post on servers or to redistribute to lists, requires prior\n> specific permission and/or a fee.\n>\n> SIGCHI'01, March 31-April 4, 2001, Seattle, WA, USA. Copyright 2001 ACM\n> 1-58113-327-8/01/0003...$5.00.\n\n# Doom as an Interface for Process Management\n\nDennis Chao Computer Science Department University of New Mexico Albuquerque,\nNM 87131 USA +1 505 277 5957 dlchao@cs.unm.edu\n\n#### ABSTRACT\n\nThis paper explores a novel interface to a system administration task. Instead\nof creating an interface de novo for the task, the author modified a popular\ncomputer game, Doom, to perform useful work. The game was chosen for its\nappeal to the target audience of system administrators. The implementation\ndescribed is not a mature application, but it illustrates important points\nabout user interfaces and our relationship with computers. The application\nrelies on a computer game vernacular rather than the simulations of physical\nreality found in typical navigable virtual environments. Using a computer game\nvocabulary may broaden an application's audience by providing an intuitive\nenvironment for children and non-technical users. In addition, the application\nhighlights the adversarial relationships that exist in a computer and suggests\na new resource allocation scheme.\n\n#### Keywords\n\nCyberspace, Doom, first-person shooter, games, metaphors, operating systems,\nPost-Modernism, 3D user interfaces, vernacular, video games, visualization\n\n#### INTRODUCTION\n\nThose who use computers inevitably encounter some of the metaphors that allow\nfor easier assimilation of abstract concepts. The desktop metaphor is so\npervasive that most users hardly notice it [9], but the richness of the\nscience-fiction version of cyberspace is largely confined to research\nlaboratories and Hollywood. The application described in this paper is an\ninitial step towards bringing a richer environment to personal computers.\n\nThere is a large gap between how we think about performing actions on our\ncomputers and how we actually perform them. For example, people who need to\nmanage processes on a UNIX system think about the ``daemons'' spawning\nchildren that may need to be ``killed'' or ``blown away.'' This violent\nlanguage suggests a metaphor for process management: a first-person shooter\ngame. Each process can be represented as a monster, and interacting with the\nmonsters would affect the corresponding processes. The implementation of this\nmetaphor and the great interest it generated reveal interesting insights about\nour computers and our society.\n\n#### IMPLEMENTATION\n\nThe Doom process manager (PSDoom) is a modification of the game Doom [8] that\ndisplays representations of the processes running on a machine. Rather than\nusing standard text-mode UNIX tools to view and manipulate processes, one\nsurveys and shoots at a room full of bloodthirsty mutants, as shown in Figure\n1. When a user starts PSDoom, currently running processes are instantiated as\n``process monsters'' in a single room in a ``dungeon.'' These monsters have\ntheir associated process' name and id printed on them. The program\nperiodically polls the operating system to add newly-created processes to the\ngame. The user may choose to view the processes from a balcony above the room,\nas shown in Figure 2, or to enter the room to interact with them. If the user\ninflicts a wound upon a process monster, the corresponding process' priority\nis lowered to give it fewer CPU cycles. When the monster accumulates enough\ndamage and is killed, the associated process is also killed.\n\nFigure 1: The PSDoom interface.\n\nFigure 2: The view from the balcony in PSDoom.\n\nPSDoom inherits the rest of its behavior from the original Doom, and play is\nnot noticeably affected. Monsters attempt to attack the player and each other.\nThe hostility of the monsters and the user's limited ammunition are\ndisincentives to attack them. Conflict among process monsters could help\nregulate heavily-utilized systems by making crowded rooms have higher\nmortality rates. Killing random processes on an extremely loaded system is not\nan uncommon operating system strategy. When the user is ``killed,'' he or she\nwill be healed and placed at the entrance of the dungeon with a pistol and a\nmodest amount of ammunition.\n\nDoom was chosen for this project for two reasons. The first is that it is a\nclassic game, familiar to most system administrators. The second is that its\nsource code was recently released under the GNU General Public License (GPL)\n[13]. This license not only allows the author to modify the source code, but\nit guarantees that future derivatives of the author's work will be available\nto the public.\n\n#### RESULTS\n\nPSDoom received a surprisingly large reaction even though it was not\npublicized [24,26,4,16]. Less than a week after the initial version of the\ncode was written, the project's website was attracting tens of thousands of\nvisitors per day. Approximately 800 responses were e-mailed to the author or\nwww.slashdot.org within the first two months. Of these responses 27% praised\nthe project, 23% offered suggestions for improving PSDoom, 10% found the\nproject funny, 10% reported technical problems, 8% related PSDoom to science\nfiction or to the future of interfaces, 1% disliked the project, and 0.6% were\nfrightened by its implications.\n\nUsers found the interface intuitive. One can quickly assess machine load by\nseeing how crowded a room is. The command line methods to slow down and kill\nprocesses are different, while PSDoom unifies them - shooting a monster with a\nsmall weapon slows down or ``wounds'' the corresponding process, and repeated\nfirings or the use of a large weapon kills the process, as shown in Figure 3.\nThe violence inflicted upon the monsters reflects the violent terminology of\nUNIX commands.\n\nFigure 3: Killing a process in PSDoom.\n\nA significant problem with the current implementation of PSDoom is that\nmonsters are much more likely to attack each other than expected. This causes\nmany windows to mysteriously disappear as the program runs. For the same\nreason, the computer is prone to crashing because certain processes are vital\nto the computer's operation and should not be killed.\n\nMany users want a larger variety of monsters in PSDoom. If larger or more\nimportant processes were represented as larger monsters, it would be easier to\nassess the machine load at a glance. If these monsters were also more\npowerful, they would be less likely to be killed by accident and be more able\nto defend themselves against the player. Several users made similar\nsuggestions for altering the appearance of monsters based on certain\nattributes. Processes that take more memory could appear wider, while those\nthat take more CPU time can appear taller. Sleeping processes could be\nrepresented by napping monsters.\n\nTo address some of these requests, I added code to make some of the more\nimportant processes ``Barons of Hell,'' the largest monsters in the game.\nUnfortunately, they had a tendency to quickly kill all of the other processes,\nand the user could not interact with processes for more than a few seconds\nbefore his or her avatar is killed. Making the monsters less aggressive would\nallow the user to navigate among processes more easily as well as make the\ncomputer more stable.\n\n#### DISCUSSION\n\nThe enormous interest that PSDoom generated naturally raises the question of\nwhy people find it so compelling. Perhaps even more interesting than the\napplication itself is the set of issues that it raises.\n\n#### Cyberspace Environments\n\nIn 1981, Vernor Vinge introduced the concept of cyberspace to the reading\npublic in his novella True Names [30], in which characters could plug into a\nvirtual universe where their actions in a fantasy world mapped to performing\nsophisticated actions on the network. For example, navigating a treacherous\npath through a swamp in cyberspace could gain the user entry into a high-\nsecurity network in the real world.\n\nThe use of a cyberspace environment can make performing complex tasks easy if\nthe mapping between the actions in the virtual world and their effects in the\nreal world is intuitive. Communication among users may be facilitated because\ninteracting with a group of avatars can be made as natural as interacting with\na group of people. Doom places the user into a 3D first-person perspective\nenvironment that rapidly engages the senses. Its interface is particularly\nsuitable for the task of process management because many system administrators\nare familiar with the game and it realizes the common metaphor of killing\nprocesses.\n\nIn PSDoom, actions that affect the processes take time and effort. This\nphilosophy runs counter to intuition, which tells us to make everything as\neasy to do as possible. In a command line interface, all actions take\napproximately the same amount of work, making it just as easy to erase all of\none's files as it is to remove a single one. In this cyberspace environment,\nthe players are not omnipotent, so actions take an amount of effort\nproportional to their effects. People with different levels of authority can\nbe given weapons of different strengths. An experienced system administrator\ncan be given a large gun, while the beginner may be forced to deal with\nmonsters with his or her bare hands. It would take a foolhardy player to\nattack a room full of monsters, just as a newbie should not kill a bunch of\nimportant processes. A more experienced sysadmin would have time to stop a\nnovice who is trying to kill the wrong process.\n\n#### The Software Vernacular\n\nCurrent applications often do not leverage the rich vocabulary of contemporary\nmass media and video games. Their user interfaces are usually austere,\nreflecting the limitations of the machines of two decades ago. Our rectilinear\ndesktops feature a Machine Aesthetic, not a human one. There have been\nattempts to create friendlier interfaces based on familiar physical settings\n(e.g. General Magic's MagicCap [21] (Figure 4) and Microsoft Bob [2] (Figure\n5)), but they have often been derided as condescending or confining [12]. The\nfailure of these more humane interfaces may be due to the denial of the\ncomputer world's own vocabulary that is distinct from that of everyday life's.\nIn many ways, computer games have become the vernacular of the computer world\nbecause they are what children and many non-technical adults use.\n\nFigure 4: General Magic's MagicCap.\n\nFigure 5: Microsoft Bob.\n\nInterfaces that adhere strictly to a metaphor based on the physical world are\nin danger of becoming simulations of reality instead of useful analogies [18].\nOne problem with simulations is that one must closely adhere to all the\nrestrictions of the real system. For example, in Microsoft Bob it is\ndisturbing to see pieces of furniture hovering over the floor in apparent\nviolation of gravity. In contrast, it is more or less natural to have an\narbitrarily large number of windows open on a computer desktop, which is a\nless-literal, and thus less-confining, metaphor. Cartoon-like animations have\nbeen suggested as a compromise between straightforward representation and\nartistic expression [6]. The idioms of cartoons form an effective vocabulary\nfor concise visual communication with the user, but cartoons lack a crucial\nelement of user interfaces: interactivity. Computer games have successfully\nintegrated concise, stylized visual representations and feedback from the\nuser.\n\nThe desktop metaphor derives much of its power from the fact that users were\ntraditionally office workers who spent much of their days at actual desks [12,\n20]. However, in recent years computers have entered the home, and the current\ngeneration of users is gaining increased exposure to computers that are not\nmerely office appliances. Children are now growing up on MTV and Nintendo and\nare therefore more literate in the languages of video games and mass media\nthan in that of the traditional office milieu. Designers should consider\ntaking advantage of the vocabulary of popular culture instead of trapping the\nnext generation in dioramas of suburban homes and offices.\n\nLike the Post-Modern architects, I would like to blur the distinction between\n``high'' and ``low'' culture [29,3] and bring popular culture into ``serious''\ncomputer applications. By adding familiar cultural elements to our interfaces,\nwe can make them appealing to the common user and children, the next\ngeneration of users. These elements would bring a sense of playfulness and\nease that are usually absent from our button- and toolbar- laden windows.\n\nSeveral attempts have been made to introduce game-like elements to the\ndesktop, including the recent UBUBU Universe [27]. UBUBU replaces the\nhyperlinks and folders on the desktop with navigable planets in a solar\nsystem. While the concept is superficially similar to Bob, the choice of\nflying through space rather than walking around a house may engage the general\npublic instead of being perceived as patronizing. Companies like UBUBU that\ndesign products for web-surfers are using playful game-like designs to tap\ninto the lucrative demographic of computer game players.\n\n#### An Adversarial Operating System\n\nPSDoom presents an unusual perspective on our interactions with computer\nprograms. It is unique in that it allows the processes to fight each other and\nthe user. Thinking of our computing environments as being adversarial can be\nenlightening. Processes are competing for machine resources, such as memory\nand CPU time, and PSDoom makes this competition explicit. The user may want to\nkill processes to free needed resources, so from the process's perspective,\nthe user may be its greatest threat. The processes are given the ability to\nshoot back and defend themselves.\n\nOperating systems attempt to satisfy users and processes through fairness\npolicies for resource allocation. An adversarial operating system would invert\nthe responsibility for sharing resources by forcing the users and processes to\ncompete directly with each other. It would simply maintain a stable arena in\nwhich processes could compete. An offensive and defensive arms race could\nensue, but the system would not necessarily degrade to an hostile, anarchic\nenvironment. Under the right conditions, processes will cooperate rather than\ncompete [1]. They would find it in their best interests to only attack when\nnecessary because unduly belligerent processes would become injured in\nfrequent conflicts and die.\n\n#### Violence in Computer Games\n\nIt is unfortunate, especially in the light of recent schoolyard tragedies,\nthat first-person shooters are so popular. Even though studies on the effects\nof violent media on youth are not conclusive [11], interface designers must\nproceed with caution when adding potentially aggressive aspects to interfaces.\nOne must take into consideration the age of the expected user base and the\npossible use of non-aggressive alternatives.\n\nLucasfilm's Habitat [14], an early multi-user virtual environment, faced these\nethical dilemmas with the introduction of ``weapons.'' These weapons could\n``kill'' avatars, though death in Habitat is no more serious than death in\nDoom - the avatar loses possession of the items he or she was carrying and is\nsent home. About half the players enjoyed this aspect of the environment while\nthe rest were opposed to it [23]. To stem anarchy, the players established\ntheir own churches and laws. In Ultima Online [28], an online fantasy\nenvironment, player-killing is an integral part of gameplay for some, but many\nvalue the complex social interactions with their fellow players even more.\n\nWe have seen violent multi-user games evolve into peaceful virtual\ncommunities. Production values play a role in the suspension of disbelief\nessential for this to happen [19], but even text-based MUDs, which originated\nas hack-and-slash games, have become chatrooms [5]. The key elements seem to\nbe the rich interactions with other players and the persistence of identity\nover multiple sessions. These seminal experiments in multi-user virtual worlds\nare showing us how to moderate violence with a sense of community.\n\n#### RELATED WORK\n\n#### Visualizing Processes\n\nThe standard UNIX application to view processes is top (Figure 6). It is a\ndynamic version of ps, a command that simply lists the running processes. As\nimplied by its name, top displays the ``top'' CPU-users, refreshing at regular\nintervals. Its interface is primitive. The user may not interact directly with\nthe process list - an instruction and process number must be entered, much\nlike on the command line. Another limitation is that the number of processes\ndisplayed is limited by the number of lines on the display (typically around\ntwenty to thirty). There is now a plethora of alternatives to top that allow\nmore interaction with the list, such as clicking on the entries. These\ncontribute obvious graphical additions to a process display and add little\nconceptually.\n\nFigure 6: The UNIX top application.\n\nLavaPS [17] is a more abstract way to view processes. It displays processes as\ncolored blobs in a window, using the size, color, and location of shapes in\nthe window to represent certain metrics of the processes, as shown in Figure\n7. More explicit information can be shown on demand. Like PSDoom, LavaPS\nrepresents processes as physical entities with no quantitative information.\nHowever, the application is inspired by ``calm technology'' [31] and is\ntherefore intentionally passive. Its main purpose is to display the state of\nprocesses, and manipulating the actual processes can be done through a menu.\n\nFigure 7: Heidemann's LavaPS process visualization application.\n\n## Game-like Interfaces\n\nThe CHI 97 Workshop on Game Design and HCI suggests that computer game design\nhas much to offer to the HCI community, but little has been done so far [7]. A\npopular area for game-like interfaces is software for children. Such products\nrange from educational games to tools that encourage creativity, such as\nauthoring tools. It is difficult to make direct comparisons between software\nfor children and software for adults because the expectations we have for the\nintended audiences are so different. Designers readily use entertaining\ninterfaces to keep children engaged [15]. Even in educational software, in\nwhich the ultimate goal is to teach the user, the proximate goal is to keep\nthe child engaged, or else the ultimate goal will never be reached. In\napplication software for adults, the burden of staying focused is on the user.\nThe measurement for success is not how enjoyable the software is but rather\nhow effectively it accomplishes a task.\n\nThe contrast between software for these two audiences highlights the\ndifference between enjoyment and ergonomics. A piece of children's software\nmust look good and be fun, while software for adults must work. These are not\nnecessarily conflicting goals, as an interface that is difficult to use will\nalso adversely affect the user's enjoyment. However, for ``serious'' software,\nconcessions to make a program more enjoyable might not be implemented because\nthey can not be justified on ergonomic grounds.\n\nFor an application that helps the user monitor the state of a system, like\nPSDoom, the case for making user interfaces more engaging is compelling.\nKeeping the user engaged is as important as making the tasks easy to perform.\nIn such cases, the use of randomness in a program, which adversely affects\nease-of-use, may be desirable because it can make the task more enjoyable\n[22].\n\nThe use of game-like interfaces need not harm the performance of applications.\nIn fact, it can reduce the learning curve. We would not need to sacrifice\npower - games have amazingly complex maneuvers that skilled operators can use\nin addition to their simple repertoires for novices.\n\n#### FUTURE WORK\n\nIt would not be difficult to remedy the major source of instability of PSDoom,\nthe belligerence of the monsters. The monsters currently have no sense of\nself-preservation. They will continue to attack until they or their targets\nare eliminated. One could simply make the monsters only attack when provoked\nand more likely to run away rather than fight to the end.\n\nIt would be natural to extend the program to networked environments. In fact,\nmany internet search engines have already classified PSDoom as a network tool\nin anticipation of this feature. A networked version would allow multiple\nusers to communicate verbally as well as work cooperatively [10]. Turning this\nsingle-player game environment into an online world could reduce the level of\nviolence by increasing the sense of community.\n\nBy selecting only certain types of processes to appear in the dungeon, one can\nchange the nature of PSDoom. For instance a filter that only allows suspicious\nor possibly corrupted processes [25] to appear would turn PSDoom into a\nsecurity program. Alternatively, one can choose to display only large users of\nmemory or bandwidth in order to alleviate pressure on these resources.\n\n#### CONCLUSION\n\nPSDoom presents a novel approach to process visualization and manipulation\nthat illuminates many aspects of our relationship with computers. The\npopularity of this early prototype demonstrates that interfaces inspired by\nvideo games and science fiction are eagerly awaited by a large audience.\nComputer games are a rich and often overlooked source of technology and\nmetaphors for user interfaces that will only increase in importance as\nchildren, the next generation of users, grow up with computers. Our computer\nenvironments are rapidly becoming an anachronism as people who have never\nhandled actual file folders are forced to use their virtual counterparts. The\nprocess of changing interface metaphors will expose previously-obscured facets\nof the underlying applications, such as the genuinely adversarial interactions\nin our operating systems. Interested programmers can explore and modify the\ncode for PSDoom, which is available at\nhttp://www.cs.unm.edu/~dlchao/flake/doom.\n\n#### ACKNOWLEDGMENTS\n\nI would like to thank the Adaptive Computation Group at UNM for providing a\nsupportive environment in which one can claim one is doing research while\nplaying Doom for two days. The offhand remarks of Anil Somayaji provided the\ninitial inspiration for the project. David Ackley, Ben Bederson, Patrik\nD'haeseleer, Stephanie Forrest, and Jason Stewart provided helpful comments\nthat improved this paper. This work was partially supported by the National\nScience Foundation (grants NSF-9553623, CDA-9503064, and IRI-9711199) and the\nOffice of Naval Research (grant N00014-99-1-0417).\n\n#### Bibliography\n\n1\n\n    \n\nAxelrod, R. The Evolution of Cooperation. Basic Books, New York, 1984.\n\n2\n\n    \n\nBob. Microsoft Corporation, Seattle WA, 1995.\n\n3\n\n    \n\nBrand, S. How Buildings Learn: What Happens After They're Built. Viking\nPenguin, New York, 1994.\n\n4\n\n    \n\nBrockmeier, J. A SysAdmin's Dream. Linux Magazine 2, 1 (January 2000), 76.\n\n5\n\n    \n\nBruckman, A. MOOSE Crossing: Construction, Community, and Learning in a\nNetworked Virtual World for Kids. MIT Media Lab, Cambridge MA, 1997.\n\n6\n\n    \n\nChang, B.W., and Ungar, D. Animation: From Cartoons to the User Interface.\nUIST '93 Conference Proceedings (Atlanta GA, November 1993), ACM Press, 45-55.\n\n7\n\n    \n\nCherny, L., Clanton, C., and Ostrom, E. Entertainment is a Human Factor: A CHI\n97 Workshop on Game Design and HCI. SIGCHI Bulletin 29, 4 (October 1997),\n50-54.\n\n8\n\n    \n\nDoom. Id Software, Mesquite TX, 1993.\n\n9\n\n    \n\nErickson, T. Working With Interface Metaphors. The Art of Human-Computer\nInterface Design, edited by Brenda Laurel. Addison-Wesley Publishing Company,\nInc., New York, 1990.\n\n10\n\n    \n\nEvard, R. Collaborative Networked Communication: MUDs as Systems Tools.\nProceedings of the Seventh Systems Administration Conference (LISA VII)\n(Monterrey CA, November 1993), USENIX, 1-8.\n\n11\n\n    \n\nThe Federal Trade Commission. Marketing Violent Entertainment To Children: A\nReview Of Self-Regulation And Industry Practices In The Motion Picture, Music\nRecording & Electronic Game Industries. Washington: Government Printing\nOffice, 2000.\n\n12\n\n    \n\nGentner, D., and Nielson, J. The Anti-Mac Interface. Communications of the ACM\n39, 8 (August 1996), 70-82.\n\n13\n\n    \n\nGNU General Public License. Free Software Foundation, Inc., Boston MA, 1991.\n\n14\n\n    \n\nHabitat. Lucasfilm Ltd, San Rafael CA, 1986.\n\n15\n\n    \n\nHakansson, J. Lessons Learned From Kids: One Developer's Point of View. The\nArt of Human-Computer Interface Design, edited by Brenda Laurel. Addison-\nWesley Publishing Company, Inc., New York, 1990.\n\n16\n\n    \n\nHeidemann, J. LavaPS. 1998. Available at\nhttp://www.isi.edu/~johnh/SOFTWARE/LAVAPS/.\n\n17\n\n    \n\nHwang, F. Commando Line Interface. Wired 8, 2 (February 2000), 52.\n\n18\n\n    \n\nJohnson, S. Interface Culture. Harper, San Francisco CA, 1997.\n\n19\n\n    \n\nKim, A.J. Ultima Online: An Interactive Virtual World with Multiple\nPersonalities. SIGGRAPH Bulletin 32, 2 (May 1998), 15-19.\n\n20\n\n    \n\nLangford, D., and Jones, C. The Kitchen Interface - A Lateral Approach to GUI.\nSIGCHI Bulletin 26, 2 (April 1994), 41-45.\n\n21\n\n    \n\nMagicCap. General Magic, Sunnyvale CA, 1994.\n\n22\n\n    \n\nMalone, T.W. Toward a theory of intrinsically motivating instruction.\nCognitive Science 4, 333-370.\n\n23\n\n    \n\nMorningstar, C., and Farmer, F.R. The Lessons of Lucasfilm's Habitat.\nCyberspace: First Steps, edited by Michael Benedikt. MIT Press, Cambridge MA,\n1990, 273-301.\n\n24\n\n    \n\nSchmidt, J. Systemverwaltung nach Hackerart. c't: Magazin f\u00fcr Computer\nTechnik, 23 (1999), 68.\n\n25\n\n    \n\nSomayaji, A. Automated Response Using System-Call Delays. 9th USENIX Security\nSymposium (Denver CO, August 2000), ACM Press, 185-197.\n\n26\n\n    \n\nSystemadministration mit dem Colt. IX: Magazin f\u00fcr professionelle\nInformationstechnik, 12 (December 1999), 44.\n\n27\n\n    \n\nUBUBU Universe. UBUBU, Inc., San Francisco CA, 2000. Available at\nhttp://www.ububu.com/.\n\n28\n\n    \n\nUltima Online. Electronic Arts, Inc., Redwood City CA, 1997.\n\n29\n\n    \n\nVenturi, R., Scott Brown, D., and Izenour, S. Learning From Las Vegas. The MIT\nPress, Cambridge MA, 1972.\n\n30\n\n    \n\nVinge, V. True Names, in Binary Star #5, edited by James R. Frenkel. Dell, New\nYork, 1981.\n\n31\n\n    \n\nWeiser, M., and Brown, J.S. Designing Calm Technology. PowerGrid Journal 1.01\n(July 1996).\n\n#### About this document ...\n\nThis document was generated using the LaTeX2HTML translator Version 99.2beta6\n(1.42)\n\nCopyright \u00a9 1993, 1994, 1995, 1996, Nikos Drakos, Computer Based Learning\nUnit, University of Leeds. Copyright \u00a9 1997, 1998, 1999, Ross Moore,\nMathematics Department, Macquarie University, Sydney.\n\nThe command line arguments were: latex2html -no_navigation -split 0 chi.tex\n\nDennis Chao subsequently hand-edited the HTML output.\n\nDennis Chao 2000-12-04\n\n", "frontpage": false}
