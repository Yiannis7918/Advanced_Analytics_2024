{"aid": "39959813", "title": "How to think about HTML responsive images", "url": "https://danburzo.ro/responsive-images-html/", "domain": "danburzo.ro", "votes": 1, "user": "danburzo", "posted_at": "2024-04-07 10:29:00", "comments": 0, "source_title": "How to think about HTML responsive images \u00b7 Dan C\u0103t\u0103lin Burzo", "source_text": "How to think about HTML responsive images \u00b7 Dan C\u0103t\u0103lin Burzo\n\nSkip to content\n\n# How to think about HTML responsive images\n\nPublished Apr 6, 2024\n\nThe days with an immobilized knee are long and I\u2019ve just read through the\nImages section of the HTML Standard, as one does, hoping to better understand\nhow responsive images work.\n\n## What\u2019s a responsive image?\n\nThe term responsive image encompasses two complementary approaches.\n\nIn the context of responsive web design, a responsive image is one that\u2019s made\nfluid with the width, height, aspect-ratio, and object-* properties, as part\nof CSS layouts that change with the viewport size and other media conditions.\n\nBut what the HTML Standard is concerned with, and what this article talks\nabout, are the so-called \u201cadaptive images\u201d enabled by the srcset and sizes\nattributes on <img>, and the dedicated <picture> and <source> elements. These\nHTML features help the browser pick the most appropriate image content for the\ncurrent environment.\n\nHere\u2019s how I made sense of responsive image content, progressing from simpler\nto more complicated \u2014 and then back to simple.\n\n## Level 1: one image, one resolution\n\nLet\u2019s start with the simplest image markup:\n\n    \n    \n    <img src=\"puppy.jpg\" alt=\"A black and white pupper, glancing inquisitively\">\n\nIn the absence of any attributes or styles to dictate otherwise, puppy.jpg\nrenders at its natural width and height, 120px by 150px in CSS pixels.\n\nA CSS pixel is defined as \"the visual angle of one pixel on a device with a\ndevice pixel density of 96dpi and a distance from the reader of an arm\u2019s\nlength\" or about 0.0213 degrees.\n\nModern phones are used at a much smaller distance than arm\u2019s length. Their\nscreens need to have a greater density to look good: the visual angle of\n0.0213\u00b0 at a distance of 50 centimeters computes to a pixel on a 137ppi\n(points per inch) display.\n\nThe 2556\u00d71179px physical resolution of an iPhone 15, packed in a display that\nmeasures 6.1 inches diagonally, gives it a pixel density of 460 ppi. That\u2019s\nmore than three times denser than our nominal CSS display. The iPhone can\ntherefore comfortably use three device pixels to draw each CSS pixel, and web\ncontent will have more or less the same size as when viewed on a regular\nmonitor placed further away.\n\nThis ratio between a device pixel and a CSS pixel is called the device pixel\nratio and is available on window.devicePixelRatio. The device pixel ratio is\nnot a fixed measure of the capabilities of the physical display. The display\nresolution chosen by the user, or zooming in and out of the web page, can also\ninfluence the ratio. Zooming into the page makes for fewer, larger CSS pixels,\nso the device pixel ratio increases.\n\nBack to our image. On devices that have a device pixel ratio of 2 or 3\n(usually called retina displays regardless of brand), the image looks blurry\nat its natural size: the display can potentially use two or three separate\ndevice pixels in the space of a CSS pixel, but we only give it one image pixel\nto draw. On these denser displays, the image looks better when scaled down to\nincrease its density to match that of the display. When one image pixel\nbecomes one device pixel, instead of two or three, the image is as crisp as it\ngets.\n\n    \n    \n    <img src=\"puppy.jpg\" width=\"120\" alt=\"...\"> <!-- 1x --> <img src=\"puppy.jpg\" width=\"60\" alt=\"...\"> <!-- 2x --> <img src=\"puppy.jpg\" width=\"40\" alt=\"...\"> <!-- 3x -->\n\nThe same 120px by 150px image is rendered at its natural size, then scaled\ndown in half, and finally to 1/3 of its natural width.\n\nThe rendered size of an <img> element can be adjusted with the width and\nheight HTML attributes, or with equivalent CSS properties.\n\nIt\u2019s best to include explicit width and height attributes on the <img>. That\nway the browser can leave room for the image beforehand and prevent layout\nshifts as the image loads. It also helps presentation in contexts that don\u2019t\nship the author\u2019s CSS, such as RSS feeds. (I can count at least three feeds in\nmy reader with huge, distracting icons that are, no doubt, stray images\nwithout sizing attributes.)\n\n## Level 2: one image, many resolutions\n\nFor a sharp image on displays of various densities, shrinking the same image\nfile to various degrees to increase its density is insufficient. We need\ncommensurately larger images that pack more detail.\n\nImages with progressively larger resolutions, representing the same content.\n\n    \n    \n    <img src=\"puppy.jpg\" width=\"120\" alt=\"...\"> <!-- 1x --> <img src=\"puppy-hd.jpg\" width=\"120\" alt=\"...\"> <!-- 2x --> <img src=\"puppy-ultra-hd.jpg\" width=\"120\" alt=\"...\"> <!-- 3x -->\n\nWhen shrunk to their ideal density, all three images render at the same size.\n\nThe srcset attribute lets you pack all the images on a single <img> tag, and\nlet the browser choose the most appropriate for each situation.\n\n    \n    \n    <img srcset=\"puppy-ultra-hd.jpg 3x, puppy-hd.jpg 2x\" src=\"puppy.jpg\" alt=\"...\" >\n\nEach entry in srcset has a pixel density descriptor: a floating-point number\nfollowed by the unit x. The descriptor next to each image source declares the\nimage density at which that source is meant to be rendered. If omitted for a\nsource, a 1x descriptor is assumed.\n\nThe src attribute on the <img> is both a fallback for browsers that don\u2019t\nsupport srcset (a vanishingly small lot) and a contribution to the set of\nimage source candidates with an implicit 1x pixel density descriptor.\n\nThe browser will select the most appropriate image source out of the set of\ncandidates, based not only on the display density, but possibly other factors\nsuch as network speed and mobile data preferences. This choice is made \"in an\nimplementation-defined manner\", meaning the browser is free to choose whatever\nit thinks works best.\n\nIn the absence of width and height HTML attributes to dictate otherwise,\nwhatever image source is selected will be rendered at its density-corrected\nnatural dimensions, which are the image\u2019s natural dimensions divided by its\ndeclared density. The density-corrected natural dimensions can be accessed on\nthe DOM object\u2019s naturalWidth and naturalHeight properties:\n\n    \n    \n    img.naturalWidth === intrinsicWidth / density; img.naturalHeight === intrinsicHeight / density;\n\nAt 1x density, the element\u2019s density-corrected natural dimensions correspond\nto the file\u2019s natural (intrinsic) dimensions. At 2x density, the image is\nrendered at half the number of CSS pixels as the file\u2019s natural dimensions.\n\nBecause of the way we\u2019ve generated our three images and declared their\nintended densities, they all render at a width of 120px, regardless of which\nimage source the browser chooses. So there\u2019s no issue with adding the\nrecommended explicit width and height attributes:\n\n    \n    \n    <img srcset=\"puppy-ultra-hd.jpg 3x, puppy-hd.jpg 2x\" src=\"puppy.jpg\" width=\"120\" height=\"150\" alt=\"...\" >\n\nTo tell which image source the browser has chosen at any given point, look at\nthe currentSrc property on the image element.\n\n## Level 3: dynamic image density\n\nThe srcset attribute with pixel density descriptors works well for images that\nare meant to be displayed at their (density-corrected) natural size.\n\nBut images often participate in responsive layouts and are made fluid with\nCSS, so an image renders at various densities depending on the layout. On a\nlarge screen, the image may be part of a three-column layout. On a smaller\nscreen, the layout may collapse to a single column with full-width images.\n\nThis is a case where the image density changes but the display density\ndoesn\u2019t, so srcset with density descriptors won\u2019t cut it.\n\nThere\u2019s a second way we can use srcset. To help the browser choose an image\nsource of appropriate density when media conditions change, we can swap our\ndensity descriptors for a combination of width descriptors and a separate\nsizes attribute.\n\nInstead of describing the intended image densities, width descriptors (using\nthe w suffix) declare the natural (intrinsic) width of each of the image\nsources.\n\nThis information, by itself, is not enough for the browser to make a\nmeaningful choice. It needs to know how the image is going to be laid out.\nThis is accomplished with the sizes attribute, which declares the layout width\nof the image in one or more media conditions.\n\n    \n    \n    <img srcset=\" puppy-ultra-hd.jpg 360w, puppy-hd.jpg 240w, puppy.jpg 120w \" sizes=\"(min-width: 400px) 10em, 80vw\" alt=\"...\" >\n\nThe srcset attribute declares three image sources using width (w) descriptors:\none 360px wide, one 240px wide, and a final one 120px wide. The sizes\nattribute describes how the image is laid out: on devices wider than 400px,\nthey are rendered at a width of 10em, otherwise they occupy 80% of the\nviewport width.\n\nWe\u2019re free to declare the layout width with any CSS unit for <length>, and use\ncalc() and other math functions, to try to roughly match the image\u2019s actual\nlayout width.\n\n> Percentages aren\u2019t allowed in the sizes attribute, as they wouldn\u2019t match\n> the usual understanding of percentage of the parent\u2019s width. Remember that\n> choosing image sources for eagerly-loaded images happens before layout, so\n> we can only refer to things known beforehand, such as the viewport\u2019s\n> dimensions.\n>\n> As we\u2019ll see later on, lazily-loaded images, which are fetched after layout,\n> don\u2019t need to juggle any of this sizes stuff.\n\nThe purpose of the sizes attribute is to help convert width descriptors to\ndensity descriptors. Width descriptors are turned into density descriptors by:\n\n  1. identifying the size that matches the current media conditions among the values in sizes;\n  2. resolving the size value to CSS pixels;\n  3. dividing the declared width by that amount of pixels.\n\nThe density computed from a source\u2019s width descriptor and a layout size is\ncalled the source\u2019s effective density.\n\nIn a larger viewport that\u2019s, say, 1920 pixels wide, our image is intended to\nbe displayed at a width of 10em, which computes to 10 * 16px = 160px in CSS\npixels. The large image source, having a declared width of 360px, when\nrendered 160px wide, will have an effective density of 360/160 = 2.25. The\nmedium and small images will have effective densities of 1.5 and 0.75\nrespectively. On this viewport width, the equivalent srcset with density\ndescriptors is:\n\n    \n    \n    <img srcset=\" puppy-ultra-hd.jpg 2.25x, puppy-hd.jpg 1.5x, puppy.jpg 0.75x \" style=\"width: 10em\" alt=\"...\" >\n\nIn a smaller viewport that is 300 pixels wide, our images are meant to be\ndisplayed at 80vw, which computes to 300px * 80/100 = 240px CSS pixels. In\nthese media conditions, our three image sources will have effective densities\nof 1.5, 1, and 0.5 respectively. On this smaller viewport width, the\nequivalent srcset with density descriptors is:\n\n    \n    \n    <img srcset=\" puppy-ultra-hd.jpg 1.5x, puppy-hd.jpg 1x, puppy.jpg 0.5x \" style=\"width: 80vw\" alt=\"...\" >\n\nTherefore, srcset with width descriptors, combined with sizes, is a way to\nassign a dynamic density to image sources, roughly based on how the image is\nlaid out in various media conditions.\n\nWhen srcset uses width descriptors, the image\u2019s src is purely a fallback for\nbrowsers that don\u2019t support it. The attribute can\u2019t contribute an image\nsource, because there\u2019s no way to declare its layout width.\n\nThe two srcset flavors are both ultimately resolved to a set of image sources\nwith density descriptors, but they don\u2019t mix well. You can\u2019t use width\ndescriptors for some sources and density descriptors for others in a single\nsrcset. Either use width descriptors with the sizes attribute, or density\ndescriptors without the sizes attribute. In the former case, sizes is\nnecessary; in the latter, it serves no purpose and is ignored.\n\n## Level 4: the <picture> element\n\nThe srcset attribute on the <img> merely provides a set of candidate sources\nto the browser, along with enough information about them to allow for an\ninformed choice. As Mat Marquis writes in the Learn Images course, it makes\nsrcset a descriptive syntax. It says to the browser: \"here\u2019s what I have, now\nyou pick!\"\n\nThere\u2019s another HTML feature with which we can be more prescriptive and say\n\"only consider these image sources if these conditions are met\". This is done\nwith one or more <source> elements associated with the <img> by virtue of\nbeing wrapped together in a <picture> element:\n\n    \n    \n    <picture> <source ...> <source ...> <img ...> </picture>\n\nThe <picture> element is a container that augments its inner <img> by\nproviding more sets of image sources to choose from, declared with <source>\nelements. If the browser doesn\u2019t support these elements, no harm is done:\nthey\u2019re ignored and the <img> works as if it were alone.\n\n(You might say <picture> is the original HTML web component, but that\u2019s an\nangle for another day.)\n\nLike image elements, <source>s use the srcset and sizes attributes to declare\ntheir set of image sources. In addition, they accept two attributes that\ncondition their contribution:\n\n  * the type attribute declares the media type of the image set, so that the browser can skip image formats it doesn\u2019t understand;\n  * the media attribute declares the media conditions where the image set makes sense, which the browser skips if they don\u2019t apply.\n\nThe first source that matches the current media conditions and media type\ncapabilities defines the pool of image candidates, from which the browser\nchooses the most appropriate one as with <img srcset>. If no sources apply to\nthe current circumstances, the image\u2019s own srcset or src is used as a\nfallback.\n\n### The type attribute\n\nThe type attribute enables us to serve newer, more efficient image formats to\nsupporting browsers without ruining it for the others. If a browser can\u2019t use\nimage/avif, or image/webp it can just ignore the respective <source> elements.\n\n    \n    \n    <picture> <source srcset='puppy.avif' type='image/avif'> <source srcset='puppy.webp' type='image/webp'> <img src='puppy.jpg' alt='...'> </picture>\n\nServing newer image formats safely with <source> elements with a type\nattribute. If we omitted the type attribute, or used puppy.avif and puppy.webp\ndirectly in the image\u2019s srcset attribute, unsuspecting older browsers would\nfetch formats they don\u2019t understand, resulting in a broken image.\n\n### The media attribute\n\nThe media attribute can contain any media condition. We could, for example,\nserve an alternative image for dark mode, and a higher-contrast version\nappropriate for printing.\n\nThree styles for illustrating a portion of the macOS display settings: light\nmode, dark mode, and high-contrast mode.\n\n    \n    \n    <picture> <source media='(prefers-color-scheme: dark)' srcset='macos-dark.png'> <source media='print' srcset='macos-contrast.png'> <img src='macos-light.png' alt='...'> </picture>\n\nA <picture> element uses the three styles in <source> elements, with the\nappropriate media queries. Above the code: Live picture, as chosen by the\nbrowser. Try switching to dark mode, or print-previewing the page to see the\neffect.\n\nThe same rules for srcset and sizes apply to <source> elements: you can\u2019t mix\ndensity descriptors and width descriptors in a single srcset, and you must use\nthe sizes attribute with, and only with, width descriptors.\n\n<source> elements also have rules of their own:\n\n  * each <source> must have some sort of type or media condition, or both. At most one bare <source> is accepted, in some cases;\n  * there\u2019s no src attribute on <source> because it would be confusing and besides, any valid src can be plopped into srcset instead.\n\n## Level 5: art direction\n\nWhile a srcset is meant to represent the same image content at different\nscales, multiple <source> elements can represent different content altogether.\nIn the previous example, we used the media attribute to serve images styled\naccording to user preferences.\n\nThe different images don\u2019t need to have the same aspect ratio. In fact,\nthere\u2019s nothing stopping us from serving radically different images in various\nscenarios. On a large screen, a photograph could be a wide shot of the\nsubject, while on smaller screens that can be cropped closer to the action.\n\nThe technique is often called art-directing responsive images.\n\nArt directing an image: a close-up crop of 200px by 200px is chosen for\nsmaller screens.\n\nSince setting the width and height on the <img> element is important, it\nseemed like a great idea to add support for width and height attributes on\n<source> elements. The dimensions can then be imparted to the image element\nwhen the source is selected. (The case for sources also getting their own alt\nattribute is still being made.)\n\n    \n    \n    <picture> <source srcset=\"puppy-closeup.jpg\" width=\"200\" height=\"200\" media=\"(max-width: 40em)\"> <img src=\"puppy-ultra-hd.jpg\" width=\"450\" height=\"600\"> </picture>\n\nAn art-directed responsive image displays a close-up of the subject when the\nviewport is less than 40em (640px) wide. Notice the width and height\nattributes on the <source> element.\n\n> Cropping after image load: Images can also be art-directed with CSS using\n> the object-fit, object-position, and object-view-box properties. However, to\n> the extent that is practical, using <picture> to serve the pre-cropped\n> images saves some bandwidth and compute energy.\n\n## Extra credit: lazy images with sizes=auto\n\nAs promised in the introduction, we end with a bit of respite from the\ncomplexity of responsive image markup.\n\nA recent addition to the HTML Standard allows lazily-loaded images to ditch\nthe arduous, hand-coded, approximated values in the sizes attribute. Instead,\nwith the auto value, the browser uses the image\u2019s actual layout width to\ncompute more accurate densities for the image candidates.\n\nEric Portis covers the feature and its caveats in admirable detail. I won\u2019t\nrepeat the points here, because this thing is already getting too long.\n\n## How browsers choose one image\n\nNow that we\u2019ve covered the theory of providing image source candidates, let\u2019s\nfind out how browsers actually pick the most appropriate one.\n\nI\u2019ve run a couple of quick tests on MacBook Pro and iPhone, and dipped into\nbrowser source code to confirm the behavior (insofar as I am looking at the\nright code to begin with).\n\n### Density descriptors in srcset\n\nThe image above uses several image sources of 300\u00d7200px constant size, but\nlabeled and declared with density descriptors ranging from 0.1x to 4x in the\nsrcset attribute. This shows us which source the browser picks. Test: image\ndensity selection.\n\nFirefox. At 100% zoom, the device pixel ratio is 2. Zooming in and out of the\npage updates the DPR and re-fetches the image with the smallest density that\u2019s\nhigher than the current DPR, or the highest density available when all\ndensities are too small. Relevant code in ResponsiveImageSelector.cpp#L331.\n\nChrome. The browser selects the image with the density closest to the DPR when\nloading the page. Zooming in and out of the page updates the DPR, but the\nbrowser will only fetch another, more appropriate image on page refresh. It\nwill also prefer the densest image source it has in its cache, even if its\ndensity is much higher than needed. Relevant code in\nhtml_srcset_parser.cc#L424.\n\nSafari. The DPR is fixed to a value of 2 on the MacBook and 3 on the iPhone.\nZooming in and out of the page doesn\u2019t update the DPR or fetch another image.\nLike in Firefox, you get the image with the smallest density that\u2019s higher\nthan this fixed DPR. Relevant code in HTMLSrcsetParser.cpp#L266.\n\nAll in all, given the browser algorithms, every image source is evaluated, and\nthe order in srcset doesn\u2019t affect the choice. Do keep in mind that only the\nfirst item for each particular density (be it declared density or effective\ndensity) is kept, and any duplicates are pruned.\n\nAs far as I can tell, browsers aren\u2019t currently applying any of the\nsophisticated decision-making envisioned by the HTML Standard. An image\ndensity close to the current DPR is always favored.\n\nWith the exception of Firefox, which responds to zooming, browsers stick to\ntheir choice of image source throughout the page session. Pinch-zooming does\nnot affect DPR in any browser, so raster images don\u2019t get magically enhanced\nif you pinch into them (this is by design).\n\n### Width descriptors in srcset\n\nThe image above uses several image sources with the same aspect ratio but\ndifferent scales, labeled and declared with width descriptors ranging from\n300w to 3000w in the srcset. The declared layout width of the image is\nsizes=\"100vw\". This shows us which image source the browser picks.\n\n(Note: To make it fit in the article\u2019s layout, the image is made responsive\nwith max-width: 100%; height: auto. Open the test in a separate tab to\nevaluate more accurately: Test: image width selection)\n\nWhen using width descriptors in srcset, we expect the browser to factor in the\nsizes attribute (here having a value of 100vw) to compute density descriptors\nthat update along with the viewport. It\u2019s no surprise then that browsers\nbehave more or less like with density descriptors, with the added benefit that\nthe image sources get re-evaluated more often.\n\nFirefox. Resizing the browser window causes the browser to choose the image\nwith the appropriate effective density at any given moment. Zooming in and out\nof the page re-evaluates things but generally doesn\u2019t produce any effect:\nwhile the size of the CSS pixel increases (and with it, the DPR), 100vw\nevaluates to fewer CSS pixels, which results in more or less constant image\ndensity throughout.\n\nChrome. Like in Firefox, resizing the browser window causes the browser to re-\nevaluate the image sources based on their effective density. As seen with the\ndensity descriptor test, Chrome caches the images it fetches and always uses\nthe densest available. Once fetched for a large viewport, a dense image will\nbe used even as you shrink the viewport.\n\nSafari is the most conservative about fetching other images. With\nsizes=\"100vw\", the image source is evaluated once on page load, and resizing\nthe browser window has no effect. With an attribute that contains media\nconditions, such as sizes=\"(max-width: 400px) 25vw, (max-width: 800px) 50vw,\n100vw\", it re-evaluates the image sources once a different size applies.\n\nSafari\u2019s approach means sizes=\"100vw\" does not make an image fluid like in the\nother browsers, which update the density-corrected natural dimensions after\neach resize. The dimensions are only computed once, when the source is first\nrendered.\n\n## Conclusion\n\nI haven\u2019t included more elaborate browser tests because they make my brain\nhurt, but we\u2019ve hopefully made sense of how HTML responsive images are\nspecified to work and got a glimpse of how current browsers choose image\nsources.\n\nSome further readings:\n\n  * Learn images by Mat Marquis\n  * Srcset and sizes (2014) by Eric Portis\n  * Responsive Images 101 (2015), a ten-part series (and book) by Jason Grigsby\n\nTending this garden since 2014. For errors, suggestions, or just to say hi,\nplease reach out.\n\n", "frontpage": false}
