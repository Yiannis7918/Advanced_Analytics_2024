{"aid": "40024214", "title": "Introducing Devy, the interactive blog, written using Devy", "url": "https://www.alperenkeles.com/blog/devy", "domain": "alperenkeles.com", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-13 16:33:49", "comments": 0, "source_title": "Alperen Keles", "source_text": "Blog | Alperen Keles\n\n# Alperen Keles\n\n## Articles\n\nIntroducing Devy, written using Devy!\n\nAn Introductory Roadmap Into The Functional Programming Concepts\n\nIntroduction to Property Based Testing\n\nDesigning A Cryptic Language Puzzle\n\nSolving Algorithmic Problems in The Wild\n\nAfet An\u0131nda Do\u011fru Bilgiye Ula\u015f\u0131m\n\nThe Lies About Abstraction\n\nSoftware Demystified: How does a Text Box Work?\n\nYaz\u0131l\u0131m Projeleri: Kapsaml\u0131 Rehber\n\nAlgoritmik Problemler: Kapsaml\u0131 Rehber\n\nHurdles of Designing A Layout Model\n\nLearner\u2019s Guide to Functional Programming#0: Sum Types, Booleans and Naturals\nin Javascript\n\nLearner\u2019s Guide to Functional Programming#1: Implementing Lists in JavaScript\n\nExtracting Signals: Playing The Inverse Waldo Game\n\nSinyalleri Ayr\u0131\u015ft\u0131rmak\n\nThe Technical Pie (Yet-Another-Tech-Debt-Analogy)\n\nVisa-Exclusion as A Form of Inequality\n\nLearner\u2019s Guide to Dynamic Programming#2\n\nLearner\u2019s Guide to Dynamic Programming#1\n\nLearner\u2019s Guide to Coq Theorem Prover#1\n\nA Short Story of Inequality\n\n2ClickMail: 2 Clicks to Change\n\n2ClickMail: 2 T\u0131kta D\u00fcnyan\u0131 G\u00fczelle\u015ftir\n\nSome Thoughts on Academia vs Industry(with a focus on Computer Science)\n\nWhere did all the writers go?\n\nAfetBilgi\u2019nin Hikayesi.\n\nYar\u0131m Kalan Projeler#3: Fact Checker\u2019s Tool\n\nYar\u0131m Kalan Projeler#2: Learning from Learners\n\nYar\u0131m Kalan Projeler#1: CengBook\n\nA Brief Essay on Change\n\nSe\u00e7imler v2\n\nDoktorada 1 Y\u0131l Sonunda Baz\u0131 G\u00f6r\u00fc\u015fler\n\nDoktoram\u0131n \u0130lk 6 Ay\u0131 Nas\u0131l Ge\u00e7ti? Yo\u011fun, Yorgun Ama Mutlu.\n\nDoktora Kabulleri: Kapsaml\u0131 Rehber\n\nHat\u0131rlamak\n\nLokasyon Bazl\u0131 \u00d6deme Hakk\u0131nda Baz\u0131 D\u00fc\u015f\u00fcnceler\n\nProje G\u00fcnl\u00fckleri: CVDL(CV Description Language)#1\n\nAmerika\u2019da \u0130lk 3 Ay\u0131m Nas\u0131l Ge\u00e7ti? Bu Sefer Oldu Gibi.\n\nLearner\u2019s Guide to Property Based Testing#1\n\nIntroduction to Learning from Learners\n\nAmerika\u2019da \u0130kinci Ay\u0131m Nas\u0131l Ge\u00e7ti? Bilinmezlikten Bilinirli\u011fe Bir Yolculuk.\n\nToplu Mail Linki Nas\u0131l Haz\u0131rlan\u0131r?\n\nAmerika\u2019da \u0130lk Ay\u0131m Nas\u0131l Ge\u00e7ti? \u00d6\u011fretici, \u015ea\u015f\u0131rt\u0131c\u0131 Derecede D\u00fcr\u00fcst Bir An\u0131\nDefteri.\n\nThe Story of Deviation and Returning\n\nODT\u00dc\u2019de Bilgisayar M\u00fchendisli\u011fi: Nedir? Ne De\u011fildir?\n\nVermek ve Almak: \u0130li\u015fkilere Yeni Bir Bak\u0131\u015f A\u00e7\u0131s\u0131\n\nG\u00f6r\u00fc\u015f\u00fcr\u00fcz ODT\u00dc!\n\nUzaktan E\u011fitimle Ge\u00e7en Bir Y\u0131l\u0131n Ard\u0131ndan\n\nDoktora Ba\u015fvurular\u0131: Kapsaml\u0131 Rehber\n\nLisans Ara\u015ft\u0131rmalar\u0131 Rehberi: Ad\u0131mODT\u00dc Lisans Ara\u015ft\u0131rmalar\u0131\n\nSe\u00e7imler\n\nYurt D\u0131\u015f\u0131 Staj: Kabul Ald\u0131n\u0131z, Peki Ya \u015eimdi?\n\nY\u00fcksek Lisans Doktora Ba\u015fvurular\u0131#2: Neden Y\u00fcksek Lisans?\n\nY\u00fcksek Lisans Doktora Ba\u015fvurular\u0131#1: \u015eimdi Sizin Akl\u0131n\u0131zda 2 Soru Var\n\nStaj Rehberi#4 \u2014 Eski Stajlar\n\nStaj Rehberi#3 \u2014 Projeler\n\nStaj Rehberi#2 \u2014 Niyet Mektubu\n\nStaj Rehberi#1 \u2014 \u00d6zge\u00e7mi\u015f Haz\u0131rlama\n\n\u00d6dedi\u011fimiz Bedeller Mi, \u00d6deyeceklerimiz Mi?\n\nODT\u00dc\u2019de Uzaktan G\u00fcz D\u00f6nemi Nas\u0131l Bitiyor.\n\nPost-Covid Monologlar\u0131#3: Yar\u0131n\u0131 Ka\u00e7\u0131rmak\n\nPost-Covid Monologlar\u0131#2: 2021'e \u00dc\u00e7 Zincirle Girmek\n\nODT\u00dc\u2019de Uzaktan E\u011fitim D\u00f6nemi Nas\u0131l Ge\u00e7iyor?\n\nLisans Ara\u015ft\u0131rmalar\u0131: Giri\u015f Rehberi\n\nPost-Covid Monologlar\u0131#1: Unutulan Vedalar\n\nYurt D\u0131\u015f\u0131 Staj: Geni\u015fletilmi\u015f Rehber\n\nAtam Ne Derdi\n\nKarantina G\u00fcnlerinde Akademik D\u00fcr\u00fcstl\u00fck\n\nK\u0131r Aynalar\u0131\n\nKaos ve D\u00fczen\n\nYurt D\u0131\u015f\u0131nda Staj\n\n# Introducing Devy, written using Devy!\n\nThis blog post introduces Devy, the interactive blog engine I\u2019ve been working\non. Devy is a static site generator that allows you to write interactive blog\nposts using a combination of markdown and a custom DSL. This post is written\nusing Devy, so you can see how it works in action!\n\nI like to write a lot of small code snippets in my code, and I want my readers\nto be able to try them out. Using DCL(Declarative Component Language), I can\ndefine components and their interactions in a simple way. For example, the\nfollowing code block defines a function for turning a given string into\nuppercase:\n\nIf you would like to see what this post looks like without any CSS, check out\nthe raw HTML.\n\n    \n    \n    const toUpperCase = (str) => str.toUpperCase();\n\nA simple feature, which probably should be the default behavior in the future,\nis the ability to copy the code block to the clipboard. The next code block is\na simple example of a function that adds two numbers together:\n\n    \n    \n    const add = (a, b) => \"Answer is \" + (parseInt(a) + parseInt(b));\n\nLine numbers are also an important feature(you need a little bit of css to\nmake them look good). Of course, we are not always limited to Javascript, so\nhere\u2019s a Rust version of the add function.\n\n    \n    \n    1 2 3\n    \n    \n    fn add(a: i32, b: i32) -> i32 { a + b }\n\nThat\u2019s all pretty cool, but nothing impressive. The fun starts when you can\nrun code snippets and use their results. That\u2019s where DCL comes into play.\nBelow is a short DCL snippet that uses the add function to add two numbers\ntogether. The first two lines define the inputs and their initial values, and\nthe third line defines the output as a function of the result of adding the\ntwo inputs together.\n\n    \n    \n    ```dcl {#add-example} input1 : text-input := 5 input2 : text-input := 10 output : text-area := input1, input2 => add(input1, input2) ```\n\nDevy compiles this DCL snippet into HTML and Javascript code that updates the\noutput whenever the inputs change as you can see below:\n\nText inputs are not the only components available. Here\u2019s an example of a\nradio button that asks a question and provides feedback based on the answer:\n\nDo you think Devy is a cool project?\n\nAside from interactivity, I also want to focus on easily creating diagrams and\nother visualizations. For now, I started with the Mermaid diagrams, which are\nsimple to write and look great. Here\u2019s an example of a simple flowchart:\n\nOne cool thing I added(which doesn\u2019t exist natively in Mermaid) is animating\nthe diagrams. Users can easily add a rate attribute to the mermaid code block\nto control the animation speed. For example, the following diagram animates at\na rate of 1000ms:\n\nThe current animation system is pretty simple, but I plan to add (1) phase-\nbased animations where user can define the frame each element should appear,\n(2) control mechanisms for animations such as dynamic speed control, and (3)\nlayout preserving animation where all elements do not destructively move\naround.\n\nThat concludes the current state of Devy. It\u2019s a brand new project, and there\nare lots of features I want to add. If you have any ideas, please let me know\nby opening an issue on the GitHub repository. I\u2019m excited to see where this\nproject goes, and I hope you are too! Also, please leave a star on the\nrepository if you like the project!\n\nRepository Link: https://github.com/alpaylan/devy\n\n## Appendix\n\nBelow is the Markdown code for all of this article.\n\n    \n    \n    # Introducing Devy, written using Devy! <img src=\"https://github.com/alpaylan/devy/blob/630d2519cc3e62458f30e689470d2b6c34403a03/devy-logo.png?raw=true\" alt=\"Devy Logo\" style=\"display: block; margin-right: 20; float: left; width: 250px; \" /> This blog post introduces [Devy](https://github.com/alpaylan/devy), the interactive blog engine I've been working on. Devy is a static site generator that allows you to write interactive blog posts using a combination of markdown and a custom DSL. This post is written using Devy, so you can see how it works in action! I like to write a lot of small code snippets in my code, and I want my readers to be able to try them out. Using DCL(Declarative Component Language), I can define components and their interactions in a simple way. For example, the following code block defines a function for turning a given string into uppercase: **If you would like to see what this post looks like without any CSS, check out the [raw HTML](devy.html).** ```js {#toUpperCase .script .show} const toUpperCase = (str) => str.toUpperCase(); ``` A simple feature, which probably should be the default behavior in the future, is the ability to copy the code block to the clipboard. The next code block is a simple example of a function that adds two numbers together: ```js {#add .script .show .copy} const add = (a, b) => \"Answer is \" + (parseInt(a) + parseInt(b)); ``` Line numbers are also an important feature(you need a little bit of css to make them look good). Of course, we are not always limited to Javascript, so here's a Rust version of the `add` function. <style> .line-numbers { display: inline-block; margin-right: 10; padding: 0; } </style> ```rust {#add-rs .show .linenumbers} fn add(a: i32, b: i32) -> i32 { a + b } ``` That's all pretty cool, but nothing impressive. The fun starts when you can run code snippets and use their results. That's where DCL comes into play. Below is a short DCL snippet that uses the `add` function to add two numbers together. The first two lines define the inputs and their initial values, and the third line defines the output as a function of the result of adding the two inputs together. ```` ```dcl {#add-example} input1 : text-input := 5 input2 : text-input := 10 output : text-area := input1, input2 => add(input1, input2) ``` ```` Devy compiles this DCL snippet into HTML and Javascript code that updates the output whenever the inputs change as you can see below: ```dcl {#add-example} input1 : text-input := 5 input2 : text-input := 10 output : text-area := input1, input2 => add(input1, input2) ``` Text inputs are not the only components available. Here's an example of a radio button that asks a question and provides feedback based on the answer: **Do you think Devy is a cool project?** ```dcl {#radio-example} option : radio := yes, no, of course feedback : paragraph := option => option === \"of course\" ? \"Great job!\" : \"Incorrect! Try Again!\" ``` <details> <summary>Click to see the CDL code for the question!</summary> ```` ```dcl {#radio-example} option : radio := yes, no, of course feedback : paragraph := option => option === \"of course\" ? \"Great job!\" : \"Incorrect! Try Again!\" ``` ```` </details> Aside from interactivity, I also want to focus on easily creating diagrams and other visualizations. For now, I started with the [Mermaid](https://mermaid.js.org) diagrams, which are simple to write and look great. Here's an example of a simple flowchart: ```mermaid {#mermaid-0} graph LR A[Second diagram] --> B[Something] B --> C[Something] C --> D[Something] A --> D[Something] ``` One cool thing I added(which doesn't exist natively in Mermaid) is animating the diagrams. Users can easily add a `rate` attribute to the mermaid code block to control the animation speed. For example, the following diagram animates at a rate of 1000ms: ```mermaid {#mermaid-1 rate=1000} graph LR A[Second diagram] A[Second diagram] --> B[Something] B --> C[Something] C --> D[Something] A --> D[Something] ``` The current animation system is pretty simple, but I plan to add (1) phase-based animations where user can define the frame each element should appear, (2) control mechanisms for animations such as dynamic speed control, and (3) layout preserving animation where all elements do not destructively move around. That concludes the current state of Devy. It's a brand new project, and there are lots of features I want to add. If you have any ideas, please let me know by opening an issue on the [GitHub repository](https://github.com/alpaylan/devy). I'm excited to see where this project goes, and I hope you are too! Also, please leave a star on the repository if you like the project! **Repository Link:** [https://github.com/alpaylan/devy](https://github.com/alpaylan/devy)\n\n", "frontpage": false}
