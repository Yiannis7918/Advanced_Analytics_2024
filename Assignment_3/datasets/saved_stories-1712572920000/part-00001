{"aid": "39966262", "title": "Type-Safe CSS with Property", "url": "https://nerdy.dev/cant-break-this-design-system", "domain": "nerdy.dev", "votes": 1, "user": "sgammon", "posted_at": "2024-04-08 04:40:17", "comments": 0, "source_title": "Type safe CSS design systems with @property \u00b7 September 1, 2023", "source_text": "Type safe CSS design systems with @property \u00b7 September 1, 2023\n\n# Type safe CSS design systems with @property\n\nSeptember 1, 20238 min read\n\ncss\n\n##### Table of contents\n\nCSS type safety basicsLevel 2Design systems relevanceThe last partComments\n\nCSS types are a worthy investment into type safety in your front-end work.\nWe're still awaiting cross browser interop, but we'll get there \ud83d\ude42\n\nIn case you've never seen one, here's a typed CSS variable with @property:\n\n    \n    \n    @property --focal-size { syntax: '<length-percentage>'; initial-value: 100%; inherits: false; }\n\nUsed that one so I could animate a gradient mask image. Pretty sweet.\n\nHere's a preview of what CSS type safety can do, and what I'll be explaining:\n\n## CSS type safety basics #\n\nWhen learning Rust or TypeScript, a great place is to start with the type\nprimitives. In CSS, a few of those are:\n\n<angle> <length> <percentage> <length-percentage> <number> <integer> <color>\n<string> <time> <dimension> <ratio> <flex> <frequency> <resolution> <image>\n<position> <hue> <url> <custom-ident>\n\n\"\n\nMore types on MDN and a full list of grammars and types on\ncsswg.org/indexes/#types.\n\n\"\n\nPeep another typed prop definition:\n\n    \n    \n    @property --hue { syntax: '<angle>'; initial-value: .5turn; inherits: false; }\n\nUse it just like you always would var(--hue) and it'll be .5turn. BUT, try and\nset it to a value that doesn't match its type? Fails, value will still be\n.5turn. The custom property will not allow itself to be assigned a value that\ndoesn't match it's type, always reverting to the last known good value.\n\n    \n    \n    .card { --hue: 90deg; /* \u2705 */ --hue: #f00; /* \u274c */ background: oklch(98% .01 var(--hue)); /* background will always resolve \ud83d\udc4d\ud83c\udffb */ /* --hue resolves 90deg *. }\n\nThis is CSS type safety. It doesn't crash the page, lock a thread, and\nunfortunately also won't tell you in any console that there's been an attempt\nto set the --hue prop to a <color> and not an <angle>. But I think some better\ncustom property tooling could help \ud83d\ude0f.\n\n## Level 2 #\n\nSo far I defined a custom property as an <angle> and used it as a background.\nNo property nesting.\n\nGo a level deeper by making a custom property include another custom property.\nHere --_bg is an <any> kinda (because it's an untyped custom property at this\npoint), with a nested custom property --hue:\n\n    \n    \n    .card { --_bg: oklch(98% .01 var(--hue)); background: var(--_bg); @media (prefers-color-scheme: dark) { --_bg: oklch(15% .1 var(--hue)); } }\n\nYou can go many levels deep, but not too deep. AND, you can type some or all\nof your variables. Next, we'll make some type safe 2-level deep custom\nproperties.\n\n\"Sounds like Typescript and SCSS right? Incremental adoption for tighter\nsystems.\"\n\n## Design systems relevance #\n\nLet's build a typed light and dark adaptive color scheme starter!\n\nFirst, a type safe brand hue. I'll be making an <input type=text> element that\nwill write to this value whatever we type in it. Since it's type safe, we'll\nsee how other custom properties that depend on it, won't break if the value of\n--hue is set to \"poots\" or something.\n\n    \n    \n    @property --hue { syntax: '<angle>'; initial-value: 5rad; inherits: true; }\n\nFor brevity, I'll only be setting up the surfaces of an adaptive color scheme,\nit'll provide plenty of insights into the process of typing a design system.\n\nHere's 3 surfaces, 1 to be the background of the page --surface, and 2 others\nthat are intended to either be a surface on top of the page bg or under. Their\ninitial value isn't an exciting, but we'll get there in the next part.\n\n    \n    \n    @property --surface { syntax: '<color>'; initial-value: #333; inherits: true; } @property --surface-over { syntax: '<color>'; initial-value: #444; inherits: true; } @property --surface-under { syntax: '<color>'; initial-value: #222; inherits: true; }\n\n\"The important bit here is that they're a color type.\"\n\nNow, we can assign more meaningful values to the surface colors. You could use\n@media (prefers-color-scheme) if you like, but here, since I wanted to show\nlight and dark with a switch, I'm using :has():\n\n    \n    \n    @layer demo.theme { html:has(#light:checked) { color-scheme: light; --surface: oklch(90% .05 var(--hue)); --surface-over: oklch(99% .02 var(--hue)); --surface-under: oklch(85% .075 var(--hue)); } html:has(#dark:checked) { color-scheme: dark; --surface: oklch(20% .1 var(--hue)); --surface-over: oklch(30% .1 var(--hue)); --surface-under: oklch(15% .1 var(--hue)); } }\n\nThat's essentially the setup and orchestration for a type safe custom property\nsetup. All that's left is to use them. Check out the Codepen to see all the\nneat ways these are valuable in creating an adaptive color scheme: box-\nshadows, borders, and more!\n\n## The last part #\n\nThe \"theme tint\" text input in the demo, go ahead and start typing crap into\nit. None of the color system will fail due to a typo or assigned value that\ndoesn't match the type. The browser knows exactly how to fallback and handle\nthe errors.\n\nYou could build a very very robust and large system on @property. The same\ntypes of type safety during development that you like with Typescript, but the\ntypes actually ship to the browser and are enforced. Rad.\n\nFirefox is almost done with their implementation, which will make @property\ncross browser stable \ud83c\udf89\n\nSee caniuse for availability status.\n\nDesign systems are about to get a lot smarter and more stable.\n\n## Mentions #\n\nJoin the conversation on\n\n23 likes\n\n13 reposts\n\n\"\n\n@argyleink It would be the part of the Lighthouse system to have definitions\nfor @prop contrast difference? Colorful letters could always be an unwanted UX\npath, especially on the road of light/dark theme apps world. What do you\nthink? ????\n\n????????????????????\"\n\n\"\n\n@argyleink The \u201cFull list on MDN\u201d link is 404. I think you forgot an s at the\nend of the URL.\n\nedit: Btw, the full, much larger list of CSS types is here:\nhttps://drafts.csswg.org/indexes/#types\n\nedit 2: Actually, those are both value types and other grammar productions.\n\nCSS Indexes\n\n\u0160ime Vidas\"\n\n\"\n\n@simevidas ty for all this ????\n\n1\\. the link got a fix about 10m ago! 2. added this link! deploying with this\nlink to drafts now ???????? 3. mentioned the added link is both grammars and\ntypes ????????\n\nrad, hope you're well Sime <3\n\nAdam Argyle\"\n\n\"\n\n@argyleink Rad!\n\nFelix\"\n\n\"\n\n@argyleink @property transitioning not enabled in Firefox Nightly? Hopefully\nthey'll solve this soon! Do you know if I need to change a flag or something?\n\nbigandy\"\n\n\"\n\nIn case someone didn\u2019t get the memo, stop right now and update all of your\nbrowsers (yes, Safari, Chrome, Firefox, Brave, Microsoft Edge, anything that\ncan download and process a WebP image). Then come back here... :-)\n\nNow, back to business...\n\nBig news coming from Chrome, via Gilberto Cocchi:\n\nNote that this could be good for sites with fast loading videos as their LCP,\nbut could also be bad for sites that have slow loading videos...\n\nFrom the same article that Gilberto linked to above, how Chrome deals with\nanimation within an LCP is also being improved. Good on ya, Chrome!\n\nAnd then they have to go and do something like this... Oh, Googie... :-(\n\nWith all the fuss over TypeScript this past couple of weeks, seems like a good\ntime to chat about typecasting CSS, otherwise known as @property. I was not\nalready familiar with this, but am now, thanks!\n\nFollowing in that vein, the great Stephanie Eckles explains How Custom\nProperty Values are Computed. Starting with the basics of initial and inherit,\nruns through how relative units (vw, %, em, currentColor, and such) must be\n\u201cabsolutize[d]\u201d, including custom properties, and how failed or invalid\nproperties and declarations are handled. All something to be aware of as we\nbury more and more custom properties in our CSS files!\n\nBoth Web Bos and Josh Comeau have contributions on this topic as well,\nrespectively:\n\n  * https://twitter.com/wesbos/status/1702401864422068275\n  * https://www.joshwcomeau.com/react/rainbow-button/\n\nAnd speaking of checking whether or not your CSS works, Bramus Van Damme helps\nus detect if an element can scroll or not, by using a CSS Scroll-Driven\nAnimation... Slick!\n\nAnd speaking of scroll-driven stuff, the unstoppable Jhey Tompkins sheds a\nkiller scroll-driven animated text demo.\n\nAnd still speaking of scroll-driven stuff, Shu Ding shared a CodePen showing\noff cool \u201cup and down arrow\u201d scroll indicators. Then Jhey hopped in with a\nslight modification. To which Bramus tossed in his own CodePen. Love this kind\nof riffing!\n\nAddy Osmani points out that Chrome 118 will support @scope, including\ninspection in DevTools! Bramus was quick to point out his quick intro, and\npromise a new long post \u201csoon(ish)\u201d...\n\nI have shared a lot of articles and demos related to the View Transitions API,\nbecause I think it is an amazing upgrade to the native browsing experience.\nWell here is one more, this time from Mojtaba Seyedi, which explains what this\nis, how it works, how to implement it, how to debug it, and even covers some\npitfalls and workarounds. Very cool article, but remember, right now this is\nChromium-only...\n\nZoran Jambor breaks down the new multi-keyword option for display. Initially\nrevisiting the basics (block and inline), then expanding into flex and grid,\nZoran very nicely segues into how these can be combined to affect the \u201couter\u201d\nand \u201cinner\u201d contexts of an element, and finally introduces us to the new flow-\nroot property. Wonderfully thorough, as usual.\n\nEver wanted to search through your fave browser\u2019s code? Me neither. But if you\never do, Nicole Sullivan tracked down these useful resources:\n\n  * Chromium\n  * Firefox\n  * Webkit\n\nAnd finally, Remy Sharp has always been good at finding innovative ways to do\nsomething that he wanted to do. And now he has a way to quietly make sure his\nmom is okay (or at least following her normal patterns). Love it, Remy,\nthanks.\n\nHappy reading, Atg\n\nTop\u21ea\n\n### Related\n\nAaron T. Grogg\"\n\nFollow me on Twitter\n\nFollow me on Mastodon\n\nFollow me on Bluesky\n\nFollow me on Github\n\nAdam Argyle\n\nCSS DevRel @Google on Chrome, @CSSWG, co-host @CSS Podcast, host @GUI\nChallenges. Web design & development tips & tricks: CSS, JS, HTML, Design, &\nUX.\n\nCrawl the CSS Webring?\n\nprevious sitenext site\n\na random site\n\n", "frontpage": false}
