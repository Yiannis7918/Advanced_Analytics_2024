{"aid": "40027287", "title": "Dano is a wrapper for FFmpeg that checksums the internal file streams", "url": "https://github.com/kimono-koans/dano", "domain": "github.com/kimono-koans", "votes": 9, "user": "dither8", "posted_at": "2024-04-13 23:48:23", "comments": 0, "source_title": "GitHub - kimono-koans/dano: A hashdeep/md5tree (but much more) for media files", "source_text": "GitHub - kimono-koans/dano: A hashdeep/md5tree (but much more) for media files\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nkimono-koans / dano Public\n\n  * Notifications\n  * Fork 0\n  * Star 64\n\nA hashdeep/md5tree (but much more) for media files\n\ncrates.io/crates/dano\n\n### License\n\nMPL-2.0 license\n\n64 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# kimono-koans/dano\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n35 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nkimono-koansBump versiond4831bb \u00b7\n\n## History\n\n483 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Build with debug symbols separated  \n  \n### data\n\n|\n\n### data\n\n| Add opus to list of approved extensions, and print more meaningful error  \n  \n### src\n\n|\n\n### src\n\n| Bump deps, print more specific error on output file creation  \n  \n### third_party\n\n|\n\n### third_party\n\n| Bump version  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Update binary package information  \n  \n### Cargo.lock\n\n|\n\n### Cargo.lock\n\n| Bump version  \n  \n### Cargo.toml\n\n|\n\n### Cargo.toml\n\n| Bump version  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Prep switch th public  \n  \n### README.md\n\n|\n\n### README.md\n\n| Create log levels, make uniform  \n  \n### dano.1\n\n|\n\n### dano.1\n\n| Bump version  \n  \n## Repository files navigation\n\n# dano\n\ndano is a wrapper for ffmpeg that checksums the internal file streams of\nffmpeg compatible media files, and stores them in a format which can be used\nto verify such checksums later. This is handy, because, should you choose to\nchange metadata tags, or change file names, the media checksums should remain\nthe same.\n\n## Features\n\n  * Non-media path filtering (which can be disabled)\n  * Highly concurrent hashing (select # of threads)\n  * Several useful modes: WRITE, TEST, PRINT, DUMP, or DUPLICATES\n  * Select from multiple checksum algorithms (default: murmur3, MD5, adler32, CRC32, SHA160, SHA256, SHA512)\n  * Option to decode the stream before executing the hash function\n  * Write to xattrs or to hash file (and always read back and operate on both)\n\n## Why dano? Because FLAC is really clever\n\nTo me, first class checksums are one thing that sets the FLAC music format\napart. FLAC supports the writing and checking of the streams held within its\ncontainer. When I ask whether the FLAC audio stream has the same checksum as\nthe stream I originally wrote to disk, the flac command tells me whether the\nchecksum matches:\n\n    \n    \n    \u279c flac -t 'Link Wray - Rumble! The Best of Link Wray - 01-01 - 02 - The Swag.flac' Link Wray - Rumble! The Best of Link Wray - 01-01 - 02 - The Swag.flac: ok\n\n## Why can't I do that everywhere?\n\nThe question is -- why don't we have this functionality for video and other\nmedia streams? The answer is, of course, we do, (because ffmpeg is\nincredible!) we just never use it. dano aims to make what ffmpeg provides\neasier to use.\n\nFor lossless files, this means we can confirm that a lossless file decodes to\nthe exact bitstream we encoded, but, for all files, this means our checksums\nare stable against metadata changes, file name changes, and/or moving a\nbitstream, or many bitstreams, from one media container into another.\n\nSo, for example, when I ask whether a media stream has the same checksum as\nwhen I originally wrote it to disk, dano tells me whether the checksum\nmatches:\n\n    \n    \n    \u279c dano -w 'Sample.mkv' murmur3=2f23cebfe8969a8e11cd3919ce9c9067 : \"Sample.mkv\" \u279c dano -t 'Sample.mkv' \"Sample\": OK # Now change our file's name and our checksum still verifies, # because the checksum is stored in a xattr \u279c mv 'Sample.mkv' 'test1.mkv' \u279c dano -t 'test2.mkv' \"test1.mkv\": OK # Now change our file's metadata and *write a new file in a # new container* and our checksum is the *same* \u279c ffmpeg -i 'test1.mkv' -metadata author=\"Kimono\" 'test2.mp4' \u279c dano -w 'test2.mp4' murmur3=2f23cebfe8969a8e11cd3919ce9c9067 : \"test2.mkv\"\n\n## Can I use dano with my FLAC files?\n\nOf course you can. dano will even import your FLAC file's checksums directly:\n\n    \n    \n    # Import dano checksum from FLAC and write to an xattr \u279c dano --import-flac 'Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.flac' MD5=fed8052012fb6d0523ef3980a0f6f7bd : \"Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.flac\" Writing dano hash for: \"Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.flac\" No old file data to overwrite. # Verify checksum is the same as the checksum embedded in the FLAC container \u279c metaflac --show-md5sum 'Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.flac' fed8052012fb6d0523ef3980a0f6f7bd # Verify the decoded FLAC audio stream is the same as the xattr checksum \u279c dano -t 'Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.flac' \"Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.flac\": OK\n\n## Ugh, why can't ALAC be more like FLAC?\n\nI get it! For serious collectors, if you can't verify your checksums later\nwhen you change the album art, what use is a checksum?\n\ndano allows you have to store a stable checksum, and verify it later, just\nlike FLAC:\n\n    \n    \n    # To test, this we will create an ALAC copy of a FLAC file ffmpeg -i 'Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.flac' -acodec alac 'Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.m4a' # Write dano checksum to an xattr \u279c dano -w --only=audio --decode --hash-algo=md5 'Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.m4a' MD5=fed8052012fb6d0523ef3980a0f6f7bd : \"Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.m4a\" Writing dano hash for: \"Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.m4a\" No old file data to overwrite. # Verify checksum is the same as the decoded FLAC audio stream \u279c metaflac --show-md5sum \"Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.flac\" fed8052012fb6d0523ef3980a0f6f7bd # Verify the decoded ALAC audio stream is the same as the xattr checksum \u279c dano -t \"Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.m4a\" \"Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.m4a\": OK\n\n## Can I use dano to find duplicate files?\n\nIf you've ever used fdupes, you know how cool it is. fdupes can recursively\nsearch a file tree to discover duplicate files. The only issue is -- what if\nsome of your media files have the same internal bitstreams, but distinct file\nchecksums? Perhaps such bitstreams are contained within different/distinct\ncontainers, and/or have different file metadata/tags attached?\n\ndano makes it easy to find such duplicate media, based upon their internal\nbitstreams:\n\n    \n    \n    # To test, create a copy \u279c cp 'Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.flac' 'Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance-copy1.flac' # Copy will not contain a hash, so we will create one \u279c dano -w -x ./* murmur3=ff95fc73a64ace424964f30af3ed932 : \"./Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance-copy1.flac\" No new file paths to write. Overwriting dano hash for: \"./Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance-copy1.flac\" # Now, find duplicates \u279c find . -type f | dano --dupes murmur3=ff95fc73a64ace424964f30af3ed932 : \"./Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance-copy1.flac\" murmur3=ff95fc73a64ace424964f30af3ed932 : \"./Pavement - Wowee Zowee_ Sordid Sentinels Edition - 02-02 - 50 - We Dance.flac\" WARN: Duplicates found.\n\n## Shout outs! Yo, yo, yo!\n\nInspired by hashdeep, md5tree, flac, and, of course, ffmpeg.\n\n## Install via Native Packages\n\nFor Debian-based distributions (like Ubuntu), I maintain a personal package\narchive, or PPA. See the linked repository for instructions on how to use.\n\nFor Debian-based and Redhat-based Linux distributions (like, Ubuntu or Fedora,\netc.), check the tagged releases for native packages for your distribution.\n\nYou may also create and install your own native package from the latest\nsources, like so:\n\n    \n    \n    \u279c curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh \u279c cargo install cargo-deb \u279c git clone https://github.com/kimono-koans/dano.git \u279c cd ./dano/; cargo deb # to install on a Debian/Ubuntu-based system \u279c dpkg -i ./target/debian/dano_*.deb # or convert to RPM \u279c alien -r ./target/debian/dano_*.deb # and install on a Redhat-based system \u279c rpm -i --replacefiles ./dano*.rpm\n\n## Installation from Source\n\nFor now, dano depends on ffmpeg and metaflac if you want to import FLAC files.\n\nYou may install rustup and build dano like so:\n\n    \n    \n    \u279c curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh \u279c cargo install dano\n\nNote: In addition to what your package manager or OS may provide (for\ninstance, apt install rustc cargo, security-minded users may be interested to\nknow that there are alternative methods for installing the rustc compiler and\ncargo besides the method described above, which allow you to verify the rustup\nbefore install.\n\nCaveat: dano is only tested on MacOS and Linux, and will probably only compile\nand run on Unix-y Rust supported platforms, but a Windows is version is likely\nto compile with only minor changes. My further thoughts on a Windows version\ncan be found in this linked issue.\n\n## About\n\nA hashdeep/md5tree (but much more) for media files\n\ncrates.io/crates/dano\n\n### Resources\n\nReadme\n\n### License\n\nMPL-2.0 license\n\nActivity\n\n### Stars\n\n64 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 11\n\nBetter error, behavior re: output file creation Latest\n\nDec 25, 2023\n\n\\+ 10 releases\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Rust 94.5%\n  * Roff 5.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
