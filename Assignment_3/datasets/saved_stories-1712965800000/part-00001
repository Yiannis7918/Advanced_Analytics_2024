{"aid": "40015612", "title": "Htmx and the Rule of Least Power", "url": "https://blog.gypsydave5.com/posts/2024/4/12/htmx-and-the-rule-of-least-power/", "domain": "gypsydave5.com", "votes": 1, "user": "alexzeitler", "posted_at": "2024-04-12 17:47:44", "comments": 0, "source_title": "HTMX and the Rule of Least Power", "source_text": "HTMX and the Rule of Least Power\n\n# gypsydave5\n\nThe blog of David Wickes, software developer\n\n  * about\n  * posts\n\n# HTMX and the Rule of Least Power\n\nApr 12, 2024\n\nThe Rule of Least Power\n\n> suggests choosing the least powerful [computer] language suitable for a\n> given purpose\n\nAs a principal it\u2019s applicable for all programming, but it finds particular\nrelevance when working in the frontend of web development. The link above is\nto the W3C article on the subject, written by Tim Berners-Lee.\n\nHe continues:\n\n> Many Web technologies are designed to exploit the Rule of Least Power. HTML\n> is intentionally designed not to be a full programming language, so that\n> many different things can be done with an HTML document: software can\n> present the document in various styles, extract tables of contents, index\n> it, and so on. Similarly, CSS is a declarative styling language that is\n> easily analyzed. The Semantic Web is an attempt, largely, to map large\n> quantities of existing data onto a common language so that the data can be\n> analyzed in ways never dreamed of by its creators... Thus, HTML, CSS and the\n> Semantic Web are examples of Web technologies designed with \u201cleast power\u201d in\n> mind. Web resources that use these technologies are more likely to be reused\n> in flexible ways than those expressed in more powerful languages.\n\nIf you sign up to this - and I do, to be clear - they you\u2019re going to feel\nvery uncomfortable about the direction frontend frameworks like React and\nothers, where we wind up doing everything in the most powerful part of the\nfrontend stack - the JavaScript.\n\nIf we were to graph, in a very realistic and not made up way, the different\npower levels of the three classic frontend technologies - HTML, CSS and\nJavaScript - we\u2019d see something like this:\n\nJavaScript is super powerful... but we know from the Rule of Least Power that\nthis is not a good thing.\n\nAnd we don\u2019t like React et al because they essentially encourage you to only\nuse the most powerful tool available to you. They sucking the life out of the\nother technologies and into JavaScript. This is where we get to golden hammers\netc.\n\nAnd so we, the True Believers, avoid the frameworks, and use the least\npowerful tool for the job. The end.\n\nWell...\n\nTake a look at that graph again:\n\nNow, obviously this is not to scale - JavaScript is far more powerful than the\nother two. Waaaay more. It\u2019s a whole general purpose programming language. We\ncan write servers in it. We can program fridges with it. Waaaaaaay powerful.\n\nAnd let\u2019s talk about escalation.\n\n## Escalation\n\nImagine these weren\u2019t web technologies.\n\nHTML / CSS / JavaScript\n\nImagine they were knives, and you wanted to cut up a melon.\n\nbutter knife / cheese knife / lightsabre\n\nor if they were weapons:\n\nstick / stone / hydrogen bomb\n\nor books:\n\nGoodnight Moon / Spot the Dog / Ulysses\n\nI hope I\u2019m making my point here and don\u2019t have to think of any more stupid\nexamples. What I\u2019m trying to say is that there\u2019s a real escalation that\nhappens when we move from HTML + CSS to JavaScript. We\u2019re drawing on one of\nthe most powerful forces in the universe to... checks notes... load a bit of\nHTML onto the page?\n\nAdd a spinner?\n\nSend a DELETE request?\n\nMy point is that there\u2019s nothing in between with the classic web stack. You\u2019re\neither doing CSS + HTML or you\u2019re using a tool that is insanely more powerful\nthan it needs to be to do the job you want it for. We\u2019re always having to get\nout the big guns to do relatively trivial things.\n\n## So HTMX, eh?\n\nAnd here\u2019s the pitch: a tool like HTMX is explicitly trying to introduce a\nless powerful tool than JavaScript to the frontend technology stack.\n\nYes, it is \u2018like\u2019 React in that it is something you\u2019re adding to the mix. And,\nyes, it\u2019s written in JavaScript - that\u2019s to be expected, as most of our\nsimpler technologies are built on top of much more powerful ones.^1\n\nBut the difference is that it doesn\u2019t try to extend JavaScript to make it the\none stop shop for all your webdev needs. Instead it inserts itself between\nHTML + CSS and JavaScript as a mid-power technology. Instead of being embedded\nin a high-power language, it\u2019s actually an extension of the low-power language\n- HTML - extending its capabilities to give\n\nYou need to do click to edit, lazy loading, infinite scroll, a live search, or\nanything else that you\u2019d normally be reaching for JavaScript to accomplish,\nyou can now add HTMX to the stack, write a few more attributes on your HTML,\nget what you need done, and never have to use JavaScript. Instead you\u2019ve used\na less powerful tool (HTMX) to achieve what you wanted.\n\nYes, there is some overhead - a new dependency, a new thing to learn. Nothing\nis free in this life. But it\u2019s very distinct to frontend frameworks embedded\nin JavaScript which pull you in to more JavaScript, all the JavaScript, all\nthe time. HTMX wants you to write no JavaScript unless you need to.\n\n## Conclusion\n\nHTMX introduces a tool to the stack, a tool slightly more powerful than HTML,\nthat lets you get most of what you want in modern web development done without\nhaving to get out the JavaScript big guns. In so doing it makes it possible\nfor the modern frontend web developer to conform more closely to the Rule of\nLeast Power.\n\n  1. In many ways writing a program for someone else - writing a language for someone else - is just a way of reducing the near infinite number of things they can do with a computer, in exchange for making it simpler and easier to do some things with it.\n\n", "frontpage": false}
