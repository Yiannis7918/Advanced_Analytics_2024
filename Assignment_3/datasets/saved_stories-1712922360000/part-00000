{"aid": "40009709", "title": "Swift for C++ Practitioners", "url": "https://sfba.social/@dgregor79/112253040167641326", "domain": "sfba.social", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-12 05:43:45", "comments": 0, "source_title": "Doug Gregor (@dgregor79@sfba.social)", "source_text": "Doug Gregor: \"Hello C++ folks! I've started ...\" - SFBA.social\n\nCreate accountLogin\n\nDoug Gregor @dgregor79@sfba.social\n\nHello C++ folks! I've started a blog series aimed at C++ programmers who are\ninterested in learning #SwiftLang. It teaches the breadth of the Swift\nlanguage, but anchored in the features and idioms of C++. So if you know your\nRule Of Fives and your SFINAEs and think you might be interested in Swift, I'd\nlove to hear what you think. Part 1 is something you know of from C++ that\nSwift takes a bit further: value types.\nhttps://www.douggregor.net/posts/swift-for-cxx-practitioners-value-types/\n\nDoug's Compiler CornerSwift for C++ Practitioners, Part 1: Intro & Value Types | Doug's Compiler CornerSwift for C++ Practitioners, Part 1: Intro & Value Types\n\nApr 11, 2024, 14:24 \u00b7 \u00b7 Web \u00b7 77 \u00b7 95\n\n16h\n\nDoug Gregor @dgregor79\n\nPart 2 explore's Swift's reference types and optional types. These notions\nexist in C++, but Swift has a different take on them:\nhttps://www.douggregor.net/posts/swift-for-cxx-practitioners-reference-types/\n\nDoug's Compiler CornerSwift for C++ Practitioners, Part 2: Reference Types & Optionals | Doug's Compiler CornerSwift for C++ Practitioners, Part 2: Reference Types & Optionals\n\n16h\n\nDoug Gregor @dgregor79\n\nPart 3 explores Swift's \"extensions\", something I dearly miss in C++. Member-\nor-free-function should be a syntactic choice, and no more. Details at\nhttps://www.douggregor.net/posts/swift-for-cxx-practitioners-extensions/\n\nDoug's Compiler CornerSwift for C++ Practitioners, Part 3: Extensions and Access Control | Doug's Compiler CornerSwift for C++ Practitioners, Part 3: Extensions & Access Control\n\n16h\n\nDoug Gregor @dgregor79\n\nPart 4 covers #SwiftLang generics, whose design was inspired by the ideas of\nGeneric Programming that had their first successes in the C++ Standard\nTemplate Library. Swift generics are separately-typed and a joy to use, but\nyou'll have to leave template metaprogramming behind... more at\nhttps://www.douggregor.net/posts/swift-for-cxx-practitioners-generics/\n\nDoug's Compiler CornerSwift for C++ Practitioners, Part 4: Generics | Doug's Compiler CornerSwift for C++ Practitioners, Part 4: Generics\n\n16h\n\nDoug Gregor @dgregor79\n\nPart 5 covers type erasure. If you've used std::any or std::function (or their\nBoost predecessors), you know what type erasure is. In #SwiftLang, it's part\nof the language and integrated with the generics system. Also along for the\nride are \"metatypes\", i.e., types that are expressed as values, allowing for\nruntime discovery and computation. Details at\nhttps://www.douggregor.net/posts/swift-for-cxx-practitioners-type-erasure/\n\nDoug's Compiler CornerSwift for C++ Practitioners, Part 5: Type erasure & metatypes | Doug's Compiler CornerSwift for C++ Practitioners, Part 5: Type erasure & metatypes\n\n16h\n\nDoug Gregor @dgregor79\n\nI have more posts planned on error handling, move semantics, and concurrency,\nbut we'll start here. I'd love to hear if this approach to learning Swift\nworks well for C++ folks (or not!).\n\n14h\n\nErik Tjernlund @erikt@mastodon.social\n\n@dgregor79 Hey Doug, these posts are so good. I read them all in one go. Can I\nmake a tiny suggestion? Maybe I\u2019m just missing it, but I don\u2019t think there\u2019s\nany publish dates on them. Dates would be great. But otherwise, great,\nvaluable work. Thank you.\n\n12h\n\nDoug Gregor @dgregor79\n\n@erikt Good idea, I\u2019ll add publish dates to the posts. Thanks!\n\n5h *\n\nTim @tim1724@mastodon.social\n\n@dgregor79 The comment on this line (from the last of the opaque type examples\nbefore the \"some vs. any\" heading) is left over from the previous example and\nis incorrect:\n\nreturn UniquedCollection(self) // okay, unique via a set but return an array\n\n16h\n\nJonathan M\u00fcller @foonathan@fosstodon.org\n\n@dgregor79 How does name lookup work for extensions? Does the compiler look\nfor extensions in all imported modules, or do you need to bring them\nexplicitly into scope?\n\n15h\n\nDoug Gregor @dgregor79\n\n@foonathan it looks for extensions in all imported modules\n\n11h\n\nTim @tim1724@mastodon.social\n\n@dgregor79 your isPrime function has several errors. You need to switch over\nself, not i. The for loop needs to start at 2, not 1, because everything is\ndivisible by 1. And the return values for cases >= 2 are inverted.\n\nCorrected function:\n\nextension Int { var isPrime: Bool { switch self { case 0: return false case 1:\nreturn true default: break }\n\nfor i in 2..<abs(self) { if self % i == 0 { return false } }\n\nreturn true } }\n\n11h\n\nSteve Canon @steve@discuss.systems\n\n@tim1724 @dgregor79 surely we should only test up to i*i <= self.\n\n10h\n\nDoug Gregor @dgregor79\n\n@tim1724 argh, thank you! Always test your code, folks\n\n6h\n\nNicol\u00e1s Alvarez @nicolas17@treehouse.systems\n\n@dgregor79\n\n    \n    \n    func flipped(axis: Axis) -> Point { switch axis { case .horizontal: Point(x: x, y: -y) case .vertical: Point(x: -x, y: y) } }\n\nwow what's this, implicit return? was this mentioned earlier and I missed it?\n\n4h\n\nDoug Gregor @dgregor79\n\n@nicolas17 Swift has implicit returns for single-expression functions and\nclosures. I just sorta slipped it in there without mentioning it.\n\n13h\n\nRob Fahrni @fahrni@curmudgeon.cafe\n\n@dgregor79 Subscribed!\n\n7h\n\nNicol\u00e1s Alvarez @nicolas17@treehouse.systems\n\n@dgregor79 \"We opted for reference counting in Swift because we felt it hit\nthe sweet spot for automatic memory management.\" surely Objective-C interop\nwas a significant factor too? ;)\n\n5h\n\nDoug Gregor @dgregor79\n\n@nicolas17 We could have managed some kind of hybrid model if garbage\ncollection was the right answer for Swift. We do all sorts of backflips for\nObjective-C interop in the implementation to try to keep it from affecting\nSwift\u2019s language design where we wanted to go a different way. But ARC was the\nright answer regardless of ObjC: it gives determinism, small runtime\nfootprint, and local optimizability, all of which are important for scaling\ndown.\n\n16h\n\nHarshil Shah @harshil@mastodon.social\n\n@dgregor79 I think you might have also accidentally written a C++ for Swift\nprogrammers series ha!\n\n16h\n\nDoug Gregor @dgregor79\n\n@harshil That would be okay, too! It can be a Rosetta Stone for language\nfeatures and idioms.\n\n10h\n\nQuinn \u201cThe Eskimo!\u201d @justkwin@toot.community\n\n@harshil @dgregor79 That\u2019s what I\u2019ll be using it for!\n\n15h\n\nWillie Abrams @willie@mastodon.social\n\n@dgregor79 Looking forward to reading this. I am a C++ programmer who\noccasionally thinks about Swift.\n\n13h *\n\nDiggory @Diggory@mastodon.social\n\n@dgregor79 Nicely and clearly written. I hope you don\u2019t mind: some sub\nediting...\n\n\u2018but it's standard library\u2019 lose the apostrophe. \u2018When you make copy a\ninstance\u2019 a copy of an instance?\n\n13h\n\nChristopher Thielen @cthielen@mastodon.social\n\n@dgregor79 Dare I say \u201cDoug\u2019s Compiler Corner\u201d is long overdue!\n\n12h\n\nJosh (\u253b\u253b ( vitriolix ( \u253b\u253b) @vitriolix@mastodon.social\n\n@dgregor79 I need a C++ for Kotlin developers ;)\n\n11h\n\nBJ Homer @bjhomer@mastodon.world\n\n@dgregor79 hah... I have a comment blocker extension in Safari, and it was\nstripping all the comments in the code! Left me very confused!\n\n9h\n\nRick 6x @JetForMe@geekstodon.com\n\n@dgregor79 I\u2019m loving this series, even though I\u2019ve been wiriting primarily in\nSwift for many years, I came up writing C++. It\u2019s reinforcing and clarifying\nthings I mostly know.\n\nOne other thing it has taught me is that I don\u2019t know C++ any more\n\nExploreLive feeds\n\nLogin to follow profiles or hashtags, favorite, share and reply to posts. You\ncan also interact from your account on a different server.\n\nCreate accountLogin\n\nAbout\n\nDrag & drop to upload\n\n", "frontpage": false}
