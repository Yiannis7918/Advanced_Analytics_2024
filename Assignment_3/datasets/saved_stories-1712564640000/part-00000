{"aid": "39965693", "title": "Learning web development: a self-guided roadmap", "url": "https://cloudcannon.com/blog/learning-web-development-a-self-guided-roadmap/", "domain": "cloudcannon.com", "votes": 3, "user": "devonnull", "posted_at": "2024-04-08 02:23:11", "comments": 0, "source_title": "Learning web development: a self-guided roadmap | CloudCannon", "source_text": "Learning web development: a self-guided roadmap | CloudCannon\n\n\u2728 CloudCannon's Editing Upgrades help you collaborate on your content! \u2728\n\nLog in Get started\n\nGo to App\n\nLog in Get started\n\nGo to App\n\nSearch\n\nFilter results by site\n\nNo recent searches\n\n# Learning web development: a self-guided roadmap\n\nBy Jaimie McMahon \u00b7 3 Jan 2024\n\n\u00b7 Beginner \u00b7 Resources\n\nLooking to start a career as a web developer? It\u2019s no wonder why! Web\ndevelopment is a fast-paced, highly creative, and innovative career. And web\ndevelopers remain in high demand, with an average US salary of $81,074USD \u2014\nmore than $20,000USD over the US national average salary in 2023! What\u2019s more,\nweb development jobs often offer flexible working conditions, such as hybrid,\nor fully remote work, along with the freedom to start your own web development\nbusiness as a freelancer or agency.\n\nSo how do you become a web developer? Good news is, it is entirely possible to\nbecome a self-taught web developer! Whether you are a complete newbie to the\nworld of web development, or a beginner with only the most basic skills, this\nroadmap will help you devise a plan for learning and perfecting the necessary\nskills to start a career in web development.\n\n### How to learn web development\n\n  1. Understand the internet\n\n  2. Learn version control with Git\n\n  3. Master the basics \u2013 HTML, CSS, & JavaScript\n\n  4. Understand web security\n\n  5. Deepen your knowledge of frontend development\n\n  6. Decide what type of website to build \u2013 static or dynamic\n\n  7. Choose a content management system (CMS)\n\n  8. Build a portfolio site to showcase your work\n\n## 1\\. Understand the internet\n\nFirst things first, it is essential to understand the fundamental concepts\nthat make up websites. If you haven\u2019t already, set some time aside to learn\nabout the internet, web browsers, HTTP, Domain Names, DNS (domain name\nsystem), and hosting. Any web developer needs to understand these website\nbuilding blocks, and how they work together. Here are a few recommended\nresources to help you get started (or to refresh your memory):\n\n  * How does the internet work?\n\n  * How do web browsers work?\n\n  * What is HTTP?\n\n  * What is a Domain name?\n\n  * What is DNS?\n\n  * What is web hosting?\n\n## 2\\. Learn version control with Git\n\nGit is an open-source version control system that is crucial for collaborative\nweb development and project management. Git workflows allow web developers to\nkeep code organized, collaborate with others, and easily roll back changes so\nthat nothing is ever lost. It is smart for new web developers to learn Git's\nbasic commands, branching strategies, and merging techniques early on, to reap\nthe benefits of full version control. It is worth noting that programming\nlanguages are often learnt before Git, but we suggest learning to use Git\nfirst so that you can benefit from learning languages in a real-world coding\nenvironment.\n\nThere are many excellent free interactive learning resources to help you learn\nto use Git, including:\n\n  * Guided tour of the fundamentals of Git \u2013 Git Immersion\n\n  * Git basics foundations course \u2013 The Odin Project\n\n  * Learning Git game \u2013 Oh My Git!\n\n  * Bot assisted Git workflow course \u2013 GitHub Minesweeper\n\n## 3\\. Master the basics \u2013 HTML, CSS, & JavaScript\n\nThe next step on your journey to becoming a web developer is to learn and\nmaster the basics of web development. Get started by learning to code with\nHTML, CSS, and JavaScript, as these languages form the backbone of web\ndevelopment. This is where things get exciting! You can learn more about\nstatic sites, and begin building them with HTML for page layouts, CSS for\nstyling, and JavaScript to add interactivity.\n\nInteractive online tutorials, courses, and coding bootcamps are excellent\nresources for beginners to learn these languages. Online resources are\npreferable to traditional learning resources like books, because these\nlanguages are always evolving, and online education platforms are better\nequipped to stay agile and keep up with the latest changes. It is also\nrecommended to choose interactive project-based curriculums, as project-based\nlearning better prepares you for real-world applications, all while building\nyour portfolio.\n\nNothing is more demotivating than dedicating hours to learning a new\nprogramming language, only to discover upon completion of the course that you\nhave no idea how to apply what you have learned in the real world.\n\nHere are two free, beginner-friendly, project-based web development learning\nplatforms to help set you up for success:\n\n  * FreeCodeCamp: FreeCodeCamp is a non-profit (open source) community that helps people learn to code and find employment. FreeCodeCamp offers interactive coding challenges and projects to learn HTML, CSS, JavaScript, and more. This platform provides thousands of hours of challenges all centered around learning the logic behind coding.\n\n  * The Odin Project: The Odin Project is a free, open-source curriculum for learning web development, and is supported by a passionate community. The Odin Project offers a structured roadmap to guide aspiring web developers from beginner to advanced levels. This is the perfect place for you if you\u2019re looking for an in-depth structured curriculum that will take you from start to finish.\n\nKeep in mind that it is important to develop the right mindset for tolerating\nfrustration and breaking down problems logically to find a solution when\nlearning how to code. You need to be prepared to take notes, research errors,\nsearch for answers, and communicate your problems to other developers.\n\n## 4\\. Understand web security\n\nNow that you are able to build static sites, it is necessary to understand the\nbasics of web security. These are the protective measures that you, the\ndeveloper, must take to protect your websites from threats. Key topics to\ngrasp are HTTPS, CORS, OWASP, and CSPs.\n\nFind out more about these important security topics here:\n\n  * Why HTTPS matters\n\n  * Cross-origin resource sharing (CORS)\n\n  * OWASP cheatsheet\n\n  * Content Security Policy (CSP)\n\n## 5\\. Deepen your knowledge of frontend development\n\nFrontend development focuses on the client-side of web development, dealing\nwith the visual and user interface aspects of your websites. While your\nknowledge base of HTML, CSS, and JavaScript equips you to get started building\nsites, diving deeper into frontend development topics will vastly improve your\nabilities as a web developer.\n\nLearning about package managers, CSS architecture, CSS frameworks (like\nTailwind), CSS preprocessors, build tools (like module bundlers), web\ncomponents, and type checkers, will simplify your web development processes to\nhelp you build websites faster, and with fewer errors.\n\nHere are three free online resources to turn to when you\u2019re ready to dive\ndeeper into these topics:\n\n  1. MDN Web Docs: MDN Web Docs \u2018learn web development\u2019 guide is a trustworthy source for in-depth web development topics. It provides excellent documentation, tutorials, and guides to help you fine tune your frontend web development knowledge.\n\n  2. W3Schools: W3Schools provides tutorials and references covering all aspects of web development. It's a fantastic resource for intermediate learners.\n\n  3. Frontend Roadmap: Roadmap.sh offers community roadmaps to help guide developers in their learning. Each roadmap is an interactive diagram that opens to a resources page. The frontend roadmap is a great reference for discovering what topics to learn next.\n\n## 6\\. Decide what type of website to build \u2013 static or dynamic\n\nThis is the perfect time to begin thinking about your future as a web\ndeveloper. Do you want to work for a web development agency, become a\nfreelance web developer, or find a job as an in-house developer in a specific\nindustry? Consider what type of websites you will need to create and maintain\nin your desired role.\n\nWill you be developing business or marketing websites, documentation sites, or\nsmall ecommerce sites with less interactivity? If so, you will want to focus\non advancing your skillset for building static websites. Alternatively, if you\nenvision yourself developing highly interactive web applications, such as\nwebsites requiring complex user dashboards and individualized content, you\nshould focus on improving your dynamic website skillset.\n\nYou\u2019ll find that content-rich static websites are simpler to create, load\nfaster, which improves the user experience (UX), and are less vulnerable to\nattacks. Whereas dynamic websites are better at handling large amounts of data\nand offering interactive responsive designs, but are more complex to build,\nrequire more security measures, and experience slower load times. You can\nlearn more about static and dynamic websites in this definitive guide, or\ncontinue reading to jump straight into an overview of what you\u2019ll need to\nlearn to develop both types of websites.\n\n### Learning to build static websites\n\nWhile static sites can be built only using HTML, CSS, and JavaScript, it will\nbe beneficial for you to familiarize yourself with static site generators\n(SSGs) to help you build faster-performing static websites. Here are a few of\nthe best static site generators for beginner web developers:\n\n  * Eleventy (11ty): a fantastic beginner-friendly static site generator designed for simplicity and flexibility.\n\n  * Astro: another great choice for beginners with crystal-clear documentation, although it does use its own templating language (.astro), which while simple, is an additional step to learn.\n\n  * Hugo: a great SSG to begin exploring once you gain more confidence! Hugo\u2019s speed is unmatched, but deep customization of the SSG requires some understanding of Golang, which makes for a steeper learning curve.\n\nIt may also be worthwhile to spend some time learning about popular user\ninterface (UI) frameworks like React, Svelte, and Vue, so that you can learn\nto build interactive components to embed within your static web pages.\n\n### Learning to build dynamic websites\n\nDynamic websites leverage responsive content that changes based on user\ninteractions or database queries. This requires a solid understanding of UI\nframeworks such as React, Angular, Svelte, Vue, Solid, and Lit, in order to\nbuild responsive web designs. You will also need to become familiar with\nserver-side languages like PHP (used for Wordpress), Python, or Ruby, just to\nname a few. It will be essential to get comfortable working with APIs\n(interfaces that allow software to \u2018talk\u2019 to each other), as well as\nframeworks for server-side rendering like Next.js, GatsbyJS, SvelteKit, or\nNuxt. Dynamic website developers also need to understand how to use databases\nso they can set up their web applications to handle vast amounts of data\neffectively.\n\nOverall, you will need to develop a greater understanding of backend web\ndevelopment to build dynamic sites. While the frontend focuses on the client-\nside, the backend focuses on the server-side. Backend web development deals\nwith APIs, databases, authentication, and data handling. A web developer who\nworks in both the frontend and backend, handling the entire process of web\ndevelopment, is considered a fullstack developer. Static websites may still\nrequire some knowledge of backend development, particularly if a static site\nincludes interactive components that use or collect data. However, static\nwebsites typically meet all the requirements of an average business case,\nmeaning that there is no need for aspiring web developers to feel intimidated\nby the backend.\n\n## 7\\. Choose a content management system (CMS)\n\nNow that you are able to build beautiful websites, the last piece of the\npuzzle is to choose a content management system (CMS) for your projects. Your\ncontent management system is what makes it possible to change the content on a\nwebsite without needing to know how to code. A CMS is essential to allow\ncontent editors and marketers to make changes to a website without needing to\nask a developer for help every time they want to fix a typo or add a new\nimage.\n\n### Traditional CMS\n\nContent management systems fall into two main categories: the traditional CMS\nand the headless CMS. You are likely already familiar with some traditional\nCMSs like Wordpress, Wix, and Squarespace. While traditional content\nmanagement systems make it easy for people with no technical knowledge to get\na website up and running, these websites come with several drawbacks. Using a\ntraditional CMS will make your websites less secure, slower, and less\nflexible. This is why web developers are increasingly choosing headless CMSs.\n\n### Headless CMS\n\nHeadless CMSs separate the website content from the backend, that way you can\nmanage your content on the headless CMS and deploy it to any channel to\nchoose. This gives developers more control and flexibility to build websites\nusing their preferred tools, while reducing security threats. There are two\ntypes of headless content management systems: API-driven CMSs and Git-based\nCMSs.\n\n### API-driven CMS\n\nAn API-driven CMS serves content through an API. This set up stores your\ncontent in a central location (the CMS), making it easy to deliver to any\nchannel. This is generally suitable for dynamic websites that require\nresponsive designs, varying by device, channel, or audience. Using an API-\ndriven headless CMS, you can serve your content to both a website and a mobile\napp, and have the content display differently depending on the user.\n\n### Git-based CMS\n\nOn the other hand, a Git-based CMS is ideal for managing sites where you want\nevery user to see exactly the same messaging and content. A Git-based CMS acts\nas a layer between your Git repository (where your site content is stored),\nand the content editors. With a Git-based CMS, both developers and non-\ntechnical editors get to benefit from full version control and flexible\nworkflows.\n\nConsidering that learning to use Git is the second step on your journey to\nlearning web development, Git-based CMSs are great choices for beginner web\ndevelopers because they allow you to work with tools that you are already\nfamiliar with. Website owners will also appreciate that choosing a Git-based\nCMS means they always own their content. Full access to content is retained\neven if you ever need to move a site elsewhere.\n\nAs a web developer, you will often find yourself setting up a CMS for non-\ntechnical editors, whether they\u2019re external clients and editors, or your co-\nworkers. It is crucial to choose a CMS that is easy for non-technical editors\nto use so that they can feel confident making changes without a developers\u2019\nhelp. By choosing CloudCannon as your Git-based CMS, you can go above and\nbeyond to provide your editors with a flexible interface, all the tools needed\nto build new pages themselves, and live previews via CloudCannon\u2019s intuitive\nvisual editing. This makes it easier than ever for even non-technical editors\nto feel confident making content updates to their own websites.\n\n## 8\\. Build a portfolio site to showcase your work\n\nNow that you have mastered your craft as a self-taught web developer, it\u2019s\ntime to show the world what you can do! Whether you plan to apply for web\ndevelopment jobs, or become a freelance web developer, your potential\nemployers or clients will want to see your work. Put your new skills to good\nuse by building a professional portfolio website to showcase your web\ndevelopment skills. Be sure to make your portfolio accessible through your CV,\nGitHub account, and professional LinkedIn profile.\n\nBegin reaching out to potential employers on popular job boards for web\ndevelopers, or potential web development clients on freelance platforms for\nweb developers. If you are seeking traditional employment it is a good idea to\nbrush up on your job interviewing skills so you can make your best impression.\n\nFor aspiring freelance web developers, check out our comprehensive guide to\nbecoming a freelance web developer. You'll learn how to set up your freelance\nbusiness, attract your first clients, how much to charge for your services,\nand how to keep growing your business! Remember that it is important to adopt\na growth mindset in this field of work: a career in web development will make\nyou a life-long learner!\n\n### Launch your first website today\n\nVisually edit your static websites with CloudCannon.\n\nGet started free!\n\n### You might also like:\n\n\u00b7 Features \u00b7 Resources\n\n### How to manage hundreds of connected websites with a Git-based headless CMS\n\nLiam Bigelow \u00b7 David Large 28 Mar 2024\n\n\u00b7 Eleventy \u00b7 Resources\n\n### Top 11 free Eleventy themes for 2024\n\nJaimie McMahon \u00b7 30 Jan 2024\n\n\u00b7 Astro \u00b7 Resources\n\n### Top 10 free Astro themes to use in 2024\n\nJaimie McMahon \u00b7 25 Jan 2024\n\nFeatures\n\n  * Website Editing\n  * Content Publishing\n  * Website Hosting\n  * Technologies\n\nUsers\n\n  * Content Editors\n  * Marketers\n  * Developers\n  * Digital Agencies\n  * Enterprise\n  * Success Stories\n\nDevelopers\n\n  * Documentation\n  * Changelog\n  * Tutorials\n  * Jekyll cheatsheet\n  * Jamstack Ecosystem\n\nResources\n\n  * Blog\n  * Open Source\n  * Templates\n  * Events\n  * Support\n  * Accessibility\n\nPartners\n\n  * Partner Program\n  * Expert Directory\n\nCompany\n\n  * Company\n  * Careers\n  * Contact\n  * Book a Demo\n\n\u00a9 2024 Cloud Cannon Ltd.\n\n  * Terms\n  * Privacy\n  * GDPR\n  * Legacy plan limits\n  * Security\n\n  * linkedin\n  * twitter\n  * youtube\n  * mastodon\n  * github\n\n", "frontpage": false}
