{"aid": "40009392", "title": "How to be productive when you have to sprint just to stay in place \u2013 hacks", "url": "https://www.anti-vc.com/p/brain-boots-to-go-the-distance-with", "domain": "anti-vc.com", "votes": 2, "user": "donnaoana", "posted_at": "2024-04-12 04:28:12", "comments": 0, "source_title": "Brain boots to go the distance with energy vs. burnout - learnings from a top ML engineer.", "source_text": "Brain boots to go the distance with energy vs. burnout - learnings from a top\nML engineer.\n\n# anti-vc\n\nShare this post\n\n#### Brain boots to go the distance with energy vs. burnout - learnings from a\ntop ML engineer.\n\nwww.anti-vc.com\n\n#### Discover more from anti-vc\n\nsharing what I learn\n\nContinue reading\n\nSign in\n\n# Brain boots to go the distance with energy vs. burnout - learnings from a\ntop ML engineer.\n\nOana Olteanu\n\nApr 12, 2024\n\nShare this post\n\n#### Brain boots to go the distance with energy vs. burnout - learnings from a\ntop ML engineer.\n\nwww.anti-vc.com\n\nShare\n\nEveryone wants AI. Founders rethink their business with generative AI.\nEngineers rethink the infrastructure underneath the application. Each layer of\nthe tech stack has volatility as multiple people rush to build what they think\nit\u2019s missing. Not enough time has passed for gravity to settle in and for a\nstandard tooling and typical workflow to emerge. This situation carries a\nunique potential for burnout, and we want AI, but we don\u2019t wish for burnout. I\ninvited a top ML engineer to talk with the builders I invested in to help them\nprevent burnout. Yaroslav is ex-Google Brain, ex-OpenAI, ex-PyTorch. He had to\nscale up infrastructure for distributed training four times, sometimes out of\nnecessity rather than desire. He shared the lessons and techniques to stay\nhappy and productive when working with uncertain timelines, complexity, and\ntechnical support staff that hates supporting you.\n\nEach of us can prevent burnout. Awareness is all you need. Burnout happens\nonce work becomes routine and work is no longer rewarding. You must set time\noff to evaluate your workflow and include the reward if it\u2019s missing. This\nblog shares hacks that everybody can use to make their work more enjoyable.\n\nMain points\n\n  1. Longer timelines and integration work can lead to burnout. When you summit a mountain, you must wear appropriate hiking boots. But when you fit together a system with components made by different people (e.g., setting up ML infrastructure), you don\u2019t think you need \u201cbrain boots.\u201d\n\n  2. Each of us has \u201cbrain boots\u201d - mental virtuous loops - something triggers a behavior, you do something, and then you get a reward. Sometimes, this loop gets broken. Some people cut out the reward from this loop, get triggered, and do a routine. This 2-node cycle is unsustainable and will eventually cause you to become unhappy and unproductive. People dealing with volatility or integration work are especially at risk.\n\n  3. Self-awareness is the solution to prevent burnout. You can become self-aware by taking time off to reflect on whether you are getting the reward. You can also ask a friend to help with this, or you can go on a long walk together. Once you know you must get the reward back into your work; you can do that by shifting to curiosity, structuring your job to have shorter-term milestones, ideally daily, and finding another personal goal that synergizes with your work and is immediately rewarding.\n\nYaroslav is the Chuck Norris of Machine Learning in my eyes. Even Chuck Norris\nsometimes has to do work he\u2019s not excited about, like building ML\ninfrastructure. While setting up ML infrastructure from scratch, Yaroslav\nobserved some of the engineers started to burn out: \u201cI realized if they get\nburned out, I might get sucked into doing infrastructure myself. So I'm like,\nno, I have to stop this at the root. People must be happy and productive, so I\ndon't have to do it\u201d \ud83d\ude02. He started researching and found this standard diagram\nof reward-based learning. Something triggers the behavior. You do it, and then\nyou get the reward. You define what reward is; it's subjective. And sometimes,\nthis loop gets broken. Some people have cut out the reward from the loop. This\nkind of 2-note cycle is unsustainable and will eventually cause you to become\nunhappy and unproductive.\n\nPeople doing integration work are especially at risk. A typical work scenario\nfor an engineer is to build something new or to fix a new problem. So you come\nin and need to \u201cpull out the snake from the box,\u201d but you don't know what's in\nthe box. Maybe it's the tail of an elephant. So you pull, and it's a herd of\nelephants extending as far as the eye can see, which is a possibility you have\nnot considered. Your first instinct is to start caring for the elephants to\nreach your original goal. But this means putting off the reward. And if you\nput off the reward for too long, you end up in this loop. So, if you stay in\nthe cycle long enough, you will forget about the reward. A typical response of\nburned-out people is, I don't know what brings me joy anymore. Awareness is\nall you need. You must know when to get the reward and perform self-\nintervention to return to a healthy state. The time you can stay productive\nwithout a reward is limited to a few months.\n\nWhile at Google Brain, Yaroslav took on a project to develop infrastructure to\nmake all his teammates more efficient. However, this turned out to be more\ncomplicated than expected because of a long tail of bugs. His manager gently\ntried to discourage him from this work. He gave him to read an essay called,\nLet it Break. It's a story about a hero engineer pulling nights and weekends,\nensuring that some service stays up, leading to burnout. The correct action is\nthat he should have just gone home and let it come crashing down. One of 2\nthings would have happened at this point: 1) service goes down. Nobody notices\nbecause it's not that important, or 2) service goes down, and everybody\nnotices. So, in the first case, the engineer should have not been working on\nthe service. In the second case, this would force management to examine the\nissue and realize that a critical service was hinging on a single burnt-out\nengineer. At this point, they could staff a whole team to maintain it and\npromote the engineer to team leader.\n\nWhen Yaroslav got this advice, he ignored it because he was stubborn. His\nthinking was that his manager was not as invested as he is: \u201cHe doesn't\nrealize how much work I've put in and how close I am to the finish line! But\nin reality, I was not close at all\u201d. Dealing with this turned him into a\nmindless bug-fixing machine, so every day, he would go to the office, fix a\ncouple of bugs, discover even more bugs, and then go home, not feeling very\ngood. Yaroslav was both unhappy and unproductive. The reward was missing, and\na trigger-routine loop captured Yaroslav, which led to several months of\ninefficient work.\n\nWhose fault was it? Yaroslav lacked self-awareness. But then, how can you\ncorrect your lack of self-awareness when you don't have self-awareness in the\nfirst place? It may be his manager's fault. He should have done that. However,\nthe manager needed more direct reports. So he might have been going through a\nmini burnout himself. It may be the director's fault because the director\noversees the management structure and the number of reports managers have. But\nthen the director cannot materialize managers out of thin air. They have to\nwork with the resources they have. It may be the fault of the hiring manager.\nHowever, higher management has to deal with changing business conditions and\nmarket forces and sometimes takes unplanned actions.\n\nThe person responsible is the person who has any control over the situation -\nyou. So, the lesson here is always to maintain self-awareness. You must\nrecognize in time that you can't sustain working without joy. You must always\nask yourself if you are happy. Are you annoyed? Are you stressed? Where do you\nsee this trajectory going in the long term? What can you do to improve it? If\nyou have a higher-level goal you're trying to achieve, which requires\ndeferring your reward, try to be realistic about how long you can go without\nreceiving some kind of reward. If your goal is to launch something, it's a\nyear away, and you may not be able to defer your reward for a year without\nburnout. You might end up miserable and also fail at achieving your goal. You\nhave to structure your work so that you're happy in the meantime. There are\nthree kinds of reward hacks:\n\n1\\. Curiosity-driven rewards\n\n2\\. Short-term milestones\n\n3\\. Synergy with another direction that provides immediate reward\n\nCuriosity-driven reward\n\nAfter Yaroslav left Google, he joined a new company - \u201cfirst, I felt lost\nbecause I didn't have access to this amazing infrastructure I had at Google.\nBut then I got curious. I probably couldn't get this amazing Google-level\ninfrastructure. But I thought, what kind of infrastructure could I get?\u201d. He\ndecided to build it from scratch, using AWS. Whenever he encountered issues,\nhe filed a ticket in the AWS support queue. They would tell him how to do it,\nand he would fix it. The work was enjoyable because there was no deadline. And\nhe was working, mainly motivated by curiosity. He just wanted to see what is\npossible outside of Google. After a while, the tickets dried up. At that\npoint, the infrastructure tool was complete. He was surprised he had\ninfrastructure much better than at Google because everything wasn't Python.\n\nDuring this complex integration work, he became aware by setting aside time to\nwork on his awareness. One easy way to do this is to walk to the office and\nback. You can grow your awareness often during this time if you spend an hour\njust thinking about your feelings. Set aside time, and tell yourself, I will\nallocate 40 hours working on my awareness next quarter. Read the books of\nJudson Brewer, Brown University, to learn more. Google trains its engineers\nfor awareness. You can add the reward to the loop if you're curious about\nwhat's happening. The act of doing this is rewarding in itself. So you can use\nit when working on infrastructure, and things are terrible. Instead of being\nannoyed that things are awful, you could get curious precisely how terrible\nthey are. Is it the most horrible thing you've ever seen or not, so you can\nmotivate yourself this way?\n\nShort-term milestones as a reward\n\nAt another company, Yaroslav had to set up infrastructure once again. Still,\nhe needed help using his AWS experience because the company decided to use and\nsign a contract with another cloud provider, which required better support.\nInstead of 50 tickets away, he was 200 from a working solution, which meant\nmore knowledge and more lessons to gain. The problem did not become harder;\nits scope had just changed. Then Yaroslav was thrown yet another curveball;\nthe founder decided to no longer pay even for the less good support from this\ncloud provider, so the startup saved some money. Yaroslav didn't let this\nupset him because attachment brings suffering, and attachment to your\nworkflows is just another kind of attachment. Instead, he reorganized his\nworkflow around Google Docs. He would run benchmarks, find bottlenecks, and\nshare his benchmarking code. And then, another engineer would look into these\nissues and respond in Google Doc comments.\n\nIt was weird to go outside of the standard ticketing queue. But this approach\nappeared to work. And since Yaroslav didn't have a ticket queue, he had a\nGoogle Doc where he kept track of issues and, over time, saw the list of\nresolved issues grow, which was rewarding\u2014the leadership at the time needed to\nunderstand his approach. At one point, the CTO called him and said, \u201cYaroslav,\nI am not happy about your execution. You're spending all your time in useless\nmeetings and making docs\u201d. Yaroslav didn't let that upset him because I wasn't\nwriting docs for them. He was writing docs for himself and this other\ninfrastructure person in the company who appreciated them. So this is a more\ngeneral lesson to keep in mind. Don't do something because somebody wants you\nto because you have no control over their wishes. Maybe tomorrow they'll\nchange their mind. Or they'll just forget what they wanted. Or perhaps you\nmisunderstood what they wanted. Instead, you could let the person convince you\nto do something or to want to do something; at this point, you will continue\ndoing it because you want it, not because somebody asked you.\n\nAlso, if you're acting as a manager, you want your reports to do things only\nif you told them to do it because they will do a lousy job, and you will\nregret asking them. Ensure you only do what you want to do, and ensure your\nreports do what they want. So you have to convince them to want them to do\nthose things. You could experience this when dealing with infrastructure\nissues. When asking for support, you act as a manager and assign work to the\nsupport team. If the support team is not motivated to help you, they will find\nan interpretation of your request that generates minor work for them, like\nthings don't work. I don't know. I tried. It works.\n\nThe lesson from this experience is that you need some intermediate goals to\nkeep track of your progress and feel good about this progress. And then, one\nday, you want to look back at what you did and think you've accomplished\nsomething. You may have yet to get a thing working. But you eliminated yet\nanother way in which it is not working. Integration work is like opening a\ndoor with many locks. It only moves once all the locks are unlocked. So,\ninstead of keeping track of how many times you open the door, you could keep\ntrack of how many locks you have unlocked.\n\nSynergy with another direction that provides immediate reward\n\nSynergy is when you combine your eventually rewarding work with some\nimmediately satisfying direction. There is a trick they teach managers. Two\npeople are needed to work on a less desirable task. And the reason for this is\nthat teamwork is inherently rewarding unless they hate each other.\n\nYaroslav worked in his career with another accomplished engineer, Stas\nBeckman. When he started encountering unexpected problems, instead of seeing\nthem as obstacles, he saw them as content sources for his book. The more bugs\nyou see, the better because it improves the book. You can find the book here;\nit\u2019s a great resource with hard-earned lessons for any ML engineers:\nhttps://github.com/stas00/ml-engineering. Yaroslav keeps a collection of\ndocuments describing how he solved them, and over time, he cleans them up and\nmakes those docs better. So, looking at his work this way, he can feel like\nhe\u2019s becoming more knowledgeable about every issue he encounters.\n\nIn summary, you must maintain self-awareness and do something when your work\nstops rewarding. If you want to continue going to the goal without burning\nout, you could do some reward hacks: shifting to curiosity, structuring your\nwork to have some shorter-term milestones, ideally daily, and possibly finding\nif there is another direction that has synergy with your work, like writing a\nbook or training someone to do your job better than you.\n\nMake work rewarding every day. source\n\nThanks to Yaroslav for coming to chat with us and share his experience. Full\nrecording below.\n\n### Subscribe to anti-vc\n\nBy Oana Olteanu \u00b7 Launched 8 months ago\n\nsharing what I learn\n\nShare this post\n\n#### Brain boots to go the distance with energy vs. burnout - learnings from a\ntop ML engineer.\n\nwww.anti-vc.com\n\nShare\n\nComments\n\nFine Tuning LLMs - learnings from the DeepLearning SF Meetup\n\n11 years ago, NASA marked the 135th and final mission of the American Space\nShuttle program. I was in the rainy north of Germany, in undergrad...\n\nAug 21, 2023 \u2022\n\nOana Olteanu\n\n11\n\nShare this post\n\n#### Fine Tuning LLMs - learnings from the DeepLearning SF Meetup\n\nwww.anti-vc.com\n\n1\n\n7 Key Questions: Learnings from My Founder Story\n\nHow to vet a potential co-founder\n\nNov 12, 2023 \u2022\n\nOana Olteanu\n\n4\n\nShare this post\n\n#### 7 Key Questions: Learnings from My Founder Story\n\nwww.anti-vc.com\n\n1\n\nReady for more?\n\n\u00a9 2024 Oana Olteanu\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great writing\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
