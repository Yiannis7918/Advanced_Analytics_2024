{"aid": "40009143", "title": "Show HN: A JavaScript library for data visualization in both SVG and Canvas", "url": "https://github.com/andrewcourtice/ripl", "domain": "github.com/andrewcourtice", "votes": 2, "user": "andrewcourtice", "posted_at": "2024-04-12 03:31:29", "comments": 0, "source_title": "GitHub - andrewcourtice/ripl: Ripl provides a unified API for 2D graphics rendering in the browser with a focus towards high performance and interactive data visualization.", "source_text": "GitHub - andrewcourtice/ripl: Ripl provides a unified API for 2D graphics\nrendering in the browser with a focus towards high performance and interactive\ndata visualization.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nandrewcourtice / ripl Public\n\n  * Notifications\n  * Fork 0\n  * Star 3\n\nRipl provides a unified API for 2D graphics rendering in the browser with a\nfocus towards high performance and interactive data visualization.\n\nripl-alpha.vercel.app\n\n### License\n\nMIT license\n\n3 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# andrewcourtice/ripl\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nandrewcourticedocs: minor update to readme examples1a33451 \u00b7\n\n## History\n\n99 Commits  \n  \n### .vscode\n\n|\n\n### .vscode\n\n| refactor: use vitepress as demo app  \n  \n### .yarn\n\n|\n\n### .yarn\n\n| chore: update yarn and packages  \n  \n### app\n\n|\n\n### app\n\n| feat(app): added search  \n  \n### packages\n\n|\n\n### packages\n\n| feat(chart): added logic to drop ticks based on collision  \n  \n### .eslintrc.js\n\n|\n\n### .eslintrc.js\n\n| refactor(core): changed more structures to classes  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| chore: migrate from pnpm to yarn  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| refactor: use vitepress as demo app  \n  \n### .npmrc\n\n|\n\n### .npmrc\n\n| refactor: split out into more packages  \n  \n### .yarnrc.yml\n\n|\n\n### .yarnrc.yml\n\n| chore: update yarn and packages  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit  \n  \n### README.md\n\n|\n\n### README.md\n\n| docs: minor update to readme examples  \n  \n### global.d.ts\n\n|\n\n### global.d.ts\n\n| chore: migrate from pnpm to yarn  \n  \n### package.json\n\n|\n\n### package.json\n\n| refactor: use vitepress as demo app  \n  \n### tsconfig.json\n\n|\n\n### tsconfig.json\n\n| refactor: use vitepress as demo app  \n  \n### tsup.config.ts\n\n|\n\n### tsup.config.ts\n\n| initial commit  \n  \n### vitest.config.ts\n\n|\n\n### vitest.config.ts\n\n| chore: migrate from pnpm to yarn  \n  \n### yarn.lock\n\n|\n\n### yarn.lock\n\n| fix(app): added sass  \n  \n## Repository files navigation\n\n# Ripl\n\nRipl (pronounced ripple) is a library that provides a unified API for 2D\ngraphics rendering (canvas & SVG) in the browser with a focus towards high\nperformance and interactive data visualization.\n\nWorking with the canvas API can be notoriously difficult as it is designed to\nbe very low-level. Alternatively, working with SVG is rather straightforward\nbut not without it's flaws. Because these paradigms differ widely in their\nimplementations developers often have to choose one or the other at the outset\nof a project. Ripl alleviates the issue of choosing between these mediums by\nexposing a unified API and mimicking the DOM/CSSOM in as many ways possible to\nmake it simple for developers to interact with. Switching between Canvas and\nSVG is as simple as changing 1 line of code.\n\nRipl also exposes a number of methods such as scales, geometry, interpolation,\ncolor and easing to assist with drawing (inspired by D3).\n\n## Example\n\nHere are a few proof-of-concept data-visualization examples created using\nRipl:\n\n### Multi-Series Trend Chart (Bar/Line)\n\n  * Demo\n  * Source\n\n### Donut Chart with Hover Effects\n\n  * Demo\n  * Source\n\n## Usage\n\nThe following is a tour of Ripl's features starting from the most basic and\nprogressively building towards more advanced concepts.\n\n### Render a Basic Element\n\nHere's a basic example of rendering an element.\n\n    \n    \n    import { createContext, createCircle, } from '@ripl/core'; const context = createContext('.mount-element'); const circle = createCircle({ fillStyle: 'rgb(30, 105, 120)', lineWidth: 4, cx: context.width / 2, cy: context.height / 2, radius: context.width / 3 }); circle.render(context);\n\n### Modify Element Properties\n\nTo modify an element simply change any of it's properties and re-render it.\n\n    \n    \n    import { createContext, createCircle, } from '@ripl/core'; const context = createContext('.mount-element'); const circle = createCircle({ fillStyle: 'rgb(30, 105, 120)', lineWidth: 4, cx: context.width / 2, cy: context.height / 2, radius: context.width / 3 }); function render() { circle.render(context); } function update() { circle.fillStyle = '#FF0000'; circle.cx = context.width / 3; circle.cy = context.height / 3; render(); }\n\n### Render to Different Contexts (eg. SVG)\n\nTo render the same element to SVG (or any other context) simply replace the\nimport of the createContext method from @ripl/core to the appropriate package,\nin this case @ripl/svg. Here's the same example above rendered to SVG:\n\n    \n    \n    import { createContext } from '@ripl/svg'; import { createCircle, } from '@ripl/core'; const context = createContext('.mount-element'); const circle = createCircle({ fillStyle: 'rgb(30, 105, 120)', lineWidth: 4, cx: context.width / 2, cy: context.height / 2, radius: context.width / 3 }); function render() { circle.render(context); } function update() { circle.fillStyle = '#FF0000'; circle.cx = context.width / 3; circle.cy = context.height / 3; render(); }\n\n### Grouping and Inheritance\n\nRipl can also render multiple elements in groups with inherited properties\n(like CSS) and events (DOM event bubbling):\n\n    \n    \n    import { createContext, createCircle, createRect, createGroup } from '@ripl/core'; const context = createContext('.mount-element'); const circle = createCircle({ cx: context.width / 2, cy: context.height / 2, radius: context.width / 3 }); const rect = createRect({ x: context.width / 2, y: context.height / 2, width: context.width / 5, height: context.height / 5, }); const group = createGroup({ fillStyle: 'rgb(30, 105, 120)', lineWidth: 4, children: [ circle, rect ] }); group.render(context);\n\n### Querying Elements\n\nElements can be queried in groups using common DOM methods such as\ngetElementById, getElementsByType, and getElementsByClass. Elements can also\nbe queried using a subset of the CSS selector syntax with query and queryAll.\n\n    \n    \n    import { createContext, createCircle, createRect, createGroup } from '@ripl/core'; const context = createContext('.mount-element'); const circle = createCircle({ class: 'shape', cx: context.width / 2, cy: context.height / 2, radius: context.width / 3 }); const rect = createRect({ class: 'shape', x: context.width / 2, y: context.height / 2, width: context.width / 5, height: context.height / 5, }); const childGroup = createGroup({ id: 'child-group' fillStyle: 'rgb(30, 105, 120)', lineWidth: 4, children: [ circle, rect ] }); const parentGroup = createGroup({ id: 'parent-group', children: childGroup }); parentGroup.render(context); function query() { const qCircle = parentGroup.getElementsByType('circle'); const qRect = parentGroup.getElementsByType('rect'); const qChildren = parentGroup.queryAll('.shape'); const qChild = parentGroup.query('.child-group > .shape'); }\n\n### Scene Management\n\nRipl also provides complete scene management for rendering large group\nstructures with events.\n\n    \n    \n    import { createContext, createCircle, createRect, createGroup, createScene } from '@ripl/core'; const context = createContext('.mount-element'); const circle = createCircle({ class: 'shape', cx: context.width / 2, cy: context.height / 2, radius: context.width / 3 }); const rect = createRect({ class: 'shape', x: context.width / 2, y: context.height / 2, width: context.width / 5, height: context.height / 5, }); const childGroup = createGroup({ id: 'child-group' fillStyle: 'rgb(30, 105, 120)', lineWidth: 4, children: [ circle, rect ] }); const parentGroup = createGroup({ id: 'parent-group', children: childGroup }); const scene = createScene({ children: parentGroup }) scene.render(context); circle.on('click', event => console.log(event));\n\n### Basic Animation and Interactivity\n\nInteractivity and animation can be added by using a renderer. The renderer\nprovides an automatic render loop to re-render a scene at the ideal framerate.\n\n    \n    \n    import { createContext, createCircle, createRect, createGroup, createScene, easeOutCubic } from '@ripl/core'; const context = createContext('.mount-element'); const circle = createCircle({ fillStyle: 'rgb(30, 105, 120)', cx: context.width / 2, cy: context.height / 2, radius: context.width / 3 }); const rect = createRect({ fillStyle: 'rgb(30, 105, 120)', x: context.width / 2, y: context.height / 2, width: context.width / 5, height: context.height / 5, }); const scene = createScene({ children: [ circle, rect ] }); const renderer = createRenderer(scene, { autoStart: true, autoStop: true }); async function animate() { // Render one await renderer.transition(circle, { duration: 1000, ease: easeOutCubic, state: { fillStyle: '#FF0000', cx: context.width / 4, cy: context.height / 4, radius: context.width / 4 } }); // Render many with common properties // Alternatively you could transition a whole group or scene await renderer.transition([circle, rect], { duration: 1000, ease: easeOutCubic, state: { fillStyle: '#FF0000', } }); }\n\n### Advanced Animation\n\nRipl also supports CSS-like animation keyframes and custom interpolator\nfunctions\n\n    \n    \n    // ... async function animate() { // Implicit keyframe offsets await renderer.transition([circle, rect], { duration: 1000, ease: easeOutCubic, state: { fillStyle: [ '#FF0000', // implied 0.33 offset '#00FF00', // implied 0.66 offset '#0000FF', // implied end state - offset 1 ], } }); // Explicit keyframe offsets await renderer.transition([circle, rect], { duration: 1000, ease: easeOutCubic, state: { fillStyle: [ { value: '#FF0000', offset: 0.25 }, { value: '#0000FF', offset: 0.8 } ], } }); // Custom interpolator await renderer.transition(circle, { duration: 1000, ease: easeOutCubic, state: { radius: t => t * context.width / 2 // where 0 <= t <= 1 (depending on the ease function) } }); }\n\n## About\n\nRipl provides a unified API for 2D graphics rendering in the browser with a\nfocus towards high performance and interactive data visualization.\n\nripl-alpha.vercel.app\n\n### Topics\n\njavascript typescript canvas\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n3 stars\n\n### Watchers\n\n4 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Contributors 2\n\n  * andrewcourtice Andrew Courtice\n  * kfras Kyle Fraser\n\n## Languages\n\n  * TypeScript 94.4%\n  * SCSS 2.3%\n  * JavaScript 1.8%\n  * Vue 1.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
