{"aid": "40033497", "title": "Sandboxing All the Things with Flatpak and BubbleBox", "url": "https://www.ralfj.de/blog/2024/04/14/bubblebox.html", "domain": "ralfj.de", "votes": 8, "user": "fanf2", "posted_at": "2024-04-14 19:04:19", "comments": 0, "source_title": "Sandboxing All The Things with Flatpak and BubbleBox", "source_text": "Sandboxing All The Things with Flatpak and BubbleBox\n\nApr 14, 2024 \u2022 Sysadmin \u2022 Edits \u2022 Permalink\n\n# Sandboxing All The Things with Flatpak and BubbleBox\n\nA few years ago, I have blogged about my approach to sandboxing less-trusted\napplications that I have to or want to run on my main machine. The approach\nhas changed since then, so it is time for an update.\n\nOver time I grew increasingly frustrated with Firejail: configurations would\nfrequently break on updates, and debugging Firejail profiles is extremely\nhard. When considering all the included files, we are talking about many\nhundred lines of configuration with a subtle interplay of allowlists and\nblocklists. Even when I knew which folder I wanted to give access to, it was\noften non-trivial to ensure that this access would actually be possible.\n\nNow I am instead using a combination of two different approaches: Flatpak and\nBubbleBox.\n\n## Flatpak\n\nThe easiest sandbox to maintain is the sandbox maintained by someone else. So\nwhen a Flatpak exists for software I want to or have to use, such as Signal or\nZoom, that is generally my preferred approach.\n\nUnfortunately, Flatpaks can come with extremely liberal default profiles that\nmake the sandbox mostly pointless. The following global overrides help ensure\nthat this does not happen:\n\n    \n    \n    [Context] sockets=!gpg-agent;!pcsc;!ssh-auth;!system-bus;!session-bus filesystems=~/.XCompose:ro;xdg-config/fontconfig:ro;!~/.gnupg;!~/.ssh;!xdg-documents;!home;!host [Session Bus Policy] org.freedesktop.Flatpak=none org.freedesktop.secrets=none\n\n## BubbleBox\n\nHowever, not all software exists as Flatpak. Also, sometimes I want software\nto run basically on my host system (i.e., to use the regular /usr), just\nwithout access to literally everything in my home directory. Examples of this\nare Factorio and VSCodium. The latter doesn\u2019t work in Flatpak as I want to use\nit with LaTeX, and realistically this means it needs to run the LaTeX\ninstalled via apt. The official recommendation is to effectively disable the\nFlatpak sandbox, but that entirely defeats the point, so I went looking for\nalternatives.\n\nbubblewrap provides a very convenient solution: it can start an application in\nits own private filesystem namespace with full control over which part of the\nhost file system is accessible from inside the sandbox. I wrote a small\nwrapper around bubblewrap to make this configuration a bit more convenient to\nwrite and manage; this project is called BubbleBox. This week-end I finally\ngot around to adding support for xdg-dbus-proxy so that sandboxed applications\ncan now access particular D-Bus functions without having access to the entire\nbus (which is in general not safe to expose to a sandboxed application). That\nmeans it\u2019s finally time to blog about this project, so here we go \u2013 if you are\ninterested, check out BubbleBox; the project page explains how you can use it\nto set up your own sandboxing.^1\n\nI should also note that this is not the only bubblewrap-based sandboxing\nsolution. bubblejail is fairly similar but provides a configuration GUI and a\ngood set of default provides; it was a very useful resource when figuring out\nthe right bubblewrap flags to make complex GUI applications work properly.\n(Incidentally, \u201cbubblejail\u201d is also how I called my own script originally, but\nthen I realized that the name is already taken.) Joachim Breitner also\nrecently blogged about his own bubblewrap-based sandboxing script. There are\nmany ways to do this, and it was fun to figure out my own solution.\n\nUsing bubblewrap and xdg-dbus-proxy for this was an absolute joy. Both of\nthese components came out of the Flatpak project, but the authors realized\nthat they could be independently useful, so in best Unix tradition they turned\nthem into tools that provide all the required mechanism without hard-coding\nany sort of policy. Despite doing highly non-trivial tasks, they are both\npretty easy to use and compose and very well-documented. Thanks a lot to\neveryone involved!\n\n  1. One day I should probably rewrite this in Rust... maybe this will be my test project for when cargo-script becomes available. \u21a9\n\nPosted on Ralf's Ramblings on Apr 14, 2024. Comments? Drop me a mail!\n\n", "frontpage": true}
