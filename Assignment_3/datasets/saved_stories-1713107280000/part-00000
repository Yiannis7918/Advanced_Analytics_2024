{"aid": "40029801", "title": "Beautifying Org Mode in Emacs (2018)", "url": "https://zzamboni.org/post/beautifying-org-mode-in-emacs/", "domain": "zzamboni.org", "votes": 1, "user": "tosh", "posted_at": "2024-04-14 09:05:57", "comments": 0, "source_title": "Beautifying Org Mode in Emacs", "source_text": "zzamboni.org | Beautifying Org Mode in Emacs\n\n# Beautifying Org Mode in Emacs\n\nPOST\n\n# Beautifying Org Mode in Emacs\n\nMarch 21, 2018\n\nOver the last few months, I have used org-mode more and more for writing and\nprogramming in Emacs. I love its flexibility and power, and it is the first\nliterate programming tool which \u201cfeels right\u201d, and I have been able to stick\nwith it for a longer period of time than in my previous attempts.\n\nRecently I started thinking about how I could make my editing environment more\nvisually appealing. I am in general very happy with my Emacs' appearance. I\nuse the Gruvbox theme (in the meantime I have switched to the light Spacemacs\ntheme) and org-mode has very decent syntax highlighting. But as I write more\nand more prose in Emacs these days, I started thinking it might be nice to\nedit text in more visually-appealing fonts, including using a proportional\nfont, which makes regular prose much more readable. I would like to share with\nyou what I learned and my current Emacs configuration.\n\nIn the end, you can have an Emacs setup for editing org documents which looks\nvery nice, with proportional fonts for text and monospaced fonts for code\nblocks, examples and other elements. To wet your appetite, here is what a\nfragment of my init.org file looked like with the Gruvbox theme:\n\nAnd this is how it looks now with the light Spacemacs theme:\n\n## Step 1: Configure faces for Org headlines and lists\n\nMy first step was to make org-mode much more readable by using different fonts\nfor headings, hiding some of the markup, and improving list bullets. I took\nthese settings originally from Howard Abrams' excellent Org as a Word\nProcessor article, although I have tweaked them a bit.\n\nFirst, we ask org-mode to hide the emphasis markup (e.g. /.../ for italics,\n*...* for bold, etc.):\n\n    \n    \n    (setq org-hide-emphasis-markers t)\n\nThen, we set up a font-lock substitution for list markers (I always use \u201c-\u201d\nfor lists, but you can change this if you want) by replacing them with a\ncentered-dot character:\n\n    \n    \n    (font-lock-add-keywords 'org-mode '((\"^ *\\\\([-]\\\\) \" (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) \"\u2022\"))))))\n\nThe org-bullets package replaces all headline markers with different Unicode\nbullets:\n\n    \n    \n    (use-package org-bullets :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))\n\nFinally, we set up a nice proportional font, in different sizes, for the\nheadlines. The fonts listed will be tried in sequence, and the first one found\nwill be used. My current favorite is ET Book, feel free to add your own:\n\n    \n    \n    (let* ((variable-tuple (cond ((x-list-fonts \"ETBembo\") '(:font \"ETBembo\")) ((x-list-fonts \"Source Sans Pro\") '(:font \"Source Sans Pro\")) ((x-list-fonts \"Lucida Grande\") '(:font \"Lucida Grande\")) ((x-list-fonts \"Verdana\") '(:font \"Verdana\")) ((x-family-fonts \"Sans Serif\") '(:family \"Sans Serif\")) (nil (warn \"Cannot find a Sans Serif Font. Install Source Sans Pro.\")))) (base-font-color (face-foreground 'default nil 'default)) (headline `(:inherit default :weight bold :foreground ,base-font-color))) (custom-theme-set-faces 'user `(org-level-8 ((t (,@headline ,@variable-tuple)))) `(org-level-7 ((t (,@headline ,@variable-tuple)))) `(org-level-6 ((t (,@headline ,@variable-tuple)))) `(org-level-5 ((t (,@headline ,@variable-tuple)))) `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1)))) `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25)))) `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5)))) `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75)))) `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))\n\n## Step 2: Setting up variable-pitch and fixed-pitch faces\n\nMy next realization was that Emacs already includes support for displaying\nproportional fonts with the variable-pitch-mode command. You can try it right\nnow: type M-x variable-pitch-mode and your current buffer will be shown in a\nproportional font (you can disable it by running variable-pitch-mode again).\nOn my Mac the default variable-pitch font is Helvetica. You can change the\nfont used by configuring the variable-pitch face. You can do this\ninteractively through the customize interface by typing M-x customize-face\nvariable-pitch. At the moment I like Source Sans Pro ET Book.\n\nAs a counterpart to variable-pitch, you need to configure the fixed-pitch face\nfor the text that needs to be shown in a monospaced font. My first instinct\nwas to inherit this from my default face (I use Inconsolata Fira Code), but it\nseems that this gets remapped when variable-pitch-mode is active, so I had to\nconfigure it by hand with the same font as my default face.\n\nWhat I would suggest is that you customize the fonts interactively, as you can\nsee live how it looks on your text. You can make the configuration permanent\nfrom the customize screen as well. If you want to explicitly set them in your\nconfiguration file, you can do it with the custom-theme-set-faces function,\nlike this:\n\n    \n    \n    (custom-theme-set-faces 'user '(variable-pitch ((t (:family \"ETBembo\" :height 180 :weight thin)))) '(fixed-pitch ((t ( :family \"Fira Code Retina\" :height 160)))))\n\nTip #1: you can get the LISP expression for your chosen font (the part that\nlooks like ((t (:family ... ))) from the customize-face screen - open the\n\u201cState\u201d button and choose the \u201cShow Lisp Expression\u201d menu item.\n\nTip #2: if you use a Mac, you can get the value to use for the :family\nattribute by looking at the \u201cFamily\u201d attribute in the Font Book application\nfor the font you want to use.\n\nYou can enable variable-pitch-mode automatically for org buffers by setting up\na hook like this:\n\n    \n    \n    (add-hook 'org-mode-hook 'variable-pitch-mode)\n\n## Step 3: Use long lines and visual-line-mode\n\nOne thing you will notice right away with proportional fonts is that filling\nparagraphs no longer makes sense. This is because fill-paragraph works based\non the number of characters in a line, but with a proportional font,\ncharacters have different widths, so a filled paragraph looks strange:\n\nOf course, you can still do it, but there\u2019s a better way. With visual-line-\nmode enabled, long lines will flow and adjust to the width of the window. This\nis great for writing prose, because you can choose how wide your lines are by\njust resizing your window.\n\nThere is one habit you have to change for this to work: the instinct (at least\nfor me) of pressing M-q every once in a while to readjust the current\nparagraph. I personally think it\u2019s worth it.\n\nYou can enable visual-line-mode automatically for org buffers by setting up\nanother hook:\n\n    \n    \n    (add-hook 'org-mode-hook 'visual-line-mode)\n\n## Step 4: Configure faces for specific Org elements\n\nAfter all the changes above, you will have nice, proportional fonts in your\nOrg buffers. However, there are some things for which you still want monospace\nfonts! Things like source blocks, examples, tags and some other markup\nelements still look better in a fixed-spacing font, in my opinion.\nFortunately, org-mode has an extremely granular face selection, so you can\neasily customize them to have different elements shown in the correct font,\ncolor, and size.\n\nTip: you can use C-u C-x = (which runs the command what-cursor-position with a\nprefix argument) to show information about the character under the cursor,\nincluding the face which is being used for it. If you find a markup element\nwhich is not correctly configured, you can use this to know which face you\nhave to customize.\n\nYou can configure specific faces any way you want, but if you simply want them\nto be rendered in monospace font, you can set them to inherit from the fixed-\npitch face we configured before. You can also inherit from multiple faces to\ncombine their attributes.\n\nHere are the faces I have configured so far (there are probably many more to\ndo, but I don\u2019t use org-mode to its full capacity yet). I\u2019m showing here the\nLISP expressions, but you can just as well configure them using customize-\nface.\n\n    \n    \n    (custom-theme-set-faces 'user '(org-block ((t (:inherit fixed-pitch)))) '(org-code ((t (:inherit (shadow fixed-pitch))))) '(org-document-info ((t (:foreground \"dark orange\")))) '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch))))) '(org-indent ((t (:inherit (org-hide fixed-pitch))))) '(org-link ((t (:foreground \"royal blue\" :underline t)))) '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch))))) '(org-property-value ((t (:inherit fixed-pitch))) t) '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch))))) '(org-table ((t (:inherit fixed-pitch :foreground \"#83a598\")))) '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8)))) '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))\n\nUpdate (2019/10/24): updated the settings above based on my latest config.\nUpdate (2019/02/24): thanks to Ben for figuring out the fix to the vertical\nspacing issue noted below. The trick is to set the org-indent face (see above)\nto inherit from fixed-pitch as well.\n\nOne minor issue I have noticed is that, in variable-pitch-mode, the fixed-\npitch blocks have a slight increase in inter-line spacing. This is not a deal\nbreaker for me, but it is a noticeable difference. This can be observed in the\nfollowing screenshot, which shows the block of code above embedded in the org-\nmode buffer and in the block-editing buffer, which uses the fixed-width font.\nIf you know a way in which this could be fixed, please let me know!\n\n## Conclusion\n\nThe setup described above has considerably improved my enjoyment of writing in\nEmacs. I hope you find it useful. If you have any feedback, suggestions or\nquestions, please let me know in the comments.\n\n  * Tags:\n  * emacs\n  * orgmode\n  * beautifulemacs\n  * config\n\n  * Related:\n  * My blogging setup with Emacs, Org mode, ox-hugo, Hugo, GitLab and Netlify\n  * How to easily create and use human-readable IDs in Org mode and Doom Emacs\n  * New release of Publishing with Emacs, Org-mode and Leanpub\n  * My Doom Emacs configuration, with commentary\n  * How to insert screenshots in Org documents on macOS\n  * New book: Publishing with Emacs, Org-mode and Leanpub\n  * My Emacs Configuration, With Commentary\n  * Spotlight: use-package, a declarative configuration tool - Mastering Emacs\n  * Fixing Emacs problems with the fish shell\n  * Remapping Mac modifier keys on Emacs 23.3\n  * Emulate vi's % command (jump to matching parenthesis) in Emacs\n  * Installing AucTeX on EmacsW32 on Win7/64bit\n\nWhat's in this Post\n\n\u00a9 2023 Diego Zamboni\n\nMade with love, coffee, Emacs 27.2 + Org mode 9.5 + ox-hugo and published\nusing Hugo 0.83.1 + Ananke\n\n", "frontpage": false}
