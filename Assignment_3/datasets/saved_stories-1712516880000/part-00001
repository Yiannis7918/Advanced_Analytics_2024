{"aid": "39960496", "title": "Open Source Maintenance", "url": "https://anteru.net/blog/2024/open-source-maintenance/", "domain": "anteru.net", "votes": 1, "user": "ibobev", "posted_at": "2024-04-07 13:06:48", "comments": 0, "source_title": "Open Source Maintenance", "source_text": "Open Source Maintenance | Anteru's Blog\n\n# Open Source Maintenance\n\nApril 02, 2024\n\n  * Programming\n\napproximately 6 minutes to read\n\nThis has been a topic I wanted to cover for a long time now, but with the\nrecent stories about log4j and the xz vulnerability, I figured it\u2019s high time\nto get this finally out of the door. Open source software the way we know\nsimply doesn\u2019t work any more, and we\u2019ve probably crossed the point where it\ncan be fixed without a lot of pain for everyone involved.\n\n\u26a0 Warning: I\u2019ll be obviously generalizing here. There\u2019s always that one\nunicorn library somewhere which is well funded, has no security issues, no\ndependencies, and what not. Please don\u2019t get hung up because there\u2019s one\ncounter example.\n\n### Maintainer fatigue\n\nAs an open source project maintainer myself, I do want to talk about\n\u201cmaintainer fatigue\u201d. Many open source projects out there are hobby projects\nwhich make no money (more on this later though.) This means they\u2019re a \u201clabor\nof love\u201d, but most of the time, they\u2019re scratching some particular itch of the\nmaintainer. That also means that open source maintenance comes without\nguarantees or commitments \u2013 I can always step away for a while, a long time,\nor forever, and it\u2019s my problem first and foremost. If it becomes your problem\nthat some open source library becomes dormant, that usually implies you\u2019ve\nbeen building a business on top of someone\u2019s free labor (even if they\u2019re paid\nfor writing it, you got it for free in the end by virtue of being open\nsource), and this \u201cno cost\u201d mentality is now causing you trouble.\n\nEveryone needs to be aware that an open source maintainer is probably a person\nwho has a day job (which means money is probably not the main motivation\nanyways!), has a life outside of work as well (and that life consists of more\nthings than maintaining their open source library), and that a lot of time in\nan open source project already sinks into just dealing with feedback and\nmaking a release to start with. I\u2019ve seen it many times where someone feels\nentitled that their favorite PR or issue should get addressed by the\nmaintainers, who are already struggling to even keep the number of PRs not\ngrowing exponentially, and are still expected to make regular releases on top\nof everything. Burning out maintainers is a sure way to make things worse very\nquickly for everyone involved, and I see very few open source projects run by\nvolunteers who aren\u2019t struggling with this. Even those with commercial backing\nusually have their share of \u201cgrumpy customers\u201d who don\u2019t pay and yet demand,\nand still struggle to handle external contributions.\n\nThere\u2019s also something about open source software which I\u2019d call \u201cdoing it\nright\u201d. Given it\u2019s a hobby project for most developers, and also something\nthey care about, that care usually translates into not taking shortcuts and\nadhering to higher quality standards than you\u2019d have let\u2019s say in a company\nwhere there\u2019s pressure to hit some deadline. This results in some \u201cguilt\ndriven development\u201d: As an open source maintainer, you really want to do\nthings properly, which means most PRs won\u2019t meet the bar to start with\n(especially from people with said deadlines), and you get into a self-\nreinforcing cycle.\n\nWhat makes this a real problem is that there\u2019s really no simple way out. You\ncan try to pay maintainers (if they have set up means for that), but that\ndoesn\u2019t necessarily translate into more time devoted to the project. You can\nfork the project which most of the time results in a disaster if you take it\npublic. You can try to contribute to the project in helpful ways to\nreduce/offload the maintainers, but that may only get you so far. Finally, you\ncan also try to become actively involved, but realistically that\u2019s probably\nnot what you want (especially if you only care about this one feature) and it\nbrings us to the next problem, which is: Trust.\n\n### Maintainer trust\n\nThere\u2019s no guarantee to start with that your friendly maintainer is even the\nperson you think they are. Some random contributor may be a malicious actor,\nonly waiting to have enough power to use the project for bad. This will become\nworse over time as maintainers simply retire or die, and we\u2019ll have to figure\nout how to hand over maintenance from a well-known public figure to someone\nwho may not have built up any reputation or trust with the community. There\u2019s\nno help for maintainers to make this transition, and the security implications\nare mind-blowing and worrying. Just think about it: At any given time, the\n\u201cload bearing\u201d libraries with 1-2 maintainers may have one maintainer hit by a\nbus and then some enthusiastic person in the community shows up to take over\nor forks it and puts some work to make the fork look attractive. How quickly\nwould you switch to a new zlib if you heard the original one got abandoned and\nsuper-zlib-turbo2 is merging all new features and making rapid progress? Would\nyou audit this new library if you see a reputable project use it? Would you\npay for an audit?\n\nThe reality is that the software ecosystem is a house of cards held together\nby duct tape and hope, and the fact that it hasn\u2019t completely imploded yet is\nbecause there\u2019s still just enough people paying attention. But we can clearly\nsee that hope is not enough, and with software becoming increasingly more\ncomplex, the number of attack vectors is increasing. Every dependency we\nintroduce into our software is a potential security issue, and every\nmaintainer we don\u2019t know is another random person we hand the key to our\nsystem. You wouldn\u2019t plug in a random USB thumb drive you\u2019d find in the\nstreets, but we\u2019re more than happy to pull in 10.000 different pieces of code\nand execute them during a build. Trust is hard to build in the real world, and\nhistorically we\u2019ve trusted our fellow software developers to do the right\nthing. It\u2019s clear by now that we need to change the default assumption from\n\u201ctrust everyone\u201d to \u201ctrust no-one\u201d if we don\u2019t want history to repeat itself.\n\n### AI will save us\n\nI\u2019m a bit puzzled that nobody has brought up the \u201cAI will save us\u201d card yet.\nYou could imagine that someone could train an AI to audit code for \u201csuspicious\nchanges\u201d and help maintain it in the same way as the original maintainer\n(\u201cwhat would Linus do?\u201d) It\u2019s an interesting avenue to explore, but\nultimately, it doesn\u2019t solve the underlying problems of maintainer fatigue,\nand from a security perspective this may be even worse (\u201cthe AI thinks this\nblob of data is safe\u201d.) Not to mention that training an AI on security\nbackdoors may backfire in the sense we\u2019ll get AI assisted backdoor injection,\nwhich will only end up in an arms race where understaffed projects will have\nno chance to survive under a barrage of AI generated, hard-to-spot backdoors.\nI\u2019m mostly adding it for the sake of completeness here, not because I see it\nas a general solution.\n\n### Closed source is better\n\nJust to get this out as well: There\u2019s no reason to assume that closed source\nhelps here; there\u2019s little closed source code in existence these days which\ndoesn\u2019t heavily rely on open source to start with; and we simply don\u2019t see\nwhat\u2019s going on in a closed source codebase. Given the widespread fallout we\nsee from open source library security issues, and how most closed source\nhandles dependencies (and updates), it\u2019s fair to assume that \u201cclosed source\u201d\ndoesn\u2019t actually solve any of the problems.\n\n### And now what?\n\nThat\u2019s the question I\u2019ve been asking myself for a while. What do we do about\nall of this? For me for example, more money wouldn\u2019t actually make me more\nmotivated to spend time on my open source projects, and it\u2019s hard to imagine\nthat I could actually make a living off my open source projects. Doesn\u2019t look\nlike a promising avenue to me. Mandatory payment however to fund audits of\nopen source software could be interesting, together with \u201ctagged and\ncertified\u201d releases. Something which allows you to get at least one working\nversion of every dependency which has been at least audited to some extent.\nThat\u2019s only a partial solution though as dependency management these days is\nso complex, that there\u2019s no way to fully solve this until you can basically\naudit close to every version of every dependency.\n\nWhat else could we do? Mandatory identity management for contributors, at\nleast that way you could figure out if a person is real, but that poses a lot\nof problems if your project gets considered problematic (think: DeCSS), and\nit\u2019s unclear how well this would work if state actors are involved anyways:\nWhat\u2019s the point if having a verified identity if the government issuing it is\ninvolved? What could be done though is at least mandate all verified commits,\n2FA, the little things that give at least some confidence that an account\nhasn\u2019t been compromised.\n\nThis is really a complex problem, and the solution to this will be equally\ncomplex. Just helping maintainers for example is not going to resolve\nownership issues, security problems, and certainly doesn\u2019t fix the fact that a\nlot of \u201cthe industry\u201d relies on essentially free labor. Similarly, introducing\nmore process will not help when your maintainer is already burned out and\nstruggling to even make one release happen. I wish I had some answers to the\nproblems, but for now, I think the most important steps everyone can take is\nto review their own situation. If you\u2019re a maintainer or consumer of an open\nsource project, start asking yourself \u201cwhat if?\u201d and try to come up with\nideas. Eventually I\u2019m sure we\u2019ll figure something out that works better than\nwhat we have now, because I hope it\u2019s clear by now that the \u201cstatus quo\u201d will\neventually lead to a \u201csystem wide\u201d disaster (i.e. vulnerabilities affecting\nthe majority of all users.)\n\nPrevious post\n\n## Recent posts\n\n  * Open Source Maintenance\n\nPosted on 2024-04-02\n\n  * Angular, Caddy, Gunicorn and Django\n\nPosted on 2023-10-21\n\n  * Effective meetings\n\nPosted on 2022-09-12\n\n  * Advent 2021: Open source\n\nPosted on 2021-12-24\n\n  * Advent 2021: Blender\n\nPosted on 2021-12-23\n\n  * Older posts\n\n## Find me on the web\n\n  * GitHub\n  * GPU database\n  * Projects\n\n## Follow me\n\nAnteru NIV_Anteru\n\nContents \u00a9 2005-2023\n\nAnteru\n\nImprint/Impressum\n\nPrivacy policy/Datenschutz\n\nMade with Liara\n\nLast updated April 03, 2024\n\n", "frontpage": false}
