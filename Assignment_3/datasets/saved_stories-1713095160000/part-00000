{"aid": "40028955", "title": "Developing an Integration Option Strategy", "url": "https://akshay.cc/developing-an-integration-option-strategy", "domain": "akshay.cc", "votes": 1, "user": "zakshay", "posted_at": "2024-04-14 05:44:17", "comments": 0, "source_title": "Developing an integration option strategy", "source_text": "Developing an integration option strategy\n\n#\n\nAkshay Rawat\n\n# Akshay Rawat\n\n# Developing an integration option strategy\n\nAkshay Rawat\n\n\u00b7Jun 13, 2022\u00b7\n\n8 min read\n\n## Table of contents\n\n  * Defining your ideal developer profile\n\n  * Defining your success criteria\n\n  * The current state of the industry\n\n    * APIs\n\n    * SDKs\n\n    * Embeds\n\n    * Hosted pages\n\n    * Unifying APIs and library products\n\nDo you have a product and want external developers to integrate with it?\nDeciding whether to build APIs, low-code, or no-code integration products can\nbe tough. This article offers a strategy for deciding and ensuring developers\nintegrating with your product can effectively meet their technology and\nbusiness goals.\n\n### Defining your ideal developer profile\n\nBased on the principles of customer obsession, start first by understanding\nyour product's target customer segments and, via it, the target developer\nprofile. It's surprising how many companies miss this and assume all\ndevelopers have similar needs. A good framework asks the following questions.\n\n  1. Question: What customer segments is your product targeting? Are these large enterprise companies, SMBs, or high-growth startups?\n\nMotivation: Large enterprises have integration teams specializing in iPaaS\nplatforms such as Mulesoft Anypoint, Workato, Boomi, etc. Such teams typically\nonly develop integrations using the selected platform. However, teams at\nsmaller companies prefer using the same programming language and frameworks as\ntheir primary product. Further, sometimes, the integration developer might not\nbe a developer. For example, someone in the sales or marketing team wants to\nuse a no-code option to quickly launch a proof of concept.\n\n  2. Question: Is your product meant to be deeply integrated with the external product, making both indistinguishable or will it be cleanly separate?\n\nMotivation: Heavily integrated experiences, like, for example, ones that are\nbased on the workflow and resource lifecycles of external products, often are\ncomposed of more granular coordinated API use with custom domain logic.\nSingle-shot or \"silo-ed\" integration use cases represent the lightly\nintegrated use cases. For example, Instacart uses Stripe APIs to build a rich\nand flexible experience for order fulfillment - from order placement to\ncancelations and returns. On the other hand, OpenAI uses Stripe Link to power\nits one-off checkout process. Further, Gusto Embedded Payroll uses a white-\nlabeled \"full solution in a box\" embedded approach.\n\n  3. Question: Does your target audience understand your product's domain well, or is it in a niche domain?\n\nMotivation: Products like authentication or email delivery use well-understood\nindustry concepts and need less education for integration development. On the\nother hand, products in niche verticals such as background checks, like\nCheckr, are less intuitively understood. Your product's conceptual learning\ncurve is important, as all integration developers will go through it.\nTypically, the higher the learning curve, the more effort and help are\nrequired, making low-code integrations more appealing.\n\n  4. Question: How much of the external product can your integration access, and how much control do you want or have over your customer's end-user journey?\n\nMotivation: Some external products do not allow widget-based integrations on\ntheir user interfaces. Further, products like Uber's mobile app don't even use\nthird-party SDKs. In certain cases, such as when dealing with credit card\ndetails or legal agreements that require compliance, it may be necessary to\nprevent the external product from having any control. Knowing the holistic\nuser journey and the product boundaries (customers vs yours) will help you\ncraft the most effective integration solution.\n\n  5. Question: How often are your customers willing to accommodate breaking changes in your product (in your API or otherwise)? And when that happens who will implement the upgrade?\n\nMotivation: Once a company integrates with you, it's generally hard for them\nto keep the integration updated based on your product's cadence. Knowing your\nproduct cadence will help you propose an integration evolution strategy \u2014\nwhether it's via APIs, low-code, or no-code. It's up to you to present these\noptions to your customers, and eventually for them to make trade-offs. A\nstrategy is outlined later in this article.\n\n### Defining your success criteria\n\nWith the target developer profile identified, the next step is to define what\nsuccess looks like for them. This spans not just the selected integration\noption but the entire developer experience. I will be discussing developer\nexperience in a future article. Companies define success metrics in various\nways. Some examples are:\n\n  1. Time to go live.\n\n  2. Time to make the first transaction in your product via the integration.\n\n  3. Number of your product's features adopted.\n\n  4. Number of customers using the latest version of the integration option, like the API or SDK versions.\n\n  5. Number of support requests.\n\n  6. Number of SDK downloads.\n\n  7. Developer CSAT scores.\n\nIt is important to define this based on your business goals, especially since\nsome of them might be mutually exclusive at first, thus involving making\ntradeoffs.\n\n### The current state of the industry\n\nThe following table represents commonly seen integration options.\n\nIntegration option| Flexibility provided by the integration to the customer|\nEase of integration build| Effort & upgrade frequency  \n---|---|---|---  \nAPIs| High| Low| High  \nSDKs| High| Low| High  \niPaaS connectors and platforms| High| Medium| Medium  \nEmbeds| Low| High| Low  \nHosted pages| Lowest| Highest| Lowest  \n  \n#### APIs\n\nAPIs are the most granular and popular way for your customers to integrate\nwith your product. Adopting a popular standard such as JSON API described via\nOpen API and versioned via SemVer or CalVer can make for a productive\ndeveloper experience. Further, you can leverage products in this ecosystem,\nlike Open API based documentation site generators like Redocly to bootstrap a\ngood developer experience.\n\nWhen your customer developers adopt this\n\n  * They have the most flexibility to integrate with your product.\n\n  * They will have to invest in upgrades based on your product's cadence. This makes it important to think about API versioning upfront, even if it's just a placeholder at first, so an API governance program can guide upgrades in the future.\n\nAn API-first strategy is fundamental to enable all other integration options.\nFollowing are some guiding principles towards it.\n\n  1. Focus on using the OpenAPI specification as the source of truth. All integration options, SDKs, and documentation generators are based on it. For productivity, you may generate this spec in various ways, like via Smithy or TSOA.\n\n  2. When building your frontends, prefer developing them on public APIs instead of private ones. This will make those features available to your customers, too. Jeff Bezo's API manifesto is this taken to another level.\n\n#### SDKs\n\nThe natural extension for developers using APIs is to seek SDKs. An SDK can\nmake developers more productive with APIs via programming language constructs\nsuch as Object-Oriented Programming, static typing, etc., and utilities to\nperform common API operations like webhook verification. Often, SDKs\ncorrespond one-to-one to underlying API operations and work at the same level\nof conceptual abstraction. Therefore, investing in SDK development doesn't\nalways make sense. APIs can go a long way, and SDKs, if not developed\ncorrectly, can be a development burden on you with limited impact. SDKs often\nlag from APIs due to the additional work. One technique to determine which\nprogramming language SDK to target is to look at the User Agent header in API\ncalls.\n\nOpenAPI-based SDK generation does require non-rival effort to work properly.\nPlaid's OpenAPI-based SDK generation strategy outlines some of the work more\ndeeply. Stripe uses a more custom and integrated strategy here. Products like\nStainless aim to address these gaps. Further, programming language-specific\nones like Kubb in Typescript use OpenAPI specs for SDK generation, API request\nvalidation, test stub generation, and more, making for a compelling vision.\n\nWhen starting on SDKs, note that high-performance products prefer using APIs\nover external SDKs to better manage their product size and dependencies.\nUber's mobile app is a good example of this.\n\n#### Embeds\n\nEmbeds are web or mobile components your customers can use to embed your\nproduct experiences in their product pages. Stripe Elements and Checkr Embeds\nare good examples of this. PayPal components are another popular example built\nusing the kraken/zoid library. This option is commonly seen in products that\ncapture sensitive data such as credit card information or social security\nnumbers. The primary benefit of this option over hosted pages is that your\ncustomer's users don't have to leave your customer's product in their user\njourney. The primary hindrance in Embeds adoption is customers resisting\naccess to their custom frontend user experiences.\n\nDevelopers using this option would\n\n  * Use your embeds in their product pages. It will require some code, though it should be small.\n\n  * Most embeds have good theming capabilities.\n\nLike hosted pages, these are evergreen integrations. Embeds can target both\nweb and mobile platforms. In the early days, an iframe-based approach can work\nfor both platforms. When you find customers who truly want a native\nexperience, you may evaluate building React Native or Flutter SDKs. The Stripe\nReact Native SDK is a good example of this.\n\n#### Hosted pages\n\nThese fully hosted and pre-built solutions allow limited flexibility, such as\ntheming, custom domains, and configuration. Popular examples are Stripe\nCheckout and Auth0 Universal Login.\n\nDevelopers using this option would\n\n  * Typically, write the least amount of code, if any. This makes it quicker to test and launch.\n\n  * Perhaps still listen for webhooks to drive real-time product features, such as product notifications.\n\nThis evergreen integration option requires no upgrades and always includes the\nlatest features from your product. Often, no developers are required, making\nthis an ideal solution when your ideal developer profile resembles non-\ntechnical teams such as sales and marketing.\n\nOne commonly seen adoption pattern is that customers first adopt an easy-to-\ngo-live option like hosted pages or embeds to evaluate your product and, upon\nbusiness success, double down with a deeper, richer integration via APIs.\n\nThis option doesn't work when\n\n  * The external company wants full control over the user experience\n\n  * Customers want their users to stay within their product.\n\n  * Wants all third-party providers, such as your product, to work in the same consistent way.\n\n#### Unifying APIs and library products\n\nThis category deserves a special mention. Products like Merge and Finch in the\nHR space promise customers one API to work across multiple HR systems.\nHyperswitch does the same for payment systems. Similarly, libraries such\nactivemerchant/active_merchant provide a unified way to work across multiple\npayment gateways. If your product is a service that can plugged into such\nproducts, then it's worth investigating whenever you see customer demand.\nOften, customers make nuanced tradeoffs between using unifying integration\nproducts and integrating directly to leverage a product's unique features.\nThis is something to be careful about.\n\n## Subscribe to my newsletter\n\nRead articles from Akshay Rawat directly inside your inbox. Subscribe to the\nnewsletter, and don't miss out.\n\ndeveloper experience\n\n### Written by\n\n# Akshay Rawat\n\nShare this\n\n\u00a92024 Akshay Rawat\n\nArchive\u00b7Privacy policy\u00b7Terms\n\n", "frontpage": false}
