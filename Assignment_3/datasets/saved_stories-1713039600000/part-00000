{"aid": "40023307", "title": "Write Less Code, You Must", "url": "https://davidvujic.blogspot.com/2024/04/write-less-code-you-must.html", "domain": "davidvujic.blogspot.com", "votes": 1, "user": "david-j-vujic", "posted_at": "2024-04-13 14:18:20", "comments": 0, "source_title": "Write Less Code, You Must", "source_text": "Agile & Coding: Write Less Code, You Must\n\n# Agile & Coding\n\n## Saturday, April 13, 2024\n\n### Write Less Code, You Must\n\nAn aspect of Python Software Development that is often overlooked, is\nArchitecture (or Design) at the namespace, modules & functions level. My\nthoughts on Software Development in general is that it is important to try\nhard writing code that is Simple, and Easy to move from one place to another.\n\nWhen having code written like this, it becomes less important if a feature was\nadded in Service X, but a better fit would be Service Y when looking at it\nfrom a high-level Architectural perspective. All you need to do is move the\ncode to the proper place, and you're all good. However, this will require that\nthe actual code is moveable: i.e. having the features logically separated into\nfunctions, modules and namespace packages.\n\n### Less Problems\n\nThere's a lot of different opinions about this, naturally. I've seen it in in\nseveral public Python forums, and been surprised about the reactions about\nPython with (too) few lines of code in it. How is it even possible having too\nlittle of code?\n\nMy take on this in general is Less code is Less Problems.\n\n### An example\n\n    \n    \n    def my_something_function(): # Validation # if valid # else do something ... python code here # Checking # if this # elif that # elif not this or not that # else do_something ... python code here # Data transformation # for each thing in the things # do a network call and append to a list ... python code here # Yay, done return the_result\n\nThis type of function - when all of those things are processed within the\nfunction body - is not very testable. A unit test would likely need a bunch of\nmocking, patching and additional boilerplate test data code. Especially when\nthere are network calls involved.\n\nMy approach on refactoring the code above would be to first identify the\ndifferent tasks within this controller type of function, and begin by\nextracting each task into separate functions. Ideally these would be pure\nfunctions, accepting input and returning output.\n\nAt first, I would put the functions within the same module, close to at hand.\nQuite quickly, the original function has become a whole lot more testable,\nbecause the extracted functions can now easily be patched (my preference is\nusing pytest monkeypatch). This approach would be my interpretation of\ndeveloping software towards a clean code ideal. There is no need for a\nDependency Injection framework or any unnecessary complex OOP-style hierarchy\nto accomplish it.\n\nIn addition to testability, the Python code becomes runnable and REPL-\nfriendly. You can now refactor, develop and test-run the individual functions\nin the REPL. This is a very fast workflow for a developer. Read more about\nREPL Driven Development in Python here.\n\nWith the features living in separate isolated functions, you will likely begin\nto identify patterns:\n\n> \"- Hey, this part does this specific thing & could be put in that namespace\"\n\nWhen moving code into a namespace package, the functions become reusable.\nOther parts of the application - or, if you have a Monorepo containing several\nservices - can now use one and the same source code. The same rows of code,\nlocated in a single place of the repo. You will likely structure the repo with\nmany namespace packages, each one containing one or a couple of modules with\nfunctions that ideally do one thing. It kind of sounds like the Linux\nphilosophy, doesn't it?\n\nThis is how I try to write code on a daily basis, at work and when developing\nOpen Source things. I use tools like SonarCloud and CodeScene to help me keep\ngoing in this direction. I've written about that before. The Open source code\nthat I focus on these days (Polylith) has 0% Code Duplications, 0% Code Smells\nand about a 9.96 long-term Quality Code Scoring. The abut 0.04 that is left\nhas been an active decision by me and is because of endpoints having 5+ input\narguments. It makes sense for me to keep it like that there, but not in\nfunctions within the app itself where an options object is a better choice.\n\nThis aspect of Software Development is, from my point of view, very important.\nEven more important than the common Microservices/Events/REST/CQRS debates\nwhen Architecture is the topic of discussion. This was my Saturday afternoon\nreflections, and I thank you for reading this post. \u2600\ufe0f\n\n^ Top Photo by Remy Gieling on Unsplash\n\nPosted by\n\nDavid Vujic\n\nEmail ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest\n\nLabels: Architecture, Clean Code, CodeScene, Polylith, Python, Reflections,\nSoftware Development, SonarCloud\n\n#### No comments:\n\nPost a Comment\n\nOlder Post Home\n\nSubscribe to: Post Comments (Atom)\n\n## About\n\nDavid Vujic\n\nView my complete profile\n\n## Popular posts\n\n  * Python Monorepo Visualization\n  * Python FastAPI Microservices with Polylith\n  * Test Driven Development Deluxe\n  * Joyful Python with the REPL\n  * The last Python Architecture you will ever need?\n  * A Pythonic Railway?\n  * A fresh take on Monorepos in Python\n  * Just use Dictionaries\n  * GCP Cloud Functions with Python and Polylith\n  * Test friendly JavaScript modules - without Dependency Injection\n\n## Archive\n\n  * \u25bc 2024 (3)\n\n    * \u25bc April (1)\n\n      * Write Less Code, You Must\n    * \u25ba February (1)\n    * \u25ba January (1)\n\n  * \u25ba 2023 (7)\n\n    * \u25ba December (1)\n    * \u25ba November (1)\n    * \u25ba September (1)\n    * \u25ba August (1)\n    * \u25ba July (2)\n    * \u25ba April (1)\n\n  * \u25ba 2022 (7)\n\n    * \u25ba November (1)\n    * \u25ba August (2)\n    * \u25ba July (1)\n    * \u25ba May (1)\n    * \u25ba February (2)\n\n  * \u25ba 2021 (15)\n\n    * \u25ba December (1)\n    * \u25ba October (2)\n    * \u25ba September (3)\n    * \u25ba August (2)\n    * \u25ba April (3)\n    * \u25ba March (1)\n    * \u25ba February (2)\n    * \u25ba January (1)\n\n  * \u25ba 2020 (5)\n\n    * \u25ba December (2)\n    * \u25ba May (1)\n    * \u25ba January (2)\n\n  * \u25ba 2019 (3)\n\n    * \u25ba December (1)\n    * \u25ba March (2)\n\n  * \u25ba 2017 (2)\n\n    * \u25ba August (1)\n    * \u25ba January (1)\n\n  * \u25ba 2016 (4)\n\n    * \u25ba May (1)\n    * \u25ba March (1)\n    * \u25ba February (2)\n\n  * \u25ba 2015 (10)\n\n    * \u25ba November (1)\n    * \u25ba July (1)\n    * \u25ba May (3)\n    * \u25ba March (3)\n    * \u25ba February (2)\n\n  * \u25ba 2014 (7)\n\n    * \u25ba October (1)\n    * \u25ba September (1)\n    * \u25ba August (2)\n    * \u25ba April (1)\n    * \u25ba March (2)\n\n  * \u25ba 2013 (6)\n\n    * \u25ba December (2)\n    * \u25ba June (3)\n    * \u25ba May (1)\n\n  * \u25ba 2012 (6)\n\n    * \u25ba November (1)\n    * \u25ba August (3)\n    * \u25ba June (2)\n\n  * \u25ba 2011 (6)\n\n    * \u25ba December (1)\n    * \u25ba November (1)\n    * \u25ba June (1)\n    * \u25ba May (3)\n\n  * \u25ba 2010 (4)\n\n    * \u25ba November (1)\n    * \u25ba May (1)\n    * \u25ba March (1)\n    * \u25ba February (1)\n\n  * \u25ba 2009 (11)\n\n    * \u25ba October (1)\n    * \u25ba April (3)\n    * \u25ba March (4)\n    * \u25ba February (1)\n    * \u25ba January (2)\n\n  * \u25ba 2008 (13)\n\n    * \u25ba December (1)\n    * \u25ba November (4)\n    * \u25ba October (1)\n    * \u25ba September (1)\n    * \u25ba August (5)\n    * \u25ba July (1)\n\n  * \u25ba 2007 (4)\n\n    * \u25ba November (1)\n    * \u25ba September (2)\n    * \u25ba August (1)\n\n## Subscribe\n\nPosts\n\nAtom\n\nPosts\n\nComments\n\nAtom\n\nComments\n\n## Labels\n\nJavaScript (28) Agile (20) Clojure (16) Python (16) Scrum (15) Test Driven\nDevelopment (14) Polylith (12) ClojureScript (11) GitHub (10) Programming (10)\nepiserver (10) EPiServerWorld (9) REPL Driven Development (9) Unit testing (9)\nES6 (8) functional programming (8) Architecture (7) ECMAScript 6 (7) Node.js\n(7) Video (7) Design Patterns (6) REPL (6) React (6) Emacs (5) Knowledge (5)\nprogrammering (5) Babel (4) Component Driven (4) ES2015 (4) ES6 modules (4)\nKanban (4) Lego (4) NuGet (4) Open Source (4) Projektledning (4) Reagent (4)\nStorybook (4) youtube (4) Apache ZooKeeper (3) Bruce Lee (3) Developer\nExperience (3) Helper Library (3) Lean (3) Microservices (3) Poetry (3)\nPresentation (3) Reflections (3) Software Development (3) TDD (3) Team (3)\nTypeScript (3) Webpack (3) asp.net mvc (3) learning (3) node-zookeeper (3)\nshadow-cljs (3) testdriven utveckling (3) AWS Amplify (2) CodeScene (2)\nCollaboration (2) ES2016 (2) FastAPI (2) Google Analytics (2) Gulp (2) IPython\n(2) JSHint (2) Kunskap (2) Manifest (2) Material-UI (2) Monorepo (2) NoScript\nFirst (2) SonarCloud (2) Ubuntu (2) Visualization (2) XP (2) async (2)\nbeteendedriven utveckling (2) classes (2) re-frame (2) simple (2) simplicity\n(2) spr\u00e5k (2) AWS Lambda (1) Abide (1) Add Your Color (1) Announcement (1)\nAnti Pattern (1) Apache Kafka (1) Apple (1) Atom (1) AutoMapper (1) Automation\n(1) Ava (1) Breaking changes (1) Chocolatey (1) Christmas Story (1) Clean Code\n(1) Cloud Functions (1) Coda for iOS (1) Components (1) Confessions (1)\nContinuous Deployment (1) Continuous Integration (1) Dad Jokes (1) Dataclasses\n(1) DevOps (1) Development (1) Dictionaries (1) Documentation (1) Domain\nDriven Design (1) Dom\u00e4ndriven design (1) Douglas Crockford (1) ECMAScript (1)\nECMAScript 2016 (1) ES modules (1) ES2017 (1) Early-adopter-dilemma (1) Event\nLoop (1) Files (1) Folders (1) Friday (1) Func Prog Sweden (1) GCP (1) Google\nCloud Platform (1) GraalVM (1) Guest post (1) Hatch (1) HybridConf (1) Index\nCard Generator (1) Interactive Web Development (1) JSDoc (1) Jupyter (1) Kafka\n(1) LTS (1) Linux (1) Lisp (1) Love Letter (1) Macbook Pro (1) Marsellus\nWallace (1) Material Design (1) Mono (1) Music (1) Mustache.js (1) NDC Oslo\n(1) Native Image (1) OmniSharp (1) Organizing (1) PDM (1) Platform independent\n(1) Poetry-plugin (1) PowerShell (1) Projects (1) Providers (1) Pydantic (1)\nPython 2 (1) Python 3 (1) Pythonic (1) Railway Oriented Programming (1) Rant\n(1) Require.js (1) Rich Hickey (1) Samarbete (1) Samsung Series 9 (1) Sharing\n(1) Ship it (1) Structure (1) StructureMap (1) Sublime Text (1) Svenska (1)\nTeam Anti Patterns (1) Text editor (1) Tools (1) Total Recall (1) Twitter (1)\nUsability (1) VS Code (1) Vagrant (1) Vanilla (1) VirtualBox (1)\nVirtualization (1) Walking (1) Ways of working (1) Windows (1) Yeoman (1) Zurb\nFoundation (1) arty (1) asp.net 5 (1) asp.net core (1) asp.net webforms (1)\naspConf (1) board (1) conference (1) containers (1) development style (1)\ndocker (1) docker-compose (1) dotNetConf (1) experimental mode (1) frameworks\n(1) hipster (1) iPad (1) konkurrens (1) kvalitet (1) mac os x (1) mjukvarutest\n(1) mocha (1) neckbeard (1) node-gyp (1) nordicjs (1) npm (1) offline coding\n(1) outsourcing (1) podman (1) prebuildify (1) reClojure (1) slackbot (1) soap\nbubbles (1) tape (1) the Zen of Python (1) toolz (1) utbildning (1) verksamhet\n(1) work in progress (1) \u00d6vers\u00e4ttning (1)\n\nPowered by Blogger.\n\nDiese Website verwendet Cookies von Google, um Dienste anzubieten und Zugriffe\nzu analysieren. Deine IP-Adresse und dein User-Agent werden zusammen mit\nMesswerten zur Leistung und Sicherheit f\u00fcr Google freigegeben. So k\u00f6nnen\nNutzungsstatistiken generiert, Missbrauchsf\u00e4lle erkannt und behoben und die\nQualit\u00e4t des Dienstes gew\u00e4hrleistet werden.Weitere InformationenOk\n\n", "frontpage": false}
