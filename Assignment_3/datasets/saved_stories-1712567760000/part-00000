{"aid": "39965907", "title": "Chrome Dev: High Definition CSS Color Guide", "url": "https://developer.chrome.com/docs/css-ui/high-definition-css-color-guide", "domain": "chrome.com", "votes": 6, "user": "sgammon", "posted_at": "2024-04-08 03:14:17", "comments": 0, "source_title": "High Definition CSS Color Guide | CSS and UI | Chrome for Developers", "source_text": "High Definition CSS Color Guide | CSS and UI | Chrome for Developers\n\ndeveloper.chrome.com uses cookies from Google to deliver and enhance the\nquality of its services and to analyze traffic. Learn more.\n\n  * English\n  * Deutsch\n  * Espa\u00f1ol \u2013 Am\u00e9rica Latina\n  * Fran\u00e7ais\n  * Indonesia\n  * Italiano\n  * Nederlands\n  * Polski\n  * Portugu\u00eas \u2013 Brasil\n  * Ti\u1ebfng Vi\u1ec7t\n  * T\u00fcrk\u00e7e\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * \u05e2\u05d1\u05e8\u05d9\u05ea\n  * \u0627\u0644\u0639\u0631\u0628\u064a\u0651\u0629\n  * \u0641\u0627\u0631\u0633\u06cc\n  * \u0939\u093f\u0902\u0926\u0940\n  * \u09ac\u09be\u0982\u09b2\u09be\n  * \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22\n  * \u4e2d\u6587 \u2013 \u7b80\u4f53\n  * \u4e2d\u6587 \u2013 \u7e41\u9ad4\n  * \u65e5\u672c\u8a9e\n  * \ud55c\uad6d\uc5b4\n\nSign in\n\n  * CSS and UI\n\n  * On this page\n  * Overview\n\n    * What is a color gamut?\n    * Human visual gamut\n    * What is a color space?\n    * Color gamut and color space summary\n  * How to access more colors, new spaces, and debug results\n\n    * A review of the classic color spaces\n    * Meet the new web color spaces\n    * Color interpolation\n    * Gamut clamping\n    * Choosing a color space\n  * Migrating to HD CSS color\n\n    * Checking for gamut and color space support\n    * Debugging color with Chrome DevTools\n  * Conclusion\n\n    * Additional reading\n    * Additional Color Level 5 articles\n\n  * Home\n  * Docs\n\n  * CSS and UI\n\nWas this helpful?\n\n# High Definition CSS Color Guide\n\nbookmark_borderbookmark Stay organized with collections Save and categorize\ncontent based on your preferences.\n\n  * On this page\n  * Overview\n\n    * What is a color gamut?\n    * Human visual gamut\n    * What is a color space?\n    * Color gamut and color space summary\n  * How to access more colors, new spaces, and debug results\n\n    * A review of the classic color spaces\n    * Meet the new web color spaces\n    * Color interpolation\n    * Gamut clamping\n    * Choosing a color space\n  * Migrating to HD CSS color\n\n    * Checking for gamut and color space support\n    * Debugging color with Chrome DevTools\n  * Conclusion\n\n    * Additional reading\n    * Additional Color Level 5 articles\n\nCSS Color 4 brings wide gamut color tools and capabilities to the web: more\ncolors, manipulation functions, and better gradients.\n\nAdam Argyle\n\nFor over 25 years, sRGB (standard red green blue) has been the only color\ngamut for CSS gradients and colors, with color space offerings within it like\nrgb(), hsl() and hex. It is the most common color gamut capability amongst\ndisplays; a common denominator. We've grown very accustomed to specifying\ncolors within this gamut.\n\nhttps://almanac.httparchive.org/en/2022/css#colors\n\nAs displays become more capable of showing a wide range of colors, CSS needs a\nway to specify colors from within these wider ranges. The current color\nformats have no language for wide color ranges.\n\nIf CSS never updated, it would be stuck in the 90s color ranges forever,\nforced never to match the wide gamut offerings found in images and video.\nTrapped, only showing 30% of the colors the human eye can see. Thank CSS Color\nLevel 4 for helping us escape this trap; written primarily by Lea Verou and\nChris Liley.\n\nFrom Chrome 111 is support for CSS Color 4 gamuts and color spaces, joining\nSafari who's had support for display-p3 since 2016. CSS can now support HD\n(high definition) displays, specifying colors from HD gamuts while also\noffering color spaces with specializations. This guide will explain how you\ncan start to take advantage of this new world of color.\n\nA series of images are shown transitioning between wide and narrow color\ngamuts, illustrating color vividness and its effects. Try it for yourself\n\nIn supporting browsers, there's 50% more colors to pick from! You thought 16\nmillion colors sounded like a lot, wait until you see how many colors some of\nthese new spaces can show. Also, think about all those gradients that banded\nbecause there wasn't enough bit-depth, that's resolved too.\n\nIn addition to more colors, arguably the most vivid colors the display is\ncapable of, new color spaces provide unique tools and methods for managing and\ncreating color systems. For example, before now we had HSL and its \"lightness\"\nchannel, which was the best web developers had. Now in CSS, we have LCH's\n\"perceptual lightness.\"\n\nPreview for yourself: https://codepen.io/web-dot-dev/pen/poZgXxy\n\nFurthermore, gradients and mixing get some upgrades: color space support, hue\ninterpolation options, and less banding. The following image shows some of the\nmixing upgrades. The top two color mixes are in sRGB. The bottom two color\nmixes are in display p3. Display p3 has more vivid color and the mixes result\nin complete black and white in the middle. Where sRGB looks a bit desaturated\nand the mixes in the middle aren't complete black or white results.\n\nThe top two color mixes are in sRGB with sRGB colors. The bottom two color\nmixes are in display p3. Display p3 has more vivid colors and the mixes result\nin black and white in the middle, where sRGB looks a bit desaturated and the\nmixes in the middle aren't black and white results. https://codepen.io/web-\ndot-dev/pen/poZgXQb\n\nThis guide will cover where color has been, where it is going, and how CSS\nwill enable and support web developers to manage color.\n\n## Overview\n\nThe problem with color and the web is that CSS is not high definition ready,\nwhile the displays most folks have in their pockets, laps or mounted on walls\nare wide gamut, high definition color ready. The color capability of displays\ngrew faster than CSS, now CSS is here to catch up.\n\nThere's much more than just \"more colors\" too. By the end of this article\nyou'll be able to specify more colors, enhance gradients, and pick the best\ncolor spaces and color gamuts for each task.\n\n### What is a color gamut?\n\nA gamut represents the size of something. The phrase \"millions of colors\" is a\ncomment about the gamut of a display, or the range of colors it has to choose\nfrom. In the following image, three gamuts are compared, and the larger the\nsize the more colors it offers.\n\nA color gamut can also have a name. Like a basketball versus a baseball or a\nvente coffee cup versus a grande; a name for the size can help people\ncommunicate. Learning these color gamut names helps you communicate and\nquickly understand a range of colors.\n\nThis article will introduce you to seven new gamuts, all with wider range than\nsRGB, and describe their different features to help you choose which to use:\n\n  * sRGB\n  * RGB 98\n  * Display p3\n  * Rec2020\n  * ProPhoto\n  * CIE\n  * HVS (human visual gamut)\n\nNote: Maybe you know which of these gamuts your laptop or TV offers?\n\n### Human visual gamut\n\nColor gamuts are often compared against the human visual gamut; the entirety\nof color we believe the human eye can see. HVS is often portrayed with a\nchromaticity diagram, like this:\n\nSource: Wikipedia\n\nThe outermost shape is what we can see as humans, and the inner triangle is\nthe rgb() functions range, aka the sRGB color space.\n\nAs you saw triangles above, comparing gamut sizes, so will you find triangles\nbelow. This is the industry's way of communicating about color gamuts and\ncomparing them.\n\n### What is a color space?\n\nColor spaces are arrangements of a gamut, establishing a shape and a method of\naccessing colors. Many are simple 3D shapes like cubes or cylinders. This\ncolor arrangement determines which colors are next to each other, and how\naccessing and interpolating colors will work.\n\nRGB is like a rectangular color space, where colors are accessed by specifying\ncoordinates on 3 axes. HSL is a cylindrical color space, where colors are\naccessed with a hue angle and coordinates on 2 axes\n\nhttps://en.wikipedia.org/wiki/HSL_and_HSV\n\nThe level 4 specification introduces 12 new color spaces for looking up colors\nfrom the 7 new gamuts shared previously:\n\n  * sRGB Linear\n  * LCH\n  * okLCH\n  * LAB\n  * okLAB\n  * Display p3\n  * Rec2020\n  * a98 RGB\n  * ProPhoto RGB\n  * XYZ\n  * XYZ d50\n  * XYZ d65\n\nThese are in addition to the 4 color spaces previously available:\n\n  * Hex\n  * RGB\n  * HSL\n  * HWB\n\n### Color gamut and color space summary\n\nA color space is a mapping of colors where a color gamut is a range of colors.\nConsider a color gamut as a total of particles and a color space as a bottle\nmade to hold that range of particles.\n\nHere's an interactive visual of what I mean. Point, drag and zoom around in\nthis demo of color spaces filled with color particles. Then change the color\nspace, or color model as they call it in this demo, to see a visualization of\nother spaces.\n\n  * Use color gamuts to talk about a range of colors, like low range or narrow gamut versus high range or wide gamut.\n  * Use color spaces to talk about arrangements of color, syntax used to specify a color, manipulate color and interpolate through color.\n\nAbove is the sRGB gamut of particles fit into an RGB cube color space Image\nsource\n\n## How to access more colors, new spaces, and debug results\n\nCSS Color 4 outlines a bunch of new features and tools for CSS and color.\nFirst, a recap of where color was before these new features. Then an overview\nof the new color spaces, syntaxes and tools.\n\nThe following Codepen shows all the new and old color syntaxes together:\n\n### A review of the classic color spaces\n\nSince the 2000s, you have been able to use the following for any CSS\nproperties that accept a color as a value: hexadecimal (hex numbers), rgb(),\nrgba(), by name like hotpink, or with keywords like currentColor. Around 2010,\ndepending on your browser, CSS could use hsl() colors. Then in 2017, hex with\nalpha appeared. Last, only recently, hwb() started getting support in\nbrowsers.\n\nAll of these classic color spaces reference color within the same gamut, sRGB.\n\n#### HEX\n\nBrowser Support\n\n  * 1\n  * 12\n  * 1\n  * 1\n\nSource\n\nThe hex colorspace specifies R, G, B and A with hexadecimal numbers. The\nfollowing code examples show all the ways this syntax can specify red, green\nand blue plus opacity.\n\n    \n    \n    .valid-css-hex-colors { /* classic */ --3-digits: #49b; --6-digits: #4499bb;\n    \n    /* hex with opacity */ --4-digits-opaque: #f9bf; --8-digits-opaque: #ff99bbff; --4-digits-with-opacity: #49b8; --8-digits-with-opacity: #4499bb88; }\n\n#### RGB\n\nBrowser Support\n\n  * 1\n  * 12\n  * 1\n  * 1\n\nSource\n\nThe RGB color space features direct access to the red, green and blue\nchannels. It allows specifying an amount between 0 and 255 or as a percentage\n0 to 100. This syntax was around before some syntax normalization was in the\nspecifications, so you'll see comma and no-comma syntaxes in the wild. Moving\nforward, commas are no longer required.\n\n    \n    \n    .valid-css-rgb-colors { --classic: rgb(64, 149, 191); --modern: rgb(64 149 191); --percents: rgb(25% 58% 75%);\n    \n    --classic-with-opacity-percent: rgba(64, 149, 191, 50%); --classic-with-opacity-decimal: rgba(64, 149, 191, .5);\n    \n    --modern-with-opacity-percent: rgb(64 149 191 / 50%); --modern-with-opacity-decimal: rgb(64 149 191 / .5);\n    \n    --percents-with-opacity-percent: rgb(25% 58% 75% / 50%); --percents-with-opacity-decimal: rgb(25% 58% 75% / 50%);\n    \n    --empty-channels: rgb(none none none); }\n\n#### HSL\n\nBrowser Support\n\n  * 1\n  * 12\n  * 1\n  * 3.1\n\nSource\n\nOne of the first color spaces to orient itself towards human language and\ncommunication, HSL (hue saturation and lightness) offers all the colors in the\nsRGB gamut while not requiring your brain to know how red, green and blue\ninteract. Like RGB, it also originally had commas in the syntax, but moving\nforward, commas are no longer required.\n\n    \n    \n    .valid-css-hsl-colors { --classic: hsl(200deg, 50%, 50%); --modern: hsl(200 50% 50%);\n    \n    --classic-with-opacity-percent: hsla(200deg, 50%, 50%, 50%); --classic-with-opacity-decimal: hsla(200deg, 50%, 50%, .5);\n    \n    --modern-with-opacity-percent: hsl(200 50% 50% / 50%); --modern-with-opacity-decimal: hsl(200 50% 50% / .5);\n    \n    /* hueless and no saturation */ --empty-channels-white: hsl(none none 100%); --empty-channels-black: hsl(none none 0%); }\n\n#### HWB\n\nBrowser Support\n\n  * 101\n  * 101\n  * 96\n  * 15\n\nSource\n\nAnother sRGB gamut color space oriented at how humans describe color is HWB\n(hue, whiteness, blackness). Authors can choose a hue and mix in white or\nblack to find their desired color.\n\n    \n    \n    .valid-css-hwb-colors { --modern: hwb(200deg 25% 25%); --modern2: hwb(200 25% 25%);\n    \n    --modern-with-opacity-percent: hwb(200 25% 25% / 50%); --modern-with-opacity-decimal: hwb(200 25% 25% / .5);\n    \n    /* hueless and no saturation */ --empty-channels-white: hwb(none 100% none); --empty-channels-black: hwb(none none 100%); }\n\n### Meet the new web color spaces\n\nThe following color spaces offer access to larger gamuts than sRGB. The\ndisplay-p3 color space offers almost twice as many colors as RGB, while\nRec2020 offers almost twice as many as display-p3. That's a lot of colors!\n\n#### The color() function\n\nBrowser Support\n\n  * 111\n  * 111\n  * 113\n  * 15\n\nSource\n\nThe new color() function can be used for any color space that specifies colors\nwith R, G and B channels. color() takes a color space parameter first, then a\nseries of channel values for RGB and optionally some alpha.\n\nYou'll find many of the new color spaces use this function because having\nspecialized functions like rgb, srgb, hsl, hwb, etc, was growing to a long\nlist, easier to have the colorspace be a parameter.\n\nPros\n\n  * A normalized space for accessing color spaces that use RGB channels.\n  * Can scale up to any wide gamut RGB based color space.\n\nCons\n\n  * Doesn't work with HSL, HWB, LCH, okLCH, or okLAB\n\n    \n    \n    .valid-css-color-function-colors { --srgb: color(srgb 1 1 1); --srgb-linear: color(srgb-linear 100% 100% 100% / 50%); --display-p3: color(display-p3 1 1 1); --rec2020: color(rec2020 0 0 0); --a98-rgb: color(a98-rgb 1 1 1 / 25%); --prophoto: color(prophoto-rgb 0% 0% 0%); --xyz: color(xyz 1 1 1); }\n\nNote: Colors can be in the sRGB Gamut, Display P3 Gamut, or Rec2020 Gamut; Up\nto 77.6% of the visible spectrum.\n\n#### sRGB via color()\n\nThis colorspace offers the same features as rgb(). It does additionally offer\ndecimals between 0 and 1, used exactly like 0% to 100%.\n\nPros\n\n  * Nearly all displays support the range of this color space.\n  * Design tool support.\n\nCons\n\n  * Not perceptually linear (like lch() is)\n  * No wide gamut colors.\n  * Gradients often go through a dead zone.\n\n    \n    \n    .valid-css-srgb-colors { --percents: color(srgb 34% 58% 73%); --decimals: color(srgb .34 .58 .73);\n    \n    --percents-with-opacity: color(srgb 34% 58% 73% / 50%); --decimals-with-opacity: color(srgb .34 .58 .73 / .5);\n    \n    /* empty */ --empty-channels-black: color(srgb none none none); --empty-channels-black2: color(srgb); }\n\n#### Linear sRGB via color()\n\nThis linear alternative to RGB offers predictable channel intensity.\n\nPros\n\n  * Direct access to RGB channels, handy for things like game engines or light shows.\n\nCons\n\n  * Not perceptually linear.\n  * Black and white are packed at the edges.\n\n    \n    \n    .valid-css-srgb-linear-colors { --percents: color(srgb-linear 34% 58% 73%); --decimals: color(srgb-linear .34 .58 .73);\n    \n    --percents-with-opacity: color(srgb-linear 34% 58% 73% / 50%); --decimals-with-opacity: color(srgb-linear .34 .58 .73 / .5);\n    \n    /* empty */ --empty-channels-black: color(srgb-linear none none none); --empty-channels-black2: color(srgb-linear); }\n\nGradients are discussed in detail later, but quickly it's meaningful to see a\nsrgb and linear-srgb black to white gradient to illustrate their differences:\n\n#### LCH\n\nBrowser Support\n\n  * 111\n  * 111\n  * 113\n  * 15\n\nSource\n\nThe first space of this post to introduce syntax for accessing colors outside\nthe RGB gamut! It is also the first to make it very easy to create out of\ngamut color for a display. This is because any CIE space colors (lch, oklch,\nlab, oklab) are capable of representing the entire human visible color\nspectrum.\n\nThis colorspace is modeled after human vision and offers syntax to specify any\nof those colors and more. The LCH channels are lightness, chroma and hue. Hue\nbeing an angle, like in HSL and HWB. Lightness is a value between 0 and 100,\nbut not like HSL's lightness, it's a special, \u201cperceptually linear\u201d, human-\ncentric lightness. Chroma is similar to saturation; can range from 0 to 230\nbut is also technically unbounded.\n\nPros\n\n  * Predictable color manipulation thanks to being perceptually linear, mostly (see oklch).\n  * Uses familiar channels.\n  * Often has vibrant gradients.\n\nCons\n\n  * Easy to go out of gamut.\n  * On rare occasions the gradient may need an adjustment middle point to prevent hue shift.\n\n    \n    \n    .valid-css-lch-colors { --percent-and-degrees: lch(58% 32 241deg); --just-the-degrees: lch(58 32 241deg); --minimal: lch(58 32 241);\n    \n    --percent-opacity: lch(58% 32 241 / 50%); --decimal-opacity: lch(58% 32 241 / .5);\n    \n    /* chromaless and hueless */ --empty-channels-white: lch(100 none none); --empty-channels-black: lch(none none none); }\n\nWarning: Chroma can be a troublemaker, allowing authors to easily exceed a\ndisplay's gamut. Be careful with high chroma C values.\n\n#### LAB\n\nBrowser Support\n\n  * 111\n  * 111\n  * 113\n  * 15\n\nSource\n\nAnother color space made to access the CIE gamut, again with a perceptually\nlinear lightness (L) dimension. The A and B in LAB represent the unique axes\nof human color vision: red-green, and blue-yellow. When A is given a positive\nvalue it adds red, and adds green when it's below 0. When B is given a\npositive number it adds yellow, where negative values are toward blue.\n\nPros\n\n  * Perceptually consistent gradients.\n  * High dynamic range.\n\nCons\n\n  * Potential for hue shift.\n  * Difficult to hand author or guess a color when reading values.\n\n    \n    \n    .valid-css-lab-colors { --percent-and-degrees: lab(58% -16 -30); --minimal: lab(58 -16 -30);\n    \n    --percent-opacity: lab(58% -16 -30 / 50%); --decimal-opacity: lab(58% -16 -30 / .5);\n    \n    /* chromaless and hueless */ --empty-channels-white: lab(100 none none); --empty-channels-black: lab(none none none); }\n\n#### OKLCH\n\nBrowser Support\n\n  * 111\n  * 111\n  * 113\n  * 15.4\n\nSource\n\nThis color space is corrective to LCH. And like LCH, (L) continues to\nrepresent perceptually linear lightness, C for chroma and the H for hue.\n\nThis space feels familiar if you've worked with HSL or LCH. Pick an angle on\nthe color wheel for H, choose a lightness or darkness amount by adjusting L,\nbut then we have chroma instead of saturation. They're fairly identical except\nthat adjustments to lightness and chroma tend to come in pairs, or else it can\nbe easy to ask for high chroma colors that go outside of a target gamut.\n\nPros\n\n  * No surprises when working with blue and purple hues.\n  * Perceptually linear lightness.\n  * Uses familiar channels.\n  * High dynamic range.\n  * Has a modern color picker - by Evil Martians.\n\nCons\n\n  * Easy to go out of gamut.\n  * New and relatively unexplored.\n  * Few color pickers.\n\n    \n    \n    .valid-css-oklch-colors { --percent-and-degrees: oklch(64% .1 233deg); --just-the-degrees: oklch(64 .1 233deg); --minimal: oklch(64 .1 233);\n    \n    --percent-opacity: oklch(64% .1 233 / 50%); --decimal-opacity: oklch(64% .1 233 / .5);\n    \n    /* chromaless and hueless */ --empty-channels-white: oklch(100 none none); --empty-channels-black: oklch(none none none); }\n\n#### OKLAB\n\nBrowser Support\n\n  * 111\n  * 111\n  * 113\n  * 15.4\n\nSource\n\nThis space is corrective to LAB. It's claimed as a space optimized for image\nprocessing quality also, which for us in CSS means gradients and color\nfunction manipulation quality.\n\nPros\n\n  * Default space for animations and interpolations.\n  * Perceptually linear lightness.\n  * No hue shift like LAB.\n  * Perceptually consistent gradients.\n\nCons\n\n  * New and relatively unexplored.\n  * Few color pickers.\n\n    \n    \n    .valid-css-oklab-colors { --percent-and-degrees: oklab(64% -.1 -.1); --minimal: oklab(64 -.1 -.1);\n    \n    --percent-opacity: oklab(64% -.1 -.1 / 50%); --decimal-opacity: oklab(64% -.1 -.1 / .5);\n    \n    /* chromaless and hueless */ --empty-channels-white: oklab(100 none none); --empty-channels-black: oklab(none none none); }\n\n#### Display P3\n\nBrowser Support\n\n  * 111\n  * 111\n  * 113\n  * 15\n\nSource\n\nNote: Colors are in the Display P3 Gamut; 45.5% of the visible spectrum.\n\nThe display P3 gamut and color space have become popular since Apple supported\nthem since 2015 on their iMac. Apple also supported display-p3 in web pages\nvia CSS since 2016, five years ahead of any other browser. If coming from\nsRGB, this is a great color space to begin working within as you move styles\nto a higher dynamic range.\n\nPros\n\n  * Great support, considered the baseline for HDR displays.\n  * 50% more colors than sRGB.\n  * DevTools offer a great color picker.\n\nCons\n\n  * Will eventually be surpassed by Rec2020 and CIE spaces.\n\n    \n    \n    .valid-css-display-p3-colors { --percents: color(display-p3 34% 58% 73%); --decimals: color(display-p3 .34 .58 .73);\n    \n    --percent-opacity: color(display-p3 34% 58% 73% / 50%); --decimal-opacity: color(display-p3 .34 .58 .73 / .5);\n    \n    /* chromaless and hueless */ --empty-channels-black: color(display-p3 none none none); --empty-channels-black2: color(display-p3); }\n\n#### Rec2020\n\nBrowser Support\n\n  * 111\n  * 111\n  * 113\n  * 15\n\nSource\n\nNote: Colors are in the Rec2020 Gamut; 77.6% of the visible spectrum.\n\nRec2020 is part of the movement to UHDTV (ultra-high-definition television),\nproviding a wide range of colors for use in 4k and 8k media. Rec2020 is\nanother RGB based gamut, larger than display-p3, but not nearly as common\namongst consumers as Display P3.\n\nPros\n\n  * Ultra HD colors.\n\nCons\n\n  * Not as common among consumers (yet).\n  * Not commonly found in handhelds or tablets.\n\n    \n    \n    .valid-css-rec2020-colors { --percents: color(rec2020 34% 58% 73%); --decimals: color(rec2020 .34 .58 .73);\n    \n    --percent-opacity: color(rec2020 34% 58% 73% / 50%); --decimal-opacity: color(rec2020 .34 .58 .73 / .5);\n    \n    /* chromaless and hueless */ --empty-channels-black: color(rec2020 none none none); --empty-channels-black2: color(rec2020); }\n\n#### A98 RGB\n\nBrowser Support\n\n  * 111\n  * 111\n  * 113\n  * 15\n\nSource\n\nNote: Colors are in the RGB 98 Gamut; 52.1% of the visible spectrum.\n\nShort for Adobe 1998 RGB, A98 RGB was created by Adobe to feature most of the\ncolors achievable from CMYK printers. It offers more colors than sRGB, notably\nin the cyan and green hues.\n\nPros\n\n  * Larger than the sRGB and Display P3 color spaces.\n\nCons\n\n  * Not a common space worked within by digital designers.\n  * Not many folks are porting palettes from CMYK.\n\n    \n    \n    .valid-css-a98-rgb-colors { --percents: color(a98-rgb 34% 58% 73%); --decimals: color(a98-rgb .34 .58 .73);\n    \n    --percent-opacity: color(a98-rgb 34% 58% 73% / 50%); --decimal-opacity: color(a98-rgb .34 .58 .73 / .5);\n    \n    /* chromaless and hueless */ --empty-channels-black: color(a98-rgb none none none); --empty-channels-black2: color(a98-rgb); }\n\n#### ProPhoto RGB\n\nBrowser Support\n\n  * 111\n  * 111\n  * 113\n  * 15\n\nSource\n\nNote: Colors are in the ProPhoto Gamut; 90% of the visible spectrum.\n\nCreated by Kodak, this wide gamut space uniquely offers ultra wide range\nprimary colors and features minimal hue shifts when changing lightness. It\nalso claims to cover 100% of real-world surface colors as documented by\nMichael Pointer in 1980.\n\nPros\n\n  * Minimal hue shifts when changing lightness.\n  * Vibrant primary colors.\n\nCons\n\n  * Around 13% of its colors offered are imaginary, meaning they're not within the human visible spectrum.\n\n    \n    \n    .valid-css-prophoto-rgb-colors { --percents: color(prophoto-rgb 34% 58% 73%); --decimals: color(prophoto-rgb .34 .58 .73);\n    \n    --percent-opacity: color(prophoto-rgb 34% 58% 73% / 50%); --decimal-opacity: color(prophoto-rgb .34 .58 .73 / .5);\n    \n    /* chromaless and hueless */ --empty-channels-black: color(prophoto-rgb none none none); --empty-channels-black2: color(prophoto-rgb); }\n\n#### XYZ, XYZ-d50, XYZ-d65\n\nBrowser Support\n\n  * 111\n  * 111\n  * 113\n  * 15\n\nSource\n\nNote: Colors are in the HVS Gamut; 100% of the human visible spectrum (HVS).\n\nThe CIE XYZ color space encompasses all colors that are visible to a person\nwith average eyesight. This is why it is used as a standard reference for\nother color spaces. Y is luminance, X and Z are possible chromas within the\ngiven Y luminance.\n\nThe difference between d50 and d65 is the white point, where d50 uses the d50\nwhite points and d65 uses the d65 white point.\n\nKey term: White point is an attribute of a color space, it's where true white\nexists within the space. For electronic screens, D65 is the most common white\npoint, and it's short for 6500 kelvin. It's important in color conversion that\nwhite points match so color temperature (warmness or coolness) aren't\naffected.\n\nPros\n\n  * Linear-light access has handy use cases.\n  * Great for physical color mixing.\n\nCons\n\n  * Not perceptually linear like lch, oklch, lab and oklab are.\n\n    \n    \n    .valid-css-xyz-colors { --percents: color(xyz 22% 26% 53%); --decimals: color(xyz .22 .26 .53);\n    \n    --percent-opacity: color(xyz .22 .26 .53 / 50%); --decimal-opacity: color(xyz .22 .26 .53 / .5);\n    \n    /* chromaless and hueless */ --empty-channels-black: color(xyz none none none); --empty-channels-black2: color(xyz); }\n    \n    \n    .valid-css-xyz-d50-colors { --percents: color(xyz-d50 22% 26% 53%); --decimals: color(xyz-d50 .22 .26 .53);\n    \n    --percent-opacity: color(xyz-d50 .22 .26 .53 / 50%); --decimal-opacity: color(xyz-d50 .22 .26 .53 / .5);\n    \n    /* chromaless and hueless */ --empty-channels-black: color(xyz-d50 none none none); --empty-channels-black2: color(xyz-d50); }\n    \n    \n    .valid-css-xyz-d65-colors { --percents: color(xyz-d65 22% 26% 53%); --decimals: color(xyz-d65 .22 .26 .53);\n    \n    --percent-opacity: color(xyz-d65 .22 .26 .53 / 50%); --decimal-opacity: color(xyz-d65 .22 .26 .53 / .5);\n    \n    /* chromaless and hueless */ --empty-channels-black: color(xyz-d65 none none none); --empty-channels-black2: color(xyz-d65); }\n\n#### Custom color spaces\n\nThe CSS Color 5 specification also has a path for teaching the browser a\ncustom color space. This is an ICC profile that tells the browser how to\nresolve colors.\n\n    \n    \n    @color-profile --foo { src: url(path/to/custom.icc); }\n\nOnce loaded, access colors from this custom profile with the color() function\nand specify the channel values for it.\n\n    \n    \n    .valid-css-color-from-a-custom-profile { background: color(--foo 1 0 0); }\n\n### Color interpolation\n\nTransitioning from one color to another is found in animation, gradients and\ncolor mixing. This transition is typically specified as a starting color and\nan ending color, where the browser is expected to interpolate between them.\nInterpolate in this case means to generate a series of in-between colors to\ncreate a smooth transition instead of an instant one.\n\nWith a gradient, the interpolation is a series of colors along a shape. With\nanimation it's a series of colors over time.\n\n    \n    \n    @keyframes bg { 0%, 100% { background: orange; } 25% { background: magenta; } 50% { background: lime; } 75% { background: cyan; } }\n    \n    .circle { animation: bg 5s ease-in-out infinite; }\n\nWith a gradient, the in-between colors are shown all at once:\n\n#### What's new in color interpolation\n\nWith the addition of new gamuts and color spaces, there are new additional\noptions for interpolation. Transitioning a color in hsl from blue to white\nresults in something very different from sRGB.\n\n    \n    \n    .classic-gradient-in-srgb { background: linear-gradient(to right, blue, white); }\n    \n    .new-gradient-in-hsl { background: linear-gradient(in hsl to right, blue, white); }\n\nCan't see the Codepen demo?\n\nThen what happens if you transition from a color in one space to a color in a\ncompletely different space:\n\n    \n    \n    .gradient { /* oklab will be the common space */ background: linear-gradient(to right, lch(29.6 131 301), hsl(330 100% 50%)); }\n    \n    .lch { /* lch is specified */ background: linear-gradient(in lch to right, lch(29.6 131 301), hsl(330 100% 50%)); }\n\nCan't see the Codepen demo?\n\nLuckily for you, the Color 4 specification has instructions for the browsers\non how to handle these cross color space interpolations. In the above case for\n.gradient, browsers will notice the differentiating color spaces and use the\ndefault color space oklab. You may think the browser would use lch as the\ncolor space, since that's the first color, but it doesn't and that's why I\nshow a second comparison gradient .lch. The .lch gradient is a gradient from\nthe lch color space.\n\n##### Less banding thanks to 16-bit color\n\nBefore this color work, all colors were saved in one 32-bit integer to\nrepresent all four channels; red, green, blue and alpha. This is 8-bits per\nchannel and 2^ 24 possible colors (ignoring alpha). 2 ^ 24 = 16,777,216,\n\"millions of colors.\"\n\nAfter this color work, four 16-bit floating point values, each channel has its\nown float instead of being lumped together. This is 64-bits of data total,\nresulting in many more than millions of colors.\n\nThis work is required to support HD color. This increases the amount of color\ninformation that can be stored, which has a nice side effect of meaning\nthere's more colors for the browser to use in a gradient.\n\nGradient banding is when there aren't enough colors to create a smooth\ngradient and \"strips\" of color become visible. Banding is heavily mitigated\nwith the upgrade to higher resolution color.\n\nImage source\n\n#### Controlling interpolation\n\nThe shortest distance between two points is always a straight line. With color\ninterpolation, browsers take the short route by default. Consider a scenario\nwhere there are two points in an HSL color cylinder. A gradient acquires its\ncolor steps by traveling along the line between the two points.\n\n    \n    \n    linear-gradient(to right, #94e99c, #e06242)\n\n(mock demonstration) Top down view, of an HSL cylinder with a line between the\ncolor stops\n\nThe above gradient line goes straight between the greenish color to the\nreddish color, passing through the center of the color space. While the above\nis great to help with initial understanding, it's not exactly what happens.\nHere is the gradient in the following Codepen, and it's clearly not white in\nthe middle like the mock demonstration showed.\n\nThe middle area of the gradient has lost its vibrance though. This is because\nthe most vibrant colors are at the edge of the color space shape, not in the\ncenter where the interpolation traveled near. This is commonly referred to as\nthe \"dead zone.\" There are a few ways to fix or work around this.\n\n##### Specifying more gradient stops to avoid the dead zone\n\nA technique for avoiding the dead zone today is to add additional color stops\nin the gradient that intentionally guide the interpolation to stay within the\nvibrant ranges of a color space. It is literally a work around, as the\nadditional stops help it work around the dead zone.\n\nThere's a gradient tool created by Erik Kennedy that calculates additional\ncolor stops for you, to help you avoid the dead zone even in color spaces that\ntend to gravitate towards it. Using it, passing the same colors from the first\nexample but changing the color interpolation to HSL, it produces this:\n\n    \n    \n    linear-gradient(90deg, #94e99c, #99e789, #ace67d, #c4e472, #e2e366, #e2bf5a, #e1934e, #e06242);\n\n(mock demonstration) Top down view of an HSL cylinder with a curved line\nfeaturing 9 color stops\n\nWith guided stop points, the interpolation is no longer a straight line, but\nappears to curve around the dead zone, helping maintain saturation, resulting\nin a much more vibrant gradient.\n\nWhile the tool does a great job, what if you could have similar or greater\ncontrol right from CSS?\n\n##### Directing the color interpolation\n\nIn Color 4, the ability to control the hue interpolation strategy was added\nand is a new way around (:wink:) the dead zone. Think about a hue angle and\nconsider a 2 stop gradient that only changes the angle, going hue shifting\nfrom 140deg to 240deg for example.\n\n###### Shorter vs longer hue interpolation\n\nThe gradient will by default take the shorter route it can unless you specify\nfor it to take the longer route. Hue interpolation options direct the angle\nrotation, like telling someone to turn left instead of right (heh, Zoolander):\n\nIn the above visual example of hue interpolation distances, the short path and\nthe long path are simulated to illustrate the difference. The short distance\nhas less hues between it because it's traveled through the least amount of\ndistance possible, where the long distance will have traveled over more hues.\n\n###### Increasing vs decreasing hue interpolation\n\nThere are two more hue interpolation strategies in Color 4, but they are\nexclusive for cylindrical color spaces. Staying with the two colors from the\nprevious examples, the visual now shows how increasing and decreasing works.\n\nThe above Codepen used ColorJS to demonstrate the expected result. The CSS you\nwould write to achieve the same effect without a Javascript library would be:\n\n    \n    \n    .longer-hue-interpolation-in-css { background: linear-gradient( to right in hsl longer hue, hsl(180deg 100% 75%), hsl(240deg 100% 75%) ); }\n    \n    .decreasing-hue-interpolation-in-css { background: linear-gradient( to right in hsl decreasing hue, hsl(180deg 100% 75%), hsl(240deg 100% 75%) ); }\n\nTo close out hue interpolation, here's a fun playground where you can change\nthe hue between 2 color stops and see the effects of a hue interpolation\nchoice as well as how color spaces change gradient results. The effects can be\nvery different; consider this as four new tricks just went into your color\ntoolbelt.\n\n#### Gradients in different color spaces\n\nEach color space, given its unique shape and color arrangement, will result in\na different gradient. Look at the examples below, especially at \"blue to\nwhite.\" Look at how each color space handles that differently. Notice how many\ngo purple in the middle, that's called a \"hue shift\" during interpolation.\n\nCan't see the Codepen demo?\n\nImage shown is only 1 of many examples from the Codepen. It's worth trying\nCanary or Safari Tech Preview to see these for yourself.\n\nSome gradients in these spaces will be more vibrant than others or travel less\nthrough dead zones. Spaces like lab pack colors together in a way optimized\nfor saturation, as opposed to spaces optimized for humans to write color in\nlike hwb().\n\n    \n    \n    .hwb { background: linear-gradient(to right, hwb(250 10% 10%), hwb(150 10% 10%)); } .lab { background: linear-gradient(to right, lab(30 59.4 -96), lab(80 -64 36.2)); }\n\nThe above demo, while subtle in the results, does show more consistent\ninterpolation with lab. The syntax of lab isn't simple to read though, there's\nnegative numbers that are very unfamiliar when coming from rgb or hsl. Good\nnews, we can use hwb for a familiar syntax but ask for the gradient to be\ninterpolated entirely within another color space, like oklab.\n\n    \n    \n    .hwb { background: linear-gradient(in hwb to right, hwb(250 10% 10%), hwb(150 10% 10%)); } .lab { background: linear-gradient(in oklab to right, hwb(250 10% 10%), hwb(150 10% 10%)); }\n\nCan't see the Codepen demo?\n\nThis example uses the same colors in hwb but specifies the color space for\ninterpolation to either hwb or oklab. hwb is a great colorspace for high\nvibrance but possible dead zones or bright spots (see the cyan hot spot in the\ntop example). oklab is great for perceptually linear gradients that stay\nsaturated. This feature is a lot of fun as you can try on a few different\ncolor spaces to see which gradient you like best.\n\nHere's a Codepen experimenting with gradients and color spaces, mixing and\nmatching strategies to explore the possibilities. Even a transition from black\nto white is different in each color space!\n\nCan't see the Codepen demo?\n\n### Gamut clamping\n\nThere exist scenarios where a color may ask for something outside of a gamut.\nConsider the following color:\n\n    \n    \n    rgb(300 255 255)\n\nThe maximum for a color channel in the rgb color space is 255, but here 300\nwas specified for red. What happens? Gamut clamping.\n\nClamping is when extra information is simply removed. 300 will become 255\ninternally to the color engine. The color has now been clamped within its\nspace.\n\n### Choosing a color space\n\nMany folks, after learning about these color spaces and their effects, feel\noverwhelmed and want to know which \"one\" to choose. From my studies and\nexperience, I don't see one color space as the single one for all my tasks.\nEach has moments when they produce the desired outcome.\n\nIf there was one best space, then there wouldn't be so many new spaces being\nintroduced.\n\nHowever, I can say that the CIE spaces\u2014lab, oklab, lch and oklch\u2014are my\nstarting places. If the outcome of them isn't what I'm looking for, then I'll\ngo test other spaces. For mixing colors and creating gradients, I agree with\nthe default spec choice of oklab. For color systems and overall UI colors, I\nlike oklch.\n\nHere are a couple articles where folks have shared their updated color\nstrategies given these new color spaces and features. For example, Andrey\nSitnik has gone all in on oklch, maybe they'll convince you to do the same:\n\n  1. OKLCH in CSS: why we moved from RGB and HSL by Andrey Sitnik\n  2. Color Formats by Josh W. Comeau\n  3. OK, OKLCH by Chris Coyier\n\n## Migrating to HD CSS color\n\nThere are two main strategies for updating your web project color to support\nwide gamut displays:\n\n  1. Graceful degradation Use the new color spaces and let the browser and operating system figure out which color to show based on display capabilities.\n\n  2. Progressive enhancement Use @supports and @media to assess the capabilities of the user's browser, and if conditions are met, provide wide gamut colors.\n\nIf a browser doesn't understand display-p3 color:\n\n    \n    \n    color: red; color: color(display-p3 1 0 0);\n\nIf a browser does understand display-p3 color:\n\n    \n    \n    color: red; color: color(display-p3 1 0 0);\n\nThere are advantages and disadvantages to each. Here's a quick list of pros\nand cons:\n\nGraceful degradation\n\n  * Pros\n\n    * The simplest route.\n    * The browser will gamut map or clamp to sRGB if not a wide gamut display, therefore the responsibility is on the browser.\n  * Cons\n\n    * The browser may gamut clamp or gamut map to a color you don't love.\n    * The browser may not understand the color request and fail entirely. However this can be mitigated by specifying the color twice, letting the cascade fallback to the previous color it does understand.\n\nProgressive enhancement\n\n  * Pros\n\n    * More control with managed color fidelity.\n    * An additive strategy that doesn't affect the current colors.\n  * Cons\n\n    * You need to manage two separate color syntaxes.\n    * You need to manage two separate color gamuts.\n\n### Checking for gamut and color space support\n\nThe browser allows checking for support for wide gamut capabilities and color\nsyntax support from CSS and JavaScript. The exact gamut of colors the user has\nis not made available, a generalized answer is provided so user privacy is\nmaintained. The exact color space support is made available though, as it's\nnot specific to capabilities of the user's hardware like gamut is.\n\n#### Color gamut support queries\n\nThe following code examples check the visiting user's range of colors in their\ndisplay.\n\n##### Checking from CSS\n\nThe least specific support inquiry is the dynamic-range media query:\n\nBrowser Support\n\n  * 98\n  * 98\n  * 100\n  * 13.1\n\nSource\n\n    \n    \n    @media (dynamic-range: high) { /* safe to use HD colors */ }\n\nApproximate, or more, support can be inquired with the color-gamut media\nquery:\n\nBrowser Support\n\n  * 58\n  * 79\n  * 110\n  * 10\n\nSource\n\n    \n    \n    @media (color-gamut: srgb) { /* safe to use srgb colors */ }\n    \n    @media (color-gamut: p3) { /* safe to use p3 colors */ }\n    \n    @media (color-gamut: rec2020) { /* safe to use rec2020 colors */ }\n\nThere are an additional two media queries for checking support:\n\n  1. @media (color)\n  2. @media (color-index)\n\n##### Checking from JavaScript\n\nFor JavaScript, the window.matchMedia() function can be called and passed a\nmedia query for evaluation.\n\nBrowser Support\n\n  * 9\n  * 12\n  * 6\n  * 5.1\n\nSource\n\n    \n    \n    const hasHighDynamicRange = window .matchMedia('(dynamic-range: high)') .matches;\n    \n    console.log(hasHighDynamicRange); // true || false\n    \n    const hasP3Color = window .matchMedia('(color-gamut: p3)') .matches;\n    \n    console.log(hasP3Color); // true || false\n\nThe above pattern can be copied for the rest of the media queries.\n\n#### Color space support queries\n\nThe following code examples check the visiting user's browser and its\nselection of color spaces to work with.\n\n##### Checking from CSS\n\nIndividual color space support can be inquired using an @supports query:\n\nBrowser Support\n\n  * 28\n  * 12\n  * 22\n  * 9\n\nSource\n\n    \n    \n    @supports (background: rgb(0 0 0)) { /* rgb color space supported */ }\n    \n    @supports (background: color(display-p3 0 0 0)) { /* display-p3 color space supported */ }\n    \n    @supports (background: oklch(0 0 0)) { /* oklch color space supported */ }\n\n##### Checking from JavaScript\n\nFor JavaScript, the CSS.supports() function can be called and passed a\nproperty and value pair to see if the browser understands.\n\n    \n    \n    CSS.supports('background: rgb(0 0 0)') CSS.supports('background: color(display-p3 0 0 0)') CSS.supports('background: oklch(0 0 0)')\n\n#### Putting the hardware and parsing checks together\n\nWhile waiting for each browser to implement these new color features, it's a\ngood idea to check for both hardware capability and color parsing capability.\nThis is often what I use when progressively enhancing colors to high\ndefinition:\n\n    \n    \n    :root { --neon-red: rgb(100% 0 0); --neon-blue: rgb(0 0 100%); }\n    \n    /* is the display HD? */ @media (dynamic-range: high) {\n    \n    /* does this browser understand display-p3? */ @supports (color: color(display-p3 0 0 0)) {\n    \n    /* safe to use display-p3 colors */ --neon-red: color(display-p3 1 0 0); --neon-blue: color(display-p3 0 0 1); } }\n\n### Debugging color with Chrome DevTools\n\nChrome DevTools is updated and equipped with new tools to help developers\ncreate, convert and debug HD color.\n\n#### Updated color picker\n\nThe color picker now supports all the new color spaces. Allowing authors to\ninteract with channel values just as they would have.\n\n#### Gamut boundaries\n\nA gamut boundary line has also been added, drawing a line between srgb and\ndisplay-p3 gamuts. Making it clear which gamut the selected color is within.\n\nThis helps authors visually differentiate between HD colors and non-HD colors.\nIt's especially helpful when working with the color() function and the new\ncolor spaces because they're capable of producing both non-HD and HD colors.\nIf you want to check which gamut your color is in, pop up the color picker and\nsee!\n\n#### Converting colors\n\nDevTools has been able to convert colors between supported formats like hsl,\nhwb, rgb and hex for many years. shift + click on a square color swatch in the\nStyles pane to perform this conversion. The new color tools don't just cycle\nthrough conversions, they yield a popup where authors can see and pick the\nconversion they want.\n\nWhen converting, it's important to know if the conversion was clipped to fit\nthe space. DevTools now have a warning icon to the converted color that alerts\nyou to this clipping.\n\nDiscover more CSS debugging feature in DevTools in their recent announcement.\n\n## Conclusion\n\nNon-sRGB color spaces on the web are in their early days but I believe we'll\nsee an increase in usage from designers and developers over time. Knowing\nwhich color space to build a design system on, for example, is a strong tool\nto be in a creators toolbelt. Each color space offers unique features and a\nreason it was added to the CSS specification, and it is ok to start small with\nthese and add as needed.\n\nEnjoy playing with these new color toys! More vibrance, consistent\nmanipulations and interpolations and overall deliver a more colorful\nexperience to your users.\n\n### Additional reading\n\n  * https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/\n  * https://www.w3.org/Graphics/Color/Workshop/slides/lilley/lilley.html\n  * https://darker.ink/writings/Towards-richer-colors-on-the-Web\n  * https://bottosson.github.io/posts/colorpicker/\n  * https://www.w3.org/Graphics/Color/Workshop/slides/Erias.pdf\n  * https://atmos.style/blog/lch-color-space\n  * https://stripe.com/blog/accessible-color-systems\n  * https://cran.r-project.org/web/packages/colordistance/vignettes/color-spaces.html\n  * https://afc163.github.io/color3d/\n  * https://github.com/nschloe/colorio#gamut-visualization\n  * https://www.learnui.design/tools/gradient-generator.html\n  * https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\n  * https://www.w3.org/TR/css-color-4/\n  * https://www.w3.org/TR/css-color-5/\n  * https://en.wikipedia.org/wiki/CIE_1931_color_space\n  * https://www.joshwcomeau.com/css/color-formats/\n  * https://ciechanow.ski/color-spaces/\n\n### Additional Color Level 5 articles\n\n  * CSS relative color syntax\n  * CSS color-mix\n\nWas this helpful?\n\nExcept as otherwise noted, the content of this page is licensed under the\nCreative Commons Attribution 4.0 License, and code samples are licensed under\nthe Apache 2.0 License. For details, see the Google Developers Site Policies.\nJava is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-02-02 UTC.\n\n", "frontpage": true}
