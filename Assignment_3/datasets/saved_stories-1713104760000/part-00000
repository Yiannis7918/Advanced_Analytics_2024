{"aid": "40029592", "title": "Getting into way too much detail with the Z80 netlist simulation (2021)", "url": "https://floooh.github.io/2021/12/06/z80-instruction-timing.html#table-of-content", "domain": "floooh.github.io", "votes": 6, "user": "userbinator", "posted_at": "2024-04-14 08:23:10", "comments": 0, "source_title": "Getting into way too much detail with the Z80 netlist simulation", "source_text": "Getting into way too much detail with the Z80 netlist simulation\n\nThe Brain Dump\n\n# Getting into way too much detail with the Z80 netlist simulation\n\nDec 6, 2021\n\nTL;DR: a detailed look at Z80 instruction timings with the help of a Z80\nnetlist simulation.\n\n## Table of Content\n\n  * Table of Content\n  * Intro\n  * The shape of Z80 instructions\n  * General Instruction Timing\n\n    * M-cycles and T-states\n    * Opcode Fetch Machine Cycles\n    * Memory Read Machine Cycles\n    * Memory Write Machine Cycles\n    * IO Read and Write Machine Cycles\n    * Wait states\n    * Extra Clock Cycles\n  * Overlapped Execution\n  * The 3 Instruction Subsets\n  * The 2-3-3 Opcode Bit Pattern\n  * Main Instructions\n\n    * Main Quadrant 1 (xx = 01)\n    * Main Quadrant 2 (xx = 10)\n    * Main Quadrant 0 (xx = 00)\n\n      * INC/DEC (HL)\n      * INC/DEC ss\n      * ADD HL,ss\n      * JR d\n      * DJNZ d\n      * JR cc,d\n    * Main Quadrant 3 (xx == 11)\n\n      * CALL nn\n      * CALL cc,nn\n      * RET cc\n      * LD SP,HL\n      * EX (SP),HL\n      * PUSH qq\n      * RST p\n  * Prefix Instruction Overview\n  * DD and FD Prefixes\n\n    * Special Case: LD (IX+d),n\n  * ED Prefix\n\n    * ED Quadrant 1 (x == 01)\n\n      * SBC/ADC HL,ss\n      * LD I,A and LD R,A\n      * LD A,I and LD A,R\n      * RRD and RLD\n    * ED Quadrant 2 (x == 10)\n\n      * LDI and LDD\n      * LDIR and LDDR\n      * CPI and CPD\n      * CPIR and CPDR\n      * INI and IND\n      * OUTI and OUTD\n      * INIR, INDR, OTIR and OTDR\n  * CB Prefix\n\n    * CB Quadrant 0\n    * CB Quadrant 1\n    * CB Quadrant 2\n    * CB Quadrant 3\n  * DD CB and FD CB Prefix\n  * Interrupt Behaviour\n\n    * Interrupt Detection Timing\n    * Prefix Bytes and Interrupts\n    * EI, DI and interrupts\n    * RETI and RETN\n    * NMI Timing\n    * Mode 0 Interrupt Timing\n    * Mode 1 Interrupt Timing\n    * Mode 2 Interrupt Timing\n\n## Intro\n\nThis is part one of a two-part series about a new cycle-stepped Z80 emulator I\nwrote recently. In the first post I\u2019ll mainly take a look at the oddities and\nirregularities in the Z80 instruction set with the help of the Z80 netlist\nsimulation from visual6502.org which I integrated into my own \u2018remix\u2019 before\nstarting to work on the actual CPU emulator:\n\nhttps://floooh.github.io/visualz80remix/\n\nThe \u2018remix\u2019 has some usability advantages over the original:\n\n  * rendering and UI performance is much improved via WASM, WebGL and Dear ImGui\n  * an integrated assembler simplifies program input\n  * a tracelog window which shows more information and allows to \u2018rewind\u2019 the simulation\n\nThere\u2019s a lot more information in the project readme here:\nhttps://github.com/floooh/v6502r.\n\nA word of warning though, the Z80 netlist from visual6502 has some subtle\ndifferences in undocumented behaviour from what\u2019s known about original Z80s\n(see here for a list of issues I found so far:\nhttps://github.com/floooh/v6502r/issues/2. My guess is that the netlist has\nbeen created from a Z8400 because of those two details found on the die:\n\n...at least this might explain why the netlist doesn\u2019t suffer from the six\n\u2018reverse engineering traps\u2019 that were placed on the original Z80. By the time\nthe Z8400 was created, the Z80 had already been widely cloned so reverse\nengineering probably was no longer a concern.\n\nAnyway, back to the actual topic of the blog post:\n\nThe Z80 has probably the most messy and irregular instruction set of the\npopular 8-bit CPUs (certainly when compared to the MOS 6502 or Motorola 6800).\nThe reason is that the Z80 had to be binary compatible with the Intel 8080.\nWhile the 8080 has a reasonably clean and structured instruction set, the only\nway for the Z80 to add new instructions while remaining 8080-compatible was to\nfill the \u2018gaps\u2019 in the 8080 instruction set.\n\nThis is why the Z80 instruction set looks clean and structured only in some\nplaces (mainly those inherited from the 8080), while at the same time being\npeppered with seemingly random new Z80-specific instructions. This was the\nright approach to create an \u201c8080 killer\u201d, but nearly half a century later it\nmakes life a lot harder for emulator authors :)\n\n## The shape of Z80 instructions\n\nLike on the Intel 8080, instructions are made up of one or multiple bytes,\nwhere the first byte is always the opcode byte.\n\nThis simple rule is also true for the Z80-specific \u2018prefixed instructions\u2019,\nwhich superficially seem to have two opcode bytes. But as we\u2019ll see later,\ninstruction prefixes are actually complete instructions on their own which\njust influence how the following opcode byte is decoded.\n\nPrefixes aside, there are only three basic instruction \u2018shapes\u2019:\n\nJust the opcode byte (for example NOP, LD A,B, RET):\n\n    \n    \n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 OPCODE \u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b C9 => RET\n\nAn opcode byte followed by an 8-bit \u2018immediate value\u2019 (for example LD A,n, ADD\nn, JR d):\n\n    \n    \n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 OPCODE \u2503 IMM8 \u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u251b 3E 11 => LD A,11h\n\nAn opcode byte followed by a 16-bit immediate value (in little endian order):\nLD HL,nnnn, CALL nn):\n\n    \n    \n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 OPCODE \u2503 IMM16LO \u2503 IMM16HI \u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b 21 34 12 => LD HL,1234h\n\nInstructions that have been \u2018modified\u2019 by the DD or FD prefix may come in two\nadditional shapes where an offset byte is inserted after the opcode and up to\none immediate value byte (this is the \u2018d\u2019 in (IX+d) or (IY+d)). There is no\ninstruction where the d-offset byte is followed by a 16-bit immediate value\n(why that\u2019s the case will become clear later in the section about the DD/FD\nprefixes):\n\n    \n    \n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 PREFIX \u2503\u2503 OPCODE \u2503 DIMM8 \u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b DD 86 03 => ADD A,(IX+3) \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 PREFIX \u2503\u2503 OPCODE \u2503 DIMM8 \u2503 IMM8 \u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u251b FD 36 03 11 => LD (IY+3),11h\n\nThe last special instruction shape looks extremely weird because at first\nglance it doesn\u2019t fit into the above patterns at all. In \u2018double-prefixed\u2019\ninstructions (like SET 1,(IX+3)) the d-offset and \u2018actual\u2019 opcode have\nswitched places:\n\n    \n    \n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 PREFIX \u2503\u2503 PREFIX \u2503\u2503 DIMM8 \u2503 OPCODE \u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b DD CB 03 CE => SET 1,(IX+3)\n\nMore on that later in the dedicated section about DD CB and FD CB double-\nprefixes.\n\n## General Instruction Timing\n\n### M-cycles and T-states\n\nThe above \u2018physical shape\u2019 of Z80 instructions doesn\u2019t tell us much what\nactually happens during execution of an instruction (e.g. how many clock\ncycles the instruction takes to execute, and how the internal and externally\nvisible state of the CPU changes during execution).\n\nThe Z80 netlist simulation is perfect for this because it allows us to inspect\nthe internal and observable CPU state after each clock cycle (or rather: after\neach half-clock-cycle).\n\nBut first an explanation of another Z80 oddity: When reading Z80 documentation\nthere\u2019s a lot of talk about so called \u201cM-cycles\u201d and \u201cT-states\u201d, often written\nas M1/T2 or M3/T1 which confused me to no end in the beginning.\n\nLong story short:\n\nM1/T2 simply means \u201cthe second clock cycle (T2) in the first machine cycle\n(M1)\u201d, likewise, M3/T1 means \u201cthe first clock cycle (T1) in the third machine\ncycle (M3)\u201d.\n\nSo M-cycles and T-states are just a special notation to identify a specific\nclock cycle in an instruction.\n\n\u201cT-state\u201d is equivalent with a clock cycle.\n\n\u201cM-Cycle\u201d means \u201cmachine cycle\u201d and simply means a related group of T-states\nor clock cycles. On the Z80, basic operations like reading or writing a memory\nbyte take more time than a single clock cycle. But it\u2019s useful to understand\nthe action of reading or writing a memory byte as a single step, and that\u2019s\nexactly what a \u201cmachine cycle\u201d is.\n\nMachine cycles come in 7 flavours:\n\n  * Opcode Fetch (aka M1 cycle): this is always the first (and sometimes only) machine cycle in an instruction and takes 4 clock cycles\n  * Memory Read: read a byte from memory (3 clock cycles)\n  * Memory Write: write a byte to memory (3 clock cycles)\n  * IO Read: read a byte from an IO port (4 clock cycles)\n  * IO Write: write a byte to an IO port (4 clock cycles)\n  * Interrupt Acknowledge: these are special machine cycles which are executed at the start of maskable interrupt handling, they will be handled in detail in the last section of this blog post\n  * Extra: many instructions contain extra clock cycles necessary for computations, in the official CPU documentation these are sometimes identified as separate machine cycles, and sometimes just lumped together with other machine cycle types.\n\nSince machine cycles are the basic building blocks of all instructions, it\nhelps to understand what exactly happens during their execution.\n\nThis is where the \u2018tracelog\u2019 of the Z80 netlist simulation comes in. This is a\nwindow which records and visualizes CPU state (chip pins and register values)\nfor each \u201chalf-clock-cycle\u201d:\n\n### Opcode Fetch Machine Cycles\n\nAn Opcode Fetch looks like this in the tracelog (with all the relevant CPU\nstate visible):\n\n    \n    \n    OPCODE FETCH: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 AB \u2502 DB \u2502 PC \u2502 IR \u2502 I \u2502 R \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 0004 \u2502 47 \u2502 0004 \u2502 47 \u2502 22 \u2502 03 \u2502 \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 0004 \u2502 47 \u2502 0005 \u2502 47 \u2502 22 \u2502 03 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 0004 \u2502 00 \u2502 0005 \u2502 47 \u2502 22 \u2502 03 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 0004 \u2502 00 \u2502 0005 \u2502 00 \u2502 22 \u2502 03 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 2203 \u2502 00 \u2502 0005 \u2502 00 \u2502 22 \u2502 03 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 2203 \u2502 00 \u2502 0005 \u2502 00 \u2502 22 \u2502 04 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 2203 \u2502 00 \u2502 0005 \u2502 00 \u2502 22 \u2502 04 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 2200 \u2502 00 \u2502 0005 \u2502 00 \u2502 22 \u2502 04 \u2502\n\nKeep in mind that this shows half-clock-cycles, a 4-clock-cycle opcode-fetch\nmachine cycle is shown as 8 half-clock-cycles in the trace log.\n\nThe M1, MREQ, RFSH and RD columns show the current state of the respective CPU\npins.\n\nAB and DB are \u201caddress bus\u201d and \u201cdata bus\u201d. IR is an internal register which\nholds the current opcode byte. I and R are the respective CPU registers (I is\nthe upper byte of the interrupt vector, R is the \u2018refresh counter\u2019 register).\n\nLet\u2019s go through each half-cycle of an opcode-fetch machine cycle:\n\n    \n    \n    \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 AB \u2502 DB \u2502 PC \u2502 IR \u2502 I \u2502 R \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 0004 \u2502 47 \u2502 0004 \u2502 47 \u2502 22 \u2502 03 \u2502\n\nThe M1 pin is set to active, and the address bus has been loaded with the\ncurrent program counter (PC). The data bus and instruction register still have\ntheir values from the last instruction (which happened to an LD I,A\ninstruction (byte sequence: ED 47).\n\n    \n    \n    \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 AB \u2502 DB \u2502 PC \u2502 IR \u2502 I \u2502 R \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 0004 \u2502 47 \u2502 0005 \u2502 47 \u2502 22 \u2502 03 \u2502\n\nIn the next half cycle, the MREQ and RD pins have been set in addition to M1,\nwhich initiates a memory read from the address that\u2019s currently on the address\nbus (0004). The program counter has been incremented to the next address.\n\n    \n    \n    \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 AB \u2502 DB \u2502 PC \u2502 IR \u2502 I \u2502 R \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 0004 \u2502 00 \u2502 0005 \u2502 47 \u2502 22 \u2502 03 \u2502\n\nNow the memory system has responded to the MREQ|RD pins being active by\nputting the content of address 0004 onto the data bus, which happens to be 00\n(which is a NOP instruction). The instruction register hasn\u2019t been updated\nyet.\n\n    \n    \n    \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 AB \u2502 DB \u2502 PC \u2502 IR \u2502 I \u2502 R \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 0004 \u2502 00 \u2502 0005 \u2502 00 \u2502 22 \u2502 03 \u2502\n\nIn the next half cycle the 00 value on the data bus has been written into the\ninstruction register (IR). This concludes the first half of the opcode fetch\nmachine cycle.\n\n    \n    \n    \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 AB \u2502 DB \u2502 PC \u2502 IR \u2502 I \u2502 R \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 2203 \u2502 00 \u2502 0005 \u2502 00 \u2502 22 \u2502 03 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 2203 \u2502 00 \u2502 0005 \u2502 00 \u2502 22 \u2502 04 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 2203 \u2502 00 \u2502 0005 \u2502 00 \u2502 22 \u2502 04 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 2200 \u2502 00 \u2502 0005 \u2502 00 \u2502 22 \u2502 04 \u2502\n\nThe remaining 4 half-cycles (2 clock cycles) are spent with the Z80-specific\n\u2018memory refresh\u2019. A 16-bit value made from the registers I and R is put on the\naddress bus, the M1 pin is set to inactive, the MREQ|RFSH pins to active and\nthe R register is incremented. I haven\u2019t figured out so far why the lower 8\nbits on the address bus are cleared in the very last half-clock-cycle (this\nalso happens in the last half-cycle of some other instructions).\n\nLet\u2019s quickly go over the remaining machine cycle types for completeness:\n\n### Memory Read Machine Cycles\n\nA memory read machine cycle looks like this (in this case to load the byte\nvalue 22 from address 0001 into the register L):\n\n    \n    \n    MEM READ: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 MREQ \u2502 RD \u2502 AB \u2502 DB \u2502 HL \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 \u2502 \u2502 0001 \u2502 21 \u2502 5555 \u2502 <== address 0001 on address bus \u2502 1/1 \u2502 MREQ \u2502 RD \u2502 0001 \u2502 21 \u2502 5555 \u2502 <== MREQ|RD active \u2502 2/0 \u2502 MREQ \u2502 RD \u2502 0001 \u2502 22 \u2502 5555 \u2502 <== memory content 22 on data bus \u2502 2/1 \u2502 MREQ \u2502 RD \u2502 0001 \u2502 22 \u2502 5555 \u2502 \u2502 3/0 \u2502 MREQ \u2502 RD \u2502 0001 \u2502 22 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 \u2502 0000 \u2502 22 \u2502 5522 \u2502 <== target register L updated\n\n### Memory Write Machine Cycles\n\nHere\u2019s a memory write machine cycle to store the value in register A (33) into\nthe address in register HL (1122):\n\n    \n    \n    MEM WRITE: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 MREQ \u2502 WR \u2502 AB \u2502 DB \u2502 AF \u2502 HL \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 \u2502 \u2502 1122 \u2502 77 \u2502 3355 \u2502 1122 \u2502 <== address 1122 on address bus \u2502 1/1 \u2502 MREQ \u2502 \u2502 1122 \u2502 33 \u2502 3355 \u2502 1122 \u2502 <== value 33 on data bus \u2502 2/0 \u2502 MREQ \u2502 \u2502 1122 \u2502 33 \u2502 3355 \u2502 1122 \u2502 \u2502 2/1 \u2502 MREQ \u2502 WR \u2502 1122 \u2502 33 \u2502 3355 \u2502 1122 \u2502 <== MREQ|WR active \u2502 3/0 \u2502 MREQ \u2502 WR \u2502 1122 \u2502 33 \u2502 3355 \u2502 1122 \u2502 \u2502 3/1 \u2502 \u2502 \u2502 1122 \u2502 33 \u2502 3355 \u2502 1122 \u2502\n\nNote how the MREQ pin, address and data bus already contain the required\nvalues in the second half cycle (T1/1), but the WR (write) pin is only set\nactive in the 4th half cycle (T2/1).\n\n### IO Read and Write Machine Cycles\n\nThe IO read and write machine cycles look similar, but are one clock cycle\nlonger, and setting the CPU pins is delayed by a half-clock-cycle.\n\n    \n    \n    IO READ: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 IORQ \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 \u2502 \u2502 \u2502 1122 \u2502 78 \u2502 \u2502 1/1 \u2502 \u2502 \u2502 \u2502 1122 \u2502 78 \u2502 \u2502 2/0 \u2502 IORQ \u2502 RD \u2502 \u2502 1122 \u2502 33 \u2502 \u2502 2/1 \u2502 IORQ \u2502 RD \u2502 \u2502 1122 \u2502 33 \u2502 \u2502 3/0 \u2502 IORQ \u2502 RD \u2502 \u2502 1122 \u2502 33 \u2502 \u2502 3/1 \u2502 IORQ \u2502 RD \u2502 \u2502 1122 \u2502 33 \u2502 \u2502 4/0 \u2502 IORQ \u2502 RD \u2502 \u2502 1122 \u2502 33 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 1122 \u2502 33 \u2502\n    \n    \n    IO WRITE: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 IORQ \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 \u2502 \u2502 \u2502 1122 \u2502 79 \u2502 \u2502 1/1 \u2502 \u2502 \u2502 \u2502 1122 \u2502 21 \u2502 \u2502 2/0 \u2502 IORQ \u2502 \u2502 WR \u2502 1122 \u2502 21 \u2502 \u2502 2/1 \u2502 IORQ \u2502 \u2502 WR \u2502 1122 \u2502 21 \u2502 \u2502 3/0 \u2502 IORQ \u2502 \u2502 WR \u2502 1122 \u2502 21 \u2502 \u2502 3/1 \u2502 IORQ \u2502 \u2502 WR \u2502 1122 \u2502 21 \u2502 \u2502 4/0 \u2502 IORQ \u2502 \u2502 WR \u2502 1122 \u2502 21 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 1122 \u2502 21 \u2502\n\nIt\u2019s interesting here that the \u2018pin timing\u2019 is identical between IO reads and\nwrites. The WR pin is activated at the same moment as the IORQ pin, while in\nmemory read machine cycles, the WR pin is activated two half cycles after the\nMREQ pin.\n\n### Wait states\n\nAll machine cycles that access memory or IO ports check the WAIT input pin at\nexactly one half-clock-cycle. If the WAIT pin is active, the execution\n\u2018freezes\u2019 until the WAIT pin goes inactive. The original intent was to give\nslow memory and IO devices time to react, but some computer systems also use\nwait states in more creative ways to arbitrate memory access between CPU and\nvideo hardware (for instance on the Amstrad CPC).\n\nThe exact (half-)clock cycle where the wait pin is sampled depends on the\nmachine cycle type.\n\nIn the opcode fetch machine cycle, the wait pin is sampled in the second half-\ncycle of T2. If the WAIT pin isn\u2019t active in this exact half-cycle, the CPU\nwill not enter wait mode, otherwise the CPU will insert extra \u2018wait cycles\u2019\nuntil the WAIT pin goes inactive.\n\nFor instance if the WAIT pin is only active in the second half cycle of T2,\nthe opcode fetch machine cycle will be stretched from 4 to 5 clock cycles:\n\n    \n    \n    OPCODE FETCH: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 WAIT \u2502 AB \u2502 DB \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 WAIT \u2502 0000 \u2502 31 \u2502 <== WAIT pin sampled here \u2502 3/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 <== one extra clock cycle inserted \u2502 3/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 \u2502 4/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 <== regular execution continues here \u2502 4/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 \u2502 5/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 \u2502 5/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 31 \u2502\n\nIf the wait pin goes inactive in the first half cycle, the CPU will leave the\nwait state mode at the end of the clock cycle:\n\n    \n    \n    OPCODE FETCH: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 WAIT \u2502 AB \u2502 DB \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 WAIT \u2502 0000 \u2502 31 \u2502 <== WAIT pin sampled here \u2502 3/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 WAIT \u2502 0000 \u2502 31 \u2502 <== WAIT pin active for 2 half cycles \u2502 3/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 <== extra clock cycle completes \u2502 4/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 <== regular execution continues here \u2502 4/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 \u2502 5/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 \u2502 5/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 31 \u2502\n\nSetting the WAIT pin until the second half cycle causes one more clock cycle\nto be inserted:\n\n    \n    \n    OPCODE FETCH: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 WAIT \u2502 AB \u2502 DB \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 WAIT \u2502 0000 \u2502 31 \u2502 <== WAIT pin sampled here \u2502 3/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 WAIT \u2502 0000 \u2502 31 \u2502 <== WAIT pin active for 3 half cycles \u2502 3/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 WAIT \u2502 0000 \u2502 31 \u2502 <== first inserted clock cycle completes \u2502 4/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 <== a second wait clock cycle is inserted \u2502 4/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 <== regular execution continues here \u2502 5/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 31 \u2502 \u2502 6/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 31 \u2502\n\nIn memory-read machine-cycles, the WAIT pin is sampled at the second half\ncycle of T2 (same as in an opcode fetch).\n\n    \n    \n    MEM READ: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 MREQ \u2502 RD \u2502 WR \u2502 WAIT \u2502 AB \u2502 DB \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 31 \u2502 \u2502 1/1 \u2502 MREQ \u2502 RD \u2502 \u2502 \u2502 0001 \u2502 31 \u2502 \u2502 2/0 \u2502 MREQ \u2502 RD \u2502 \u2502 \u2502 0001 \u2502 30 \u2502 \u2502 2/1 \u2502 MREQ \u2502 RD \u2502 \u2502 WAIT \u2502 0001 \u2502 30 \u2502 <== WAIT pin sampled here \u2502 3/0 \u2502 MREQ \u2502 RD \u2502 \u2502 \u2502 0001 \u2502 30 \u2502 <== extra clock cycle \u2502 3/1 \u2502 MREQ \u2502 RD \u2502 \u2502 \u2502 0001 \u2502 30 \u2502 \u2502 4/0 \u2502 MREQ \u2502 RD \u2502 \u2502 \u2502 0001 \u2502 30 \u2502 <== regular execution continues \u2502 4/1 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 30 \u2502\n\nIn memory write machine cycles, the WAIT pin is also sampled at the second\nhalf cycle of T2:\n\n    \n    \n    MEM WRITE: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 MREQ \u2502 RD \u2502 WR \u2502 WAIT \u2502 AB \u2502 DB \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 77 \u2502 \u2502 1/1 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 1234 \u2502 11 \u2502 \u2502 2/0 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 1234 \u2502 11 \u2502 \u2502 2/1 \u2502 MREQ \u2502 \u2502 WR \u2502 WAIT \u2502 1234 \u2502 11 \u2502 <== WAIT pin sampled here \u2502 3/0 \u2502 MREQ \u2502 \u2502 WR \u2502 \u2502 1234 \u2502 11 \u2502 <== extra clock cycle \u2502 3/1 \u2502 MREQ \u2502 \u2502 WR \u2502 \u2502 1234 \u2502 11 \u2502 \u2502 4/0 \u2502 MREQ \u2502 \u2502 WR \u2502 \u2502 1234 \u2502 11 \u2502 <== regular execution continues \u2502 4/1 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 11 \u2502\n\nIn IO read and write machine cycles, the WAIT pin is sampled one full clock\ncycle later, at the second half-cycle of T3:\n\n    \n    \n    IO READ: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 IORQ \u2502 RD \u2502 WR \u2502 WAIT \u2502 AB \u2502 DB \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 78 \u2502 \u2502 1/1 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 78 \u2502 \u2502 2/0 \u2502 IORQ \u2502 RD \u2502 \u2502 \u2502 1234 \u2502 FF \u2502 \u2502 2/1 \u2502 IORQ \u2502 RD \u2502 \u2502 \u2502 1234 \u2502 FF \u2502 \u2502 3/0 \u2502 IORQ \u2502 RD \u2502 \u2502 \u2502 1234 \u2502 FF \u2502 \u2502 3/1 \u2502 IORQ \u2502 RD \u2502 \u2502 WAIT \u2502 1234 \u2502 FF \u2502 <== WAIT pin sampled here \u2502 4/0 \u2502 IORQ \u2502 RD \u2502 \u2502 \u2502 1234 \u2502 FF \u2502 <== extra clock cycle \u2502 4/1 \u2502 IORQ \u2502 RD \u2502 \u2502 \u2502 1234 \u2502 FF \u2502 \u2502 5/0 \u2502 IORQ \u2502 RD \u2502 \u2502 \u2502 1234 \u2502 FF \u2502 <== regular execution continues \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 FF \u2502\n    \n    \n    IO WRITE: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 IORQ \u2502 RD \u2502 WR \u2502 WAIT \u2502 AB \u2502 DB \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 79 \u2502 \u2502 1/1 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 11 \u2502 \u2502 2/0 \u2502 IORQ \u2502 \u2502 WR \u2502 \u2502 1234 \u2502 11 \u2502 \u2502 2/1 \u2502 IORQ \u2502 \u2502 WR \u2502 \u2502 1234 \u2502 11 \u2502 \u2502 3/0 \u2502 IORQ \u2502 \u2502 WR \u2502 \u2502 1234 \u2502 11 \u2502 \u2502 3/1 \u2502 IORQ \u2502 \u2502 WR \u2502 WAIT \u2502 1234 \u2502 11 \u2502 <== WAIT pin sampled here \u2502 4/0 \u2502 IORQ \u2502 \u2502 WR \u2502 \u2502 1234 \u2502 11 \u2502 <== extra clock cycle \u2502 4/1 \u2502 IORQ \u2502 \u2502 WR \u2502 \u2502 1234 \u2502 11 \u2502 \u2502 5/0 \u2502 IORQ \u2502 \u2502 WR \u2502 \u2502 1234 \u2502 11 \u2502 <== regular execution continues \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 11 \u2502\n\n### Extra Clock Cycles\n\nWith the knowledge that machine cycles are the basic building blocks of\ninstructions, and the length of those machine cycles we should be able to\npredict the number of clock cycles in an instruction.\n\nFor instance LD HL,nnnn (load 16-bit immediate value into register pair HL)\nconsists of the following machine cycles\n\n  1. opcode fetch (4 clock cycles) to read the opcode byte\n  2. a memory read (3 clock cycles) to read the next byte into L\n  3. and another memory read (3 clock cycles) to read the next byte into H\n\nTogether: 4 + 3 + 3 = 10 clock cycles, which is totally correct.\n\nThe instruction PUSH HL (push content of HL register on the stack) should be\nthe same, except that memory reads are replaced with memory writes:\n\n  1. opcode fetch (4 clock cycles)\n  2. a memory write to write H to the stack\n  3. another memory write to write L to the stack\n\nThis should take 10 clock cycles too, but PUSH HL actually takes 11 clock\ncycles to execute:\n\n    \n    \n    PUSH HL: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 HL \u2502 SP \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 12 \u2502 1234 \u2502 0100 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 12 \u2502 1234 \u2502 0100 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 E5 \u2502 1234 \u2502 0100 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 E5 \u2502 1234 \u2502 0100 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 E5 \u2502 1234 \u2502 0100 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 E5 \u2502 1234 \u2502 0100 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 E5 \u2502 1234 \u2502 0100 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 E5 \u2502 1234 \u2502 0100 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 E5 \u2502 1234 \u2502 0100 \u2502 <== WTF??? \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 E5 \u2502 1234 \u2502 00FF \u2502 <== WTF??? \u2502 6/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FF \u2502 E5 \u2502 1234 \u2502 00FF \u2502 <== memory write \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FF \u2502 12 \u2502 1234 \u2502 00FF \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FF \u2502 12 \u2502 1234 \u2502 00FF \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FF \u2502 12 \u2502 1234 \u2502 00FE \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FF \u2502 12 \u2502 1234 \u2502 00FE \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 12 \u2502 1234 \u2502 00FE \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 E5 \u2502 1234 \u2502 00FE \u2502 <== memory write \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FE \u2502 34 \u2502 1234 \u2502 00FE \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FE \u2502 34 \u2502 1234 \u2502 00FE \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FE \u2502 34 \u2502 1234 \u2502 00FE \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FE \u2502 34 \u2502 1234 \u2502 00FE \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 34 \u2502 1234 \u2502 00FE \u2502\n\nThere\u2019s an additional clock cycle squeezed inbetween the opcode fetch and\nfirst memory read machine cycle which is used to \u2018pre-decrement\u2019 the SP\nregister before the memory write machine cycles can happen.\n\nIt\u2019s little irregularities like this which complicate writing a Z80 emulator.\nIn a cycle correct emulator it is not only important that instructions take\nthe correct number of clock cycles to execute, but also that memory and IO\nreads/writes happen at the correct clock cycle within the instruction.\n\n## Overlapped Execution\n\nIn some instructions, execution \u2018leaks\u2019 into the opcode fetch machine cycle of\nthe next instruction.\n\nFor instance when inspecting the instruction \u2018XOR A\u2019 (which clears the A\nregister and sets flags accordingly) the instruction doesn\u2019t seem to have any\neffect:\n\n    \n    \n    XOR A: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AF \u2502 Flags \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 <== A and Flags not modified! ^^ ^^^^^^^^\n\nXOR A takes 4 clock cycles, yet at the end of the instruction A isn\u2019t zero,\nand the flag bits haven\u2019t been updated either. Here\u2019s the same diagram\nincluding the NOP instruction that follows:\n\n    \n    \n    XOR A + NOP: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AF \u2502 Flags \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 <== XOR A start \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 <== NOP starts here \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 FFAC \u2502 SzYhXVnc \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00AC \u2502 SzYhXVnc \u2502 <== A updated here \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 00AC \u2502 SzYhXVnc \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0044 \u2502 sZyhxVnc \u2502 <== flags updated here \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0044 \u2502 sZyhxVnc \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0044 \u2502 sZyhxVnc \u2502\n\nThe results of the XOR A instruction only become available at the end of the\nsecond and third clock cycles of the following instruction.\n\nThankfully this overlapped execution is hardly relevant for CPU emulators,\nbecause it only affects the internal state of the CPU, not any state that\u2019s\nobservable from the outside.\n\n## The 3 Instruction Subsets\n\nThe Z80 instruction set is really 3 separate subsets each occupying 256 opcode\n\u2018slots\u2019. There\u2019s the main instruction set which mostly overlaps with the Intel\n8080 instruction set and two additional sets of instructions selected with the\nED and CB prefix opcodes.\n\nThe main and CB subsets each occupy the full range of 256 instructions, while\nthe ED subset is mostly empty and only implements 59 instructions.\n\nI\u2019m not counting the DD and FD prefix instruction ranges as separate subsets\nbecause they only slightly modify the behaviour of the main instructions.\n\nThis means there are 571 unique instructions in the Z80 instruction set\n(counting the RETI and RETN instructions as one because they have identical\nbehaviour).\n\n## The 2-3-3 Opcode Bit Pattern\n\nOpcode bytes can be split into three bit groups to reveal a hidden \u2018octal\nstructure\u2019 of a 256 instruction subset:\n\n    \n    \n    7 6 5 4 3 2 1 0 | x x | y y y | z z z |\n\nThe two top-most bits (xx) split the instruction space into 4 quadrants, and\nthe remaining 6 bits are divided into two 3-bit groups (yyy) and (zzz) which\nare used as arguments to the instruction decoder.\n\nLet\u2019s look at each instruction subset and quadrant one by one:\n\n## Main Instructions\n\n### Main Quadrant 1 (xx = 01)\n\nI\u2019m starting with Main Quadrant 1 (not 0) because unlike 0 it is has a simple\nand \u2018orderly\u2019 structure. In an Z80 emulator this is usually the first quadrant\nI\u2019m implementing.\n\nThe 64 instructions with the bit pattern |01|yyy|zzz| implement 8-bit move\ninstructions where yyy defines the target and zzz the source. As a table, the\nmain quadrant 1 looks like this:\n\nx=01| z=000| z=001| z=010| z=011| z=100| z=101| z=110| z=111  \n---|---|---|---|---|---|---|---|---  \ny=000| LD B,B| LD B,C| LD B,D| LD B,E| LD B,H| LD B,L| LD B,(HL)| LD B,A  \ny=001| LD C,B| LD C,C| LD C,D| LD C,E| LD C,H| LD C,L| LD C,(HL)| LD C,A  \ny=010| LD D,B| LD D,C| LD D,D| LD D,E| LD D,H| LD D,L| LD D,(HL)| LD D,A  \ny=011| LD E,B| LD E,C| LD E,D| LD E,E| LD E,H| LD E,L| LD E,(HL)| LD E,A  \ny=100| LD H,B| LD H,C| LD H,D| LD H,E| LD H,H| LD H,L| LD H,(HL)| LD H,A  \ny=101| LD L,B| LD L,C| LD L,D| LD L,E| LD L,H| LD L,L| LD L,(HL)| LD L,A  \ny=110| LD (HL),B| LD (HL),C| LD (HL),D| LD (HL),E| LD (HL),H| LD (HL),L| HALT|\nLD (HL),A  \ny=111| LD A,B| LD A,C| LD A,D| LD A,E| LD A,H| LD A,L| LD A,(HL)| LD A,A  \n  \nI have choosen the green background for instructions that have no \u2018timing\nsurprises\u2019 (like the PUSH HL instruction discussed above). The duration of\n\u2018green\u2019 instructions is simply the sum of their machine cycle default clock\ncycles. All instructions in the Main Quadrant 1 take 4 clock cycles (for the\nopcode fetch), except the instructions involving (HL) which take an additional\nmemory read or write machine cycle, resulting in 7 clock cycles.\n\ny and z are register indices as binary numbers:\n\n    \n    \n    000 = 0 => B 001 = 1 => C 010 = 2 => D 011 = 3 => E 100 = 4 => H 101 = 5 => L 110 = 6 => (HL) 111 = 7 => A\n\nThe \u2018register index\u2019 6 is a bit special. According to the \u2018hardware pattern\u2019\nof the Z80 register bank, index 6 would actually address the F (status flags)\nregister, but this isn\u2019t directly accessible in the instruction set (and\n\u2018wasting\u2019 one index for the F register in most instructions also wouldn\u2019t make\nmuch sense). Instead index 6 is used as special case to load or store the\n8-bit value in memory addressed by the register pair HL.\n\nAnd another oddity is the HALT instruction at bit pattern |01|110|110| (== 76\nhex). Following the \u2018table logic\u2019 this instruction slot should be occupied by\nan LD (HL),(HL) instruction which doesn\u2019t make a lot of sense, so instead this\nslot was reused for the HALT instruction.\n\n### Main Quadrant 2 (xx = 10)\n\nThis is the second \u2018beautiful\u2019 quadrant in the main instruction set, this is\nwhere the basic 8-bit ALU instructions live:\n\nx=10| z=000| z=001| z=010| z=011| z=100| z=101| z=110| z=111  \n---|---|---|---|---|---|---|---|---  \ny=000| ADD B| ADD C| ADD D| ADD E| ADD H| ADD L| ADD (HL)| ADD A  \ny=001| ADC B| ADC C| ADC D| ADC E| ADC H| ADC L| ADC (HL)| ADC A  \ny=010| SUB B| SUB C| SUB D| SUB E| SUB H| SUB L| SUB (HL)| SUB A  \ny=011| SBC B| SBC C| SBC D| SBC E| SBC H| SBC L| SBC (HL)| SBC A  \ny=100| AND B| AND C| AND D| AND E| AND H| AND L| AND (HL)| AND A  \ny=101| XOR B| XOR C| XOR D| XOR E| XOR H| XOR L| XOR (HL)| XOR A  \ny=110| OR B| OR C| OR D| OR E| OR H| OR L| OR (HL)| OR A  \ny=111| CP B| CP C| CP D| CP E| CP H| CP L| CP (HL)| CP A  \n  \nAgain, no timing surprises in this quadrant. The z bit group selects the\nsource register or (HL), and the y bit group the ALU operation:\n\n    \n    \n    000 => 0 => ADD 001 => 1 => ADC (add with carry) 010 => 2 => SUB 011 => 3 => SBC (sub with carry) 100 => 4 => AND 101 => 5 => XOR 110 => 6 => OR 111 => 7 => CP (compare - like SUB, but discard result)\n\nThis table also demonstrates nicely why all ALU operations implicitely use the\nregister A to store the result. There\u2019s simply no bits left in the 8-bit\nopcode to select a destination register.\n\n### Main Quadrant 0 (xx = 00)\n\nThis is the first of the two \u2018messy\u2019 quadrants in the main set:\n\nx=00| z=000| z=001| z=010| z=011| z=100| z=101| z=110| z=111  \n---|---|---|---|---|---|---|---|---  \ny=000| NOP| LD BC,nn| LD (BC),A| INC BC| INC B| DEC B| LD B,n| RLCA  \ny=001| EX AF,AF'| ADD HL,BC| LD A,(BC)| DEC BC| INC C| DEC C| LD C,n| RRCA  \ny=010| DJNZ d| LD DE,nn| LD (DE),A| INC DE| INC D| DEC D| LD D,n| RLA  \ny=011| JR d| ADD HL,DE| LD A,(DE)| DEC DE| INC E| DEC E| LD E,n| RRA  \ny=100| JR NZ,d| LD HL,nn| LD (nn),HL| INC HL| INC H| DEC H| LD H,n| DAA  \ny=101| JR Z,d| ADD HL,HL| LD HL,(nn)| DEC HL| INC L| DEC L| LD L,n| CPL  \ny=110| JR NC,d| LD SP,nn| LD (nn),A| INC SP| INC (HL)| DEC (HL)| LD (HL),n|\nSCF  \ny=111| JR C,d| ADD HL,SP| LD A,(nn)| DEC SP| INC A| DEC A| LD A,n| CCF  \n  \nThe red background color means that those instructions insert extra clock\ncycles between regular memory or IO machine cycles and need to be handled with\nspecial care in cycle-correct emulators. For the rest of the blog post I will\nfocus on those \u2018red\u2019 instructions (because the timing of the \u2018green\u2019\ninstructions can trivially be derived from the instruction\u2019s machine cycles).\n\n#### INC/DEC (HL)\n\nThe INC (HL) and DEC (HL) instructions stick out, those are read-modify-write\ninstructions. Let\u2019s see why they have a red background:\n\n    \n    \n    INC (HL): \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 12 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 12 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 34 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 34 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 34 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 34 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 34 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 34 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 34 \u2502 <== memory read \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1234 \u2502 34 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1234 \u2502 00 \u2502 \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1234 \u2502 00 \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1234 \u2502 00 \u2502 \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 00 \u2502 \u2502 8/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 00 \u2502 <== extra clock cycle \u2502 8/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 00 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 00 \u2502 <== memory write \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 1234 \u2502 01 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 1234 \u2502 01 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 1234 \u2502 01 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 1234 \u2502 01 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1234 \u2502 01 \u2502\n\nAs expected, there\u2019s an opcode fetch, memory read and memory write machine\ncycle. An extra clock cycle has been squeezed inbetween the read and write\nmachine cycle, no doubt to increment the byte that\u2019s been loaded from memory\nbefore it is written back.\n\n#### INC/DEC ss\n\nThe 16-bit INC/DEC column adds two additional clock cycles after the opcode\nfetch machine cycle to perform the 16-bit math:\n\n    \n    \n    INC BC: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 BC \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 FF \u2502 FFFF \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 FF \u2502 FFFF \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 03 \u2502 FFFF \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 03 \u2502 FFFF \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 03 \u2502 FFFF \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 03 \u2502 FFFF \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 03 \u2502 FFFF \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 03 \u2502 FFFF \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 03 \u2502 FFFF \u2502 <== 2 extra clock cycles \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 03 \u2502 0000 \u2502 \u2502 6/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 03 \u2502 0000 \u2502 \u2502 6/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 03 \u2502 0000 \u2502\n\nIt\u2019s interesting that the result is already available at the end of the first\nextra clock cycle. No idea why there\u2019s a second \u2018wasted\u2019 clock cycle,\nespecially since the 16-bit INC/DEC instructions don\u2019t update the flag bits.\n\n#### ADD HL,ss\n\nThe 16-bit ADD instructions add 7 extra clock cycles after the opcode fetch\nmachine cycle:\n\n    \n    \n    ADD HL,DE \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 DE \u2502 HL \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 22 \u2502 2222 \u2502 1111 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 22 \u2502 2222 \u2502 1111 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 19 \u2502 2222 \u2502 1111 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 19 \u2502 2222 \u2502 1111 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1111 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1111 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1111 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1111 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1111 \u2502 <== 7 extra clock cycles \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1111 \u2502 \u2502 6/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1111 \u2502 \u2502 6/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1111 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1111 \u2502 \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1133 \u2502 <== result low byte \u2502 8/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1133 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1133 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1133 \u2502 \u2502 9/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1133 \u2502 \u250210/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1133 \u2502 \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1133 \u2502 \u250211/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 1133 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 19 \u2502 2222 \u2502 3333 \u2502 <== result high byte\n\nThis time, no clock cycles are wasted. The 16-bit result is only ready in the\nvery last half cycle of the instruction. Not shown here is that the flag bits\n(H and C) are updated in the opcode fetch machine cycle of the next\ninstruction (at M1/T3/1).\n\n#### JR d\n\nThe relative jump JR d performs a regular memory read machine cycle after the\nopcode fetch, and then spends 5 more clock cycles to compute the jump target\naddress:\n\n    \n    \n    JR d \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 00 \u2502 0002 \u2502 5555 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 00 \u2502 0003 \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 18 \u2502 0003 \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 18 \u2502 0003 \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 18 \u2502 0003 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 18 \u2502 0003 \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 18 \u2502 0003 \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 18 \u2502 0003 \u2502 5555 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 18 \u2502 0003 \u2502 5555 \u2502 <== memory ready \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 18 \u2502 0004 \u2502 5555 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5555 \u2502 \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5555 \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5555 \u2502 \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5555 \u2502 \u2502 8/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5555 \u2502 <== 5 extra clock cycles \u2502 8/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5555 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5555 \u2502 \u2502 9/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5500 \u2502 \u250210/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5500 \u2502 \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5500 \u2502 \u250211/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5500 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5500 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 FC \u2502 0004 \u2502 5500 \u2502 \u250212/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 FC \u2502 0004 \u2502 0000 \u2502 <== dst addr in WZ\n\nThe computed target address isn\u2019t stored in the PC register, but instead in\nthe internal 16-bit \u2018helper\u2019 register WZ. In fact the PC register never\ncontains the actual target address (0000), it switches straight from the\naddress following the JR d instruction (0004) to the address following the\ndestination address:\n\n    \n    \n    JR d CONTINUED: NOP at the jump destination (address 0000) \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 FC \u2502 0004 \u2502 0000 \u2502 <== PC still 0004! \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 FC \u2502 0001 \u2502 0000 \u2502 <== PC goes right to 0001! \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 00 \u2502 0001 \u2502 0000 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 00 \u2502 0001 \u2502 0000 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0001 \u2502 0000 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0001 \u2502 0000 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0001 \u2502 0000 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 0001 \u2502 0000 \u2502\n\n#### DJNZ d\n\nThe DJNZ d instruction (Decrement-and-Jump-if-Not-Zero) inserts one clock\ncycle between the opcode fetch and memory read machine cycle, and if the\nbranch is taken, 5 additional clock cycles (this branch part is identical with\nthe JR instruction):\n\n    \n    \n    DJNZ d - branch taken: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 BC \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0003 \u2502 0255 \u2502 5555 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 00 \u2502 0004 \u2502 0255 \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 10 \u2502 0004 \u2502 0255 \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 10 \u2502 0004 \u2502 0255 \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 10 \u2502 0004 \u2502 0255 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 10 \u2502 0004 \u2502 0255 \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 10 \u2502 0004 \u2502 0255 \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 10 \u2502 0004 \u2502 0255 \u2502 5555 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 10 \u2502 0004 \u2502 0255 \u2502 5555 \u2502 <== 1 extra clock cycle \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 10 \u2502 0004 \u2502 0255 \u2502 5555 \u2502 \u2502 6/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 10 \u2502 0004 \u2502 0255 \u2502 5555 \u2502 <== memory read \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 10 \u2502 0005 \u2502 0155 \u2502 5555 \u2502 <== B decremented \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5555 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5555 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5555 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5555 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5555 \u2502 <== 5 extra clock cycles \u2502 9/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5555 \u2502 \u250210/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5555 \u2502 \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5502 \u2502 \u250211/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5502 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5502 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5502 \u2502 \u250212/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5502 \u2502 \u250213/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 5502 \u2502 \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0155 \u2502 0002 \u2502 <== dst addr in WZ\n\nIf the branch is not taken, DJNZ is finished right after the memory read:\n\n    \n    \n    DJNZ d - branch not taken: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 BC \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0003 \u2502 0155 \u2502 0002 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 00 \u2502 0004 \u2502 0155 \u2502 0002 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 10 \u2502 0004 \u2502 0155 \u2502 0002 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 10 \u2502 0004 \u2502 0155 \u2502 0002 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 10 \u2502 0004 \u2502 0155 \u2502 0002 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 10 \u2502 0004 \u2502 0155 \u2502 0002 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 10 \u2502 0004 \u2502 0155 \u2502 0002 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 10 \u2502 0004 \u2502 0155 \u2502 0002 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 10 \u2502 0004 \u2502 0155 \u2502 0002 \u2502 <== 1 extra clock cycle \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 10 \u2502 0004 \u2502 0155 \u2502 0002 \u2502 \u2502 6/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 10 \u2502 0004 \u2502 0155 \u2502 0002 \u2502 <== memory read \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 10 \u2502 0005 \u2502 0055 \u2502 0002 \u2502 <== B decremented \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0055 \u2502 0002 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0055 \u2502 0002 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0055 \u2502 0002 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0055 \u2502 0002 \u2502\n\n#### JR cc,d\n\nIn the conditional relative jump instruction JR cc,d, the memory read directly\nfollows the opcode fetch. If the branch is taken, 5 clock cycles are added,\notherwise the instruction ends with the memory read machine cycle (so the\nbranch behaviour is identical with DJNZ and JR):\n\n    \n    \n    JR cc,d - branch taken \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 05 \u2502 0003 \u2502 5555 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 05 \u2502 0004 \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 20 \u2502 0004 \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 20 \u2502 0004 \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 20 \u2502 0004 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 20 \u2502 0004 \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 20 \u2502 0004 \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 20 \u2502 0004 \u2502 5555 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 20 \u2502 0004 \u2502 5555 \u2502 <== memory read \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 20 \u2502 0005 \u2502 5555 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5555 \u2502 \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5555 \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5555 \u2502 \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5555 \u2502 \u2502 8/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5555 \u2502 <== 5 extra clock cycles \u2502 8/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5555 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5555 \u2502 \u2502 9/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5502 \u2502 \u250210/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5502 \u2502 \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5502 \u2502 \u250211/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5502 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5502 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5502 \u2502 \u250212/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 0002 \u2502 <== dest addr in WZ\n    \n    \n    JR cc,d - branch not taken \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 05 \u2502 0003 \u2502 5555 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 05 \u2502 0004 \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 20 \u2502 0004 \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 20 \u2502 0004 \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 20 \u2502 0004 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 20 \u2502 0004 \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 20 \u2502 0004 \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 20 \u2502 0004 \u2502 5555 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 20 \u2502 0004 \u2502 5555 \u2502 <== memory read \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 20 \u2502 0005 \u2502 5555 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5555 \u2502 \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5555 \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5555 \u2502 \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 FD \u2502 0005 \u2502 5555 \u2502\n\n### Main Quadrant 3 (xx == 11)\n\nx=11| z=000| z=001| z=010| z=011| z=100| z=101| z=110| z=111  \n---|---|---|---|---|---|---|---|---  \ny=000| RET NZ| POP BC| JP NZ,nn| JP nn| CALL NZ,nn| PUSH BC| ADD n| RST 0h  \ny=001| RET Z| RET| JP Z,nn| CB prefix| CALL Z,nn| CALL nn| ADC n| RST 8h  \ny=010| RET NC| POP DE| JP NC,nn| OUT (n),A| CALL NC,nn| PUSH DE| SUB n| RST\n10h  \ny=011| RET C| EXX| JP C,nn| IN A,(n)| CALL C,nn| DD prefix| SBC n| RST 18h  \ny=100| RET PO| POP HL| JP PO,nn| EX (SP),HL| CALL PO,nn| PUSH HL| AND n| RST\n20h  \ny=101| RET PE| JP HL| JP PE,nn| EX DE,HL| CALL PE,nn| ED prefix| XOR n| RST\n28h  \ny=110| RET P| POP AF| JP P,nn| DI| CALL P,nn| PUSH AF| OR n| RST 30h  \ny=111| RET M| LD SP,HL| JP M,nn| EI| CALL M,nn| FD prefix| CP n| RST 38h  \n  \n#### CALL nn\n\nThe CALL nn instruction inserts one clock cycle between the last memory read\nmachine cycle (to load the destination address) and the first memory write\nmachine cycle (to store the return address on the stack). The destination\naddress is stored in WZ:\n\n    \n    \n    CALL nn \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 SP \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 0000 \u2502 0100 \u2502 5555 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 00 \u2502 0001 \u2502 0100 \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 CD \u2502 0001 \u2502 0100 \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 CD \u2502 0001 \u2502 0100 \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 CD \u2502 0001 \u2502 0100 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 CD \u2502 0001 \u2502 0100 \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 CD \u2502 0001 \u2502 0100 \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 CD \u2502 0001 \u2502 0100 \u2502 5555 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 CD \u2502 0001 \u2502 0100 \u2502 5555 \u2502 <== memory read \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 CD \u2502 0002 \u2502 0100 \u2502 5555 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 22 \u2502 0002 \u2502 0100 \u2502 5555 \u2502 \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 22 \u2502 0002 \u2502 0100 \u2502 5555 \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 22 \u2502 0002 \u2502 0100 \u2502 5555 \u2502 \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 22 \u2502 0002 \u2502 0100 \u2502 5522 \u2502 \u2502 8/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 22 \u2502 0002 \u2502 0100 \u2502 5522 \u2502 <== memory read \u2502 8/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 22 \u2502 0003 \u2502 0100 \u2502 5522 \u2502 \u2502 9/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 11 \u2502 0003 \u2502 0100 \u2502 5522 \u2502 \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 11 \u2502 0003 \u2502 0100 \u2502 5522 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 11 \u2502 0003 \u2502 0100 \u2502 5522 \u2502 \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 11 \u2502 0003 \u2502 0100 \u2502 1122 \u2502 <== branch target in WZ \u250211/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 11 \u2502 0003 \u2502 0100 \u2502 1122 \u2502 <== extra clock cycle \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 11 \u2502 0003 \u2502 00FF \u2502 1122 \u2502 <== SP pre-decremented \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 11 \u2502 0003 \u2502 00FF \u2502 1122 \u2502 <== memory write \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0003 \u2502 00FF \u2502 1122 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0003 \u2502 00FF \u2502 1122 \u2502 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 5554 \u2502 00 \u2502 0003 \u2502 00FE \u2502 1122 \u2502 \u250214/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 5554 \u2502 00 \u2502 0003 \u2502 00FE \u2502 1122 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5550 \u2502 00 \u2502 0003 \u2502 00FE \u2502 1122 \u2502 \u250215/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 11 \u2502 0003 \u2502 00FE \u2502 1122 \u2502 <== memory write \u250215/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 5553 \u2502 03 \u2502 0003 \u2502 00FE \u2502 1122 \u2502 \u250216/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 5553 \u2502 03 \u2502 0003 \u2502 00FE \u2502 1122 \u2502 \u250216/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 5553 \u2502 03 \u2502 0003 \u2502 00FE \u2502 1122 \u2502 \u250217/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 5553 \u2502 03 \u2502 0003 \u2502 00FE \u2502 1122 \u2502 \u250217/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 03 \u2502 0003 \u2502 00FE \u2502 1122 \u2502\n\nLike in other branch instructions, the PC register isn\u2019t updated in the\ninstruction, instead it switches to dst addr + 1 in the second half cycle of\nthe first subroutine instruction:\n\n    \n    \n    CALL nn - continued (first opcode fetch in subroutine) \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 1122 \u2502 11 \u2502 0003 \u2502 1122 \u2502 <== PC still at CALL nn + 1 \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1122 \u2502 11 \u2502 1123 \u2502 1122 \u2502 <== PC now at dst addr + 1 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1122 \u2502 C9 \u2502 1123 \u2502 1122 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1122 \u2502 C9 \u2502 1123 \u2502 1122 \u2502\n\n#### CALL cc,nn\n\nThe conditional CALL cc,nn instruction is exactly identical with the\nunconditional CALL nn instruction if the condition is true. Otherwise the\ninstruction exits early after the second memory read:\n\n    \n    \n    CALL NZ,nn - branch not taken \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 05 \u2502 0003 \u2502 5555 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 05 \u2502 0004 \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 CC \u2502 0004 \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 CC \u2502 0004 \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 CC \u2502 0004 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 CC \u2502 0004 \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 CC \u2502 0004 \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 CC \u2502 0004 \u2502 5555 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 CC \u2502 0004 \u2502 5555 \u2502 <== memory read \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 CC \u2502 0005 \u2502 5555 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 0B \u2502 0005 \u2502 5555 \u2502 \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 0B \u2502 0005 \u2502 5555 \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 0B \u2502 0005 \u2502 5555 \u2502 \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 0B \u2502 0005 \u2502 550B \u2502 \u2502 8/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0005 \u2502 0B \u2502 0005 \u2502 550B \u2502 <== memory read \u2502 8/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0005 \u2502 0B \u2502 0006 \u2502 550B \u2502 \u2502 9/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0005 \u2502 00 \u2502 0006 \u2502 550B \u2502 \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0005 \u2502 00 \u2502 0006 \u2502 550B \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0005 \u2502 00 \u2502 0006 \u2502 550B \u2502 \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 0006 \u2502 000B \u2502 <== dst addr in WZ\n\n#### RET cc\n\nThe conditional return instructions RET cc adds or inserts one clock cycle\nafter the opcode fetch. If the condition is false the instruction ends here,\notherwise two more memory read machine cycles are added to load the return\naddress from the stack into WZ.\n\n    \n    \n    RET Z - condition false \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 SP \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 000C \u2502 05 \u2502 000C \u2502 00FE \u2502 0009 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000C \u2502 05 \u2502 000D \u2502 00FE \u2502 0009 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000C \u2502 C8 \u2502 000D \u2502 00FE \u2502 0009 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000C \u2502 C8 \u2502 000D \u2502 00FE \u2502 0009 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 C8 \u2502 000D \u2502 00FE \u2502 0009 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 C8 \u2502 000D \u2502 00FE \u2502 0009 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 C8 \u2502 000D \u2502 00FE \u2502 0009 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 C8 \u2502 000D \u2502 00FE \u2502 0009 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 C8 \u2502 000D \u2502 00FE \u2502 0009 \u2502 <== one extra clock cycle \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 C8 \u2502 000D \u2502 00FE \u2502 0009 \u2502\n    \n    \n    RET Z - condition true \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 SP \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 2005 \u2502 05 \u2502 2005 \u2502 00FE \u2502 2000 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 2005 \u2502 05 \u2502 2006 \u2502 00FE \u2502 2000 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 2005 \u2502 C8 \u2502 2006 \u2502 00FE \u2502 2000 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 2004 \u2502 C8 \u2502 2006 \u2502 00FE \u2502 2000 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0006 \u2502 C8 \u2502 2006 \u2502 00FE \u2502 2000 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0006 \u2502 C8 \u2502 2006 \u2502 00FE \u2502 2000 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0006 \u2502 C8 \u2502 2006 \u2502 00FE \u2502 2000 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0006 \u2502 C8 \u2502 2006 \u2502 00FE \u2502 2000 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 C8 \u2502 2006 \u2502 00FE \u2502 2000 \u2502 <== one extra clock cycle \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 C8 \u2502 2006 \u2502 00FE \u2502 2000 \u2502 \u2502 6/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 C8 \u2502 2006 \u2502 00FE \u2502 2000 \u2502 <== memory read \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FE \u2502 C8 \u2502 2006 \u2502 00FE \u2502 2000 \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FE \u2502 06 \u2502 2006 \u2502 00FE \u2502 2000 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FE \u2502 06 \u2502 2006 \u2502 00FF \u2502 2000 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FE \u2502 06 \u2502 2006 \u2502 00FF \u2502 2000 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 06 \u2502 2006 \u2502 00FF \u2502 2006 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FF \u2502 06 \u2502 2006 \u2502 00FF \u2502 2006 \u2502 <== memory read \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FF \u2502 06 \u2502 2006 \u2502 00FF \u2502 2006 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FF \u2502 00 \u2502 2006 \u2502 00FF \u2502 2006 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FF \u2502 00 \u2502 2006 \u2502 0100 \u2502 2006 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FF \u2502 00 \u2502 2006 \u2502 0100 \u2502 2006 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 2006 \u2502 0100 \u2502 0006 \u2502 <== ret addr in WZ\n\n#### LD SP,HL\n\nThe LD SP,HL instruction just adds two clock cycles after the opcode fetch:\n\n    \n    \n    LD SP,HL \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 HL \u2502 SP \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 11 \u2502 0003 \u2502 1122 \u2502 5555 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 11 \u2502 0004 \u2502 1122 \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 F9 \u2502 0004 \u2502 1122 \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 F9 \u2502 0004 \u2502 1122 \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 F9 \u2502 0004 \u2502 1122 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 F9 \u2502 0004 \u2502 1122 \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 F9 \u2502 0004 \u2502 1122 \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 F9 \u2502 0004 \u2502 1122 \u2502 5555 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 F9 \u2502 0004 \u2502 1122 \u2502 5555 \u2502 <== 2 extra clock cycles \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 F9 \u2502 0004 \u2502 1122 \u2502 1122 \u2502 \u2502 6/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 F9 \u2502 0004 \u2502 1122 \u2502 1122 \u2502 \u2502 6/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 F9 \u2502 0004 \u2502 1122 \u2502 1122 \u2502\n\n#### EX (SP),HL\n\nThe EX (SP),HL instruction inserts one clock cycle between the last memory\nread and first memory write machine cycle, and adds 2 more clock cycles after\nthe last memory write. The WZ register is used as intermediate storage for the\n16-bit value read from the stack:\n\n    \n    \n    EX (SP),HL \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 HL \u2502 SP \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 000A \u2502 D5 \u2502 000A \u2502 4321 \u2502 00FE \u2502 5555 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 D5 \u2502 000B \u2502 4321 \u2502 00FE \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 E3 \u2502 000B \u2502 4321 \u2502 00FE \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 E3 \u2502 000B \u2502 4321 \u2502 00FE \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 E3 \u2502 000B \u2502 4321 \u2502 00FE \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 E3 \u2502 000B \u2502 4321 \u2502 00FE \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 E3 \u2502 000B \u2502 4321 \u2502 00FE \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 E3 \u2502 000B \u2502 4321 \u2502 00FE \u2502 5555 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 E3 \u2502 000B \u2502 4321 \u2502 00FE \u2502 5555 \u2502 <== memory read \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FE \u2502 E3 \u2502 000B \u2502 4321 \u2502 00FE \u2502 5555 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FE \u2502 34 \u2502 000B \u2502 4321 \u2502 00FE \u2502 5555 \u2502 \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FE \u2502 34 \u2502 000B \u2502 4321 \u2502 00FE \u2502 00FF \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FE \u2502 34 \u2502 000B \u2502 4321 \u2502 00FE \u2502 00FF \u2502 \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 34 \u2502 000B \u2502 4321 \u2502 00FE \u2502 0034 \u2502 <== Z: low byte from stack \u2502 8/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FF \u2502 34 \u2502 000B \u2502 4321 \u2502 00FE \u2502 0034 \u2502 <== memory read \u2502 8/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FF \u2502 34 \u2502 000B \u2502 4321 \u2502 00FE \u2502 0034 \u2502 \u2502 9/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FF \u2502 12 \u2502 000B \u2502 4321 \u2502 00FE \u2502 0034 \u2502 \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FF \u2502 12 \u2502 000B \u2502 4321 \u2502 00FE \u2502 0034 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 00FF \u2502 12 \u2502 000B \u2502 4321 \u2502 00FE \u2502 0034 \u2502 \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FF \u2502 12 \u2502 000B \u2502 4321 \u2502 00FE \u2502 1234 \u2502 <== WZ: 16 bit value from stack \u250211/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FF \u2502 12 \u2502 000B \u2502 4321 \u2502 00FE \u2502 1234 \u2502 <== extra clock cycle \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 12 \u2502 000B \u2502 4321 \u2502 00FF \u2502 1234 \u2502 <== SP incremented \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FF \u2502 12 \u2502 000B \u2502 4321 \u2502 00FF \u2502 1234 \u2502 <== memory write (L => stack) \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FF \u2502 43 \u2502 000B \u2502 4321 \u2502 00FF \u2502 1234 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FF \u2502 43 \u2502 000B \u2502 4321 \u2502 00FF \u2502 1234 \u2502 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FF \u2502 43 \u2502 000B \u2502 4321 \u2502 00FE \u2502 1234 \u2502 <== SP decremented again \u250214/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FF \u2502 43 \u2502 000B \u2502 4321 \u2502 00FE \u2502 1234 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 43 \u2502 000B \u2502 4321 \u2502 00FE \u2502 1234 \u2502 \u250215/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 12 \u2502 000B \u2502 4321 \u2502 00FE \u2502 1234 \u2502 <== memory write (H => stack) \u250215/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FE \u2502 21 \u2502 000B \u2502 4321 \u2502 00FE \u2502 1234 \u2502 \u250216/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FE \u2502 21 \u2502 000B \u2502 4321 \u2502 00FE \u2502 1234 \u2502 \u250216/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FE \u2502 21 \u2502 000B \u2502 4321 \u2502 00FE \u2502 1234 \u2502 \u250217/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FE \u2502 21 \u2502 000B \u2502 4321 \u2502 00FE \u2502 1234 \u2502 \u250217/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 21 \u2502 000B \u2502 4321 \u2502 00FE \u2502 1234 \u2502 \u250218/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 21 \u2502 000B \u2502 4321 \u2502 00FE \u2502 1234 \u2502 <== two extra clock cycles \u250218/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 21 \u2502 000B \u2502 1234 \u2502 00FE \u2502 1234 \u2502 <== WZ => HL \u250219/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 21 \u2502 000B \u2502 1234 \u2502 00FE \u2502 1234 \u2502 \u250219/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0034 \u2502 21 \u2502 000B \u2502 1234 \u2502 00FE \u2502 1234 \u2502\n\n#### PUSH qq\n\nThe PUSH instruction inserts one clock cycle between the opcode fetch and\nfirst memory write machine cycle:\n\n    \n    \n    PUSH DE: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 DE \u2502 SP \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 12 \u2502 0006 \u2502 1234 \u2502 0100 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 12 \u2502 0007 \u2502 1234 \u2502 0100 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 D5 \u2502 0007 \u2502 1234 \u2502 0100 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 D5 \u2502 0007 \u2502 1234 \u2502 0100 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 D5 \u2502 0007 \u2502 1234 \u2502 0100 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 D5 \u2502 0007 \u2502 1234 \u2502 0100 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 D5 \u2502 0007 \u2502 1234 \u2502 0100 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 D5 \u2502 0007 \u2502 1234 \u2502 0100 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 D5 \u2502 0007 \u2502 1234 \u2502 0100 \u2502 <== extra clock cycle \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 D5 \u2502 0007 \u2502 1234 \u2502 00FF \u2502 <== SP pre-decremented \u2502 6/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FF \u2502 D5 \u2502 0007 \u2502 1234 \u2502 00FF \u2502 <== memory write \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FF \u2502 12 \u2502 0007 \u2502 1234 \u2502 00FF \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FF \u2502 12 \u2502 0007 \u2502 1234 \u2502 00FF \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FF \u2502 12 \u2502 0007 \u2502 1234 \u2502 00FE \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FF \u2502 12 \u2502 0007 \u2502 1234 \u2502 00FE \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 12 \u2502 0007 \u2502 1234 \u2502 00FE \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 D5 \u2502 0007 \u2502 1234 \u2502 00FE \u2502 <== memory write \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FE \u2502 34 \u2502 0007 \u2502 1234 \u2502 00FE \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FE \u2502 34 \u2502 0007 \u2502 1234 \u2502 00FE \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FE \u2502 34 \u2502 0007 \u2502 1234 \u2502 00FE \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FE \u2502 34 \u2502 0007 \u2502 1234 \u2502 00FE \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 34 \u2502 0007 \u2502 1234 \u2502 00FE \u2502\n\n#### RST p\n\nThe RST p instructions insert one clock cycle between the opcode fetch and\nfirst memory write machine cycle to pre-decrement the stack pointer. The WZ\nregister is used as temporary storage of the destination address:\n\n    \n    \n    RST 20h \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 SP \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 01 \u2502 0003 \u2502 0100 \u2502 5555 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 01 \u2502 0004 \u2502 0100 \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 E7 \u2502 0004 \u2502 0100 \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 E7 \u2502 0004 \u2502 0100 \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 E7 \u2502 0004 \u2502 0100 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 E7 \u2502 0004 \u2502 0100 \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 E7 \u2502 0004 \u2502 0100 \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 E7 \u2502 0004 \u2502 0100 \u2502 5555 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 E7 \u2502 0004 \u2502 0100 \u2502 5555 \u2502 <== extra clock cycle \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 E7 \u2502 0004 \u2502 00FF \u2502 5555 \u2502 <== SP pre-decremented \u2502 6/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FF \u2502 E7 \u2502 0004 \u2502 00FF \u2502 5555 \u2502 <== memory write \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FF \u2502 00 \u2502 0004 \u2502 00FF \u2502 5555 \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FF \u2502 00 \u2502 0004 \u2502 00FF \u2502 5555 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FF \u2502 00 \u2502 0004 \u2502 00FE \u2502 5555 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FF \u2502 00 \u2502 0004 \u2502 00FE \u2502 5555 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 00 \u2502 0004 \u2502 00FE \u2502 5520 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 E7 \u2502 0004 \u2502 00FE \u2502 5520 \u2502 <== memory write \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FE \u2502 04 \u2502 0004 \u2502 00FE \u2502 5520 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 00FE \u2502 04 \u2502 0004 \u2502 00FE \u2502 5520 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FE \u2502 04 \u2502 0004 \u2502 00FE \u2502 5520 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 00FE \u2502 04 \u2502 0004 \u2502 00FE \u2502 5520 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 00FE \u2502 04 \u2502 0004 \u2502 00FE \u2502 0020 \u2502 <== WZ dst addr\n\nLike in other branch instructions, PC isn\u2019t updated within the instruction,\ninstead it switches from the address following the RST instruction to the\ndestination address + 1 in the second half-cycle of the first subroutine\nopcode fetch:\n\n    \n    \n    RST 20h - continued into subroutine \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 SP \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0020 \u2502 E7 \u2502 0004 \u2502 00FE \u2502 0020 \u2502 <== opcode fetch, PC still at RST 20h + 1 \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0020 \u2502 E7 \u2502 0021 \u2502 00FE \u2502 0020 \u2502 <== PC now at dst addr + 1 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0020 \u2502 C9 \u2502 0021 \u2502 00FE \u2502 0020 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0020 \u2502 C9 \u2502 0021 \u2502 00FE \u2502 0020 \u2502\n\n## Prefix Instruction Overview\n\nAll prefix bytes (CB, DD, ED, FD) execute as regular 4-cycle instruction,\nexcept:\n\n  * no interrupts are handled at the end of the prefix instruction\n  * the decoding of the following opcode is modified:\n\n    * the ED and CB prefixes each select an entirely different instruction subset\n    * the DD and FD prefix select the main instruction subset but replace usage of HL with IX or IY (highly simplified, see the DD/FD section for details)\n    * the ED prefix cancels any \u201cactive effects\u201d of the DD and FD prefixes (for instance the byte sequence DD ED B0 doesn\u2019t cause the LDIR instruction to use IX instead of HL)\n\nSequences of the same prefix byte sometimes behave unexpected:\n\n  * Sequences of DD or FD, or a mix of them inhibit interrupt handling until the end of the instruction following the DD/FD sequence. The following instruction will be modified depending on the last prefix byte in the sequence. DD and FD prefixes don\u2019t \u2018stack\u2019, e.g. it\u2019s not possible to load the 16-bit value 3333h into both IX and IY with the following byte sequence: DD FD 21 33 33, instead the FD prefix cancels the effect of the DD prefix, and only the IY register is loaded with the value.\n\n  * Sequences of ED prefixes will be interpreted as pairs of ED ED opcode bytes (which simply acts as an 8-cycle NOP)\n\n  * Sequences of CB prefixes will be interpreted as pairs of CB CB which is the regular SET 1,E instruction\n\n  * DD/FD CB sequences result in the most weird behaviour and deserve their own section\n\nThe special \u2018chaining behaviour\u2019 of the DD and FD prefixes is simply a side\neffect of those prefixes not switching to a different instruction subset. If\nthe next byte is a DD, ED, CB or FD, it will be execute as the respective\nprefix instruction.\n\n## DD and FD Prefixes\n\nThe DD and FD prefix instructions modify the behaviour of the following opcode\nbyte as follows:\n\nAll uses of the L, H, HL and (HL) will be replaced with IXL, IXH, IX and\n(IX+d) (for the DD prefix), or IYL, IYH, IY and (IY+d) (for the FD prefix),\nwith the following exceptions:\n\n  * If (HL) and L or H are used in the same instruction, L and H are not replaced with IXL or IXH, for instance LD L,(IX+d) stores the content of (IX+d) into L, not IXL.\n  * In the instruction EX DE,HL, HL will not be replaced with IX or IY.\n\nInstructions which are reinterpreted from (HL) to (IX+d) or (IY+d) load an\nadditional offset byte \u2018d\u2019 which is signed-added to IX or IY to form the\neffective address for the memory access. This extra work consists of a regular\nmemory read machine cycle (3 clock cycles) followed by 5 extra clock cycles to\ncompute the resulting address which will be stored in WZ:\n\n    \n    \n    LD A,(IX+3) \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 IX \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 20 \u2502 0004 \u2502 2000 \u2502 5555 \u2502 <== opcode fetch DD prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 20 \u2502 0005 \u2502 2000 \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 DD \u2502 0005 \u2502 2000 \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 DD \u2502 0005 \u2502 2000 \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 DD \u2502 0005 \u2502 2000 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 DD \u2502 0005 \u2502 2000 \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 DD \u2502 0005 \u2502 2000 \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 DD \u2502 0005 \u2502 2000 \u2502 5555 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0005 \u2502 DD \u2502 0005 \u2502 2000 \u2502 5555 \u2502 <== ocode fetch LD A,(HL) \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0005 \u2502 DD \u2502 0006 \u2502 2000 \u2502 5555 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0005 \u2502 7E \u2502 0006 \u2502 2000 \u2502 5555 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 7E \u2502 0006 \u2502 2000 \u2502 5555 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 7E \u2502 0006 \u2502 2000 \u2502 5555 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 7E \u2502 0006 \u2502 2000 \u2502 5555 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 7E \u2502 0006 \u2502 2000 \u2502 5555 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 7E \u2502 0006 \u2502 2000 \u2502 5555 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 7E \u2502 0006 \u2502 2000 \u2502 5555 \u2502 <== extra mem read machine cycle \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 7E \u2502 0007 \u2502 2000 \u2502 5555 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5555 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5555 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5555 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5555 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5555 \u2502 <== 5 extra clock cycles for IX+d \u250212/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5555 \u2502 \u250213/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5555 \u2502 \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5503 \u2502 \u250214/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5503 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5503 \u2502 \u250215/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5503 \u2502 \u250215/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5503 \u2502 \u250216/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 2000 \u2502 5503 \u2502 \u250216/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 03 \u2502 0007 \u2502 2000 \u2502 2003 \u2502 <== address ready in WZ \u250217/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2003 \u2502 03 \u2502 0007 \u2502 2000 \u2502 2003 \u2502 <== LD A,(HL) continues \u250217/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 2003 \u2502 03 \u2502 0007 \u2502 2000 \u2502 2003 \u2502 \u250218/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 2003 \u2502 00 \u2502 0007 \u2502 2000 \u2502 2003 \u2502 \u250218/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 2003 \u2502 00 \u2502 0007 \u2502 2000 \u2502 2003 \u2502 \u250219/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 2003 \u2502 00 \u2502 0007 \u2502 2000 \u2502 2003 \u2502 \u250219/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2003 \u2502 00 \u2502 0007 \u2502 2000 \u2502 2003 \u2502\n\nDD/FD prefixed instructions which don\u2019t involve loading from or storing to\n(HL) don\u2019t have any surprises:\n\n    \n    \n    LD IX,1111h \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 IX \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 0000 \u2502 5555 \u2502 <== opcode fetch DD prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 00 \u2502 0001 \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 DD \u2502 0001 \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 DD \u2502 0001 \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 DD \u2502 0001 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 DD \u2502 0001 \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 DD \u2502 0001 \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 DD \u2502 0001 \u2502 5555 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 DD \u2502 0001 \u2502 5555 \u2502 <== opcode fetch LD HL,nnnn \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 DD \u2502 0002 \u2502 5555 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 21 \u2502 0002 \u2502 5555 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 21 \u2502 0002 \u2502 5555 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 21 \u2502 0002 \u2502 5555 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 21 \u2502 0002 \u2502 5555 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 21 \u2502 0002 \u2502 5555 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 21 \u2502 0002 \u2502 5555 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 21 \u2502 0002 \u2502 5555 \u2502 <== memory read \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 21 \u2502 0003 \u2502 5555 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 11 \u2502 0003 \u2502 5555 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 11 \u2502 0003 \u2502 5555 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 11 \u2502 0003 \u2502 5555 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 11 \u2502 0003 \u2502 5511 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 11 \u2502 0003 \u2502 5511 \u2502 <== memory read \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 11 \u2502 0004 \u2502 5511 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 11 \u2502 0004 \u2502 5511 \u2502 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 11 \u2502 0004 \u2502 5511 \u2502 \u250214/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 11 \u2502 0004 \u2502 5511 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 11 \u2502 0004 \u2502 1111 \u2502\n\n### Special Case: LD (IX+d),n\n\nThe only timing-oddity in the DD/FD-modified instruction subset is the timing\nof the LD (IX/IY+d),n instruction. This is the only instruction with indexed\naddressing which doesn\u2019t simply insert 8 extra clock cycles to load the\nd-offset and compute the effective address. Instead loading the immediate\nvalue n is overlayed with the address computation cycles:\n\n    \n    \n    LD (IX+3),11h \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 IX \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 10 \u2502 0004 \u2502 1000 \u2502 5555 \u2502 <== opcode fetch DD prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 10 \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0005 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 <== opcode fetch LD (HL),n \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0005 \u2502 DD \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0005 \u2502 36 \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 36 \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 36 \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 36 \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 36 \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 36 \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 36 \u2502 0006 \u2502 1000 \u2502 5555 \u2502 <== memory read to load 'd' \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 36 \u2502 0007 \u2502 1000 \u2502 5555 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 1000 \u2502 5555 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 1000 \u2502 5555 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 1000 \u2502 5555 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 1000 \u2502 5555 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 03 \u2502 0007 \u2502 1000 \u2502 5555 \u2502 <== memory read to load 'n' \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 03 \u2502 0008 \u2502 1000 \u2502 5555 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 0B \u2502 0008 \u2502 1000 \u2502 5555 \u2502 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 0B \u2502 0008 \u2502 1000 \u2502 5503 \u2502 \u250214/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 0B \u2502 0008 \u2502 1000 \u2502 5503 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 0B \u2502 0008 \u2502 1000 \u2502 5503 \u2502 \u250215/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 0B \u2502 0008 \u2502 1000 \u2502 5503 \u2502 <== 2 remaining extra clock cycles \u250215/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 0B \u2502 0008 \u2502 1000 \u2502 5503 \u2502 \u250216/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 0B \u2502 0008 \u2502 1000 \u2502 5503 \u2502 \u250216/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 0B \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250217/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 0B \u2502 0008 \u2502 1000 \u2502 1003 \u2502 <== LD (HL),n continues \u250217/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 1003 \u2502 0B \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250218/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 1003 \u2502 0B \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250218/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 1003 \u2502 0B \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250219/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 1003 \u2502 0B \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250219/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 0B \u2502 0008 \u2502 1000 \u2502 1003 \u2502\n\n## ED Prefix\n\nThe ED prefix instruction causes the following opcode byte to be decoded from\nan entirely different instruction subset. Of the 256 possible opcode slots,\nonly 78 are occupied (in quadrants 1 and 2), the remaining 178 instructions\nexecute as an ED-prefixed NOP instruction.\n\nThe ED prefix cancels the effects of preceding DD or FD prefixes, so sequences\nof DD ED op or FD ED op execute as regular ED op.\n\n### ED Quadrant 1 (x == 01)\n\nED Quadrant 1 has quite obviously been stuffed with random instructions that\ndidn\u2019t fit into the main instruction subset. It also looks like the Z80\ndesigners didn\u2019t care too much about making efficient use of the available\nopcodes: 8 opcode slots perform the NEG instruction, 8 more are used for the\nRETI/RETN instruction (despite the different names, RETI and RETN behave\nidentically), and 4 opcode slots are used for IM 0. Furthermore, the last two\nopcode slots perform a NOP.\n\nx=01| z=000| z=001| z=010| z=011| z=100| z=101| z=110| z=111  \n---|---|---|---|---|---|---|---|---  \ny=000| IN B,(C)| OUT (C),B| SBC HL,BC| LD (nn),BC| NEG| RETI/RETN| IM 0| LD\nI,A  \ny=001| IN C,(C)| OUT (C),C| ADC HL,BC| LD BC,(nn)| NEG| RETI/RETN| IM 0| LD\nR,A  \ny=010| IN D,(C)| OUT (C),D| SBC HL,DE| LD (nn),DE| NEG| RETI/RETN| IM 1| LD\nA,I  \ny=011| IN E,(C)| OUT (C),E| ADC HL,DE| LD DE,(nn)| NEG| RETI/RETN| IM 2| LD\nA,R  \ny=100| IN H,(C)| OUT (C),H| SBC HL,HL| LD (nn),HL| NEG| RETI/RETN| IM 0| RRD  \ny=101| IN L,(C)| OUT (C),L| ADC HL,HL| LD HL,(nn)| NEG| RETI/RETN| IM 0| RLD  \ny=110| IN (C)| OUT (C),0| SBC HL,SP| LD (nn),SP| NEG| RETI/RETN| IM 1| ED NOP  \ny=111| IN A,(C)| OUT (C),A| ADC HL,SP| LD SP,(nn)| NEG| RETI/RETN| IM 2| ED\nNOP  \n  \n#### SBC/ADC HL,ss\n\nThe 16-bit SBC and ADC instructions have the same timings and add 7 clock\ncycles to compute the result. The WZ register seems to be used as intermediate\nstorage, but it doesn\u2019t hold the result, instead it is set to HL+1:\n\n    \n    \n    ADC HL,DE \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 DE \u2502 HL \u2502 WZ \u2502 Flags \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 11 \u2502 0007 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 11 \u2502 0008 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 ED \u2502 0008 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 ED \u2502 0008 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0008 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0008 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0008 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 ED \u2502 0008 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 ED \u2502 0008 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 <== opcode fetch \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 ED \u2502 0009 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 <== 7 extra clock cycles \u2502 9/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u250210/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2222 \u2502 5555 \u2502 sZyhxVnc \u2502 \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2222 \u2502 2223 \u2502 sZyhxVnc \u2502 \u250211/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2222 \u2502 2223 \u2502 sZyhxVnc \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2233 \u2502 2223 \u2502 sZyhxVnc \u2502 <== result low byte ready \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2233 \u2502 2223 \u2502 sZyhxVnc \u2502 \u250212/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2233 \u2502 2223 \u2502 sZyhxVnc \u2502 \u250213/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2233 \u2502 2223 \u2502 sZyhxVnc \u2502 \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2233 \u2502 2223 \u2502 sZyhxVnc \u2502 \u250214/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2233 \u2502 2223 \u2502 sZyhxVnc \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2233 \u2502 2223 \u2502 sZyhxVnc \u2502 \u250215/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 5A \u2502 0009 \u2502 1111 \u2502 2233 \u2502 2223 \u2502 sZyhxVnc \u2502 \u250215/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 5A \u2502 0009 \u2502 1111 \u2502 3333 \u2502 2223 \u2502 sZyhxVnc \u2502 <== result high byte ready\n\nThe flag bit update happens overlapped in the next opcode fetch:\n\n    \n    \n    ADC HL,DE continued: following opcode fetch \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 DE \u2502 HL \u2502 WZ \u2502 Flags \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0009 \u2502 5A \u2502 0009 \u2502 1111 \u2502 3333 \u2502 2223 \u2502 sZyhxVnc \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0009 \u2502 5A \u2502 000A \u2502 1111 \u2502 3333 \u2502 2223 \u2502 sZyhxVnc \u2502 \u2502 2/0 \u2502 M1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0009 \u2502 00 \u2502 000A \u2502 1111 \u2502 3333 \u2502 2223 \u2502 sZyhxVnc \u2502 \u2502 2/1 \u2502 M1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 00 \u2502 000A \u2502 1111 \u2502 3333 \u2502 2223 \u2502 sZyhxVnc \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 000A \u2502 1111 \u2502 3333 \u2502 2223 \u2502 sZyhxVnc \u2502 \u2502 3/1 \u2502 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 000A \u2502 1111 \u2502 3333 \u2502 2223 \u2502 szYhxvnc \u2502 <== flags updated here \u2502 4/0 \u2502 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 000A \u2502 1111 \u2502 3333 \u2502 2223 \u2502 szYhxvnc \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 000A \u2502 1111 \u2502 3333 \u2502 2223 \u2502 szYhxvnc \u2502\n\n#### LD I,A and LD R,A\n\nThe LD I,A and LD R,A instructions add an extra clock cycle after the opcode\nfetch. It\u2019s interesting though that the data transfer already happens in the\nlast half cycle of the opcode fetch machine cycle.\n\n    \n    \n    LD I,A \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 AF \u2502 I \u2502 R \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 01 \u2502 0002 \u2502 5555 \u2502 00 \u2502 01 \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 01 \u2502 0003 \u2502 5555 \u2502 00 \u2502 01 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 ED \u2502 0003 \u2502 5555 \u2502 00 \u2502 01 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 ED \u2502 0003 \u2502 0155 \u2502 00 \u2502 01 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 ED \u2502 0003 \u2502 0155 \u2502 00 \u2502 01 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 ED \u2502 0003 \u2502 0155 \u2502 00 \u2502 02 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 ED \u2502 0003 \u2502 0155 \u2502 00 \u2502 02 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 ED \u2502 0003 \u2502 0155 \u2502 00 \u2502 02 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0003 \u2502 0155 \u2502 00 \u2502 02 \u2502 <== opcode fetch \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 ED \u2502 0004 \u2502 0155 \u2502 00 \u2502 02 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 47 \u2502 0004 \u2502 0155 \u2502 00 \u2502 02 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 47 \u2502 0004 \u2502 0155 \u2502 00 \u2502 02 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 47 \u2502 0004 \u2502 0155 \u2502 00 \u2502 02 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 47 \u2502 0004 \u2502 0155 \u2502 00 \u2502 03 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 47 \u2502 0004 \u2502 0155 \u2502 00 \u2502 03 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 47 \u2502 0004 \u2502 0155 \u2502 01 \u2502 03 \u2502 <== I has been updated \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 47 \u2502 0004 \u2502 0155 \u2502 01 \u2502 03 \u2502 <== extra clock cycle \u2502 9/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 47 \u2502 0004 \u2502 0155 \u2502 01 \u2502 03 \u2502\n    \n    \n    LD R,A \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 AF \u2502 I \u2502 R \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0005 \u2502 3C \u2502 0005 \u2502 0155 \u2502 01 \u2502 04 \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0005 \u2502 3C \u2502 0006 \u2502 0155 \u2502 01 \u2502 04 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0005 \u2502 ED \u2502 0006 \u2502 0155 \u2502 01 \u2502 04 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 ED \u2502 0006 \u2502 0255 \u2502 01 \u2502 04 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0104 \u2502 ED \u2502 0006 \u2502 0255 \u2502 01 \u2502 04 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0104 \u2502 ED \u2502 0006 \u2502 0201 \u2502 01 \u2502 05 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0104 \u2502 ED \u2502 0006 \u2502 0201 \u2502 01 \u2502 05 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0104 \u2502 ED \u2502 0006 \u2502 0201 \u2502 01 \u2502 05 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 ED \u2502 0006 \u2502 0201 \u2502 01 \u2502 05 \u2502 <== opcode fetch \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 ED \u2502 0007 \u2502 0201 \u2502 01 \u2502 05 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 4F \u2502 0007 \u2502 0201 \u2502 01 \u2502 05 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 4F \u2502 0007 \u2502 0201 \u2502 01 \u2502 05 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0105 \u2502 4F \u2502 0007 \u2502 0201 \u2502 01 \u2502 05 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0105 \u2502 4F \u2502 0007 \u2502 0201 \u2502 01 \u2502 06 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0105 \u2502 4F \u2502 0007 \u2502 0201 \u2502 01 \u2502 06 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0105 \u2502 4F \u2502 0007 \u2502 0201 \u2502 01 \u2502 02 \u2502 <== R has been updated \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0105 \u2502 4F \u2502 0007 \u2502 0201 \u2502 01 \u2502 02 \u2502 <== extra clock cycle \u2502 9/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0100 \u2502 4F \u2502 0007 \u2502 0201 \u2502 01 \u2502 02 \u2502\n\n#### LD A,I and LD A,R\n\nThe LD A,I and LD A,R instructions also add an extra cycle at the end, but the\nA register and flags are only updated during the opcode fetch of the next\ninstruction:\n\n    \n    \n    LD A,R \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 AF \u2502 I \u2502 R \u2502 Flags \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 AF \u2502 0001 \u2502 5555 \u2502 00 \u2502 01 \u2502 sZyHxVnC \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 AF \u2502 0002 \u2502 5555 \u2502 00 \u2502 01 \u2502 sZyHxVnC \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 ED \u2502 0002 \u2502 5555 \u2502 00 \u2502 01 \u2502 sZyHxVnC \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 ED \u2502 0002 \u2502 0055 \u2502 00 \u2502 01 \u2502 sZyHxVnC \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 ED \u2502 0002 \u2502 0055 \u2502 00 \u2502 01 \u2502 sZyHxVnC \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 ED \u2502 0002 \u2502 0044 \u2502 00 \u2502 02 \u2502 sZyhxVnc \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 ED \u2502 0002 \u2502 0044 \u2502 00 \u2502 02 \u2502 sZyhxVnc \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 ED \u2502 0002 \u2502 0044 \u2502 00 \u2502 02 \u2502 sZyhxVnc \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0002 \u2502 0044 \u2502 00 \u2502 02 \u2502 sZyhxVnc \u2502 <== opcode fetch \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 ED \u2502 0003 \u2502 0044 \u2502 00 \u2502 02 \u2502 sZyhxVnc \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 5F \u2502 0003 \u2502 0044 \u2502 00 \u2502 02 \u2502 sZyhxVnc \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 5F \u2502 0003 \u2502 0044 \u2502 00 \u2502 02 \u2502 sZyhxVnc \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 5F \u2502 0003 \u2502 0044 \u2502 00 \u2502 02 \u2502 sZyhxVnc \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 5F \u2502 0003 \u2502 0044 \u2502 00 \u2502 03 \u2502 sZyhxVnc \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 5F \u2502 0003 \u2502 0044 \u2502 00 \u2502 03 \u2502 sZyhxVnc \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 5F \u2502 0003 \u2502 0044 \u2502 00 \u2502 03 \u2502 sZyhxVnc \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 5F \u2502 0003 \u2502 0044 \u2502 00 \u2502 03 \u2502 sZyhxVnc \u2502 <== extra clock cycle \u2502 9/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 5F \u2502 0003 \u2502 0044 \u2502 00 \u2502 03 \u2502 sZyhxVnc \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 5F \u2502 0003 \u2502 0044 \u2502 00 \u2502 03 \u2502 sZyhxVnc \u2502 <== next opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 5F \u2502 0004 \u2502 0044 \u2502 00 \u2502 03 \u2502 sZyhxVnc \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0003 \u2502 00 \u2502 0004 \u2502 0044 \u2502 00 \u2502 03 \u2502 sZyhxVnc \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 00 \u2502 0004 \u2502 0344 \u2502 00 \u2502 03 \u2502 sZyhxVnc \u2502 <== result in A \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0004 \u2502 0344 \u2502 00 \u2502 03 \u2502 sZyhxVnc \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0004 \u2502 0300 \u2502 00 \u2502 04 \u2502 szyhxvnc \u2502 <== flag bits updated \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0004 \u2502 0300 \u2502 00 \u2502 04 \u2502 szyhxvnc \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 0004 \u2502 0300 \u2502 00 \u2502 04 \u2502 szyhxvnc \u2502\n\n#### RRD and RLD\n\nThe RRD and RLD instructions add 4 extra clock cycles between the memory read\nand write machine cycle. The A register and flag bits are updated during the\nopcode fetch of the next instruction:\n\n    \n    \n    RLD: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 AF \u2502 HL \u2502 Flags \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 56 \u2502 0007 \u2502 5555 \u2502 1000 \u2502 sZyHxVnC \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 56 \u2502 0008 \u2502 5555 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 ED \u2502 0008 \u2502 5555 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 ED \u2502 0008 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0008 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0008 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0008 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 ED \u2502 0008 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 ED \u2502 0008 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 <== opcode fetch \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 ED \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 6F \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 6F \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 6F \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 6F \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 6F \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 6F \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 6F \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 <== memory read \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 6F \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 <== 4 extra clock cycles \u250212/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250213/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250214/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250215/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250215/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250216/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 <== memory write \u250216/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 1000 \u2502 46 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250217/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 1000 \u2502 46 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250217/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 1000 \u2502 46 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250218/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 1000 \u2502 46 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250218/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 46 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0009 \u2502 34 \u2502 0009 \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 <== next opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0009 \u2502 34 \u2502 000A \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0009 \u2502 00 \u2502 000A \u2502 5655 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 00 \u2502 000A \u2502 5355 \u2502 1000 \u2502 sZyHxVnC \u2502 <== A register updated \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 000A \u2502 5355 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 000A \u2502 5305 \u2502 1000 \u2502 szyhxVnC \u2502 <== flag bits updated \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 000A \u2502 5305 \u2502 1000 \u2502 szyhxVnC \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 000A \u2502 5305 \u2502 1000 \u2502 szyhxVnC \u2502\n\n### ED Quadrant 2 (x == 10)\n\nThe ED Quadrant 2 only houses the 16 block transfer instructions, the\nremaining 48 opcode slots are filled with NOPs.\n\nx=10| z=000| z=001| z=010| z=011| z=100| z=101| z=110| z=111  \n---|---|---|---|---|---|---|---|---  \ny=000| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP  \ny=001| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP  \ny=010| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP  \ny=011| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP| ED NOP  \ny=100| LDI| CPI| INI| OUTI| ED NOP| ED NOP| ED NOP| ED NOP  \ny=101| LDD| CPD| IND| OUTD| ED NOP| ED NOP| ED NOP| ED NOP  \ny=110| LDIR| CPIR| INIR| OTIR| ED NOP| ED NOP| ED NOP| ED NOP  \ny=111| LDDR| CPDR| INDR| OTDR| ED NOP| ED NOP| ED NOP| ED NOP  \n  \n#### LDI and LDD\n\nThe LDI and LDD instructions add two extra clock cycles after the memory write\nmachine cycle:\n\n    \n    \n    LDI: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 BC \u2502 DE \u2502 HL \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0009 \u2502 00 \u2502 0009 \u2502 0002 \u2502 2000 \u2502 1000 \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0009 \u2502 00 \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0009 \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 000A \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 <== opcode fetch \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 ED \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 A0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 A0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 A0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 A0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 A0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 A0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 A0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 <== memory read \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 A0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1001 \u2502 <== HL incremented \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1001 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1001 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1001 \u2502 <== memory write \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1001 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1001 \u2502 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2001 \u2502 1001 \u2502 <== DE incremented \u250214/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2001 \u2502 1001 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2001 \u2502 1001 \u2502 \u250215/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2001 \u2502 1001 \u2502 <== 2 extra clock cycles \u250215/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502 <== BC decremented \u250216/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502 \u250216/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502\n\n#### LDIR and LDDR\n\nOn the last iteration (BC == 0), LDIR and LDDR have the same timing as LDI and\nLDD, otherwise they add another 5 clock cycles to rewind PC back to the start\nof the instruction.\n\n    \n    \n    LDIR - looping \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 BC \u2502 DE \u2502 HL \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0009 \u2502 00 \u2502 0009 \u2502 0002 \u2502 2000 \u2502 1000 \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0009 \u2502 00 \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0009 \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 000A \u2502 ED \u2502 000A \u2502 0002 \u2502 2000 \u2502 1000 \u2502 <== opcode fetch \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 ED \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 B0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 B0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 B0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 B0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 B0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 B0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 B0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 <== memory read (HL++) \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 B0 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1000 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1001 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1001 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1001 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1001 \u2502 <== memory write (DE++) \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1001 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2000 \u2502 1001 \u2502 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2001 \u2502 1001 \u2502 \u250214/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2001 \u2502 1001 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2001 \u2502 1001 \u2502 <== 2 clock cycles: BC-- \u250215/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0002 \u2502 2001 \u2502 1001 \u2502 \u250215/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502 \u250216/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502 \u250216/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502 <== last half cycle if BC==0 \u250217/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502 <== 5 extra clock cycles PC -= 2 \u250217/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502 \u250218/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502 \u250218/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502 \u250219/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502 \u250219/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502 \u250220/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 000B \u2502 0001 \u2502 2001 \u2502 1001 \u2502 \u250220/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 0009 \u2502 0001 \u2502 2001 \u2502 1001 \u2502 <== PC ready \u250221/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2000 \u2502 00 \u2502 0009 \u2502 0001 \u2502 2001 \u2502 1001 \u2502 \u250221/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 0009 \u2502 0001 \u2502 2001 \u2502 1001 \u2502\n\n#### CPI and CPD\n\nThe CPI and CPD instructions add 5 extra clock cycles. The flag bits are\nupdated during the opcode fetch of the next instruction:\n\n    \n    \n    CPI \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 AF \u2502 BC \u2502 HL \u2502 Flags \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 11 \u2502 0008 \u2502 5555 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 11 \u2502 0009 \u2502 5555 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 ED \u2502 0009 \u2502 5555 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 ED \u2502 0009 \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0009 \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0009 \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0009 \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 ED \u2502 0009 \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0009 \u2502 ED \u2502 0009 \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 <== opcode fetch \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0009 \u2502 ED \u2502 000A \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0009 \u2502 A1 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 A1 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 A1 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 A1 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 A1 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 A1 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 A1 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 <== memory read \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 A1 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1001 \u2502 sZyHxVnC \u2502 <== HL incremented \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1001 \u2502 sZyHxVnC \u2502 <== 5 extra clock cycles \u250212/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250213/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250214/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250215/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0002 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250215/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0001 \u2502 1001 \u2502 sZyHxVnC \u2502 <== BC decremented \u250216/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0001 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250216/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 000A \u2502 1155 \u2502 0001 \u2502 1001 \u2502 sZyHxVnC \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 000A \u2502 00 \u2502 000A \u2502 1155 \u2502 0001 \u2502 1001 \u2502 sZyHxVnC \u2502 <== next opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 00 \u2502 000B \u2502 1155 \u2502 0001 \u2502 1001 \u2502 sZyHxVnC \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 00 \u2502 000B \u2502 1155 \u2502 0001 \u2502 1001 \u2502 sZyHxVnC \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 00 \u2502 000B \u2502 1155 \u2502 0001 \u2502 1001 \u2502 sZyHxVnC \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 000B \u2502 1155 \u2502 0001 \u2502 1001 \u2502 sZyHxVnC \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 000B \u2502 1107 \u2502 0001 \u2502 1001 \u2502 szyhxVNC \u2502 <== flag bits updated \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 000B \u2502 1107 \u2502 0001 \u2502 1001 \u2502 szyhxVNC \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 000B \u2502 1107 \u2502 0001 \u2502 1001 \u2502 szyhxVNC \u2502\n\n#### CPIR and CPDR\n\nOn the last iteration (BC == 0 or A == (HL)), CPIR and CPDR timing is\nidentical with CPI and CPDR, otherwise 5 additional clock cycles are added to\nrewind PC back to the start of the instruction:\n\n    \n    \n    CPIR - looping: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 AF \u2502 BC \u2502 HL \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 000A \u2502 22 \u2502 000A \u2502 5555 \u2502 0002 \u2502 1000 \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 22 \u2502 000B \u2502 5555 \u2502 0002 \u2502 1000 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 ED \u2502 000B \u2502 5555 \u2502 0002 \u2502 1000 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000A \u2502 ED \u2502 000B \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 ED \u2502 000B \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 ED \u2502 000B \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 ED \u2502 000B \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 ED \u2502 000B \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 000B \u2502 ED \u2502 000B \u2502 2255 \u2502 0002 \u2502 1000 \u2502 <== opcode fetch \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000B \u2502 ED \u2502 000C \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000B \u2502 B1 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 B1 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 B1 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 B1 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 B1 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 B1 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 B1 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1000 \u2502 <== memory read \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 B1 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1000 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1001 \u2502 <== HL incremented \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1001 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1001 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1001 \u2502 <== 5 extra clock cycles BC-- \u250212/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1001 \u2502 \u250213/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1001 \u2502 \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1001 \u2502 \u250214/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1001 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1001 \u2502 \u250215/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0002 \u2502 1001 \u2502 \u250215/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0001 \u2502 1001 \u2502 <== BC decremented \u250216/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0001 \u2502 1001 \u2502 \u250216/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0001 \u2502 1001 \u2502 <== last half-cycle if BC==0 or A==(HL) \u250217/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0001 \u2502 1001 \u2502 <== 5 more clock cycles PC -= 2 \u250217/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0001 \u2502 1001 \u2502 \u250218/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0001 \u2502 1001 \u2502 \u250218/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0001 \u2502 1001 \u2502 \u250219/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0001 \u2502 1001 \u2502 \u250219/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0001 \u2502 1001 \u2502 \u250220/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000C \u2502 2255 \u2502 0001 \u2502 1001 \u2502 \u250220/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000A \u2502 2255 \u2502 0001 \u2502 1001 \u2502 <== PC ready here \u250221/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 11 \u2502 000A \u2502 2255 \u2502 0001 \u2502 1001 \u2502 \u250221/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 11 \u2502 000A \u2502 2255 \u2502 0001 \u2502 1001 \u2502\n\n#### INI and IND\n\nThe INI and IND instructions insert an extra clock cycle between the opcode\nfetch and IO read machine cycle. The flag bits are updated in the opcode fetch\nof the next instruction:\n\n    \n    \n    INI \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 BC \u2502 HL \u2502 Flags \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 02 \u2502 0006 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 02 \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 <== opcode fetch \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 ED \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 A2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 A2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 7/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 A2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 A2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 A2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 A2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 A2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 <== one extra clock cycle \u2502 9/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 A2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250210/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0280 \u2502 A2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 <== IO read \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0280 \u2502 A2 \u2502 0008 \u2502 0180 \u2502 1000 \u2502 sZyHxVnC \u2502 <== B decremented \u250211/0 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 RD \u2502 \u2502 0280 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250211/1 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 RD \u2502 \u2502 0280 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250212/0 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 RD \u2502 \u2502 0280 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250212/1 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 RD \u2502 \u2502 0280 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250213/0 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 RD \u2502 \u2502 0280 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0280 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250214/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 sZyHxVnC \u2502 <== memory write \u250214/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250215/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250215/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 <== HL incremented \u250216/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250216/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 <== next opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 FF \u2502 0009 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 00 \u2502 0009 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 00 \u2502 0009 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0009 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0009 \u2502 0180 \u2502 1001 \u2502 szyHxvNC \u2502 <== flag bits updated \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0009 \u2502 0180 \u2502 1001 \u2502 szyHxvNC \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0009 \u2502 0180 \u2502 1001 \u2502 szyHxvNC \u2502\n\n#### OUTI and OUTD\n\nThe OUTI and OUTD instructions are identical with INI and IND except that the\nIO read is replaced with a memory read machine cycle, and the memory write is\nreplaced with an IO write machine cycle:\n\n    \n    \n    OUTI \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 BC \u2502 HL \u2502 Flags \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 02 \u2502 0006 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 02 \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 <== opcode fetch \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 ED \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 A3 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 A3 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 7/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 A3 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 A3 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 A3 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 A3 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 A3 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 <== one extra clock cycle \u2502 9/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 A3 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250210/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 A3 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 sZyHxVnC \u2502 <== memory read \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 A3 \u2502 0008 \u2502 0180 \u2502 1000 \u2502 sZyHxVnC \u2502 <== B decremented \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 sZyHxVnC \u2502 \u250211/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 <== HL incremented \u250212/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250212/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250213/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0180 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 <== IO write \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0180 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250214/0 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 WR \u2502 0180 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250214/1 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 WR \u2502 0180 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250215/0 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 WR \u2502 0180 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250215/1 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 WR \u2502 0180 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250216/0 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 WR \u2502 0180 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u250216/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0180 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 <== next opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 FF \u2502 0009 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 00 \u2502 0009 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 00 \u2502 0009 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0009 \u2502 0180 \u2502 1001 \u2502 sZyHxVnC \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0009 \u2502 0180 \u2502 1001 \u2502 szyHxvNC \u2502 <== flag bits updated here \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0009 \u2502 0180 \u2502 1001 \u2502 szyHxvNC \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0009 \u2502 0180 \u2502 1001 \u2502 szyHxvNC \u2502\n\n#### INIR, INDR, OTIR and OTDR\n\nThe INIR, INDR, OTIR and OTDR instructions are identical with their respecitve\nnon-repeating versions for the last iteration (when B reaches zero).\n\nWhen repeating (B != 0), 5 extra clock cycles are added to rewind PC back to\nthe start of the instruction:\n\n    \n    \n    INIR: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 BC \u2502 HL \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 02 \u2502 0006 \u2502 0280 \u2502 1000 \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 02 \u2502 0007 \u2502 0280 \u2502 1000 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 ED \u2502 0007 \u2502 0280 \u2502 1000 \u2502 <== opcode fetch \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 ED \u2502 0008 \u2502 0280 \u2502 1000 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 B2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 B2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 B2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 B2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 B2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 B2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 B2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 <== one extra clock cycle \u2502 9/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 B2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 \u250210/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0280 \u2502 B2 \u2502 0008 \u2502 0280 \u2502 1000 \u2502 <== IO read \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0280 \u2502 B2 \u2502 0008 \u2502 0180 \u2502 1000 \u2502 <== B decremented \u250211/0 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 RD \u2502 \u2502 0280 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 \u250211/1 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 RD \u2502 \u2502 0280 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 \u250212/0 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 RD \u2502 \u2502 0280 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 \u250212/1 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 RD \u2502 \u2502 0280 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 \u250213/0 \u2502 \u2502 \u2502 IORQ \u2502 \u2502 RD \u2502 \u2502 0280 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0280 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 \u250214/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 <== memory write \u250214/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 \u250215/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1000 \u2502 \u250215/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 <== HL incremented \u250216/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 \u250216/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 \u250217/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 <== 5 extra clock cycles PC-=2 \u250217/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 \u250218/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 \u250218/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 \u250219/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 \u250219/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 \u250220/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0008 \u2502 0180 \u2502 1001 \u2502 \u250220/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0006 \u2502 0180 \u2502 1001 \u2502 <== PC ready \u250221/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1000 \u2502 FF \u2502 0006 \u2502 0180 \u2502 1001 \u2502 \u250221/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 FF \u2502 0006 \u2502 0180 \u2502 1001 \u2502\n\n## CB Prefix\n\nThe CB instruction subset is the most \u2018orderly\u2019 and contains bit-manipulation\nand -testing instructions Timing is as expected (2 opcode fetch machine\ncycles, 8 clock cycles), except for the read-modify-write instructions\ninvolving (HL) which insert an extra clock cycle between the memory read and\nmemory write machine cycle and take 15 clock cycles:\n\n  * opcode fetch CB prefix: 4 clock cycles\n  * opcode fetch: 4 clock cycles\n  * memory read: 3 clock cycles\n  * 1 extra clock cycle\n  * memory write: 3 clock cycles\n\n4 + 4 + 3 + 1 + 3 = 15 clock cycles\n\nThe BIT x,(HL) instructions in CB quadrant 1 don\u2019t have the memory write\ncycle, but still add an extra clock cycle after the memory read:\n\n  * opcode fetch CB prefix: 4 clock cycles\n  * opcode fetch: 4 clock cycles\n  * memory read: 3 clock cycles\n  * 1 extra clock cycle\n\n4 + 4 + 3 + 1 = 12 clock cycles\n\n### CB Quadrant 0\n\nThe first CB quadrant contains rotate and shift instructions:\n\nx=00| z=000| z=001| z=010| z=011| z=100| z=101| z=110| z=111  \n---|---|---|---|---|---|---|---|---  \ny=000| RLC B| RLC C| RLC D| RLC E| RLC H| RLC L| RLC (HL)| RLC A  \ny=001| RRC B| RRC C| RRC D| RRC E| RRC H| RRC L| RRC (HL)| RRC A  \ny=010| RL B| RL C| RL D| RL E| RL H| RL L| RL (HL)| RL A  \ny=011| RR B| RR C| RR D| RR E| RR H| RR L| RR (HL)| RR A  \ny=100| SLA B| SLA C| SLA D| SLA E| SLA H| SLA L| SLA (HL)| SLA A  \ny=101| SRA B| SRA C| SRA D| SRA E| SRA H| SRA L| SRA (HL)| SRA A  \ny=110| SLL B| SLL C| SLL D| SLL E| SLL H| SLL L| SLL (HL)| SLL A  \ny=111| SRL B| SRL C| SRL D| SRL E| SRL H| SRL L| SRL (HL)| SRL A  \n  \n### CB Quadrant 1\n\nCB Quadrant one contains the bit testing instructions in all 64 possible\ncombinations:\n\nx=01| z=000| z=001| z=010| z=011| z=100| z=101| z=110| z=111  \n---|---|---|---|---|---|---|---|---  \ny=000| BIT 0,B| BIT 0,C| BIT 0,D| BIT 0,E| BIT 0,H| BIT 0,L| BIT 0,(HL)| BIT\n0,A  \ny=001| BIT 1,B| BIT 1,C| BIT 1,D| BIT 1,E| BIT 1,H| BIT 1,L| BIT 1,(HL)| BIT\n1,A  \ny=010| BIT 2,B| BIT 2,C| BIT 2,D| BIT 2,E| BIT 2,H| BIT 2,L| BIT 2,(HL)| BIT\n2,A  \ny=011| BIT 3,B| BIT 3,C| BIT 3,D| BIT 3,E| BIT 3,H| BIT 3,L| BIT 3,(HL)| BIT\n3,A  \ny=100| BIT 4,B| BIT 4,C| BIT 4,D| BIT 4,E| BIT 4,H| BIT 4,L| BIT 4,(HL)| BIT\n4,A  \ny=101| BIT 5,B| BIT 5,C| BIT 5,D| BIT 5,E| BIT 5,H| BIT 5,L| BIT 5,(HL)| BIT\n5,A  \ny=110| BIT 6,B| BIT 6,C| BIT 6,D| BIT 6,E| BIT 6,H| BIT 6,L| BIT 6,(HL)| BIT\n6,A  \ny=111| BIT 7,B| BIT 7,C| BIT 7,D| BIT 7,E| BIT 7,H| BIT 7,L| BIT 7,(HL)| BIT\n7,A  \n  \n### CB Quadrant 2\n\nCB Quadrant 2 has all the bit clear instructions...\n\nx=10| z=000| z=001| z=010| z=011| z=100| z=101| z=110| z=111  \n---|---|---|---|---|---|---|---|---  \ny=000| RES 0,B| RES 0,C| RES 0,D| RES 0,E| RES 0,H| RES 0,L| RES 0,(HL)| RES\n0,A  \ny=001| RES 1,B| RES 1,C| RES 1,D| RES 1,E| RES 1,H| RES 1,L| RES 1,(HL)| RES\n1,A  \ny=010| RES 2,B| RES 2,C| RES 2,D| RES 2,E| RES 2,H| RES 2,L| RES 2,(HL)| RES\n2,A  \ny=011| RES 3,B| RES 3,C| RES 3,D| RES 3,E| RES 3,H| RES 3,L| RES 3,(HL)| RES\n3,A  \ny=100| RES 4,B| RES 4,C| RES 4,D| RES 4,E| RES 4,H| RES 4,L| RES 4,(HL)| RES\n4,A  \ny=101| RES 5,B| RES 5,C| RES 5,D| RES 5,E| RES 5,H| RES 5,L| RES 5,(HL)| RES\n5,A  \ny=110| RES 6,B| RES 6,C| RES 6,D| RES 6,E| RES 6,H| RES 6,L| RES 6,(HL)| RES\n6,A  \ny=111| RES 7,B| RES 7,C| RES 7,D| RES 7,E| RES 7,H| RES 7,L| RES 7,(HL)| RES\n7,A  \n  \n### CB Quadrant 3\n\n...and the last CB Quadrant all the bit-set instructions:\n\nx=11| z=000| z=001| z=010| z=011| z=100| z=101| z=110| z=111  \n---|---|---|---|---|---|---|---|---  \ny=000| SET 0,B| SET 0,C| SET 0,D| SET 0,E| SET 0,H| SET 0,L| SET 0,(HL)| SET\n0,A  \ny=001| SET 1,B| SET 1,C| SET 1,D| SET 1,E| SET 1,H| SET 1,L| SET 1,(HL)| SET\n1,A  \ny=010| SET 2,B| SET 2,C| SET 2,D| SET 2,E| SET 2,H| SET 2,L| SET 2,(HL)| SET\n2,A  \ny=011| SET 3,B| SET 3,C| SET 3,D| SET 3,E| SET 3,H| SET 3,L| SET 3,(HL)| SET\n3,A  \ny=100| SET 4,B| SET 4,C| SET 4,D| SET 4,E| SET 4,H| SET 4,L| SET 4,(HL)| SET\n4,A  \ny=101| SET 5,B| SET 5,C| SET 5,D| SET 5,E| SET 5,H| SET 5,L| SET 5,(HL)| SET\n5,A  \ny=110| SET 6,B| SET 6,C| SET 6,D| SET 6,E| SET 6,H| SET 6,L| SET 6,(HL)| SET\n6,A  \ny=111| SET 7,B| SET 7,C| SET 7,D| SET 7,E| SET 7,H| SET 7,L| SET 7,(HL)| SET\n7,A  \n  \n## DD CB and FD CB Prefix\n\nThe DD CB and FD CB double-prefix pseudo-subset is a very special beast. The\ndocumented instructions of the subset just provide the \u201cexpected\u201d (IX+d) and\n(IY+d) versions of the CB-prefixed (HL) instructions, for instance:\n\n  * BIT n,(HL) => BIT n,(IX+d)\n  * SET n,(HL) => SET n,(IX+d)\n  * RES n,(HL) => RES n,(IX+d)\n  * RLC (HL) => RLC (IX+d)\n\nBut the much larger set of undocumented instructions have the strange\nbehaviour that they store the result both in (IX+d) and a register (except the\nBIT instructions, which are \u2018read-only\u2019).\n\nBut there are more oddities:\n\n  * The d-offset sits between the CB prefix and \u2018actual\u2019 opcode, while in all other DD/FD prefixed instructions, the d-offset follows the opcode byte.\n\n  * The d-offset always exists, also for instructions that don\u2019t involve (HL).\n\n  * The R register is only incremented twice, but for two prefix bytes and an additional opcode it would be expected that it is incremented three times.\n\nLet\u2019s first look at the timing of the documented SET 1,(IX+d) instruction\n(machine code byte sequence: DD CB 03 CE):\n\n    \n    \n    SET 1,(IX+3): \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 IX \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 10 \u2502 0004 \u2502 1000 \u2502 5555 \u2502 <== opcode fetch DD prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 10 \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 0005 \u2502 DD \u2502 0005 \u2502 1000 \u2502 5555 \u2502 <== opcode fetch CB prefix \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0005 \u2502 DD \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0005 \u2502 CB \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0004 \u2502 CB \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 CB \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 CB \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 CB \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 CB \u2502 0006 \u2502 1000 \u2502 5555 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 CB \u2502 0006 \u2502 1000 \u2502 5555 \u2502 <== memory read d-offset \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 CB \u2502 0007 \u2502 1000 \u2502 5555 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 1000 \u2502 5555 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 1000 \u2502 5555 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 1000 \u2502 5555 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 03 \u2502 0007 \u2502 1000 \u2502 5555 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 03 \u2502 0007 \u2502 1000 \u2502 5555 \u2502 <== memory read (pseudo opcode fetch) \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 03 \u2502 0008 \u2502 1000 \u2502 5555 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 CE \u2502 0008 \u2502 1000 \u2502 5555 \u2502 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 CE \u2502 0008 \u2502 1000 \u2502 5503 \u2502 \u250214/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0007 \u2502 CE \u2502 0008 \u2502 1000 \u2502 5503 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 CE \u2502 0008 \u2502 1000 \u2502 5503 \u2502 \u250215/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 CE \u2502 0008 \u2502 1000 \u2502 5503 \u2502 <== 2 extra clock cycles \u250215/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 CE \u2502 0008 \u2502 1000 \u2502 5503 \u2502 \u250216/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 CE \u2502 0008 \u2502 1000 \u2502 5503 \u2502 \u250216/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 CE \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250217/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 CE \u2502 0008 \u2502 1000 \u2502 1003 \u2502 <== memory read (operand) \u250217/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1003 \u2502 CE \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250218/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1003 \u2502 00 \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250218/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1003 \u2502 00 \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250219/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1003 \u2502 00 \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250219/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 00 \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250220/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 00 \u2502 0008 \u2502 1000 \u2502 1003 \u2502 <== 1 extra clock cycle \u250220/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 00 \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250221/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 00 \u2502 0008 \u2502 1000 \u2502 1003 \u2502 <== memory write (operand) \u250221/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 1003 \u2502 02 \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250222/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 1003 \u2502 02 \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250222/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 1003 \u2502 02 \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250223/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 1003 \u2502 02 \u2502 0008 \u2502 1000 \u2502 1003 \u2502 \u250223/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 02 \u2502 0008 \u2502 1000 \u2502 1003 \u2502\n\nIt all starts as expected:\n\n  * a regular opcode fetch for the DD prefix\n  * another regular opcode fetch for the CB prefix\n  * a memory read machine cycle to load the d-offset (03)\n\nBut now it gets weird. The next byte that must be loaded is the \u2018regular\u2019\nopcode CE, but this doesn\u2019t happen with an opcode fetch machine cycle, but\ninstead with a memory read machine cycle. The M1 pin isn\u2019t set, and there are\nalso no RFSH clock cycles (which also explains why the R register isn\u2019t\nincremented).\n\nNow let\u2019s have a look at the undocumented instruction SET 1,(IX+d),B (machine\ncode byte sequence DD CB 03 C8):\n\n    \n    \n    SET 1,(IX+d),B \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 BC \u2502 IX \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 000B \u2502 00 \u2502 000B \u2502 0000 \u2502 1000 \u2502 1003 \u2502 <== opcode fetch DD prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000B \u2502 00 \u2502 000C \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000B \u2502 DD \u2502 000C \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0008 \u2502 DD \u2502 000C \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 DD \u2502 000C \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 DD \u2502 000C \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 DD \u2502 000C \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 DD \u2502 000C \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 000C \u2502 DD \u2502 000C \u2502 0000 \u2502 1000 \u2502 1003 \u2502 <== opcode fetch CB prefix \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000C \u2502 DD \u2502 000D \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000C \u2502 CB \u2502 000D \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000C \u2502 CB \u2502 000D \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0006 \u2502 CB \u2502 000D \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0006 \u2502 CB \u2502 000D \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0006 \u2502 CB \u2502 000D \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0006 \u2502 CB \u2502 000D \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 000D \u2502 CB \u2502 000D \u2502 0000 \u2502 1000 \u2502 1003 \u2502 <== memory read (d-offset) \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000D \u2502 CB \u2502 000E \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000D \u2502 03 \u2502 000E \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000D \u2502 03 \u2502 000E \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000D \u2502 03 \u2502 000E \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 000C \u2502 03 \u2502 000E \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 000E \u2502 03 \u2502 000E \u2502 0000 \u2502 1000 \u2502 1003 \u2502 <== memory read (pseudo opcode fetch) \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000E \u2502 03 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000E \u2502 C8 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000E \u2502 C8 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250214/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000E \u2502 C8 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 000E \u2502 C8 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250215/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 000E \u2502 C8 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 <== 2 extra clock cycles \u250215/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 000E \u2502 C8 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250216/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 000E \u2502 C8 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250216/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 000E \u2502 C8 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250217/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 C8 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 <== memory read (operand) \u250217/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1003 \u2502 C8 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250218/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1003 \u2502 00 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250218/1 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1003 \u2502 00 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250219/0 \u2502 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 1003 \u2502 00 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250219/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 00 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250220/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 00 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 <== 1 extra clock cycle \u250220/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 00 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250221/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 00 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 <== memory write (operand) \u250221/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 1003 \u2502 02 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250222/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 1003 \u2502 02 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250222/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 1003 \u2502 02 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250223/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 WR \u2502 1003 \u2502 02 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u250223/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 1003 \u2502 02 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502\n\n...it looks identical to the documented SET 1,(IX+3) instruction!\n\nBut so far, the B register hasn\u2019t been updated, this happens overlapped in the\nopcode fetch of the next instruction:\n\n    \n    \n    SET 1,(IX+d),B - continued into next opcode fetch \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 BC \u2502 IX \u2502 WZ \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 000F \u2502 00 \u2502 000F \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000F \u2502 00 \u2502 0010 \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 000F \u2502 00 \u2502 0010 \u2502 0000 \u2502 1000 \u2502 1003 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 00 \u2502 0010 \u2502 0200 \u2502 1000 \u2502 1003 \u2502 <== B register updated \u2502 3/0 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0007 \u2502 00 \u2502 0010 \u2502 0200 \u2502 1000 \u2502 1003 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0007 \u2502 00 \u2502 0010 \u2502 0200 \u2502 1000 \u2502 1003 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 RFSH \u2502 \u2502 \u2502 0007 \u2502 00 \u2502 0010 \u2502 0200 \u2502 1000 \u2502 1003 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 0010 \u2502 0200 \u2502 1000 \u2502 1003 \u2502\n\n## Interrupt Behaviour\n\nDisclaimer: I\u2019m not 100% sure if I have correctly identified the Z80 netlist\nnode which contains the IFF1 state. At the time this blog post was written the\nmost likely candidate was node #231.\n\nI haven\u2019t found the IFF2 node yet (but haven\u2019t looked very hard either).\n\n### Interrupt Detection Timing\n\nTo trigger a maskable interrupt, the INT pin must be active during the first\nhalf-cycle of the last clock cycle of an instruction (and interrupts must be\nenabled):\n\n    \n    \n    LD A,03h: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 INT \u2502 AB \u2502 DB \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 56 \u2502 IFF1 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0003 \u2502 56 \u2502 IFF1 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0003 \u2502 3E \u2502 IFF1 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 3E \u2502 IFF1 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0003 \u2502 3E \u2502 IFF1 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0003 \u2502 3E \u2502 IFF1 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0003 \u2502 3E \u2502 IFF1 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 3E \u2502 IFF1 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 3E \u2502 IFF1 \u2502 <== memory read \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 3E \u2502 IFF1 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 03 \u2502 IFF1 \u2502 \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 03 \u2502 IFF1 \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 0004 \u2502 03 \u2502 IFF1 \u2502 <== INT detection happens here! \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 03 \u2502 \u2502 <== interrupt has been detected\n\nNon-maskable interrupts are edge-triggered (meaning that the CPU will remember\nthat the NMI pin was going from inactive to active during instruction\nexecution). To trigger an NMI it is enough to activate the NMI pin for one\nhalf-cycle in the middle of an instruction. NMI interrupt handling will start\nin the last half-cycle of the current instruction by disabling interrupts\n(same as maskable interrupts):\n\n    \n    \n    LD A,03h: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 NMI \u2502 AB \u2502 DB \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 56 \u2502 IFF1 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0003 \u2502 56 \u2502 IFF1 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0003 \u2502 3E \u2502 IFF1 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 NMI \u2502 0000 \u2502 3E \u2502 IFF1 \u2502 <== NMI pin active for at least one half cycle \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0003 \u2502 3E \u2502 IFF1 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0003 \u2502 3E \u2502 IFF1 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0003 \u2502 3E \u2502 IFF1 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 3E \u2502 IFF1 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 3E \u2502 IFF1 \u2502 \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 3E \u2502 IFF1 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 03 \u2502 IFF1 \u2502 \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 03 \u2502 IFF1 \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 03 \u2502 IFF1 \u2502 \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 03 \u2502 \u2502 <== interrupt has been detected\n\nThe last moment an NMI is detected is the first half cycle of the last clock\ncycle of an instruction (the same half cycle where the INT pin is sampled):\n\n    \n    \n    LD A,03h \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 NMI \u2502 AB \u2502 DB \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 56 \u2502 IFF1 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0003 \u2502 56 \u2502 IFF1 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0003 \u2502 3E \u2502 IFF1 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0000 \u2502 3E \u2502 IFF1 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0003 \u2502 3E \u2502 IFF1 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0003 \u2502 3E \u2502 IFF1 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0003 \u2502 3E \u2502 IFF1 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 3E \u2502 IFF1 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 3E \u2502 IFF1 \u2502 <== memory read \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 3E \u2502 IFF1 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 03 \u2502 IFF1 \u2502 \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 03 \u2502 IFF1 \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 NMI \u2502 0004 \u2502 03 \u2502 IFF1 \u2502 <== NMI active for 1 half-cycle \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 03 \u2502 \u2502 <== NMI has been detected\n\nIf the NMI pin is active one half-cycle later, the interrupt handling will be\ndelayed to the end of the following instruction.\n\n### Prefix Bytes and Interrupts\n\nInterrupts are not handled at the end of prefix opcode fetches. If the NMI pin\nis active during a prefix fetch the interrupt will be triggered at the end of\nthe instruction following the prefix byte. This means that even non-maskable\ninterrupts will not trigger during long sequences of DD or FD prefix bytes:\n\n    \n    \n    2x DD followed by LD IX,1000h \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 NMI \u2502 AB \u2502 DB \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 56 \u2502 IFF1 \u2502 <== opcode fetch DD prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0003 \u2502 56 \u2502 IFF1 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0003 \u2502 DD \u2502 IFF1 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 NMI \u2502 0000 \u2502 DD \u2502 IFF1 \u2502 <== NMI pin active for 1 half cycle \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0003 \u2502 DD \u2502 IFF1 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0003 \u2502 DD \u2502 IFF1 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0003 \u2502 DD \u2502 IFF1 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 DD \u2502 IFF1 \u2502 <== no interrupt triggered \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 DD \u2502 IFF1 \u2502 <== opcode fetch DD prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 DD \u2502 IFF1 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 DD \u2502 IFF1 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 DD \u2502 IFF1 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 DD \u2502 IFF1 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 DD \u2502 IFF1 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 DD \u2502 IFF1 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 DD \u2502 IFF1 \u2502 <== no interrupt triggered \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0005 \u2502 DD \u2502 IFF1 \u2502 <== opcode fetch DD prefix (LD IX,nnnn) \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0005 \u2502 DD \u2502 IFF1 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0005 \u2502 DD \u2502 IFF1 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0004 \u2502 DD \u2502 IFF1 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0005 \u2502 DD \u2502 IFF1 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0005 \u2502 DD \u2502 IFF1 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0005 \u2502 DD \u2502 IFF1 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 DD \u2502 IFF1 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0006 \u2502 DD \u2502 IFF1 \u2502 <== opcode fetch (21) \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0006 \u2502 DD \u2502 IFF1 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0006 \u2502 21 \u2502 IFF1 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0006 \u2502 21 \u2502 IFF1 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0006 \u2502 21 \u2502 IFF1 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0006 \u2502 21 \u2502 IFF1 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0006 \u2502 21 \u2502 IFF1 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0006 \u2502 21 \u2502 IFF1 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0007 \u2502 21 \u2502 IFF1 \u2502 <== memory read \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0007 \u2502 21 \u2502 IFF1 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0007 \u2502 00 \u2502 IFF1 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0007 \u2502 00 \u2502 IFF1 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0007 \u2502 00 \u2502 IFF1 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 IFF1 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 00 \u2502 IFF1 \u2502 <== memory read \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0008 \u2502 00 \u2502 IFF1 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0008 \u2502 10 \u2502 IFF1 \u2502 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0008 \u2502 10 \u2502 IFF1 \u2502 \u250214/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0008 \u2502 10 \u2502 IFF1 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 10 \u2502 \u2502 <== NMI triggered here\n\n### EI, DI and interrupts\n\nThe EI instruction enables maskable interrupts during the opcode fetch machine\ncycle of the next instruction:\n\n    \n    \n    EI \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 0000 \u2502 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 00 \u2502 0001 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 FB \u2502 0001 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 FB \u2502 0001 \u2502 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 FB \u2502 0001 \u2502 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 FB \u2502 0001 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 FB \u2502 0001 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 FB \u2502 0001 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 FB \u2502 0001 \u2502 \u2502 <== next opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 FB \u2502 0002 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 00 \u2502 0002 \u2502 IFF1 \u2502 <== interrupts enabled here \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 00 \u2502 0002 \u2502 IFF1 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 00 \u2502 0002 \u2502 IFF1 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 00 \u2502 0002 \u2502 IFF1 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 0002 \u2502 IFF1 \u2502\n\nThis is the reason why maskable interrupts are delayed until the end of the\ninstruction that follows EI.\n\nEI also explicitely supresses maskable interrupts in the second half of its\nopcode fetch machine cycle. This is why maskable interrupts are not triggered\nduring a sequence of EI instructions:\n\n    \n    \n    2x EI + NOP \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 0000 \u2502 \u2502 <== opcode fetch: 1st EI \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 00 \u2502 0001 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 FB \u2502 0001 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 FB \u2502 0001 \u2502 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 FB \u2502 0001 \u2502 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 FB \u2502 0001 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 FB \u2502 0001 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 FB \u2502 0001 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 FB \u2502 0001 \u2502 \u2502 <== next opcode fetch: 2nd EI \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 FB \u2502 0002 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 FB \u2502 0002 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 FB \u2502 0002 \u2502 IFF1 \u2502 <== int enabled for 1 half cycle \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 FB \u2502 0002 \u2502 \u2502 <== int disabled right away \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 FB \u2502 0002 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0001 \u2502 FB \u2502 0002 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 FB \u2502 0002 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 FB \u2502 0002 \u2502 \u2502 <== next opcode fetch: NOP \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 FB \u2502 0003 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 00 \u2502 0003 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 00 \u2502 0003 \u2502 IFF1 \u2502 <== interrupts enabled \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 00 \u2502 0003 \u2502 IFF1 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 00 \u2502 0003 \u2502 IFF1 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 00 \u2502 0003 \u2502 IFF1 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 00 \u2502 0003 \u2502 IFF1 \u2502\n\nSince maskable interrupts are checked in the fist half-cycle of the last clock\ncycle of an instruction, it doesn\u2019t matter that interrupts are enabled for one\nhalf-cycle during a sequence of EI instructions.\n\nThe DI instruction disables interrupts right in the middle of the opcode fetch\nmachine cycle:\n\n    \n    \n    DI: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 00 \u2502 0002 \u2502 IFF1 \u2502 <== opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 00 \u2502 0003 \u2502 IFF1 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 F3 \u2502 0003 \u2502 IFF1 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 F3 \u2502 0003 \u2502 IFF1 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 F3 \u2502 0003 \u2502 \u2502 <== interrupts disabled \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 F3 \u2502 0003 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 F3 \u2502 0003 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 F3 \u2502 0003 \u2502 \u2502\n\n### RETI and RETN\n\nRETI and RETN behave identical, both copy the IFF2 bit (so far unidentified in\nthe netlist) back into IFF1 in the following opcode fetch machine cycle).\n\nFor instance this is what an NMI interrupt service routine looks like that\nonly consists of a RETI instruction. Maskable interrupts had been enabled when\nthe NMI was triggered:\n\n    \n    \n    RETI/RETN after NMI while interrupts were enabled \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0066 \u2502 00 \u2502 0002 \u2502 \u2502 <= opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0066 \u2502 00 \u2502 0067 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0066 \u2502 ED \u2502 0067 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0066 \u2502 ED \u2502 0067 \u2502 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0067 \u2502 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0067 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 ED \u2502 0067 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 ED \u2502 0067 \u2502 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0067 \u2502 ED \u2502 0067 \u2502 \u2502 <== opcode fetch RETI \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0067 \u2502 ED \u2502 0068 \u2502 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0067 \u2502 4D \u2502 0068 \u2502 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0060 \u2502 4D \u2502 0068 \u2502 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 4D \u2502 0068 \u2502 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 4D \u2502 0068 \u2502 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 4D \u2502 0068 \u2502 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 4D \u2502 0068 \u2502 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 4D \u2502 0068 \u2502 \u2502 <== memory read (return addr) \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5553 \u2502 4D \u2502 0068 \u2502 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5553 \u2502 02 \u2502 0068 \u2502 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5553 \u2502 02 \u2502 0068 \u2502 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5553 \u2502 02 \u2502 0068 \u2502 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5550 \u2502 02 \u2502 0068 \u2502 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 02 \u2502 0068 \u2502 \u2502 <== memory read (return addr) \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5554 \u2502 02 \u2502 0068 \u2502 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5554 \u2502 00 \u2502 0068 \u2502 \u2502 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5554 \u2502 00 \u2502 0068 \u2502 \u2502 \u250214/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5554 \u2502 00 \u2502 0068 \u2502 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0068 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 00 \u2502 0068 \u2502 \u2502 <== next opcode fetch (NOP) \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 00 \u2502 0003 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 00 \u2502 0003 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0002 \u2502 00 \u2502 0003 \u2502 IFF1 \u2502 <== IFF1 restored \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 0003 \u2502 IFF1 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 0003 \u2502 IFF1 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 0003 \u2502 IFF1 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0003 \u2502 IFF1 \u2502\n\nIf interrupts had not been enabled when the NMI was triggered, RETI/RETN will\nnot enable interrupts (because IFF1 is copied from IFF2).\n\n    \n    \n    RETI/RETN after NMI while interrupts were disabled: \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 AB \u2502 DB \u2502 PC \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0066 \u2502 00 \u2502 0001 \u2502 \u2502 <== opcode fetch ED prefix \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0066 \u2502 00 \u2502 0067 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0066 \u2502 ED \u2502 0067 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0066 \u2502 ED \u2502 0067 \u2502 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0067 \u2502 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0067 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0067 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0002 \u2502 ED \u2502 0067 \u2502 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0067 \u2502 ED \u2502 0067 \u2502 \u2502 <== opcode fetch RETN \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0067 \u2502 ED \u2502 0068 \u2502 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0067 \u2502 45 \u2502 0068 \u2502 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0060 \u2502 45 \u2502 0068 \u2502 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 45 \u2502 0068 \u2502 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 45 \u2502 0068 \u2502 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0003 \u2502 45 \u2502 0068 \u2502 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0000 \u2502 45 \u2502 0068 \u2502 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 45 \u2502 0068 \u2502 \u2502 <== memory read (return addr) \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5553 \u2502 45 \u2502 0068 \u2502 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5553 \u2502 01 \u2502 0068 \u2502 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5553 \u2502 01 \u2502 0068 \u2502 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5553 \u2502 01 \u2502 0068 \u2502 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5550 \u2502 01 \u2502 0068 \u2502 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 01 \u2502 0068 \u2502 \u2502 <== memory read (return addr) \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5554 \u2502 01 \u2502 0068 \u2502 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5554 \u2502 00 \u2502 0068 \u2502 \u2502 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5554 \u2502 00 \u2502 0068 \u2502 \u2502 \u250214/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 5554 \u2502 00 \u2502 0068 \u2502 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0068 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 00 \u2502 0068 \u2502 \u2502 <== next opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0001 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 0000 \u2502 00 \u2502 0002 \u2502 \u2502 <== interrupts not enabled \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0002 \u2502 \u2502\n\nWith the typical EI+RETI sequence at the end of maskable interrupt service\nroutines, interrupts will already be enabled in the opcode fetch of the RETI\ninstruction, so that the next maskable interrupt can kick in right at the end\nof RETI (note how the INT pin is active here all the time):\n\n    \n    \n    EI + RETI (maskable interrupt) \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 INT \u2502 AB \u2502 DB \u2502 PC \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 INT \u2502 0038 \u2502 E0 \u2502 0004 \u2502 \u2502 <== opcode fetch EI \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 0038 \u2502 E0 \u2502 0039 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 0038 \u2502 FB \u2502 0039 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 0038 \u2502 FB \u2502 0039 \u2502 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0005 \u2502 FB \u2502 0039 \u2502 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0005 \u2502 FB \u2502 0039 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0005 \u2502 FB \u2502 0039 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0004 \u2502 FB \u2502 0039 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 INT \u2502 0039 \u2502 FB \u2502 0039 \u2502 \u2502 <== opcode fetch ED prefix (RETI) \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 0039 \u2502 FB \u2502 003A \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 0039 \u2502 ED \u2502 003A \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 0038 \u2502 ED \u2502 003A \u2502 IFF1 \u2502 <== interrupts enabled (by EI) \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0006 \u2502 ED \u2502 003A \u2502 IFF1 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0006 \u2502 ED \u2502 003A \u2502 IFF1 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0006 \u2502 ED \u2502 003A \u2502 IFF1 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0006 \u2502 ED \u2502 003A \u2502 IFF1 \u2502 \u2502 5/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 INT \u2502 003A \u2502 ED \u2502 003A \u2502 IFF1 \u2502 <== opcode fetch RETI \u2502 5/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 003A \u2502 ED \u2502 003B \u2502 IFF1 \u2502 \u2502 6/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 003A \u2502 4D \u2502 003B \u2502 IFF1 \u2502 \u2502 6/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 003A \u2502 4D \u2502 003B \u2502 IFF1 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0007 \u2502 4D \u2502 003B \u2502 IFF1 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0007 \u2502 4D \u2502 003B \u2502 IFF1 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0007 \u2502 4D \u2502 003B \u2502 IFF1 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0000 \u2502 4D \u2502 003B \u2502 IFF1 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 INT \u2502 5553 \u2502 4D \u2502 003B \u2502 IFF1 \u2502 \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 5553 \u2502 4D \u2502 003B \u2502 IFF1 \u2502 <== memory read (return addr) \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 5553 \u2502 04 \u2502 003B \u2502 IFF1 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 5553 \u2502 04 \u2502 003B \u2502 IFF1 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 5553 \u2502 04 \u2502 003B \u2502 IFF1 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 INT \u2502 5550 \u2502 04 \u2502 003B \u2502 IFF1 \u2502 \u250212/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 INT \u2502 5554 \u2502 04 \u2502 003B \u2502 IFF1 \u2502 <== memory read (return addr) \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 5554 \u2502 04 \u2502 003B \u2502 IFF1 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 5554 \u2502 00 \u2502 003B \u2502 IFF1 \u2502 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 5554 \u2502 00 \u2502 003B \u2502 IFF1 \u2502 \u250214/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 INT \u2502 5554 \u2502 00 \u2502 003B \u2502 IFF1 \u2502 \u250214/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 INT \u2502 5554 \u2502 00 \u2502 003B \u2502 \u2502 <== interrupt handling starts!\n\n### NMI Timing\n\nWhen an NMI is triggered, the IFF1 bit and the HALT state (if active) will be\ncleared in the last half-cycle of the current instruction.\n\nNext, an opcode fetch machine cycle is performed (NOT an interrupt acknowledge\ncycle identified with M1|IORQ). The PC is not incremented during the opcode\nfetch and the resulting opcode byte will be ignored.\n\nThe opcode fetch is followed by an extra clock cycle.\n\nNext, two regular memory write machine cycles are performed to put the current\nPC on the stack.\n\nExecution then continues at the first instruction of the interrupt service\nroutine at address 0066h.\n\n    \n    \n    NMI timing (starting with last clock cycle of instruction where NMI was detected): \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 INT \u2502 HALT \u2502 AB \u2502 DB \u2502 PC \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 X/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 HALT \u2502 0002 \u2502 00 \u2502 0002 \u2502 IFF1 \u2502 <== NMI detected \u2502 X/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 00 \u2502 0002 \u2502 \u2502 <== IFF1 and HALT cleared \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0002 \u2502 00 \u2502 0002 \u2502 \u2502 <== NMI 'opcode fetch' (ignored) \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 \u2502 0002 \u2502 00 \u2502 0002 \u2502 \u2502 <== PC not incremenred! \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 \u2502 0002 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 \u2502 0002 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0003 \u2502 00 \u2502 0002 \u2502 \u2502 <== extra clock cycle \u2502 5/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0001 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 6/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0002 \u2502 \u2502 <== memory write (PC => stack) \u2502 6/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 7/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 7/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 8/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 8/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5550 \u2502 00 \u2502 0002 \u2502 \u2502 \u2502 9/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 00 \u2502 0002 \u2502 \u2502 <== memory write (PC => stack) \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 02 \u2502 0002 \u2502 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 02 \u2502 0002 \u2502 \u2502 \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 \u2502 5553 \u2502 02 \u2502 0002 \u2502 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 \u2502 5553 \u2502 02 \u2502 0002 \u2502 \u2502 \u250211/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 02 \u2502 0002 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0066 \u2502 00 \u2502 0002 \u2502 \u2502 <== ISR: opcode fetch at 0066h \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 \u2502 0066 \u2502 00 \u2502 0067 \u2502 \u2502 <== PC updated to ISR + 1 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 \u2502 0066 \u2502 00 \u2502 0067 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 \u2502 0066 \u2502 00 \u2502 0067 \u2502 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0067 \u2502 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0067 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0067 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0067 \u2502 \u2502\n\n### Mode 0 Interrupt Timing\n\nMode 0 interrupts have been inherited from the Intel 8080. Interrupt handling\nstarts in the last half cycle of the current instruction by clearing the IFF1\nbit and HALT state.\n\nNext, an \u201cinterrupt acknowledge\u201d machine cycle is executed. The hardware which\nrequested the interrupt is expected to place an opcode byte on the data bus\nwhich is executed after the interrupt acknowledge machine cycle.\n\nUsually this will be the single-byte RST p instruction which is a subroutine\ncall into one of eight hardwired destination addresses.\n\nHere\u2019s an IM0 interrupt which executes an RST 20h instruction:\n\n    \n    \n    Mode 0 Interrupt with RST 20h (starting with last clock cycle of instruction where INT was detected): \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 INT \u2502 AB \u2502 DB \u2502 PC \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 X/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0003 \u2502 00 \u2502 0004 \u2502 IFF1 \u2502 <== interrupt detected \u2502 X/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 0004 \u2502 \u2502 <== IFF1 and HALT cleared \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0004 \u2502 \u2502 <== interrupt acknowledge \u2502 1/1 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 3/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 3/1 \u2502 M1 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 4/0 \u2502 M1 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 <== opcode E7 (RST 20) on data bus \u2502 4/1 \u2502 M1 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 \u2502 6/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 <== RST 20 starts executing \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 \u2502 8/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 E7 \u2502 0004 \u2502 \u2502 <== memory write (PC => stack) \u2502 8/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 9/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 5554 \u2502 00 \u2502 0004 \u2502 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 5554 \u2502 00 \u2502 0004 \u2502 \u2502 \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5550 \u2502 00 \u2502 0004 \u2502 \u2502 \u250211/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 E7 \u2502 0004 \u2502 \u2502 <== memory write (PC => stack) \u250211/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 04 \u2502 0004 \u2502 \u2502 \u250212/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 04 \u2502 0004 \u2502 \u2502 \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 5553 \u2502 04 \u2502 0004 \u2502 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 5553 \u2502 04 \u2502 0004 \u2502 \u2502 \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 04 \u2502 0004 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0020 \u2502 E7 \u2502 0004 \u2502 \u2502 <== ISR: opcode fetch at 0020h \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0020 \u2502 E7 \u2502 0021 \u2502 \u2502 <== PC updated (ISR + 1) \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0020 \u2502 00 \u2502 0021 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0020 \u2502 00 \u2502 0021 \u2502 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 0021 \u2502 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 0021 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 0021 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0021 \u2502 \u2502\n\n### Mode 1 Interrupt Timing\n\nIn interrupt mode 1 the Z80 first clears the HALT and IFF1 state in the last\nhalf cycle of the current instruction and then executes an interrupt\nacknowledge machine cycle, but the value on the data bus will be ignored. Next\nan extra clock cycle is executed, followed by two memory write machine cycles\nto place the PC as return address on the stack. Next, execution will continue\nin the interrupt service routine at the hardwired address 0038h:\n\n    \n    \n    Mode 1 Interrupt (starting with last clock cycle of instruction where INT was detected): \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 INT \u2502 AB \u2502 DB \u2502 PC \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 X/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0003 \u2502 00 \u2502 0004 \u2502 IFF1 \u2502 <== INT detected \u2502 X/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0000 \u2502 00 \u2502 0004 \u2502 \u2502 <== IFF1 and HALT cleared \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0004 \u2502 \u2502 <== interrupt acknowledge \u2502 1/1 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 3/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 3/1 \u2502 M1 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 4/0 \u2502 M1 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 <== data bus value ignored \u2502 4/1 \u2502 M1 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 \u2502 6/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 <== one extra clock cycle \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0004 \u2502 E7 \u2502 0004 \u2502 \u2502 \u2502 8/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 E7 \u2502 0004 \u2502 \u2502 <== memory write (PC => stack) \u2502 8/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 9/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0004 \u2502 \u2502 \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 5554 \u2502 00 \u2502 0004 \u2502 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 5554 \u2502 00 \u2502 0004 \u2502 \u2502 \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5550 \u2502 00 \u2502 0004 \u2502 \u2502 \u250211/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 E7 \u2502 0004 \u2502 \u2502 <== memory write (PC => stack) \u250211/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 04 \u2502 0004 \u2502 \u2502 \u250212/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 04 \u2502 0004 \u2502 \u2502 \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 5553 \u2502 04 \u2502 0004 \u2502 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 5553 \u2502 04 \u2502 0004 \u2502 \u2502 \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 04 \u2502 0004 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0038 \u2502 E7 \u2502 0004 \u2502 \u2502 <== ISR: opcode fetch at 0038h \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0038 \u2502 E7 \u2502 0039 \u2502 \u2502 <== PC updated to ISR + 1 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0038 \u2502 00 \u2502 0039 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0038 \u2502 00 \u2502 0039 \u2502 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 0039 \u2502 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 0039 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0005 \u2502 00 \u2502 0039 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0004 \u2502 00 \u2502 0039 \u2502 \u2502\n\n### Mode 2 Interrupt Timing\n\nMode 2 interrupts are the most complex:\n\n  * in the last half cycle of the current instruction, IFF1 and HALT are cleared\n  * an interrupt acknowledge machine cycle is initiated during which the interrupt requesting device is expected to place an \u2018interrupt vector low byte\u2019 on the data bus\n  * an extra clock cycle is executed\n  * next, 2 memory write machine cycles are executed to place the PC on the stack as return address\n  * next a 16-bit interrupt vector is constructed from the I register (as high byte) and the \u2018interrupt vector low byte\u2019\n  * the 16-bit interrupt vector is placed on the address bus and two memory read machine cycles are performed to read another 16-bit address which is the start of the interrupt service routine\n  * execution continues at the interrupt service routine\n\nIn the following Mode 2 timing diagram the I register has already been loaded\nwith 01 and the byte E0 will be placed on the data bus during the interrupt\nacknowledge machine cycle. Those two values are combined to the 16-bit\ninterrupt vector address 01E0. At address 01E0 the 16-bit value 0300 is\nstored, which is the entry address of the interrupt service routine:\n\n    \n    \n    Mode 2 Interrupt (starting with last clock cycle of instruction where INT was detected): \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 T \u2502 M1 \u2502 MREQ \u2502 IORQ \u2502 RFSH \u2502 RD \u2502 WR \u2502 INT \u2502 AB \u2502 DB \u2502 PC \u2502 IFF1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 X/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 INT \u2502 0106 \u2502 00 \u2502 0008 \u2502 IFF1 \u2502 <== interrupt detected \u2502 X/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0106 \u2502 00 \u2502 0008 \u2502 \u2502 <== IFF1 and HALT cleared \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 00 \u2502 0008 \u2502 \u2502 <== interrupt acknowledge \u2502 1/1 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 00 \u2502 0008 \u2502 \u2502 \u2502 2/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 00 \u2502 0008 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 00 \u2502 0008 \u2502 \u2502 \u2502 3/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 00 \u2502 0008 \u2502 \u2502 \u2502 3/1 \u2502 M1 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 00 \u2502 0008 \u2502 \u2502 \u2502 4/0 \u2502 M1 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 \u2502 \u2502 0008 \u2502 E0 \u2502 0008 \u2502 \u2502 <== int vector low byte (E0) on data bus \u2502 4/1 \u2502 M1 \u2502 \u2502 IORQ \u2502 \u2502 \u2502 \u2502 \u2502 0000 \u2502 E0 \u2502 0008 \u2502 \u2502 \u2502 5/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0107 \u2502 E0 \u2502 0008 \u2502 \u2502 \u2502 5/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0107 \u2502 E0 \u2502 0008 \u2502 \u2502 \u2502 6/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0107 \u2502 E0 \u2502 0008 \u2502 \u2502 \u2502 6/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0107 \u2502 E0 \u2502 0008 \u2502 \u2502 \u2502 7/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0107 \u2502 E0 \u2502 0008 \u2502 \u2502 <== one extra clock cycle \u2502 7/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0105 \u2502 E0 \u2502 0008 \u2502 \u2502 \u2502 8/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 E0 \u2502 0008 \u2502 \u2502 <== memory write (PC => stack) \u2502 8/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0008 \u2502 \u2502 \u2502 9/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5554 \u2502 00 \u2502 0008 \u2502 \u2502 \u2502 9/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 5554 \u2502 00 \u2502 0008 \u2502 \u2502 \u250210/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 5554 \u2502 00 \u2502 0008 \u2502 \u2502 \u250210/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5550 \u2502 00 \u2502 0008 \u2502 \u2502 \u250211/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 E0 \u2502 0008 \u2502 \u2502 <== memory write (PC => stack) \u250211/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 08 \u2502 0008 \u2502 \u2502 \u250212/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 08 \u2502 0008 \u2502 \u2502 \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 5553 \u2502 08 \u2502 0008 \u2502 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 \u2502 WR \u2502 \u2502 5553 \u2502 08 \u2502 0008 \u2502 \u2502 \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 5553 \u2502 08 \u2502 0008 \u2502 \u2502 \u250210/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 01E0 \u2502 E0 \u2502 0008 \u2502 \u2502 <== memory read from 01E0 (I<<8)|(E0) \u250210/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 01E0 \u2502 E0 \u2502 0008 \u2502 \u2502 \u250211/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 01E0 \u2502 00 \u2502 0008 \u2502 \u2502 <== data bus: ISR address low byte (00) \u250211/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 01E0 \u2502 00 \u2502 0008 \u2502 \u2502 \u250212/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 01E0 \u2502 00 \u2502 0008 \u2502 \u2502 \u250212/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 01E0 \u2502 00 \u2502 0008 \u2502 \u2502 \u250213/0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 01E1 \u2502 00 \u2502 0008 \u2502 \u2502 <== memory read from 01E1 \u250213/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 01E1 \u2502 00 \u2502 0008 \u2502 \u2502 \u250212/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 01E1 \u2502 03 \u2502 0008 \u2502 \u2502 <==> data bus: ISR address high byte (03) \u250212/1 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 01E1 \u2502 03 \u2502 0008 \u2502 \u2502 \u250213/0 \u2502 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 01E1 \u2502 03 \u2502 0008 \u2502 \u2502 \u250213/1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 01E1 \u2502 03 \u2502 0008 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1/0 \u2502 M1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 0300 \u2502 03 \u2502 0008 \u2502 \u2502 <== ISR: opcode fetch \u2502 1/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0300 \u2502 03 \u2502 0301 \u2502 \u2502 <== PC updated to ISR + 1 \u2502 2/0 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0300 \u2502 00 \u2502 0301 \u2502 \u2502 \u2502 2/1 \u2502 M1 \u2502 MREQ \u2502 \u2502 \u2502 RD \u2502 \u2502 \u2502 0300 \u2502 00 \u2502 0301 \u2502 \u2502 \u2502 3/0 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0108 \u2502 00 \u2502 0301 \u2502 \u2502 \u2502 3/1 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0108 \u2502 00 \u2502 0301 \u2502 \u2502 \u2502 4/0 \u2502 \u2502 MREQ \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0108 \u2502 00 \u2502 0301 \u2502 \u2502 \u2502 4/1 \u2502 \u2502 \u2502 \u2502 RFSH \u2502 \u2502 \u2502 \u2502 0108 \u2502 00 \u2502 0301 \u2502 \u2502\n\n## The Brain Dump\n\n  * The Brain Dump\n  * floooh@gmail.com\n\n  * floooh\n  * flohofwoe\n\nThis is the blog and personal web page of Andre Weissflog (Floh, floooh,\nflohofwoe) mostly about programming stuff.\n\n", "frontpage": true}
