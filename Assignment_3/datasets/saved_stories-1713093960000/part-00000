{"aid": "40028855", "title": "The justification of the four freedoms (2017)", "url": "https://louigiverona.com/?page=projects&s=writings&t=philosophy&a=philosophy_freedoms", "domain": "louigiverona.com", "votes": 2, "user": "Tomte", "posted_at": "2024-04-14 05:23:27", "comments": 0, "source_title": "Louigi Verona's Workshop", "source_text": "Louigi Verona's Workshop\n\nLouigi Verona's Workshop\n\nnews |\n\nabout |\n\nprojects |\n\ndonate |\n\ncontact\n\naudio -\n\nvideo -\n\nsoftware -\n\nwritings -\n\nmisc\n\nphilosophy| fiction| the continent chronicles  \n---|---|---  \n  \n\u2039\u2039\u2039back\n\n## On the justification of the four freedoms\n\nEthics in the digital world\n\nLouigi Verona July 2016 - October 2017\n\nThe free software movement is a social movement with the goal of guaranteeing\ncertain freedoms for software users. It was formally founded by Richard\nStallman in 1983 and has since campaigned for the importance of these freedoms\nand against any actions, taken by software companies large and small that\nattack these freedoms. The Free Software Foundation also maintains the pivotal\nfree software license called GNU Public License, colloquially known as GPL.[0]\n\nOver the years there has been some criticism leveled against both the\ncampaigns run by the Foundation and its GPL license. Very few people, however,\nseem to question the philosophical basis of the free software movement,\nnamely, what it calls \"essential user freedoms\". Research reveals virtually no\npublished analysis of Stallman's writing, who has laid out the theoretical\nframework of the movement. Its ideas remain unchallenged and the validity of\n\"essential user freedoms\" is usually taken for granted.\n\nThe goal of this treatise is to demonstrate the following:\n\n  * that on closer inspection the writing of Stallman fails to justify the essential nature of the four freedoms\n  * that philosophical ideas laid out in his essays are superficial and based on too many questionable assumptions to be considered a serious discussion of ethics\n  * that Stallman uses invalid arguments to make his case, based on fearmongering, loaded language and misrepresentation of the real situation in the world of software\n  * and finally, that the problem of user freedoms in the digital age, while profoundly important, is far more nuanced and less desperate than Stallman's black-and-white view leads to believe\n\nIt is, perhaps, also helpful to note what this treatise does not say:\n\n  * it does not say that all of the problems raised by Stallman are unimportant\n  * it does not say that corporations at times do not engage in very unfair behavior\n  * it does not say that some of these problems should not be solved by \"free\" software\n  * it does not say that \"free\" software is not a very good and necessary idea\n\nImportantly, the purpose of this work is not to deliver final judgments, but\nto instead open a door to a conversation about the ethical and political\nchallenges that the world of new technology has bestowed upon us; a\nconversation free of ideology and preconceptions, based on facts and reason.\n\nThe author is a proponent of free software and strongly believes that it has\nan important and necessary role in society, without being touted as the only\nethical choice.\n\nContents\n\n1\\. Theoretical framework of the Free Software movement\n\n2\\. Is proprietary software unjust?\n\n2.1 Abuse from the author of software is possible\n\n2.2 Abuse from proprietary software developers is standard practice\n\n2.2.1 Backdoors\n\n2.2.2 Censorship\n\n2.2.3 Insecurity\n\n2.2.4 Sabotage\n\n2.2.5 Interference\n\n2.2.6 Deception\n\n2.2.7 DRM\n\n2.2.8 Surveillance\n\n2.2.9 Jails\n\n2.2.10 Tyrants\n\n2.2.11 Subscriptions\n\n2.2.12 By company or type of product\n\n2.2.13 Conclusion\n\n2.3 Proprietary software keeps people divided and reduces cooperation\n\n2.3.1 The non-scarcity dilemma\n\n2.3.2 Education\n\ni. sharing of knowledge\n\nii. sharing of tools\n\niii. free digital society\n\niv. independence from software vendors\n\nv. \"free\" software costs no money\n\nvi. \"free\" software is of high quality\n\n2.4 Chapter conclusion\n\n3\\. \"Free\" software as a solution\n\n3.1 \"Free\" software as panacea\n\n3.2 \"Free\" software removes dependency on a software vendor\n\n3.2.1 Lone developer model\n\n3.2.2 Communal development\n\n3.3 \"Free\" software as a public good\n\n3.4 The cost and types of sharing source code\n\n3.5 Extent of the benefits\n\n3.6 Efficiency\n\n3.7 Chapter conclusion\n\n4\\. Overall conclusion and proposals for a stronger case for \"free\" software\n\n4.1 \"Free\" software as a moderate philosophy\n\n4.2 Proposals for realistic political action\n\n4.2.1 Open standards and open formats\n\n4.2.2 \"Free\" software in the public sector\n\n4.2.3 Security and privacy standards\n\n4.3 Necessary scientific research\n\n5\\. Sources\n\n1\\. Theoretical framework of the Free Software movement\n\nThe basis of the theoretical framework is the Free Software Definition, which\ndefines the terms \"free\" software and \"proprietary\" software, with \"free\"\nsoftware being programs that respect users freedoms.\n\nThe freedoms in question are statements, formulated over the years by Stallman\nand are these:\n\nThe freedom to run the program as you wish, for any purpose (freedom 0). The\nfreedom to study how the program works, and change it so it does your\ncomputing as you wish (freedom 1). Access to the source code is a precondition\nfor this. The freedom to redistribute copies so you can help your neighbor\n(freedom 2). The freedom to distribute copies of your modified versions to\nothers (freedom 3). By doing this you can give the whole community a chance to\nbenefit from your changes. Access to the source code is a precondition for\nthis.[3]\n\nIf the software program denies these freedoms to the user, then, according to\nStallman, it \"makes the program an instrument of unjust power\" and is then\ncalled \"proprietary\". [3]\n\n\"We campaign for these freedoms because everyone deserves them.\" [3]\n\nThe importance of Stallman's pronouncements should not be underrated. This is\none of the first formulations of ethics in the realm of software, and a claim\nto a very bold way of dividing people and their actions into \"good\" and\n\"evil\". Such a claim requires scrutiny.\n\nA careful reader will recognize that Stallman is actually making two separate\nclaims:\n\n  1. Proprietary software is unjust\n  2. The solution to this is to adopt certain freedoms as essential\n\nThe adoption of proposed user freedoms then leads to making sure that people\navoid using proprietary software and resources are channeled into creating and\nadopting \"free\" software, as the only ethical option.\n\nWhat case does Stallman make to support these claims?\n\nThe whole theoretical framework of the Free Software movement is laid out in\n12 essays at gnu.org in the \"Philosophy\" section, under the title\n\"Introduction\".[1] An additional link, \"History of GNU\", leads to a page with\nseveral more essays talking about the history of the project and an article in\nwhich Stallman recalls how the rise of proprietary (closed source) software\nhas changed his hacker community and inspired him to take action against what\nhe perceives as control of corporations over \"what kind of society we are\nallowed to have\".[2]\n\nAmong the 12 essays, 7 deal with the philosophy itself, 1 lists alleged\nproblems with non-\"free\" software, 1 lists motivations to writing \"free\"\nsoftware, 1 is a dystopian fiction story and 2 deal with government adoption\nof \"free\" software.\n\nThere are an additional 28 essays, as of the moment of writing, mostly\ncommenting on recent events and largely repeating the message, laid out in the\n\"Introduction\".\n\nStallman dedicates considerable time arguing for claim 1. In fact, the bulk of\nhis writing is dedicated to outlining the unfair character of proprietary\nsoftware. However, there is hardly anything in his essays dedicated to\ndemonstrating why \"free\" software is a solution to the problem, and if it is,\nwhy should this solution be preferred to other possible solutions.\n\nStallman seems to think that the problem at hand and his proposed solution are\nobvious and require no special justification, but of course this is not the\ncase, and, as will be demonstrated in this treatise, his perception of the\nworld of software lacks nuance.\n\nIn general, Stallman's arguments are typically not done in any organized\nmanner. His handling of arguments is fairly unsystematic.\n\nThis is not a stab at the content of Stallman's writings, as his manner of\norganizing an argument has no relevance to whether it is correct or not.\nHowever, it remains relevant to anyone investigating his claims.\n\nThe reason why this is mentioned at all is because it requires considerable\neffort to locate Stallman's arguments and then organize them in a systematic\nfashion. The result of this is that arguments in this treatise are rarely\npresented to the reader in the same form as they appear in Stallman's essays.\nI always link to Stallman's original writings when referencing his position\nand devote significant time explaining why I believe a certain essay or line\nof reasoning can be summarized in the way I present it.\n\nThis state of affairs exposes investigators to possible reproach that some\nargument, buried in the text, had been missed, or worse - misinterpreted. I\nhave attempted to make my analysis of Stallman's writings as careful, thorough\nand charitable as possible. In a number of instances I believe my\ninterpretation makes Stallman's arguments stronger.\n\nIn the following chapters we will examine both Stallman's claims. In chapter 2\nwe will examine the case he makes for the injustice of proprietary software\nand also look at the evidence he provides. In chapter 3 we will examine his\nsecond claim. Chapter 4 will outline the conclusions and talk about proposed\nsolutions.\n\n2\\. Is proprietary software unjust?\n\nStallman's case for claim 1 is not done in any organized manner. He often\nsimply postulates that proprietary software is unjust, without giving much\nexplanation as to why that is so. In one of the articles he writes:\n\nProprietary software, also called nonfree software, means software that\ndoesn't respect users' freedom and community. This means that its developer or\nowner has power over its users. This power is itself an injustice.[4]\n\nIn yet another article he expands the point:\n\nIf the users don't control the program, the program controls the users. With\nproprietary software, there is always some entity, the developer or \u201cowner\u201d of\nthe program, that controls the program\u2014and through it, exercises power over\nits users. A nonfree program is a yoke, an instrument of unjust power.[5]\n\nBut all Stallman does is repeat his previous statement. There is no\nexplanation as to why he considers this power to be unjust and, in fact,\nwhether the whole framing of developer/user relationship in terms of power of\none over the other is even legitimate.\n\nMost of Stallman's justification seems to be found in his essay \"Free Software\nIs Even More Important Now\", under the subtitle \"The Injustice of\nProprietariness\" and under the subtitle \"Free Software: More Than\n\u201cAdvantages\u201d\".[5] His arguments seem to be these:\n\n  1. if the user cannot change the source code, then he is in theory open to abuse from the author of the program\n  2. abuse from proprietary software developers is standard practice\n  3. proprietary software keeps people divided and reduces cooperation\n\nIn effect, all three points are but one argument and can be summarized as\n\"dependence on a software vendor\". Stallman will typically use exactly this\nkind of language, by referring to \"dependence on megacorporations\".[134] The\nthree statements listed are the components that appear to constitute\nStallman's contention.\n\nIt is unclear whether Stallman's position is consequentialist in nature, i.e.\nwhat matters to him are possible negative consequences, or if he despises the\nwhole idea of someone not giving another person an ability to change the\nprogram, and believes that it is wrong on principle, even if no negative\nconsequences will follow and/or these negative consequences have a solution\nother than \"free\" software.\n\nIf it is the latter, then the position runs contrary to the secular approach\nto ethics, with its emphasis on consequences of actions, and should be\nconsidered unreasonable until rational reasons are put forward to justify the\nprinciple. I will, however, be assuming that Stallman's philosophy is\npragmatic in nature and that what matters to him are consequences that he\nbelieves are real.\n\nThis assumption carries with it an obligation that if consequences are\ndemonstrably much less grave or even absent in certain cases, this change of\ncircumstances must influence the pragmatic philosophy.\n\nIt is also important to note that although Stallman posits other arguments,\nall of them depend on the idea that proprietary software is unjust. To give an\nexample, in the same essay Stallman writes:\n\nSchools (and this includes all educational activities) influence the future of\nsociety through what they teach. They should teach exclusively free software,\nso as to use their influence for the good. To teach a proprietary program is\nto implant dependence, which goes against the mission of education. By\ntraining in use of free software, schools will direct society's future towards\nfreedom, and help talented programmers master the craft.[5]\n\nHowever, this argument only works if we already believe that proprietary\nsoftware is \"bad\", that it \"implants dependence\" and that it does not allow\nfor cooperation and education. Therefore, we are ignoring such arguments as\nsecondary and not important to Stallman's primary case.\n\n2.1 Abuse from the author of software is possible\n\nIf the users don't control the program, the program controls the users. With\nproprietary software, there is always some entity, the developer or \u201cowner\u201d of\nthe program, that controls the program\u2014and through it, exercises power over\nits users.[5]\n\nIt is entirely true that a closed source package provides little transparency\nof its inner workings to the user. Our goal is to understand the implications\nof this circumstance and whether it shows proprietary software to be unjust.\n\nWe should start by noticing that such situation is true for many trades. For\nexample, when we go to a restaurant, we hope that the cook has not abused our\ntrust and will not poison us. When we board an airplane, we have no access to\nits engines and would not be able to check for ourselves whether its design is\nadequate and poses no health risks. We effectively put our trust in\nprofessionals whose job it is to make sure that food and airplane engines are\nsafe.\n\nThis trust is pragmatic and rational. If we try to be experts at everything,\nwe would effectively be denying ourselves all the fruits of the division of\nlabor which enables people to specialize and advance their craft.\n\nAt the same time, the dependence of consumers on producers is not an issue\nthat is ignored. There is a feedback loop that allows us to cease support of\nbusinesses and establishments that repeatedly betray our expectations. In some\ncases these businesses can be severely punished, in some cases making large\ncorporations responsible is objectively difficult to achieve.\n\nFree market, as effective as it is, is therefore not the only mechanism to\nmanage the relationship between producers and consumers. Businesses are\nregulated, and are often required to satisfy strict safety and quality\nrequirements. Consumer rights protection is a constantly developing body of\nlaw, dramatically improving the quality and reliability of services in the\nprivate marketplace.\n\nEven very reliable businesses will occasionally be liable for misconduct. A\ncook might use spoiled milk or unwashed vegetables, either deliberately or by\nmistake. This problem is real. 351 000 people die of food poisoning globally\nevery year.[6] Studies also indicate that in the US almost half of food money\nis spent on restaurant-prepared food.[7] Thus, restaurant food safety is an\nimportant concern.\n\nThis concern is widely recognized, and the food industry is heavily regulated.\nAs a consequence of this concern we do not, however, consider restaurants to\nbe an unethical business practice in and of itself. The theoretical\npossibility of misconduct is simply not enough to consider a practice\nunethical. All it does, is call for a certain level of control, typically\nprovided by a government institution and/or an independent third party.\n\nIt should be recognized that analogies with other trades are totally\napplicable in this context. Stallman's argument is not about software, it is\nabout control. He argues that outsourcing an activity to a professional is\nproblematic, in fact, so much so that it should be completely rejected -\nbecause such a position of \"power\" can in theory be abused.\n\nLet us reiterate again: whenever we outsource a certain activity to\nprofessionals, we are giving up a portion of our control and have the\nprofessionals exercise \"power\" over us. As professionals, we ourselves\nexercise such \"power\" over our customers every day. This is the basis of\nmodern economy - the division of labor.\n\nBecause Stallman does not explain how software development is different in\nthis regard to other areas of human expertise, his position, consistently\napplied, becomes a position against the division of labor.\n\nNow, I am not saying that Stallman is against the division of labor. That\nwould be quite an uncharitable reading of what he is saying. But I do believe\nthat if we follow his line of thought, that's where we end up. Stallman seems\nto limit his reasoning to software alone and never addresses the wider\nimplications of what he is saying. He does not explain why software should be\ntaken out of this wider context and, honestly, I haven't been able to come up\nwith any ideas either. In other words, I currently don't see how Stallman's\nargument does not become an argument against the division of labor as a\nconcept.\n\nAnd even if we throw out all of the comparisons with other industries, his\nargument definitely implies that the division of labor in the realm of\nsoftware is an imbalance of power - a claim that requires more than just an\nassertion. And in later sections and chapters we'll see that a lot of\nreasoning and evidence goes against this claim.\n\nOne might, perhaps, argue that professionalization does not mean making\nsoftware proprietary. This will be addressed in great detail in Chapter 3. To\ngive a brief response here, turning software development of a product which\nusers are free to modify and redistribute into a profitable business is\nobjectively difficult. In today's world and for most software products,\nprofitable software development is guaranteed only when developers protect the\nfruits of their labor by keeping the source code to themselves. At the same\ntime, taking advantage of access to source code is, in most cases, not very\nrealistic. This latter point is going to be addressed in multiple sections of\nthis book, the earliest of these instances coming up in just several\nparagraphs.\n\nWhen evaluating Stallman's argument, we must also address the language he\nuses. As we will see in the many following sections, Stallman's writing style\nfails to contribute to a balanced discussion. He repeatedly employs a number\nof rhetorical devices that are best left to propaganda, not a serious\ndiscourse of ethics.\n\nFor instance, he often uses what is known as \"loaded language\", when words\nchosen do not aim for an impartial representation, but are utilized to\ninfluence emotional state of the reader and guide him toward a particular\nconclusion based on visceral reactions.\n\nIt is obvious that using the phrase \"exercise of power\" is likely to invoke a\nnegative response, and thus make things appear more sinister than they really\nare. As mentioned above, we are subject to such \"exercise of power\" daily and\nfrom multiple sources - and don't consider it to be problematic to the point\nof rejecting professional services.\n\nHe also uses something known as \"persuasive definition\", when a word is given\nan uncommon definition in order to advance one's agenda. Stallman calls \"non-\nfree\" programs a \"yoke, an instrument of unjust power\" and calls proprietary\nsoftware \"malware\".\n\nAnd finally, in that same paragraph he uses equivocation to grossly\nmisrepresent the actual state of affairs. He writes: \"If the users don't\ncontrol the program, the program controls the users\".\n\nBy employing his own definition of \"controlling a program\" in the first part\nof the sentence, which in this case would mean \"having access to a program's\nsource code\", and then using the word \"control\" in its ordinary meaning of\n\"exercising command or power over someone\", he is able to make it appear as if\nproprietary software developers have nefarious plans towards the user.\n\nBut, of course, not having access to source code does not automatically mean\nthat the program \"controls the user\". It's not even clear what that actually\nmeans. We can, perhaps, intend it as a metaphor, that a program can perform\nactions that the user does not want it to, or that it cannot perform actions\nthat the user wants it to.\n\nBut anyone who cannot program will find themselves in any of these situations\ndaily, whether the source code is available or not. Inability to write code\ndenies the user to be \"in control\" of any software, regardless of its standing\nin relation to Stallman's freedoms.\n\nThe only segment of the population, to which the problem of controlling\nsoftware makes sense at all, are programmers. But even among them there is a\ngreat deal of specialization, and someone who has done web development all\ntheir life would require substantial efforts to make sense of a desktop\nenvironment, and someone who has done graphics development would be lost in\nprograms that deal with audio processing. Differences between programming\nlanguages, environments and the amount of special knowledge required is enough\nthat any meaningful change is likely to be impossible unless substantial\nresources are spent on acquiring skills necessary for the job.\n\nIn other words, the availability of source code in most cases is irrelevant\nand does not solve the problem of our metaphorical \"program controlling the\nuser\". In fact, Stallman himself acknowledges this when he speaks about the\nnon-\"free\" nature of JavaScript.[27] Although JavaScript code has to be passed\non to the client-side in its entirety, Stallman still claims it is non-\"free\",\nsince it is often distributed in minimized form and is difficult to edit. In\nother words, source code should not simply be available, but also immediately\nand easily editable.\n\nThis is an interesting detail. Here we see Stallman trying to explain that his\ninterest is not a formal alignment with his proposed freedoms, but their\nactual availability to the user, which is a commendable approach. What's not\ncommendable, however, is the lack of recognition that in case of a user who\ncannot program, the source code is definitely not editable, as the user has no\nskills to do that. Arguing that a user is able to learn how to code would be\ninvoking a double standard. A minimized JavaScript library can definitely be\nedited in such a way so as to make it readable. And, arguably, this will take\nless effort then learning how to code (in fact, there are tools that do a good\njob of deobfuscating JavaScript code). And thus, while formally a user has the\nfreedom to edit the code, in all actuality she cannot exercise that freedom.\n\nIt can, perhaps, be argued that the availability of source code will allow one\nto find help more easily, but we will discuss this in greater detail when\nanalyzing Stallman's second claim, that \"free\" software is the solution.\nSuffice to say, the advantages are not very obvious.\n\nAnd this still does not save Stallman from a double standard: being dependent\non a developer of a proprietary program is bad, but being dependent on a\ndeveloper of a \"free\" program is somehow acceptable:\n\nA person or company has the right to cease to work on a particular program;\nthe wrong here is Microsoft does this after having made the users dependent on\nMicrosoft, because they are not free to ask anyone else to work on the program\nfor them.[129]\n\nIt can easily be argued that what Stallman does is simply advocate for users\nto stop being dependent on proprietary software developers, and begin to be\ndependent on the \"free\" software community, which they now have to ask to\ndevelop programs for them, as if the former dependency is \"unjust\" and the\nlatter is \"just\".\n\nSo, let us reiterate both the initial argument and my response.\n\nAccording to Stallman, proprietary software is unjust because users do not\nhave complete control over the software, by which Stallman understands owning\nthe source code. Under the assumption that Stallman's philosophy is\nconsequential, the lack of complete control on the part of the users is\nproblematic because they are then open to possible abuse from the software\ndeveloper.\n\nI, however, have argued that mere theoretical possibility of misconduct is not\nenough to consider a practice unethical. All it does, is call for a certain\nlevel of control, typically provided by a government institution and/or an\nindependent third party.\n\nA more rational approach would be to analyze not only whether abuse is\npossible, but whether it is also probable.\n\nI have also argued that the cost of complete control of software by the user\nis very high, as most consumers of software are not software engineers, but\nhave deferred expanding on this point in detail until Chapter 3.\n\nAnd this is what leads us to Stallman's second argument.\n\n2.2 Abuse from proprietary software developers is standard practice\n\nFull phrase used by Stallman is \"...proprietary programs are designed to spy\non the users, restrict them, censor them, and abuse them.\" He then links to a\nseparate page that is called \"Proprietary Software Is Often Malware\". Apart\nfrom text, which is partially quoted below, the page contains a table, linking\nto examples of proprietary software abusing its users.\n\nHere's what Stallman writes:\n\nPower corrupts, so the proprietary program's developer is tempted to design\nthe program to mistreat its users\u2014that is, to make it malware. (Malware means\nsoftware whose functioning mistreats the user.) Of course, the developer\nusually does not do this out of malice, but rather to put the users at a\ndisadvantage. That does not make it any less nasty or more legitimate.\n\nYielding to that temptation has become ever more frequent; nowadays it is\nstandard practice. Modern proprietary software is software for suckers!\n\nUsers of proprietary software are defenseless against these forms of\nmistreatment. The way to avoid them is by insisting on free (freedom-\nrespecting) software. Since free software is controlled by its users, they\nhave a pretty good defense against malicious software functionality. [4]\n\nWe again see signs of loaded language and persuasive definition, but let us\nreturn to this paragraph later, after we've looked through the examples of\nproprietary software abuses that Stallman offers. The only important thing to\nnote here is that Stallman claims that users are being routinely mistreated,\nthat this mistreatment is intentional, and that this is \"standard practice\".\n\nThe examples designed to prove this claim are divided into a number of\nsections, namely: backdoors, censorship, insecurity, sabotage, interference,\nsurveillance, Digital Restrictions Management, jails, tyrants. And then\nspecifically by company products: \"Apple Malware\", \"Microsoft Malware\",\n\"Malware in mobile devices\", \"Malware in the Amazon Swindle\", etc.\n\nNote: section headings listed above contain inaccuracies, inserted by Stallman\nas a reflection of his political position. \"Digital Restrictions Management\"\nis actually \"Digital Rights Management\". Amazon Swindle refers to Amazon\nKindle. The term malware, as we will see in the sections below, is name-\ncalling on Stallman's part and does not refer to actual malware. For example,\nhe considers Microsoft Windows as a whole to be malware. [130]\n\nWe will now go through each section and study the examples provided in order\nto see whether they indeed demonstrate the validity of Stallman's claim.\n\nHowever, before we commence with our analysis, we should answer one very\nimportant question, namely - what is the use of bringing up these examples?\nOr, asked in another way - what do these examples intend to prove?\n\nThe purpose of examples might be this: to show that abuse by proprietary\nsoftware developers is not simply possible, but also probable. But that the\npurpose of these examples is to show abuse being probable is my own\ninterpretation, and a very charitable one at that. Stallman does not say that\nthis is what he is doing and seems to be committing a fallacy of circular\nreasoning, which is trivial to show.\n\nThe important word in the quote above is \"mistreat\". Stallman never defines\nthis word directly, but it is actually a key term. He calls whole operating\nsystems \"malware\"[130] and then loosely defines malware as software, which\n\"mistreats\" the user.\n\nIn his examples he often seems to define \"mistreatment\" as software not\nrespecting the principles of \"free\" software. But if his goal is to show that\nproprietary software is unjust and THUS we need \"free\" software, saying that\nproprietary software is unjust, because it is not \"free\", does not prove any\ninjustice. Instead, this is classical circular reasoning - \"free\" software is\njust, because proprietary software is unjust, and it is unjust, because it is\nnot \"free\" software.\n\nTherefore, any attempt to understand Stallman's examples of \"mistreatment of\nusers\" in terms of his proposed freedoms is invalid reasoning and should be\nrejected. Unless Stallman's argument is simpler and is this: proprietary\nsoftware allows for misconduct, therefore, it is unjust. End of argument. And\nexamples are, literally, examples of injustice of proprietary software,\nwithout claiming to be proof of any kind, in which case they are useless to\nStallman's case.\n\nThese examples can also be looked at as a sort of additional evidence that\nwhat Stallman theorized about is actually happening - and happening routinely,\non an everyday basis, as standard practice of the proprietary software\nindustry.\n\nWhether this is what Stallman intended or not is difficult to infer from his\nwriting. But as I believe that this is a better case for \"free\" software, I\nwill look at his data from the point of view of this more sophisticated\nframework. One can indeed attempt to demonstrate that the software industry is\nespecially prone to customer rights violations, where these violations are\ndefined in terms other than Stallman's software freedoms to avoid invalid\nreasoning, and make the case for proprietary software being unjust.\n\nLet us now proceed to evaluate evidence for this refined claim.\n\nImportant note: the reader is encouraged to go through these sections, as they\nare much more than just a list of examples. Section 2.2 will supply very\nrelevant background to the kind of problems that worry \"free\" software\nsupporters, and the kind of problems that should worry everyone. This section\nis also extremely important in evaluating the veracity of Stallman's general\nnarrative that proprietary software is a source of routine abuse of its users.\n\n2.2.1 Backdoors\n\nA backdoor is a method, often secret, of bypassing normal authentication in a\nproduct, computer system, cryptosystem or algorithm etc. Backdoors are often\nused for securing unauthorized remote access to a computer. Stallman lists\nexamples of demonstrated backdoors in proprietary software. As there are quite\na few of them, we will take a look only at several, and then give an overview\nof the whole section.\n\n\u2022 The universal back door in portable phones is employed to listen through\ntheir microphones.\n\nHere Stallman links to an article by Bruce Schneier about the possibility to\neavesdrop, by either mobile providers remotely installing a piece of software\nor FBI actually setting a hardware bug into the phone.[8] Eavesdropping\nmentioned in the article is in the context of crime prosecution. Basically,\neavesdropping on a mafia boss. The article is speculative and Schneier clearly\nsays that he does not have any evidence and that it is him merely\nhypothesizing. One of his sources, a BBC news article, says:\n\nMobiles communicate with their base station on a frequency separate from the\none used for talking. If you have details of the frequencies and encryption\ncodes being used you can listen in to what is being said in the immediate\nvicinity of any phone in the network.\n\nAccording to some reports, intelligence services do not even need to obtain\npermission from the networks to get their hands on the codes.\n\nSo provided it is switched on, a mobile sitting on the desk of a politician or\nbusinessman can act as a powerful, undetectable bug.[9]\n\nThis is a scary prospect, but the evidence is sketchy at best, with \"some\nreports\" being the only source of these stories. Even if true, it is not\nentirely clear if \"free\" software can help avoid such eavesdropping.\n\nAnother article that Stallman links to is an article by Thom Holwerda on how\nevery mobile phone has an additional operating system that runs on baseband\nprocessor.[10] Holwerda explains that the software is buggy and can be\nexploited by a third party and then argues that \"insecurity of baseband\nsoftware is not by error; it's by design\". He goes on to explain that this\nproprietary operating system is old and was written in the 90s when approach\nto security was different. In other words, he does not claim that Qualcomm\nwrote this operating system to deliberately abuse its users. He does argue\nthat if the operating system was free, it is more likely that it would've been\nupdated to comply with modern security standards.\n\nConclusion: Stallman's claim is misleading. Existing evidence tells us about\ndistinct cases when software of hardware bugs had been installed for\ninvestigative work. The sources Stallman links to specifically explain that\nthis state of affairs is not deliberate. Finally, he does not mention that\nmany modern processors are already using an open implementation of such an\noperating system called OKL4. Using open source implementations (not\nnecessarily \"free\" per Stallman's definition) could be prudent for a lot, if\nnot most of standardized software, and especially firmware.\n\n\u2022 Dell computers, shipped with Windows, had a bogus root certificate that\nallowed anyone (not just Dell) to remotely authorize any software to run on\nthe computer.\n\nIt was a bug in Dell's setup that was promptly fixed.[36] Such errors\nroutinely happen (and get quickly fixed) everywhere, including \"free\" software\ndistributions. There is no reason to believe that this has anything to do with\nproprietary software, nor is there any evidence that Dell did this\nintentionally to mistreat its users or \"put them at a disadvantage\". In fact,\neven suggesting this is blatantly dishonest. Yet, Stallman lists a security\nbug as an example of intentional exercise of power over the user.\n\nConclusion: This is a clear case of misrepresenting a quickly fixed security\nbug as an intentional backdoor.\n\n\u2022 Baidu's proprietary Android library, Moplus, has a back door that can\n\u201cupload files\u201d as well as forcibly install apps. It is used by 14,000 Android\napplications.\n\nThis is a case of a serious security vulnerability in an SDK, but Stallman's\nwording gives an impression of malice on the part of Baidu, as if this is a\nbackdoor, intentionally introduced by Baidu as part of \"exercising power over\nthe user\". Also, the sentence is written in present clause, as if the\nvulnerability is still out there, although it was fixed within days of being\nreported.[37]\n\nThe functionality in Baidu's SDK allowed a third party to silently install\napps, make calls and send fake SMS messages. Someone had discovered this\nvulnerability and wrote a worm that was installing unwanted apps on rooted\ndevices. It is through discovering this worm that compromising SDK code was\nfound out. A security software company \"Trend Micro\" has worked with Baidu to\nhelp resolve the problem.\n\nThere is, however, zero evidence that this was done by Baidu in order to\nmistreat users, silently install apps, send fake SMS messages or in any other\nway control users' devices, and there is zero evidence that such activity was\never performed by the company.\n\nWhile it is not clear why this functionality was there - was it originally\nintended for test purposes or was it an architecture error or for whatever\nother reason, - it seems improbable even on principle that a large company\nwould intentionally build malicious code into their SDK, in order to send fake\nSMS messages. Not only such vulnerabilities are scouted for and discovered by\nsecurity companies relatively quickly, both the risk of being discovered and\nthe questionable effectiveness of such practices for a company with an\nestablished business make it a wild suggestion. But most importantly, it is\nnot supported by the existing evidence.\n\nFinally, free software is not a guarantee against such situations. It can be\nargued that making SDKs open-source will allow vulnerabilities in the code to\nbe discovered much earlier. Whether there is any evidence for this claim will\nbe discussed in 2.2.3 Proprietary Insecurity. But this is a separate\ndiscussion and not relevant to the argument Stallman tries to support, that\n\"developer is tempted to design the program to mistreat its users\" and that\nmistreating the user is \"standard practice\".\n\nConclusion: This is another clear case of misrepresenting a quickly fixed\nsecurity vulnerability as an intentional backdoor on the part of the\ndeveloper.\n\n\u2022 Microsoft has already backdoored its disk encryption\n\nWe are linked to an article by Micah Lee on how Microsoft has added a feature\nof automatically creating a backup of the user's encryption key to the\ncloud.[11] The choice of the word \"backdoor\" here is questionable, as is the\nimplication that Microsoft did this on purpose to get access to users' data.\nWhat the article really says is that it is a decision that can be considered\npoor from a security standpoint, but the author does not claim that Microsoft\nhas created a backdoor to abuse users. In fact, the purpose of the feature is\nquite the opposite, to help users in case the recovery key is lost:\n\n\u201cWhen a device goes into recovery mode, and the user doesn\u2019t have access to\nthe recovery key, the data on the drive will become permanently inaccessible.\nBased on the possibility of this outcome and a broad survey of customer\nfeedback we chose to automatically backup the user recovery key,\u201d a Microsoft\nspokesperson told me. \u201cThe recovery key requires physical access to the user\ndevice and is not useful without it.\u201d[11]\n\nIt also explains, that users are able to log in using a domain other than\nMicrosoft, in which case a key will not be sent to Microsoft at all:\n\nIf you login to Windows using your company\u2019s or university\u2019s Windows domain,\nthen your recovery key will get sent to a server controlled by your company or\nuniversity instead of Microsoft \u2014 but still, you can\u2019t prevent device\nencryption from sending your recovery key.[11]\n\nWhile all of this can be frustrating to more advanced and security conscious\nusers, and we can argue that an option to store the key locally is required,\nthis is definitely not \"user abuse by proprietary software\", nor is this even\na backdoor in any common sense. It is difficult to see any conscious plan to\ngive users a disadvantage, as many Microsoft products do not have such a\nfeature and this is only true for Home edition of Windows. For example,\nBitLocker, available for Pro and Enterprise versions does not have this\nproblem and allows the user to store keys locally.\n\nAdditionally, if advanced users want to make sure that Microsoft does not have\nthe key, same article explains how to re-encrypt your disk and not have\nencryption keys be sent to Microsoft servers, which is to go to One Drive,\nremove the encryption key and create a new recovery key which can be made to\nbe stored locally.\n\nIt is trivial to find other sources that support the same conclusion. Here is\nan example:\n\nIt may be true that Microsoft has the decryption keys to your encrypted hard\ndisk if you bought a PC with Windows 10 or Windows 8.1 preinstalled, if it\nsupports device encryption, and if you use a Microsoft account to log into\nWindows. But it isn't a security disaster that they do, and if you aren't\nhappy that they do, it takes no more than a couple of minutes to delete the\ncopy of the key they hold and then update your system to render their key\nuseless. This can be done on any Windows version, even Home.[12]\n\nConclusion: Stallman misrepresents the real situation, by using the term\n\"backdoor\" incorrectly and implying malice on the part of Microsoft, although\nthe article he links to does not support such a view. One has to stretch the\ntruth to call the feature in question a backdoor.\n\n\u2022 Modern gratis game apps collect a wide range of data about their users and\ntheir users' friends and associates.\n\nIn this example Stallman supplies more text:\n\nModern gratis game cr...apps collect a wide range of data about their users\nand their users' friends and associates.\n\nEven nastier, they do it through ad networks that merge the data collected by\nvarious cr...apps and sites made by different companies.\n\nThey use this data to manipulate people to buy things, and hunt for \u201cwhales\u201d\nwho can be led to spend a lot of money. They also use a back door to\nmanipulate the game play for specific players.\n\nWhile the article describes gratis games, games that cost money can use the\nsame tactics.\n\nYet another example how Stallman consistently uses rhetorical devices (name-\ncalling, \"cr...apps\") that are more characteristic of propaganda and not\ncareful analysis.\n\nThe article he links to is a piece written by \"an Anonymous Free to Play\nProducer\" and titled \"'We Own You' - Confessions of an Anonymous Free to Play\nProducer\". [13]\n\nUnfortunately, the article is not an impartial narrative, but a sensationalist\nessay that purports to \"confess secrets about free to play apps\", and uses\nloaded language that is so typical of Stallman's own essays.\n\nThe article tells a story of a game producer who had built a system to collect\nuser data and used it to push advertisements that would allow him to increase\nsales. He makes sure to point out that he personally had been against this,\nbut that the CEO of the company insisted on collecting even more data. He then\ntells how advertising companies collect user data to display matching ads.\n\nYour IP address says you are in America, but you buy virtual items featuring\nthe flag of another country, we can start to figure out if you are on\nvacation, or immigrated. Perhaps English is not your first language. We use\nall of this to send you personalized Push Notifications, and show you store\nspecials and items we think you will want.[13]\n\nHe then claims that such companies will go for individual users, track them on\nFacebook, friend them using fake accounts and then create custom items for\nthem to buy. He also claims that game producers will adjust a game to make\nsure that the levels are more difficult and force players to make in-app\npurchases.\n\nAnd if you are a whale, we take Facebook stalking to a whole new level. You\nspend enough money, we will friend you. Not officially, but with a fake\naccount. Maybe it\u2019s a hot girl who shows too much cleavage? That\u2019s us. We\nlearned as much before friending you, but once you let us in, we have the keys\nto the kingdom. We will use everything to figure out how to sell to you. I\nremember we had a whale in one game that loved American Football despite\nliving in Saudi Arabia. We built several custom virtual items in both his\nfavorite team colors and their opponents, just to sell to this one guy. You\nbetter believe he bought them. And these are just vanity items. We will flat\nout adjust a game to make it behave just like it did last time the person\nbought IAP. Was a level too hard? Well now they are all that same\ndifficulty.[13]\n\nHe then finishes his article with advice to purchase paid versions, so that\ndata is not collected anymore:\n\nEvery time you play a free to play game, you just build this giant online\ndatabase of who you are, who your friends are and what you like and don\u2019t\nlike. This data is sold, bought and traded between large companies I have\nworked for. You want to put a stop to this? Stop playing free games. Buy a\ngame for 4.99 or 9.99. We don\u2019t want to be making games like this, and we\ndon\u2019t want another meeting about retention, cohorts or churn.[13]\n\nAll of this material is written in an emotional and bullying tone, to make\nreaders feel humiliated and personally targeted.\n\nHowever, a lot of what is written are half-truths - at best. It is true that\nmodern freemium apps have advertising SDKs built into them. In turn, SDKs\ncollect user data. This user data is very strictly regulated in many\ncountries, not allowing companies like Facebook and Google to sell information\nthat can zero in on a particular person.[14][19][20][21][22] US information\nprivacy law is actually one of the weakest, and currently several initiatives\nare undertaken to regulate data usage.[18]\n\nAdditionally, there have been many works written on the topic of how\nanonymized data can still be used to narrow down options to a particular\nindividual by going through big data analysis.[23] No scalable method is\ncurrently known as of this writing. It will be possible in some cases to point\nto a particular person with some probability, but no method is known to\nroutinely figure out who you are based on anonymized data. In principle,\nhowever, this is a very real concern that has to be addressed. Security and\nprivacy conscious organizations can help a lot in moving forward.\n\nThe claim about fake Facebook accounts requires significant amount of\nsupporting evidence to be believed. The narrative makes little sense and is\nunlikely to be a description of actual practice. In many countries this would\nactually be illegal. So even if there is evidence for such cases (but which\nStallman does not provide), these cases are doubtless singular cases for which\ncompanies should be severely punished.\n\nThe claim that app developers change level difficulties on the fly, depending\non how the user is doing, has no evidence. It is a typical claim that people\nmake about slot machines in casinos, where they perceive patterns in sequences\nof randomly generated outcomes. If such tweaking of difficulty was real,\ngetting evidence of it would have been almost trivial, and yet - we are\npresented with no such evidence, just assertions. Such tweaking is not\napplicable to a whole variety of games anyway, not to mention its questionable\neffectiveness in getting more in-app purchases.\n\nThis, though, has little to do with \"free\" software that Stallman argues for.\nA lot of data collection happens on the web, that most people view through\n\"free\" or at least open-source software, such as Firefox. There are many\n\"free\" software mining applications as well. It is not clear how this example\nis relevant to Stallman's argument.\n\nConclusion: This example has almost nothing to do with backdoors or with\n\"free\" software, and reliability of its source is suspect. Data collection in\nthe modern digital era is a concern, should be addressed and is already being\naddressed, but it is unlikely that progress will be achieved by writing\nsensationalist stories in loaded language that, in the end, misrepresent the\nactual state of affairs.\n\nThat Stallman is ready to quote such a biased article with suspect reliability\nis not a sign of careful research.\n\n\u2022 ARRIS cable modem has a backdoor in the backdoor.\n\nSuch backdoors are written for modems so that ISPs can access your modem\nremotely, see technical logs and also upgrade firmware. This access is very\nlimited and does not expose any sensitive information, as is stated by the\nsecurity expert who has uncovered the original backdoor.[15] Several Arris\nmodems, however, seemed to have an additional backdoor implemented that,\ninstead of giving only a limited technician shell, would give full shell\naccess. The company was slow to react and considered this a low security\nthreat, arguing that it had heard of no cases, exploiting the vulnerability.\n\nWhile this is poor response from a company, it seems unlikely that this was\nbuilt to exercise power over users and there is no evidence that Arris or ISPs\nhad been mistreating users. It is more probable that clever hackers had been\nable to gain access to someone's Internet connection.\n\nIt is understandable that Arris customers should be very unhappy about such a\nmodem. And while it is true that inability to update the modem firmware is\nproblematic, it is not necessarily a \"free\" software issue. One can have open-\nsource and even \"free\" firmware, but have no ability to update it on a piece\nof particular hardware.\n\nEither way, it is difficult to see this as a deliberate attempt to mistreat\nusers, and the article Stallman links to also emphasizes that this is a\nsecurity flaw, not a backdoor put in by Arris for nefarious purposes.\nTherefore, I don't see how this example boosts Stallman's position.\n\nConclusion: This is yet another case of misrepresenting a security\nvulnerability as an intentional backdoor on the part of a developer.\n\n\u2022 Mac OS X had an intentional local back door for 4 years.\n\nThe backdoor was \"intentional\" in that it was a mechanism to update the\n\u201cSystem Preferences\u201d app, but a security flaw allowed other processes to use\nthe same functionality. As soon as this bug was reported, Apple fixed it.\n\nConclusion: As already usual with Stallman's examples, this shows absolutely\nzero evidence of the company being \"tempted to put its users at a\ndisadvantage\". Yet another case of misrepresenting a security vulnerability as\nan intentional backdoor on the part of a developer.\n\n\u2022 The iPhone has a back door that allows Apple to remotely delete apps which\nApple considers \u201cinappropriate\u201d. Jobs said it's ok for Apple to have this\npower because of course we can trust Apple.\n\nIf we follow Stallman's link, we will swiftly see that Steve Jobs said no such\nthing. The quote from the linked article is below:\n\nSteve Jobs, Apple's chief executive, has confirmed there is a 'kill switch'\nbuilt into the iPhone that allows Apple to remotely delete malicious or\ninappropriate applications stored on the device. ... However, Mr Jobs insisted\nthat the so-called 'kill switch' was there as a precaution, rather than a\nfunction that was routinely used.\n\n\"Hopefully we never have to pull that lever, but we would be irresponsible not\nto have a lever like that to pull,\" said Mr Jobs. [16]\n\nIn another article, that Stallman links to at a later example, it is also\nclaimed that so far Apple has not used such a kill switch even once, and even\nif they would delete apps from the App Store, they would not remove apps from\nusers' devices.[17]\n\nAs we will see below with Android and Windows Phone having the same \"kill\nswitch\", in practice these backdoors are used to remove malicious software\nthat managed to infect a large number of devices.\n\nConclusion: There is no evidence that a backdoor that allows the app store\nvendor to remove malicious applications is an attempt to mistreat the user.\n\n\u2022 In Android, Google has a back door to remotely delete apps. (It is in a\nprogram called GTalkService).\n\nWhat Stallman does not mention is that this backdoor is used to remove\nmalicious software when a massive infection has occured, similar to a case\ndescribed above with Baidu SDK vulnerability. It is very difficult to see such\na measure as mistreating users.\n\nOne can argue that such a backdoor can in theory be abused. But there is a\ndifference between claiming a possible problem with a feature and outright\nsaying that developers are corrupted by their \"power over users\" and are using\nthat power to \"mistreat users\". Such wording is misleading. It just doesn't\nreflect the situation in the real world.\n\nStallman then writes:\n\nAlthough Google's exercise of this power has not been malicious so far, the\npoint is that nobody should have such power, which could also be used\nmaliciously. You might well decide to let a security service remotely\ndeactivate programs that it considers malicious. But there is no excuse for\nallowing it to delete the programs, and you should have the right to decide\nwho (if anyone) to trust in this way.\n\nThis is a very curious passage, as Stallman seems to admit that in this\nexample Google does not, in fact, mistreat its users. He again underlines that\na mere possibility of malicious use is problematic, but he does not show how\nprobable such malicious use actually is. And it is then unclear why this or\nthe previous example of Apple having a \"kill switch\" prove that \"mistreating a\nuser is standard practice\", or how that shows proprietary software to be\n\"malware\". None of these examples support Stallman's bold claims.\n\nConclusion: There is no evidence that a backdoor that allows the app store\nvendor to remove malicious applications is an attempt to mistreat the user.\nWhat Stallman does is plant flags on possible abuse opportunities. However,\nthis in itself cannot be used to argue that mistreating the user is standard\npractice.\n\n\u2022 Windows 8 also has a back door for remotely deleting apps.\n\nThis is the exact same situation, as with iPhone and Android devices. Here\nStallman again concedes to a seemingly more nuanced position and adds:\n\nYou might well decide to let a security service that you trust remotely\ndeactivate programs that it considers malicious. But there is no excuse for\ndeleting the programs, and you should have the right to decide who (if anyone)\nto trust in this way.\n\nAs these pages show, if you do want to clean your computer of malware, the\nfirst software to delete is Windows or iOS.\n\nThis is a position that is uncustomary for Stallman's obstinate views and a\nposition which can and, perhaps, should be argued. We can see that Apple, for\nexample, does not remove apps at all and allows even removed apps to stay on\nthe users' devices. Even a better idea would be to just deactivate apps, as\nStallman suggests, and allow the user to retain control of the apps he\ndeletes.\n\nIf such a position would be argued by Stallman and the FSF, there is\ndefinitely a higher probability that it would be heard. A discussion could\nensue on how to achieve this technologically. It is possible that\ntechnological cost of this is higher than simply removing apps, and organized\naction from users is required to force the change.\n\nNonetheless, this small compromise is promptly nullified by Stallman, who\nimmediately claims that Windows and iOS themselves are \"malware\" and should be\nremoved, although, as we will see in the general conclusion to backdoor\nexamples, his evidence, justifying his definition of Windows and iOS as\n\"malware\", is lacking and is yet another example of loaded language.\n\nConclusion: There is no evidence that a backdoor that allows the app store\nvendor to remove malicious applications is an attempt to mistreat the user.\nAnd although Stallman does make a good case for the solution to this problem\nto be less intrusive, the example itself does not demonstrate malicious intent\ntowards the user on the part of a proprietary developer.\n\n\u2022 Conclusion for backdoors\n\nWe looked at 10 out of 26 backdoor examples, listed by Stallman, which is over\na third. Among these 10 examples not a single one is evidence that a developer\nof proprietary software in question was \"exercising power over the user\" in\norder to \"mistreat the user\".\n\nIf we take the whole set of the 26 examples and break them down, here is what\nit looks like:\n\n  * 7 describe security bugs and vulnerabilities\n  * 3 describe automatic upgrade processes in operating systems, Windows and Mac OS\n  * 3 describe the ability of vendors to remove malicious applications\n  * 2 describe functionality that has no relation to backdoors\n  * 1 describes a case when a company has used a remote device wipe on an iPhone, belonging to a former employee\n  * 1 describes Catepillar having a backdoor that allows them to remotely control vehicles and turn the engines off for non-paying customers\n  * 1 describes a large Chinese Android provider Coolpad installing backdoor and allegedly pushing ads and unwanted apps to its users\n  * 1 describes a case of a virus being distributed with a Bitcoin client\n  * 5 describe possible government involvement in creating backdoors\n\nOut of these 26 only 1 is definitely \"mistreating the user\", and it is a\ncontroversial case of a Chinese smartphone company Coolpad, which had released\nphones with a modified Android build to allow a backdoor that would push both\nads and unwanted app on users.[24] Notice, however, that this has nothing to\ndo with \"free\" software. Android is based on Linux and, according to GPL v2,\nhas to be \"free\" as well. However, when a vendor uses a device with the\noperating system, they may add any software to it, regardless of whether an\noperating system was \"free\" or not. This new addition could be released as\n\"free\" also. In compiled form on a particular device the \"freeness\" of the\nsource code says nothing about what the compiled piece really does. Thus, it\nis more a question of regulation or, at the very least, \"free\" hardware, and\nshould not be an example that has anything to do with \"free\" software. Even if\nwe concede that this might be somehow made to be relevant to the question of\n\"free\" software, this is just one example out of the 26 that Stallman\nprovides. It is not clear how based on this one example one is justified in\ncalling user mistreatment \"standard practice\".\n\nGovernment involvement, as pointed out above, is something that needs to be\naddressed in a democratic society. This is a very serious issue, but hardly\njust a software problem. A more authoritarian regime is more likely to abuse\nanything and anyone, while a more liberal and transparent one is unlikely to\nengage much in either. \"Free\" software can indeed help here. An approach to\nsolving these problems is outlined in chapter 4.\n\nRecent events have shown once more that access to devices in context of\nfighting crime and terrorism is not a black-and-white issue as well, and\nrequires much more discussion to be worked out.[25] Therefore, it is not clear\nif we can categorize such government involvement as clear examples of\n\"mistreating the user\", unless Stallman considers any government intervention\nas \"mistreatment\", but then this is a totally separate discussion and\nsomething that he does not address in his essays. What can be said is that\nsome of his examples of government intervention mention fighting crime, and,\nsurely, a case of agents bugging a mafia boss phone would probably not be\nconsidered as \"mistreatment\" by the public.\n\nIn other words, we can certainly say that government involvement, while a\nserious issue, is not that clear cut a case and is definitely not always done\nto mistreat users in a democratic society.\n\nA lot of writing and examples point to Windows, MacOS and mobile device\noperating system forcing upgrades on the user or making upgrades silently.\nWhile some of these are questionable tactics, this is very difficult to see as\n\"mistreating the user\". Windows 10, being the most outstanding and attention-\ngrabbing example, has eventually released information on how to make the\nnagging upgrade screen disappear for good.[26] I agree that Windows 10 can\nprobably be considered \"user mistreatment\" and discuss it in section Sabotage.\n\nBut other examples are mostly innocent and point to technical upgrades that\nhappen on free software systems as well. The freedom to be able to inspect an\nupgrade is illusionary for most users: they have no idea of what is being\ninstalled and what it does, and they put their trust into developers who have\nworked on the code. In commercial products it became customary to hide such\ntechnical processes from the user entirely. There is no evidence that, say,\nWindows \"backdoor\" to update several files regularly was done to \"abuse\nusers\", unless Stallman can somehow show that these upgrades were done to\nintentionally delete user data or read their private text files, send the data\nto Microsoft and later use to blackmail users, etc. Unless such evidence\nexists, it is difficult to see this as \"mistreating users\", but rather as\nproviding smooth upgrade experience.\n\nAdditionally, any examples of Microsoft or Mac OS upgrades breaking computer\nsystems are again relevant for most users of \"free\" software. Even if the user\nis a developer, it is unlikely one can realistically check every upgrade. A\nuser will tend to install upgrades without spending hours trying to understand\nwhat these upgrades are doing exactly. And it is not unheard of for upgrades\nto seriously break systems. A good example is a recent, as of the moment of\nwriting, upgrade to Xubuntu 14.04 that broke Network Manager and left users\nwithout wifi for several days. Unless users had access to a wired connection,\nthere was nothing they could do. Less technically-minded users would have had\ntheir work stalled for many days.\n\n\"Free\" distros also have nagging upgrade windows. Ubuntu has a button that can\nand has been pressed by mistake, forcing users to upgrade the distribution to\nthe next version. Questions from users on how to remove the button can be\nfound online. Granted, it is much easier to remove these screens than it is\nfor Windows 10, but then Windows 10 is an outstanding example.\n\nUbuntu/Xubuntu/Kubuntu family of distributions have what is known as LTS\nEnablement Stack. This update typically installs a new kernel and newer\ngraphic drivers, so that old distributions can be supported with driver\nupdates. The update is introduced to a user with these words:\n\nNew important security and hardware support update.\n\nWARNING: Security updates for your current Hardware Enablement Stack ended on\n2016-08-04: http://wiki.ubuntu.com/1404_HWE_EOL\n\nUbuntu Wiki briefly explains what it is and how to install the Stack manually\nthrough the terminal. There is no information on possible repercussions.\nNeither is there information on how to remove it.[84.] Obviously, user is\nmanipulated into going along with this update, which is presented as being\n\"important\". Unfortunately, these kernel and driver updates are capable of\nrendering previously functioning systems either inoperable or prone to\ncrashes,[110] [111] [112] [113] [114] [115] [116] in which case the user might\ntypically want to remove the update. This, however, is a serious challenge\neven for a technically-minded user, and will require a lot of reading on the\nInternet forums.\n\nMoreover, once the user has removed the Enablement Stack, nagging screens\nreturn. Even turning off all the updates in the Synaptic UI does not help, and\nthe user has to edit a specific config file.[117]\n\nSo, nagging screens and a push towards upgrades that users might find\nunnecessary and even harmful is hardly a proprietary software phenomenon.\nRather, it seems to emerge in systems that have an established maintenance\nprocess. Maintainers are then motivated to move users along the maintenance\nprocess, so as to have less bugs to deal with and focus on the newer OS\nversions.\n\nAnother weakness of Stallman's argument is his general focus on Microsoft and\nApple. One, however, must remember that there are countless proprietary\npackages apart from Windows, the vast majority of which forces no upgrades on\nusers. Focus on Windows does not demonstrate that such practice is\ncharacteristic of all proprietary software, but rather that it is\ncharacteristic of Microsoft, and more specifically characteristic of their\nWindows 10 release.\n\nThat the situation even with Microsoft is more complicated can be gathered\nfrom an analysis by Galen Gruman, titled \"Double standard: Why Apple can force\nupgrades but Microsoft can't\".[28] The article discusses how Microsoft has\nactually been slow to force upgrades and how it was always consistent in\nproviding backward compatibility and options to stick with older systems.\n\nExamples that mention contract obligations, such as employee phone, or\nsoftware controlling engines of nonpaying customers, can hardly be examples of\ndevelopers of proprietary software putting in a backdoor to \"mistreat a user\".\nCompany phone's user is a company, not an employee, and the situation with a\nwoman loosing her personal data was not intentional, but an unfortunate side\neffect.[38] It is difficult to agree that it is a clear cut example of some\nnefarious functionality.\n\nAnd, finally, Stallman's insistence on counting mere security vulnerabilities\nas intentional mistreatment of users or \"exercise of power\" is an incredible\nexample of manipulation and intellectual dishonesty.\n\nTo conclude, backdoor examples provide no evidence that mistreating the user\nis anywhere near \"standard practice\", and only 1 example out of 26 is a clear\nexample of such mistreatment, that is without question contingent on software\nbeing proprietary.\n\n2.2.2 Censorship\n\nAccording to Stallman, these are \"examples of proprietary systems that impose\ncensorship on what their users can access\". He then adds: \"Selling products\ndesigned as platforms for a company to impose censorship ought to be forbidden\nby law, but it isn't\". There are only 6 examples, 4 of which are dedicated to\nApple's app store cases, one to Google App Store, and one to Nintendo 3DS.\n\nThe immediate thing to notice here is that citing examples of \"proprietary\nsystems that impose censorship on what their users can access\" says nothing\nabout such \"censorship\" being a feature of proprietary software alone. For\ninstance, gnu.org has a list of \"completely free\" operating systems that also\nimpose \"censorship\" on what their users can access.[31]\n\n\"Censorship\", yet another loaded term from Stallman, is not by default a\n\"mistreatment\" of users. If we use a more neutral term \"content filtering\",\nthe tone of the claim changes considerably, as well as its veracity. Private\nactors choose to or are forced to impose content filtering for a variety of\nreasons, such as legal considerations, or to maintain their own quality\nstandards, or even to get a competitive edge. There is little evidence that\nthis is a feature of proprietary software alone, or that this is done as a\ndeliberate act to mistreat the user.\n\nAdditionally, it is questionable that running a private app store and imposing\nprivate rules on it should be considered an offense punishable by law, let\nalone be framed as \"censorship\". If an entrepreneur opens a book store,\ndedicated to books in English, she will definitely \"censor\" books in German,\nItalian and French. It does not mean that this is a \"mistreatment of users\" or\n\"imposing power on the users\". If she wants to run a book store that\nexplicitly forbids any political content, then she will \"censor\" books based\non these criteria, even if those books are considered to be groundbreaking.\nThis is not censorship that anyone should be worried about.\n\nSimilarly, neither Apple, nor any other business is obliged or should be\nobliged to publish someone's app. They make their guidelines clear, and that\nthey do not want to publish porn or political statements or even certain\npolitical statements could be distasteful to some, but certainly the\nsuggestion that it should be illegal stands opposite to many private freedoms.\nThis would only be worrisome if competition to Apple App Store would be\nforbidden by the government and Apple Guidelines were to be imposed on the\nwhole population. However, this is not the case. Apple offers a certain\necosystem of applications and it is their right. Android app stores typically\nhave different offerings. FSF can create their own app store, if they wish.\nThis is normal market competition of different products, just like you might\nhave magazines that allow use of foul language and magazines that don't and\nwon't. Describing this state of affairs as \"censorship\" would be a rhetorical\nploy.\n\nExamples, which Stallman cites here, expose the sketchy nature of many of his\nviews. By trying to label all these complicated cases as simply \"censorship\"\nof an abusive \"proprietary developer\", and by claiming that the solution is to\nmake code available for everyone to run and modify, he falls into a trap of\nseeing the world in black-and-white terms of his software philosophy, being\nblind to other issues involved. It is difficult to see how \"free\" software is\nrelated to many of these situations.\n\n\u2022 Apple censors games, banning some games from the app store because of which\npolitical points they suggest. Some political points are apparently considered\nacceptable.\n\nStallman links us to a story about Apple declining to categorize an app as\n\"Game\" and instead suggesting it be categorized under \"News\" or \"Reference\",\napparently because it contains a strong political message.[29] The story also\nsays that Apple has then reversed its decision and reinstated the app as a\n\"Game\".\n\nIt can be immediately seen that Stallman's claim is false, as this is not an\nexample of Apple censoring content, but instead a dispute over how to\ncategorize the app. Additionally, Stallman fails to add that the app was\nreinstated.\n\nThe article then mentions other examples, linking to cases when Apple had\nrejected apps based on their political content. Some of these apps have\nactually been reinstated, some were not. The apps in question were based on\nthe ongoing Syrian war and seemed to go against Apple's policies.\n\nStallman insinuates that by doing this kind of content filtering, Apple\nexpresses a political position. But this is unconvincing. A more plausible\nreading of the situation is that companies such as Apple actually try very\nhard to be as apolitical as they can, and shy away from any controversy. Their\napp guidelines are directed at providing as neutral content as possible, and\nany political content that they do approve is only approved inasmuch as it is\nnon-controversial. Apps are usually reinstated after public outcry, which\nsignals that it is safer for the company to publish the app. Same goes for\nother large companies, be it Nintendo, Microsoft or Amazon. These corporations\nare subject to state regulations and open to lawsuits from all directions, and\nare thus exercising extreme caution with the content they publish. It can be\nargued that they are sometimes overdoing it or outright making mistakes, but\nwe do see evidence of them correcting these mistakes, as Stallman's source\ndoes show.\n\nWe already attested to Stallman's manner of framing any situation in mere\nterms of software freedom, losing all other aspects of the story, arguably\nmore important. But another problem is the double standard. Even if we assume\nthat Apple is not apolitical, but instead advances its own political agenda,\nfor some reason Stallman thinks that a game company that publishes games with\npolitical content can have a political stance, but a publisher company, like\nApple, cannot, and should even be punishable by law if it does. Unless he\ndemonstrates how such a disparity in rights to expression of political opinion\ncan be justified, this position should be rejected.\n\nAdditionally, the sketchy nature of Stallman's views and simplistic solutions\nhe promotes can be shown by applying them to his own Free Software Foundation.\nIf, according to him, a publisher of content should be prohibited from\nexpressing any political views, this is wholly applicable to the FSF, which\npromotes and publishes software.[30] Stallman himself restlessly points out\nthat FSF and GNU Project are not mere engineering projects, but are instead\nparts of a political movement. Thus, publishing only \"free\" software and\ncensoring proprietary software should be punishable by law, as this is a\npolitical statement.\n\nFinally, it is very difficult to see how Apple's guidelines and their\nimplementations have anything to do with Stallman's philosophy. The best\ndemonstration of this is a simple fact that no user freedoms, proposed by\nStallman, are violated by Apple's decline to publish the apps, and cannot be\nin principle. If the developer approaches a software store and asks them to\nsell her software, and they decline for whatever reason - user freedoms,\nproposed by Stallman, do not and cannot apply to a platform that has not\npublished the software and thus has not become part of the publishing chain.\n\nOne can argue that a publisher can indirectly violate these freedoms by\nspecifically declining to publish apps that would grant such freedoms. But in\ncases brought up in this story apps were not rejected due to them respecting\nuser freedoms, as defined by Stallman, but rather due to their controversial\ncontent. Thus, his claim that this somehow shows any mistreatment is\nmisplaced. But most importantly, if this example is used to support the case\nfor user freedoms, one cannot cite violation of these proposed freedoms to be\nevidence, as this is circular reasoning, as noted in the beginning of 2.2.\n\n\u2022 Apple banned a program from the App Store because its developers committed\nthe enormity of disassembling some iThings.\n\nThis is case of developers disassembling Apple hardware and breaking Apple's\nproduct Terms and Conditions. Their account was then suspended and their app\nbecame unavailable due to that.[32]\n\nThis has nothing to do with software at all, and it is also clear that Apple\ndid not aim to \"censor\" their app. One more case of Stallman grossly\ndistorting the situation and using loaded language to imply that breaking\nApple's contract is not important, but Apple's reaction to the breach of\ncontract is somehow unfair.\n\nAnd even if there is a case to be made that an individual customer's rights\nshould be more strongly defended due to the disparity in power between an\nindividual and a corporation, this case has to be put forward, justified and\nargued for. Stallman does no such thing.\n\n\u2022 Apple rejected an app that displayed the locations of US drone\nassassinations, giving various excuses. Each time the developers fixed one\n\"problem\", Apple complained about another. After the fifth rejection, Apple\nadmitted it was censoring the app based on the subject matter.\n\nThis claim is generally true, although the app is now in the App Store, albeit\nunder a different name. As pointed out above, this has nothing to do with\n\"free\" or proprietary software, and Stallman's argument that an app publisher\nshould not have the freedom to choose what to publish in their private app\nstore is unfounded and should be rejected.\n\n\u2022 As of 2015, Apple systematically bans apps that endorse abortion rights or\nwould help women find abortions.\n\nThat is mostly false. The story Stallman links to talks of one app called\n\"Hinder\", not of many apps.[33] Additionally, thanks to social media, Apple\nhas approved the app 9 hours after it has rejected it. It also exists in the\nGoogle Play store. It is intellectually dishonest to not give a full overview\nof the situation.\n\nWhat's interesting is that the article about Apple approving the app is from\nSeptember 22nd, whereas the article Stallman links to was written on September\n23rd. Which shows that he either chose not to mention that the app was quickly\nreinstated, or did not care to do additional research and actually verify the\naccuracy of the story he linked to. Either way, this underlines yet again that\nStallman's style of presenting data is not inclined towards an impartial and\nbalanced analysis.\n\nFinally, just like written above, this has nothing to do with \"free\" or\nproprietary software, but are rather complex questions about freedom of\nspeech, its applicability to public and private spaces, and how we should\nhandle situations when private businesses become a significant element of the\nculture. Even if Apple is wrong at committing these acts of content filtering,\nthis says nothing about the injustice of proprietary software.\n\n\u2022 Google censored installation of Samsung's ad-blocker, saying that blocking\nads is \"interference\" with the sites that advertise (and surveil users through\nads). The ad-blocker is proprietary software, just like the program (Google\nPlay) that Google used to deny access to install it. Using a nonfree program\ngives the owner power over you, and Google has exercised that power. Google's\ncensorship, unlike that of Apple and Microsoft, is not total: Android allows\nusers to install apps in other ways. You can install free programs from\nf-droid.org.\n\nStallman's loaded language and his use of phrases like \"exercising power\" has\nbeen already dealt with in 2.1. His statement that \"proprietary software gives\nthe owner power over you\" is misleading, and should either be rejected, or\nrecognized as being true in the vast majority of cases for \"free\" software as\nwell.\n\nAs stated in 2.2.1, in most western countries user \"surveillance\" is strictly\nregulated and, while the situation must be carefully monitored by the public\nat all times, should not be reason for too grave a concern. Many websites\nspecifically ask its visitors to not use ad blockers, as this is their only\nsource of income.\n\nBut, as is unfortunately typical of Stallman's one-sided approach, he fails to\nmention that the story he links to says that Apple is allowing to block ads in\nSafari. But he still calls Apple's \"censorship\" total.\n\n\u2022 The Nintendo 3DS censors web browsing; it is possible to turn off the\ncensorship, but that requires identifying oneself to pay, which is a form of\nsurveillance.\n\nThis is the most vivid example of how Stallman tries to misrepresent the\nsituation to be about proprietary developer set to \"put users at a\ndisadvantage\" or \"mistreat the user\", when the case has nothing to do with the\nissue.\n\nThe story Stallman links to is a story about Nintendo 3DS having a parental\nlock on unrestricted Internet browsing.[35] To open the lock, one has to pay\n30 cents through a credit card. The reasoning, as explained by the author, is\nthis:\n\nThis is not necessarily intended as a money-making scheme; it's instead\nintended to be a parental control feature. By requiring a credit card\npurchase, it reduces the likelihood that a child will find their way onto\nunsavory websites on their 3DS (though it doesn't change the fact that they\nmay live in a home with countless other Internet-connected devices).[35]\n\nThe author then proceeds to calculate the potential profit that the company\ncan make and asks readers for their opinion.\n\nThis story is clearly not about \"censorship\" the way most people understand\nit, and the reasoning behind it is sound. Additionally, no vendor should be\nforced to give users unrestricted browsing or even any browsing at all. This\nis a non-issue.\n\nStallman's statement that identifying oneself is a form of surveillance is\nabsurd and paranoid. While one is free to feel that way, Stallman provides no\narguments as to why everyone should feel this way and what negative\nconsequences exactly will people face by using a credit card. See further\ndiscussion of this in 2.2.3 Insecurity.\n\nFinally, this has nothing to do with Nintendo \"mistreating\" the user and there\nis no evidence this was done to \"put the user at a disadvantage\" or to put\nusers under surveillance. This is positioned as a safety feature, and,\npossibly, many parents are quite happy with the lock.\n\n\u2022 Conclusion for \"Censorship\".\n\nAmong the 6 examples, only one was accurately summarized by Stallman, and none\nseem relevant in any direct way to questions of user freedoms. He also\nsuggested extreme form of regulation of private businesses, without providing\nany justification. The use of the term \"censorship\" in most of these cases is\nquestionable.\n\n2.2.3 Insecurity\n\nInsecurity examples are prefaced with these words from Stallman:\n\nThis page lists clearly established cases of insecurity in proprietary\nsoftware that has grave consequences or is otherwise noteworthy.\n\nIt would be incorrect to compare proprietary software with a fictitious idea\nof free software as perfect. Every nontrivial program has bugs, and any\nsystem, free or proprietary, may have security holes. That in itself is not\nculpable. But proprietary software developers frequently disregard gaping\nholes, or even introduce them deliberately, and the users are helpless to fix\nthem.\n\nAs noted by Stallman himself, any software would have bugs. The difference is,\nhe says, that 1. proprietary software developers often do not care for\nsecurity holes in their programs, 2. introduce them deliberately, and 3. the\nusers are helpless to fix them.\n\nThese are statements about the real world that should be backed up by\nevidence.\n\nStallman provides no evidence for the first argument. He lists 26 examples of\nbugs, some of which are the same he lists in the \"Backdoors\" section,\ndiscussed at length in 2.2.1. There is no statistical data that he provides to\nthe reader to demonstrate that disregard for security is indeed a frequent\nphenomenon among proprietary developers, nor does he define \"frequently\". In\nfact, we have shown that Stallman consistently declines to mention that most\nsecurity bugs in his list have been fixed within days or hours of being\nreported. Only in one of his backdoor examples did a company comment that the\nsecurity flaw found in its modems was insignificant, clearly a rare case of\nnegligence.[15]\n\nHence, the project of compiling such a list is a futile exercise. Same list\ncan be assembled for \"free\" software. The \"Heartbleed\" bug, often referred to\nas the worst vulnerability found, happened in OpenSSL, a \"free\" software\nproject, and was discovered by two proprietary software companies, Google and\nCodenomicon.[45]\n\nWhat one should do is demonstrate the rate of vulnerabilities discovered,\nnumber of vulnerabilities and speed of fixing in proprietary and \"free\"\nsoftware, and show them to be vastly different. Only in this case Stallman's\npronouncements can be justified. But Stallman fails to provide any comparison\nto \"free\" software or any analysis or metrics or data whatsoever. His claim\nthat \"free\" software developers show high regard for security is a mere\ndeclaration, not fact.\n\nIf we look at the actual data, there is enough evidence to say that \"free\"\nsoftware projects are not any better in terms of security than their\nproprietary counterparts. All advantages of code availability and free\nmodification have enough disadvantages to nullify any significant leverage\nthat \"free\" software may have had over proprietary. There is also indication\nthat \"free\" software developers demonstrate enough of security negligence for\nthis to be a visible issue. Reader is encouraged to study provided links to\nrealize the complexity of the problem. The popular notion that \"free\" software\nis more secure than proprietary is not supported by evidence. [40] [41] [42]\n[43] [44]\n\nHis second argument probably refers directly to his \"Backdoors\" section, which\nwas thoroughly analyzed in 2.2.1.\n\nFinally, his third argument refers to the theoretical possibility of users\nfixing their software themselves. We have already briefly touched upon this\nmaxim when discussing the illusory nature of user freedoms for most users, and\nwe will discuss this issue in greater detail in Chapter 3. Here it is,\nperhaps, useful to note that Stallman presents a false dichotomy - that\nproblems with software can either be fixed by granting everyone full access to\nits source code - or they cannot be fixed at all. As will be demonstrated\nthroughout these sections, Stallman's own examples thoroughly refute this\nnotion.\n\nBecause it is clear that none of these \"proprietary insecurity\" examples help\nsupport Stallman's case, I will not give them an exhaustive treatment. But to\ncomment briefly, just like in other cases, Stallman gives each case the most\nuncharitable interpretation possible, fails to give an honest overview of the\nsituation, and defines informational security in terms that are very difficult\nto agree with.\n\nFor example, he writes that \"Many proprietary payment apps transmit personal\ndata in an insecure way. However, the worse aspect of these apps is that\npayment is not anonymous.\"\n\nBut nobody in the field of software security defines informational security as\ntotal anonymity.[46] [47] What informational security strives for, among other\nthings, is confidentiality, which is different from complete anonymity.\nComplete anonymity is frequently undesirable, especially in most cases of\nonline payment, where lack of authorization makes it more difficult to fight\nfraud.\n\nHe also writes about the insecurity of WhatsApp, despite the fact that in\nApril 2016 the company has rolled out complete end-to-end encryption using a\n\"free\" software protocol.[48] It was also given a 6 out of 7 score card by\nEFF.[49] None of this, however, has prompted Stallman to retract his\ncondemnation of WhatsApp as insecure.\n\nAnd, finally, he remarks that \"GNU/Linux does not need antivirus software\",\nhinting at the fact that desktop Linux has very few viruses. While it is true,\none should remember that the adoption of Desktop Linux is very low, usually\nestimated at 1-2% (some question these numbers and consider them to be higher,\nbut I argue that there is no evidence for higher numbers), and we should,\nthus, expect the amount of viruses to be very low.[58] [61] Additionally,\nproprietary OS X is also known to not need antivirus software. At the same\ntime, the amount of malware has risen both for OS X and for Linux in recent\nyears, as both systems see higher rates of adoption by the general public.[59]\nApple and Red Hat have reacted to that by removing \"virus free\" claims from\ntheir homepages.[62] [60]\n\nSo, security or lack thereof is not contingent on software being \"free\". And\nthere is no plausible reason why it should be. Stallman treats all \"free\"\nsoftware as a single entity. But in reality \"free\" software is a very diverse\nbody of software, which is only related to each other by the type of license\ndevelopers choose. There is no mechanism by which releasing a program under a\n\"free\" license automatically makes it more secure.\n\nIn conclusion, this set of examples does not demonstrate intentional\n\"mistreatment of users\", does not help advance Stallman's case and lacks all\nfeatures of careful analysis, such as even basic research and follow up of the\nclaims. All we see are baseless, often demonstrably wrong proclamations and\nfearmongering. Evidence that does exist and which was referenced throughout\nthis section actually points to his claims being largely wrong.\n\n2.2.4 Sabotage\n\nStallman describes this section as \"examples of proprietary software that has\nsomething worse than a back door.\" This is a very vague definition. Analyzing\nhis examples, it seems that he means situations when significant changes are\nintroduced into a product after it has been bought, usually removing part of\nits functionality.\n\nWe have to agree with Stallman that such practices are generally wrong. Among\nthe 24 examples of \"sabotage\", he lists genuine problematic and very difficult\ncases, but also cases which do not have markings of intentional harm or even\nany harm at all, such as promptly fixed accidental bugs, a user\nmisunderstanding how to use Apple's cloud service, users breaking a product's\nTerms and Conditions, companies limiting the type of content they want to run\non their systems and companies forced by courts to give up their users' data.\nI will mention several examples that should not be included in the list of\nintentional mistreatment, along with my reasoning, and then will examine\nincidents that do pose serious problems.\n\n\u2022 The Apple Music client program scans the user's file system for music files,\ncopies them to an Apple server, and deletes them.\n\nA case that should not be considered \"sabotage\" is an article by\njamespinkstone \"Apple Stole My Music. No, Seriously.\", that quickly went\nviral.[50] Stallman describes the situation the same way the article does:\n\"The Apple Music client program scans the user's file system for music files,\ncopies them to an Apple server, and deletes them.\"\n\nEven quick research, however, would reveal that this was an error on\njamespinkstone's part and his description of what the service is supposed to\ndo was incorrect.[51] Refutations of his claims came in quickly, and just five\ndays later jamespinkstone himself published an update to the story, revealing\nthat Apple had contacted him, worked with him and eventually it was believed\nto be a potential bug, affecting a small amount of users. It was never\nreproduced, thus user error cannot be excluded completely. Apple had\nnonetheless released additional security features to prevent this theoretical\nsituation from happening.[53] [54] [55]\n\nAlthough this information is publicly available and had been available already\n5 days after the initial publication from the same author (refutations from\nothers had been available as early as the next day), Stallman had not updated\nhis description of how Apple's service really works, and continues to list\nthis accidental bug not only as an example of intentional \"mistreatment of\nusers\", but as proof that a dystopian society he had predicted is actually\ncoming.\n\n\u2022 Adobe applications have time bombs: they stop working after a certain time,\nafter which the user must pay to extend the time. Once there was a problem\nwith the servers that these programs use to check who has paid, and the\napplications refused to work for anyone.\n\nThis is a manipulation on the part of Stallman. The article he links to is a\nnews item on the Creative Cloud service from Adobe, which is a subscription-\nbased service.[65] Describing a subscription-based service as a \"time bomb\" is\nneither a common, nor a correct way to put it. This is loaded language again,\nimplying that users of the software do not know that if they do not renew the\nsubscription, Adobe applications will stop working. This, of course, is not\nthe case, and Stallman gives no justification as to why we should consider\nsubscription-based services wrong or unjust. According to this logic, renting\nan apartment is then also a \"time bomb\" and should be considered unjust.\n\nHe then goes on to mention an accidental bug, as though this somehow proves\nhis case.\n\nNone of this shows any evidence of \"intentional user mistreatment\" and should\nnot be included in examples of any \"sabotage\" or other forms of injustice.\nStallman has a separate section called \"Subscriptions\" where he links to Adobe\nCreative Cloud again and specifically asserts that subscription services are\nunjust because if you do not pay - then the developer would revoke the\nsoftware license. No case is made to justify this unyielding position, and\nuntil such time comes - this assertion should be firmly rejected.\n\n\u2022 Microsoft informs the NSA of bugs in Windows before fixing them.\n\nThe implication here is that by informing NSA about bugs Microsoft therefore\ngives NSA a chance to use this knowledge to spy on the population.\n\nFirst of all, we have to say that any illegal surveillance, like the disclosed\nPRISM program, is a serious issue that should be actively discussed and\neventually resolved to the public's satisfaction in a democratic society.\n\nHowever, integral part of a rational dialog is an accurate representation of\nthe problem. Any propaganda, over-exaggeration or misconception could be a\nsevere stumbling block in understanding the real scope of the issue.\n\nAs is usual for Stallman's narrative, key facts are left out.\n\n1\\. Microsoft gives early access to information on zero-day vulnerabilities\nnot only to NSA, but also to its larger private customers.[80] The fact that a\ncompany provides such early access to its major customers is normal and often\nnecessary practice. It is especially valid for larger organizations where\nupdating could take quite some time.\n\n2\\. Early access for major customers is practiced by \"free\" software projects\nas well. Recent notable examples include Samba, in a case of Badlock\nvulnerability, as well as Xen, used by Amazon.[81] [82]\n\nOne more objection to the implication that Microsoft does this to allow NSA to\n\"mistreat users\" is that earlier in the \"Backdoors\" section Stallman proposes\nall sorts of elaborate backdoors that the secret service allegedly has. If it\nis true, the necessity to exploit zero-day vulnerabilities becomes redundant.\nIn other words, if you already have secret privileged access to Windows, why\nwould you need to set up an additional process of exploiting vulnerabilities?\n\nThere is some ground for speculation that such vulnerabilities are being\nwidely used for cyber espionage. One such case is Stuxnet, although no\nincontrovertible evidence of US government involvement exists.[83] But it is\nnot clear if reports from Microsoft are required to obtain information of\nthese vulnerabilities.\n\nIn conclusion, this point should be taken with significant reservations. The\nmere fact of providing early access to vulnerabilities presents no evidence of\nwrongdoing or injustice. An actor with significant and uncontrolled power\nmight subvert this process and use it to one's advantage. But then this is a\nquestion of politics. In a democratic society the public has to make sure that\nits government's power is held in check. These socio-political issues are\nclearly beyond the scope of this treatise.\n\nFor our analysis it is important to note that this question is not necessarily\ntied to software being proprietary. Whether having an open (and even \"free\")\noperating system will make exploitation of zero-day vulnerabilities by\ngovernments less probable is a question worthy of extensive scientific\nresearch. In my view, the answer to that question is far from obvious, as can\nbe seen from the section dealing with claims of \"free\" software having\nsuperior security.\n\n\u2022 Apple stops users from fixing the security bugs in Quicktime for Windows,\nwhile refusing to fix them itself.\n\nThis wording is deceptive. Saying that Apple \"stops users from fixing security\nbugs\" implies that they could do it before, and now they can't. But users\ncould never fix bugs in Quicktime, and at no point in time did Apple promise\nthat users would be able to do it. Additionally, Quicktime is not the only\nvideo player on Windows, so it would be very difficult to argue vendor lock-in\nin this situation.\n\nOf course, one can argue that if code was available, then users would be able\nto fix bugs even when official maintenance is over. But a software developer\nis not obliged to provide code to the users. If such an obligation exists or\nshould exist, Stallman is required to prove this crucial point, not just\nassert it. As far as I can see, users are neither promised nor entitled to be\nable to fix someone else's code. Therefore, no basis is provided to consider\nthis situation unethical or unfair in any way.\n\nOne could point out that this actually is a good pragmatic argument for \"free\"\nsoftware adoption. And I agree. But we have to remind ourselves that Stallman\ndoes not argue a practical approach to building and maintaining software, he\nargues ethics. gnu.org dedicates at least two essays, \"Why Open Source misses\nthe point of Free Software\" by Stallman and \"When Free Software Isn't\n(Practically) Superior\" by Hill, to explain that the Free Software movement is\nnot about getting better software, but about being more ethical, even at the\nexpense of having worse software.[87] [88] At one point in his essay Stallman\ngoes so far as to argue that better proprietary software is undesirable, as it\nlures users away from \"free\" software.\n\n\u2022 Vendor lock-in and changing the product after it was bought\n\nThe section of \"sabotage\" is, nonetheless, one of the better cases that\nStallman makes. The situations he looks at can be divided into two main types:\nvendor lock-in and changing the product after it was bought. Both of these are\nusually bad practices that should be dealt with and can be condemned as\nunjust.\n\nVendor lock-in is a serious and also complicated problem, not at all limited\nto the software industry. Any innovation has a tendency to create vendor lock-\nin, regardless of industry and even regardless of whether the technology is a\n\"free\" or proprietary.[70] Chapter 4 will talk about solutions to vendor lock-\nin (which includes using open and perhaps even \"free\" standards), but suffice\nto say that apart from solutions that we would argue should be put into place,\nthere already exists a whole set of competition laws (\"antitrust law\" in US,\n\"competition law\" in Europe), which regulate market abuse.[63] In some of the\ncases below we will see that this regulation does work.\n\nCases when the product is being changed to remove or degrade a feature of the\nproduct is definitely unjust, especially if the feature can be argued to be a\n\"selling point\" of the product. This effectively creates a situation when a\nperson has paid for a product, but then after a while the product stops\nfunctioning, without this ever being communicated to the customer as part of\nthe deal, which in turn might have influenced her decision to (not) invest\nresources - time and money - into the product. In other words, this is a case\nof cheating, albeit often unintentional.\n\nBut even these cases, which I believe to be seriously problematic, are\ndescribed by Stallman very inaccurately. As with many other of his examples,\nhe almost never gives a full overview of the situation and seems to paint\nthese cases in a way so as to give an impression that nothing is being done to\nfix it, and that the only solution, thus, is to make all software \"free\".\n\nAdditionally, he does not differentiate among the cases mentioned. All cases\nare presented by him as equally wrong, and everywhere the only problem he sees\nis that software is proprietary. But the cases are actually varied,\ncomplicated, can be considered wrong to very different degrees, as well as\nhave different degrees of having anything to do with being proprietary.\n\n\u2022 Phillips \u201csmart\u201d light bulbs had initially been designed to interact with\nother companies' smart light bulbs, but later the company updated the firmware\nto disallow interoperability.\n\nAny company changing the product after it has been bought can be argued to\nbreak the contract with its customer. Such behavior is definitely wrong. Not\nonly this betrays customer expectations, such bad practice is quite enough to\ntake the company to court, as is the case with many other situations of this\nkind. One can safely consider this an example of \"mistreatment of users\".\n\nHowever, Stallman does not give a full overview of the situation. After\nreceiving outcry from the public, Philips swiftly reversed its decision, and\nnow third-party vendors are again compatible.[64]\n\nThis case shows why discussions about ethics benefit from an unbiased overview\nof the situation. The only way we can arrive at the best solution is to make\nsure that we possess the most accurate representation of the problem and its\nscope. If the situation is portrayed as dire and hopeless, we might opt for\ndesperate measures. And desperate measures tend to incur greater costs on both\nindividuals and society.\n\nHere it is important to see that companies can be influenced to disengage from\nsuch behavior and that, at least in some cases, it is possible to fix the\nproblem without making software \"free\".\n\nIt also shows that examples of such behavior are not \"standard practice\" as\nStallman claims in the preface to this section, but are instead best described\nas controversial, exceptional cases that elicit outcry from the public.\n\n\u2022 iOS version 9 for iThings sabotages them irreparably if they were repaired\nby someone other than Apple. Apple eventually backed off from this policy\nunder criticism from the users. However, it has not acknowledged that this was\nwrong.\n\nIf true, there are two problems with this practice: possible vendor lock-in\nand changing the product after it was bought, without this ever being\nmentioned to the customer as part of the package. Vendor lock-in in this case\nis hardware-based and concerns locking out competing repair firms:\n\nCould Apple's move, which appears to be designed to squeeze out independent\nrepairers, contravene competition rules? Car manufacturers, for example, are\nnot allowed to insist that buyers only get their car serviced by them.[66]\n\nBut further research reveals that the situation is more complicated.\n\nThe Guardian article that Stallman links to and which is quoted above is\nmarkedly anti-Apple and paints Apple as a vendor desiring to lock out\ncompetition. When Apple gives a technical explanation of the feature, The\nGuardian reporter tells the reader to \"get ready for a jargon overload\",\nimplying that these are just excuses. The explanation, cited in the article,\nis only partial and does not allow the reader to understand what the terms\nmean and why \"error 53\" (lockout error) occurs. Whether this was really the\nway the Apple employee explained it or whether some portions of her\nexplanations were removed is difficult to tell.\n\nSeveral articles at Tech Crunch, on the other hand, give a good and balanced\noverview of the Touch ID feature that Apple had introduced back in 2014 and\nwhat security issues come with it.[71] [72] The reader is encouraged to read\nboth these articles and Apple materials that the articles link to, in order to\nunderstand how Touch ID and \"secure enclave\" work, how they store user\nfingerprint information and why allowing 3rd party vendors to fix the start\nbutton is a huge security breach. It turns out that bricking devices was\nindeed a security measure, only poorly implemented. Tech Crunch explains:\n\nAnd this is where Apple has made some mistakes. The company treats security\nvery seriously but should also take advantage of its own design. The secure\nenclave works independently from the main processor. If iOS 9 can't verify the\nauthenticity of the Touch ID sensor, the OS should brick the secure enclave,\nor disable all Touch ID-related features, such as Apple Pay.\n\nThe company shouldn\u2019t prevent you from accessing your precious photos,\ncontacts and apps. Today\u2019s implementation of the error 53 is a bad one, and I\nhope that Apple is going to fix it in the next iOS release.[71]\n\nIn another article they write:\n\nAllowing a third-party Touch ID sensor to function properly without an\nofficial Apple repair center both verifying that it is legitimate and\nrecalibrating the cable to work with your iPhone\u2019s Secure Enclave is a huge\nsecurity risk. A malicious repair shop or corrupted part could allow\nunauthorized access to your phone or its data. Apple is absolutely right to\ndisable TouchID \u2014 it was also wrong for it to disable your entire iPhone for\ngetting your home button replaced on the cheap.[67]\n\nApple has claimed that bricking devices was meant as a factory test and was\nnot expected to affect customers. This, though, is a questionable explanation\nand is not in line with their previous documentation and statements.\n\nTwo weeks after \"error 53\" made headlines Apple fixed the situation by issuing\nan update that unbricks devices (but not the Touch ID) and by providing\nreimbursement to anyone, who had paid for an out-of-warranty replacement of\ntheir device based on this issue.[67] This was exactly the right thing to do\nand is in accordance with what Tech Crunch reporters have written about\nearlier.\n\nBefore Apple had issued a fix, the company was faced with class action\nlawsuit.[68] Later the lawsuit was dismissed on the grounds of Apple providing\nthe fix and the reimbursement program, and also plaintiffs having no evidence\nthat bricking the device was intentional on the part of Apple.[73]\n\nHowever, it can still be argued that Apple was wrong in not being perfectly\nclear on its security features, on its phone software updates, and being\ninconsistent in its statements to the press. In other cases Apple does warn\nabout impending bricking of devices.[74] That they did not do this here might\nhint that it could have been a bug after all, but it is difficult to tell with\nthe information currently available.\n\nWe now have to notice how inaccurate and one-sided Stallman's account of this\ncase is. Not only did he fail to conduct even basic research into the feature\nin question (or chose not to mention it), but also said nothing about the\nlawsuit, did not consider opinions other than the ones that fit his agenda,\nand was silent on the reimbursement program.\n\nBut all of these details are very important, as they show that a lot can be\ndone to fix the situation, both by the public and by the company that erred;\nthat the case is far from clear and cannot be dubbed as \"injustice\" or\n\"intentional mistreatment of the user\" without additional evidence.\n\nFurthermore, when full context is available, it is clear that, contrary to\nStallman, Apple did apologize and tried to correct the situation as best as\npossible. Saying that they have to admit that the situation is simply \"wrong\"\ndoes not provide any real insights, nor does it help the affected users in any\nway.\n\nIt also feels like a misdirection - yes, the company perhaps did not literally\nuse the words \"we were wrong\". But they fixed the operating system behavior,\nunlocked devices and reimbursed money to affected customers. That seems like a\nvery clear way of admitting the company was wrong.\n\n\u2022 Windows 10 update push.\n\nThis is a recurring theme in Stallman's examples. Out of 24 examples of\nproprietary \"sabotage\", 4 examples are rehashing the same problem - that\nMicrosoft is pushing Windows 7 and Windows 8 users to upgrade to Windows 10. I\nhave to agree that such practice can be argued to be a breach of contract with\nusers of Windows 7 and 8. They paid for an operating system, believing they\nwould be free to decide when to upgrade themselves. Tricking users into\nupgrading is malpractice.\n\nTo be absolutely clear, let me stress this once more - Windows 10 upgrade\ntactics employed by Microsoft are wrong. There is already a court case, in\nwhich the user was able to get $10,000 in compensation from Microsoft. The\ndisturbing part of the story is that, according to some news sources,\nMicrosoft denied any wrongdoing and decided not to appeal only to avoid\ncranking up litigation costs.[85]\n\nBut while I strongly agree with Stallman that this is user mistreatment, I\ncannot agree that re-using the same example several times is honest. Yes, in\nevery case mentioned by Stallman there is a slightly different spin to the\nstory, but it is all about one company and one product upgrade. This, like\nmany other rhetorical tactics employed by Stallman, only shifts discussion\naway from a balanced overview, creating a false sense of numerous cases of\nuser mistreatment when we are really talking about the same case.\n\n\u2022 Examples of clear user mistreatment.\n\nFinally, there are several examples which can be considered clear user\nmistreatment, with almost no additional commentary necessary.\n\nA case when Oracle's nonfree Java plug-in for browsers installs adware can be\nconsidered questionable practice, given the deceptive manner in which adware\nis being installed, requiring users to de-select the installation.[75]\nBundling products is an issue that requires careful consideration, since this\nis also closely tied to competitiveness problematics.\n\nA case of LG changing the Terms and Conditions for their Smart TVs and locking\nout customers who do not agree to provide their data to third parties.[76]\nMore or less clear breach of contract. Customer complaint has been registered\nin the UK. There is actually a law in the UK against such seller behavior, but\nit seems that in this case nobody went to court with this situation.[77] LG,\nthough, has received some serious attention from the UK government and had to\ntone down its practices.[78]\n\nThere are other cases when smart TVs would raise privacy concerns. One known\ncase is Samsung Smart TV's voice recognition technology. The device is\nreacting to voice commands, but in order to understand them it uses a third-\nparty voice recognition service. Thus, the device actually records speech in\nthe room, sends this data to third-party servers, where the software analyzes\ndata and attempts to react to the commands.[79] Samsung Product Policy said:\n\"If your spoken words include personal or other sensitive information, that\ninformation will be among the data captured and transmitted to a third party.\"\nEFF activist called this clause of the policy \"Orwelian\", although such\ncharacterization is unfair and is based on ideology, not on facts. There is a\ndifference between sending data to oppressive government with the intent of\nspying on people and putting them in jail for their opinions, and creating a\nservice that analyzes speech in order to operate a Smart TV.\n\nTo be clear, such situations are clearly problematic, but they should not be\nelevated to the status of a catastrophe. It is important to understand the\nimplications of such situations and develop measures to make sure that\ncustomers have control of their data. Proposed solutions will be discussed in\nChapter 4.\n\nThe important thing to notice about all of these cases is that they are not\nvery numerous and that each one of them is a controversy, not \"standard\npractice\". Even if we would grant each and every case that Stallman lists the\nstatus of \"user mistreatment\" (which we can't), this would still be a\nminuscule amount of cases in an otherwise vast field of normal,\nuncontroversial situations.\n\nA case of Nintendo changing its End User License Agreement (EULA) and forcing\nalready existing customers either agree to it or loose part of the\nfunctionality is clear malpractice and a case of a possible contract breach.\nEFF has reported on the issue and I can firmly agree that this is a serious\nquestion of consumer rights. Organizations like EFF can help us move forward\nin fighting for consumer rights and making sure that such cases are\nunacceptable.[86]\n\n\u2022 Conclusion for \"Sabotage\"\n\nIn general, this is the better argument Stallman makes, and among the problems\nhe lists several are cases of genuine injustice, involving breach of contract\non the part of the software developer. He, however, routinely misrepresents\nthese problematic situations as hopeless, although most of them are quickly\nresolved. Additionally, this section better than others illustrates that as\nsoon as a case can clearly be understood as problematic, the public notices\nthis and moves to act, and companies are forced to patch things quickly.\n\nThe breakdown of the cases is this:\n\n  * Out of 24 cases he lists, 8 don't seem to contain evidence of any sort of injustice\n  * Out of 16 problematic cases 4 are about aggressive Windows 10 upgrades\n  * Out of the rest of 12 at least 7 have been fully or partially corrected, by public outcry forcing the company to revert the situation, or by initiating class action lawsuits against company practices, or both. Some lawsuits are still on-going, some have forced companies to comply\n  * At least 4 of the cases cannot be labeled as \"user mistreatment\" without going into a broader discussion\n\nWhile in this section we are able to finally see clear-cut cases of users\nbeing mistreated, Stallman does a poor job explaining how this is contingent\non software being proprietary. Most of these situations are impossible in the\nworld of \"free\" software simply because there is no contract and there are no\ncustomers.\n\nIt might be true that in some cases \"free\" software might theoretically make\nsuch problems less likely to occur; in a number of cases \"free\" software seems\nunlikely to help, and in some cases usefulness of \"free\" software is at least\ndebatable. A large portion of examples has actually been resolved to the\nsatisfaction of customers, without reverting to a \"free\" software solution.\n\nIn general, proprietary \"sabotage\" outlines some of the problems that\nsometimes occur in the software world, but cannot be used as evidence that\nproprietary software as a concept is unfair. Neither did this section provide\nevidence that mistreating the user is standard practice.\n\n2.2.5 Interference\n\nStallman writes: \"This page describes how various proprietary programs mess up\nthe user's system. They are like sabotage, but they are not grave enough to\nqualify for the word \u201csabotage\u201d. Nonetheless, they are nasty and wrong.\"\n\nExamples seem to describe situations when an upgrade or a download initiated\nby proprietary software has the potential to interfere with users' work on\ncomputer.\n\nThis is one of the weaker sections. It contains 9 examples. 6 of these\nexamples are dealing with Microsoft forcing Windows 10 upgrades, which we have\nrepeatedly seen in other sections. Linking to the same problem over and over\nagain creates a false impression of problems being more numerous than they\nreally are. Even if Stallman believes that Windows 10 upgrade tactics should\nbe mentioned in this section, an honest approach would be to do that in one\nbullet point, and not list 6, when they are essentially addressing the same\nissue.\n\nOne of the other examples talks about the case of Apple downloading an upgrade\nin the background and bottling up the Internet connection in some cases. This\nis an annoying issue, but if one simply reads the whole discussion Stallman\nlinks to, it becomes clear that the user complaining did not turn off\n\"automatic update download\" option.[92] However, the issue is not completely\nsolved by this, since according to other sources, unchecking the option will\nstop the phone from using your mobile data plan, but will still go ahead with\nthe download when you are charging the phone and are on wi-fi.[93] That makes\nit unlikely to interfere with users' actions, as in this case the device is\nless likely to be used actively. But, in my view, such behavior may still be a\ncase of breaching consumer rights. Consumer rights organizations such as EFF\nshould definitely step in.\n\nAnother example deals with Adobe Photoshop Cloud freezing the system to\nperform a license check. Stallman writes: \"Adobe nonfree software may halt all\nother work and freeze a computer to perform a license check, at a random time\nevery 30 days.\" He then links to a blog post which speaks about a situation of\nsomeone giving a live presentation, and Photoshop freezing the system to\nperform a license check. The author of the blog then urges everyone to use\nGIMP, which does not perform licensing checks.[89]\n\nThis blog post is an example of incredible intellectual dishonesty and \"free\"\nsoftware propaganda. In reality, Adobe Cloud products work very differently.\nAs can be seen from Adobe documentation, online check happens every time you\ngo online. Going online resets the check timer and gives the user 99 days to\nwork offline.[90] [91] When the time to check the license is nearby, the user\nis reminded by the software to do that at first convenience. To quote from the\nAdobe FAQ on offline work:\n\nAfter one calendar month, a dialog box requests online connection. You can\ndismiss the dialog box; the next reminder shows up after 30 days. After one\ncalendar month + 69 days, the dialog box appears daily. After one calendar\nmonth + 99 days, one final offline product launch is available. [91]\n\nThe documentation makes it clear that the software gives user enough reminders\nto alert her that a problem might occur. Therefore, claims that it happens\n\"randomly\" or that it is impossible to go ahead with the check to prevent it\nfrom happening during an engagement are false.\n\nThis information has been verified by reaching out to Adobe tech support at\nadobe.com and by communicating with Photoshop Cloud users who have confirmed\nthat the story told in Adobe documents is correct. Unfortunately, I found no\nconvenient way to reference these firsthand accounts, but I believe that\nanyone can obtain those through finding users of Adobe Cloud products.\n\nStallman and the author of the blog have both demonstrated unbelievable level\nof intellectual laziness, Stallman by linking to a blog post that provides\nlittle more than anecdotal evidence from a clearly biased source, and the\nauthor of the blog by making hasty conclusions about how Photoshop Cloud\nworks, without doing any research and clearly knowing next to nothing about\nPhotoshop Cloud. I cannot know if his account of what happened is even\naccurate. Photoshop license check is not supposed to freeze the system, in the\nworst case scenario it will refuse to start Photoshop. I could find no\naccounts of Photoshop license checks freezing the system. Bug reports on\nrelated license check issues which one can find through Google don't seem to\ndescribe what the blog author thinks he saw.\n\nTaking into account the information provided above, what seems to have\nhappened was that the presenter failed to pay attention to all the reminders\nand did not go online for more than 3 months to re-new the license check. This\nis not Adobe's fault and definitely not an example of any mistreatment. The\nonly user mistreatment is on the part of Stallman for providing his readers\nwith unchecked and ultimately false data.\n\nAnd the final example on the \"Proprietary Interference\" page is this: \"Oracle\nmade a deal with Yahoo; Oracle's nonfree Java plug-in will change the user's\ninitial web page, and default search engine, to Yahoo unless the user\nintervenes to stop it.\"\n\nThe irony of this example is that if one carefully reads the article Stallman\nlinks to, same tactic was employed a year earlier by Firefox.[94] In fact,\nreading Firefox blog post on the agreement with Yahoo, it did not even give\nusers a choice, Firefox just came bundled with Yahoo being the default search\noption.[95]\n\nFirefox is \"free\" software, according to gnu.org.[96] That clearly shows that\nsuch behavior is not contingent on software being proprietary, but can occur\nin all kinds of software.\n\nBut the allegation is void anyway. Unlike the previous example of the Java\ninstaller installing adware,[75] asking if the user wants to change default\nsearch and requiring that option to be unchecked (equivalent of having to say\n\"No\") sounds like a fine way to handle such installations. It can be argued\nthat having that option de-selected would be better and that having the option\nselected is manipulation on Oracle's part. I would not disagree. But I would\ndisagree that this should be classified as an interference worth discussing,\nlet alone an injustice or user mistreatment.\n\nIn conclusion, among the 9 examples we see just one problematic case of Apple\niOS download and rehashed examples of Windows 10 upgrade. This page hardly\nadvances Stallman's argument and instead shows once again lack of even basic\nresearch behind his allegations, as well as readiness to use any news item\nthat seems to confirm his view of the proprietary software world, regardless\nof how reliable or even relevant the source material is.\n\n2.2.6 Deception\n\nStallman: \"This document reports instances where proprietary software is\ndishonest or conceals deception or trickery.\"\n\n\u2022 Many proprietary programs secretly install other proprietary programs that\nthe users don't want.\n\nStallman links to a Register article that refers to another article on the PPI\n(pay-per-install) blackmarket and Google's battle with such PPI installs.[97]\n[98] [99]\n\nInterestingly enough, this often includes re-packaging \"free\" software,\nusually of known packages such as the VLC Player, with wrapper installers.\nTherefore, Stallman's claim is inaccurate, since this is not only about\nproprietary programs, this is, in fact, also about non-proprietary software\nbeing used as a vehicle for crapware propagation.\n\nThe research paper that Stallman links to does not conclude that the problem\nis software being proprietary, neither does the Register article, nor does the\nGoogle blog. It is also not clear on which grounds Stallman concludes so.\n\n\u2022 The proprietor of the Pok\u00e9mon Go game invites restaurants and other\nbusinesses to pay to have the game lure people there.\n\nThe article Stallman links to says just that.[100] I see no signs of any\ninjustice towards anyone here. This has nothing to do with any \"user\nmistreatment\".\n\n\u2022 \u201cDark patterns\u201d are user interfaces designed to mislead users, or make\noption settings hard to find.\n\nStallman then adds: \"This allows a company such as Apple to say, \u201cWe allow\nusers to turn this off\u201d while ensuring that few will understand how to\nactually turn it off.\"\n\nI agree that such deception should be unacceptable. I definitely disagree that\ndesigning difficult to use interfaces has anything to do with software being\nproprietary, although I would probably agree that \"free\" software products are\nless likely to have the need to hide certain settings.\n\nBut another important piece here is to be careful with implying deception or\nintent when there might be none. While some alleged examples of \"dark\npatterns\" are more believable, many allegations tend to be pretty\nunconvincing.\n\n\u2022 A top-ranking proprietary Instagram client promising to tell users who's\nbeen watching their pictures was in reality stealing their credentials,\nadvertising itself on their feed, and posting images without their consent.\n\nThis was malware. It was removed from the store immediately after its\nmalicious activity was discovered. Malware exists on \"free\" software systems\nas well. This has nothing to do with questions of intentional user\nmistreatment, which Stallman obviously means in context of non-malware\nproprietary software.\n\nI'd like to stress this again - framing an example of actual malware as\n\"proprietary software\" is an unbelievably dishonest tactic.\n\n\u2022 Volkswagen programmed its car engine computers to detect the Environmental\nProtection Agency's emission tests, and run dirty the rest of the time.\n\nStallman then adds: \"Using free software would not have stopped Volkswagen\nfrom programming it this way, but would have made it harder to conceal.\"\n\nHe does not deliberate on why he believes the problem is software being\nproprietary. I consider Stallman's assessment of the situation to be\nsuperficial. Yes, if firmware was open source, it could have been technically\neasier to discover the deception - provided code was cleanly written and well\ndocumented. But a \"free\" software approach would, in fact, create an even\nworse problem: if one can install any type of software on their vehicle, that\nmeans that anyone can now override emission limitations, and enforcing the law\nwould become a logistical nightmare.\n\nAs will be discussed in Chapter 4, I do not disagree that in cases such as\nthese government regulation bodies should actually opt-in for at least some\nversions of \"free\" and/or open-source software that they can check in a\ncentralized manner, along with a change in processes. But these solutions\ncannot be and should not be a simplistic binary approach that Stallman\nadvances.\n\n\u2022 Conclusion.\n\nThis section lists 5 examples, only one of which is at least somewhat relevant\nto Stallman's case. There is no evidence provided that deception in\nproprietary programs is \"standard practice\". Examples are about malware\npropagated through both proprietary and \"free\" packages, and a Volkswagen\nscandal, where the problem is hardly proprietary software.\n\n2.2.7 DRM\n\nThis section is described as: \"examples of proprietary programs and systems\nthat implement digital restrictions management (DRM): functionalities designed\nintentionally to restrict what users can do. These functionalities are also\ncalled digital handcuffs.\"\n\nThese functionalities are called \"digital handcuffs\" only by Stallman. This is\nin no way an accepted term. Additionally, DRM is an abbreviation of \"Digital\nRights Management\", not \"Digital Restrictions Management\". He also refers to\ncopyright as \"censorship law\".\n\nInterestingly enough, Stallman is actually a supporter of copyright, and on\nmany occasions had said that copyright law is necessary, because \"copyleft\"\nwould be impossible without it.\n\n10 examples he lists are examples of DRM in various products. Stallman remarks\nthat DRM should be illegal. Unfortunately, he stops there and does nothing to\nsubstantiate his point. There are no arguments, no evidence, just an\nassertion.\n\nWhile DRM and copyright are complex questions, debated and grappled with in\ntechnology, law and discussions of consumer rights, their resolution would\nbenefit from evidence-based approach, not from ideological pronouncements.\nSuch a discussion is taking place and should be encouraged even further. There\nare studies that look at the effectiveness and consequences of DRM,\nalternative business models, on whether this can be considered anti-\ncompetitive practice, etc. Additionally, the situation with DRM is always\nchanging, and even large companies such as Apple are making moves to remove it\nfrom at least some areas, like iTunes going DRM-free in 2009. Many game\ncompanies also decide not to use DRM in their products.\n\nStallman, however, is silent about all these advancements. He is extremely\nslow to give credit to companies when they are doing the right thing, which\ncreates an impression that the situation is hopeless, when in reality it is\nnot. Indeed, Stallman has also launched an initiative called \"Defective by\nDesign\", which calls for the abolition of DRM.[104] This is interesting, as it\nshows that his discourse tends to be void of gradation. Instead of opting for\nreform, he prefers to advocate for complete abolitions of concepts he\ndisagrees with, and for a complete embrace of his own philosophy.\n\nDRM is definitely a very controversial technology and I hope that evidence-\nbased discussion will eventually lead to a correct decision. Readers are\nencouraged to read the provided science article and also an overview of DRM on\nWikipedia.[102] [103]\n\nJust to be perfectly clear, I share the concerns of groups opposed to DRM,\njust like many people and organizations do. I just believe that this cannot be\nlabeled in a black-and-white fashion as \"user mistreatment\" and be used as an\nargument that all proprietary software is unjust.\n\nBut, most importantly, DRM is not a proprietary software problem. DRM is\ntypically easily bypassed, sometimes mere hours after a DRM-ed product\nrelease. It is the regulations that in many countries make bypassing DRM\nillegal.\n\n2.2.8 Surveillance\n\nThis is a very large section that is prefaced by an introduction.\n\n\"This document attempts to track clearly established cases of proprietary\nsoftware that spies on or tracks users.\"\n\nFor decades, the Free Software movement has been denouncing the abusive\nsurveillance machine of proprietary software companies such as Microsoft and\nApple. In the recent years, this tendency to watch people has spread across\nindustries, not only in the software business, but also in the hardware.\nMoreover, it also spread dramatically away from the keyboard, in the mobile\ncomputing industry, in the office, at home, in transportation systems, and in\nthe classroom.[101]\n\nPsychologically this could be a very important list of examples, as being told\nthat you are being spied upon is a strong message. This might be a good\nselection of examples, or it could be an excellent opportunity for ideological\nmanipulation.\n\nAs I have repeatedly said elsewhere in this text, questions of privacy and\nuser control of data are extremely important, and any tracking capabilities\ncompanies have should always be kept in check. And they are being kept in\ncheck more and more.\n\nFor example, although Stallman considers Apple to be one of the most evil\ncompanies, iOS 10 makes even one step further in empowering users to be\nremoved from tracking, by allowing them to nullify unique device id, which\nwill make all 3rd parties blind as to who the user is.[118] What are the real\nlife implications remains to be seen. Taking into account the general trend,\nthere is good reason to be quite optimistic.\n\nThe situation with cookies, user analytics and advertising has changed\nconsiderably over the years. Legislation has been developed and continues to\nbe developed to protects consumer rights, making sure tracking is transparent\nand user data is anonymous.[14][19][20][21][22]\n\nAnd it is precisely because I believe that questions of user privacy are\nimportant, I contend that fearmongering and propaganda of any sort should be\nunacceptable. Fringe groups that try to advance hysterical views and\nunrealistic solutions on current privacy issues are more likely to halt the\nmomentum of organizations that advance reasonable agendas and pragmatic\npolicies.\n\nA group that argues for complete anonymity as a standard of all of online\nconduct, that considers using cellphones and credit cards an unacceptable\ninvasion of a person's freedom, such a group can very easily alienate the\npublic, as opposed to organizations that instead of anonymity care about\nconfidentiality (as discussed in section Insecurity), that want to make sure\nthat data collection is clearly announced to the user, that users are not\ndiscriminated against if they choose not to be tracked, and that data\ncollection is transparent and performed in such a way that it cannot be used\nto identify a user.\n\nAs is clear from previous sections, these nuanced views and policies are not\nthe ones Stallman is interested in. His position is definitely on the\nmaximalist side of the argument.\n\nI am again forced to start by noting Stallman's uncompromising decision to use\nloaded language throughout his writings. The definition of \"spying\", for\nexample, presupposes hostile intent. Which is exactly why people would react\nnegatively to such a term and why using this word is an excellent propaganda\ntactic - unless, of course, one provides evidence of hostile intent.\n\nHowever, most of the materials Stallman links to provide little evidence of\nhostile intent. There is an incontestable difference between spying on users,\ngetting their personal data and then using personal secrets to blackmail them\nor put them in jail for political opinions - and tracking anonymized user\nbehavior in an application in order to make the UI more efficient, or even\nwith the intent to show more relevant advertising.\n\nThe latter is a serious privacy problem, but calling all data collection\n\"spying\" is not only unhelpful, it makes it difficult to consider realistic\nsolutions and instead shifts focus to slogans.\n\nBy opting for terms that favor his worldview and promote fearmongering and\nconspiracy theories, Stallman denies his readers an impartial overview of the\nsituation. Instead, he manipulates them into thinking that the situation is\nmuch worse than it really is.\n\nThe approach Stallman chooses in this section is as stringent and unworkable\nas in other sections.\n\nFor example, he condemns all analytics tools, by commenting on one of the tech\npieces he links to: \"The article takes for granted that the usual analytics\ntools are legitimate, but is that valid? Software developers have no right to\nanalyze what users are doing or how. \u201cAnalytics\u201d tools that snoop are just as\nwrong as any other snooping.\"\n\nSuch unorthodox pronouncements are left largely unsubstantiated. He almost\nuniversally fails to provide evidence or even any sort of reasoning for his\nassertions. His statement that \"developers have no right to analyze what users\nare doing or how\" requires at least some explanation. But Stallman provides\nnone. Unless there is a good argument on why developers should be denied the\nopportunity to receive analytics from software, Stallman's statement should be\nrejected.\n\nHe also paints all user tracking with the same brush. But it is clear that\nrecording someone's private conversations and anonymously tracking how users\nare using the UI are two very different kinds of situations, with data\ninvolved being of varying levels of importance and privacy.\n\nWe have to make it absolutely clear - the discussion on these very important\ntopics should be based on reason and evidence. If Stallman believes it is\nenough to assert that someone should have certain freedoms or someone should\nnot have certain rights, he is gravely mistaken. His opponents might just as\nwell respond that developers absolutely have the right to analyze what users\nare doing. Unless there is a coherent argument, this is not an intellectual\ndiscussion, but ideological warfare.\n\nRegrettably, the \"Surveillance\" section is especially littered with\nmisrepresentation and dishonest tactics. Intentionally or not, Stallman uses\nall sorts of rhetorical devices to make his case seem more plausible.\n\nFor example, he describes Snapchat as a program the principal purpose of which\n\"is to restrict the use of data on the user's computer\". Readers who are not\naware of how Snapchat works might think that Snapchat is an evil piece of\nsoftware the purpose of which is to mistreat the user, although this is not\ntrue: the selling point of the app is that users can set a timer on their\nimage messages; as timer runs out, images are deleted. So, formally one can\nsay that the purpose of the app is to restrict use of data. But this is a very\nmisleading way to describe Snapchat.\n\nStallman then routinely misrepresents an article on a security vulnerability\nin Snapchat, saying that Snapchat \"tries to get the user's list of other\npeople's phone numbers\", as if Snapchat is doing this to somehow harm the\nusers, although the article he links to is clear that malicious intent is\nfeared from hackers, not the company. Such casual misrepresentation is\nespecially upsetting, since a much better argument can be made, as Snapchat is\nknown to be very careless with its users' security and can be argued to\nmistreat users. Eventually, the company was even investigated by the Federal\nTrade Commission and forced to retract some claims about security and data\nhandling of its product.[107]\n\nAnother example of simply unbelievable dishonesty is Stallman's concern with\n\"spyware in E-books\". He writes: \"E-books can contain Javascript code, and\nsometimes this code snoops on readers.\"\n\nHe then links to an article about volunteers using a special JavaScript\nlibrary to take part in a scientific experiment that tracked their reading\nhabits. The article makes it very clear that everyone participating knew that\ntheir E-book reader was sending data to the researchers.[108] There is no way\na reasonable person can call voluntary participation in a science experiment\n\"snooping\". Such deception on Stallman's part is simply mind-boggling.\n\nWhen talking about Windows, Stallman rehashes the same example he uses in the\nBackdoors section, of Windows disc encryption. We have looked at this example\nand concluded that there is no sign of user mistreatment. But while it is not\nnecessarily unfair to list the same example in various categories, in this\ncase Stallman lists the same example twice! Several bullet points down he is\nagain concerned with Windows 10 full disc decryption sending a key to\nMicrosoft! He does link to a different article that further looks at\nMicrosoft's Privacy Policy, but also again at how its disc encryption will\nsend a key to OneDrive.[11] [109]\n\nThere are other cases which Stallman will rehash several times. For example,\nthat Yosemite Spotlight sends search terms not only to the search engines, but\nalso to Apple itself is mentioned in at least two separate places.\n\nLow quality of research on Stallman's part is especially highlighted by this\nsection.\n\nIn one instance Stallman links to resources that seem to be giving clearly\nconflicting statistics. He links to a scientific study that mentions that on\naverage free mobile apps connect to 3 third party URLs.[119] Several bullet\npoints down he links to an article that claims that on average free Android\napps are connecting to 100 domains on average.[120] This discrepancy\napparently does not worry Stallman and he references both links, thus creating\nan impression that the situation is dire.\n\nWhile the first link actually leads to the research itself, the second link\nleads to a Guardian article that does not list its sources. The article does\nmention the name of the researcher, Luigi Vigneri. A quick Google search\nreveals his profile at Eurecom,[121] which in its turn links to his\npublication. The paper in question is called \"Taming the Android AppStore:\nLightweight Characterization of Android Applications\" and is publicly\navailable at arxiv.org[122]\n\nCareful read of the paper reveals that the statement about an average of a 100\ndomains is false. Section 5 titled \"Application Destination Characterization\"\nmeticulously lists all the research statistical numbers. The data is in\nagreement with the previous scientific study and concludes that the average\nnumber of URLs is 4. It also shows that most apps do not communicate with\ntrackers and the vast majority of third party URLs are not connected to\nmalware. The relevant quotes, all taken from section 5 of the paper are listed\nbelow:\n\nAcross the applications in our dataset, the median number of domains connected\nto is 4, while some apps connect to more than 100.\n\nWe observe that while the vast majority (73.2%) of apps do not involve any\ncommunication with trackers, a small number of apps do indeed communicate with\nthem.\n\nURLs that host executable content that is deemed malware-like, are deemed\nsuspicious. ... By suspicion score for a URL, we denote the fraction of\nantivirus engines (VirusTotal uses 52 in all) that deem the URL suspicious (or\nmalicious). Our result show 94.4% of the URLs have a (suspicion) score of 0.\nIn the worst case, a URL was deemed suspicious by 3 (of 52) engines.[122]\n\nThis fact checking process took me a little over 10 minutes. It is incredible\nthat Stallman did not feel that he owes his readers at least some level of\nscrutiny.\n\nThis situation also demonstrates the importance of keeping sources updated.\nThis same paper says:\n\nWhile the Do Not Track policy has been proposed by consumer advocates and has\ngained some acceptance, the mechanism is restricted to web browsers, and does\nnot extend to mobile apps in general.[122]\n\nAs mentioned in the beginning of this section, that policy has already been\nrolled out to mobile devices as well. The Do Not Track flag is now an official\npart of OpenRTB, a protocol that is used by advertisers and publishers to\nexchange information when serving ads (section 3.2.18 Object: Device).[123]\n\nIn general, articles that Stallman links to, pertaining to app permissions,\nare becoming quickly outdated as iOS and Android roll out more privacy\nfeatures. Today even Facebook apps will alert users to the permissions that\napps ask the user for.[124] [125] Many of the features that in Stallman's\nopinion are invading user privacy can be turned off and the articles he links\nto mostly demonstrate how to do that.\n\nAnother note of interest is that the first article on mobile apps URL\nconnections notes that strict filtering by the vendor is effective in removing\nthe danger of too many connections and connection to malware sites. The paper\nalso notes all the regulations that are now being put in place to fix the\nsituation. This is important because it shows that the problem is being solved\nand is nowhere near \"standard practice\".\n\nThe section also lists some cases that are of significance for the modern\nprivacy discussion. One case is about a pregnancy test application. Stallman\nwrites: \"A pregnancy test controller application not only can spy on many\nsorts of data in the phone, and in server accounts, it can alter them too.\"\nThis, however, is manipulation. Such phrasing implies that all of this is kept\nsecret from the user. However, this is not true and during installation the\napp clearly lists all the permissions it requires from the user.[126] Calling\nthis \"spying\" is simply incorrect and an example of loaded language.\n\nHowever, there are discussions to be had on what kind of regulation is\nrequired for a company that provides a service in exchange of data. As noted\nearlier in this treatise, and in fact in the beginning of this section, EU\nlaws are already quite strict in regard to data collection and user targeting.\nThe US will hopefully follow.\n\nIn general, it is important to understand that when Stallman writes \"personal\ndata\", typically it means \"email\". Loaded language of the GNU philosophy text\nis doing a good job of invoking associations with corporations secretly\ngetting people's personal secrets and snooping inside their files. However,\nthis is not what is generally happening.\n\nThere are cases of security breaches where more personal data was leaked. An\nexample is a case of CloudPets.[127] In this specific case a security breach\nmade it possible for hackers to gain access to users' emails, passwords, but\nalso to profile pictures and 2 million audio recordings that children and\ntheir parents made as messages for CloudPets. These messages had been stored\nin the cloud.\n\nThese cases are fundamental in understanding whether connected toys should be\ntrusted and whether in order to really trust such devices we should have\nsecurity standards. Company security standards were very low.\n\nBut one can notice that this is not how Stallman presents the case. He writes:\n\n\"\u201cCloudPets\u201d toys with microphones leak childrens' conversations to the\nmanufacturer. Guess what? Crackers found a way to access the data collected by\nthe manufacturer's snooping. That the manufacturer and the FBI could listen to\nthese conversations was unacceptable by itself.\"\n\nHowever, calling audio messages that had been stored on the manufacturer's\nserver snooping is deceptive, even if you add \"FBI\" to the sentence. When a\nuser registers on a forum she, too, must enter her email. Then she will leave\nher messages in the forum's database. And this can now be spun to say that\nowners of the forum \"snoop\" on users' personal data and conversations. After\nall, FBI can potentially read them, can't they? So, does it mean that anything\nthat connects data to a person and that can be potentially read by FBI is\nsnooping?\n\nThe reader must remember that these numerous examples are listed by Stallman\nto demonstrate that proprietary developers systematically mistreat the user,\nsecretly steal everyone's personal information and do this with malicious\nintent. But instead we are again and again presented with the vendor keeping\nsome very specific user data, typically very openly and obviously, and with a\nclear purpose of providing a service, and then being hacked or having a\nsecurity bug discovered - which is usually quickly patched. These examples\nmight lead us to continue to push for better security standards and\nregulation, but this simply does not make Stallman's case that proprietary\nsoftware is inherently evil or is more likely to collect user data or that\nthis collection is even an issue in most cases.\n\n2.2.9 Jails\n\nStallman explains the content of this section: \"Here are examples of\nproprietary systems that are jails: they do not allow the user to freely\ninstall applications. These systems are platforms for censorship imposed by\nthe company that owns the system. Selling products designed as platforms for a\ncompany to impose censorship ought to be forbidden by law, but it isn't.\"\n\nAs I discussed in the section on Censorship, there is no reason why an app\npublishing platform should allow installation of any app, let alone on what\ngrounds should this be illegal. I have laid out the problems with Stallman's\nreasoning and the reader is referred to that section.\n\nUnless my arguments against considering content filtering as \"user\nmistreatment\" are refuted, none of the examples in this section should be\nconsidered a demonstration of injustice towards the user.\n\n2.2.10 Tyrants\n\nStallman: \"A tyrant device is one that refuses to allow users to install a\ndifferent operating system or a modified operating system. These devices have\nmeasures to block execution of anything other than the \u201capproved\u201d system\nversions.\"\n\nThis is not a black-and-white issue. In case of some products such behavior\ncan perhaps be argued to be deceptive and anti-competitive, in most it is\ntotally acceptable. Stallman, however, just posits this to be bad, without\ngoing into detail and not giving any justification of his opinion. Which is\nunfortunate, because a more nuanced argument can be made.\n\nFor example, a product that is positioned as a general purpose computer should\nnot favor certain operating systems and force other operating systems out. The\ninjustice here would be the deception of the customer, who believes to be\nbuying a computer that any operating system could run on. If you are creating\na custom piece of hardware that is not positioned as a general purpose\ncomputer, then the customer is not deceived and there is no discernible\ninjustice.\n\nPerhaps in some situations a case could be made that artificially excluding\ncertain operating systems is anti-competitive practice in certain market\nsituations, but this has to be investigated on a case by case basis.\n\nStallman brings up one interesting example, of Intel possibly locking out\ncertain Operating Systems.[105] This is definitely a worrying development and\nsuch strategies of hardware corporations should be carefully looked at.\nConspicuously, this has nothing to do with questions of \"free\" or proprietary\nsoftware, so this example seems to be irrelevant to Stallman's case.\n\nAnother example he brings up is of Playstation 3. He simply says that \"The\nPlaystation 3 is a tyrant\", meaning it allows only a selection of operating\nsystems to be installed on its hardware. I, however, don't agree this is \"user\nmistreatment\". Stallman needs to demonstrate exactly what is unjust here and\nin what way a gaming console blocking certain operating systems is mistreating\nits users.\n\nIt should be noted that in the section of Sabotage Stallman brings up a case\nof Sony removing the option to install Linux from Playstation 3, with the case\nhaving been brought to court.[106] But this is different. Here a clear problem\ncan be spotted - a breach of contract with the customers who have bought the\nproduct, expecting it to have the \"Other OS\" option. The case was won by the\ncustomers and Sony had to agree to a settlement.\n\nBut, notably, the settlement did not say that excluding operating systems in\ngeneral is unjust, it instead said that removing the feature after the product\nwas purchased is unjust. Below is the relevant quote from the settlement:\n\nTo get the $55, a gamer \"must attest under oath to their purchase of the\nproduct and installation of Linux, provide proof of their purchase or serial\nnumber and PlayStation Network Sign-in ID, and submit some proof of their use\nof the Other OS functionality.\" To get the $9, PS3 owners must submit a claim\nthat, at the time they bought their console, they \"knew about the Other OS,\nrelied upon the Other OS functionality, and intended to use the Other OS\nfunctionality.\"[106]\n\nSo, we should not be mixing the two issues and should firmly reject the notion\nthat a gaming console is in principle prohibited to choose which operating\nsystems to support. If this is somehow unjust, Stallman needs to make a\ncoherent argument as to why this is unjust - which he doesn't do.\n\nOther 4 examples are describing practices that I currently find legitimate. I\nmight change my opinion if I would be presented with an argument explaining\nwhy I should consider them to be cases of user mistreatment.\n\nIn general, examples in this section don't demonstrate that proprietary\nsoftware developers are \"intentionally mistreating the user\".\n\n2.2.11 Subscriptions\n\nStallman writes:\n\nIt sounds simple to say that a certain program \u201crequires a subscription.\u201d What\nthat means concretely is that it contains a time bomb, so that it will refuse\nto operate after that date. Or else it is tethered to a server, and that\nserver checks the date. Either one is a malicious functionality.\n\nThis is an extension of what Stallman wrote about \"time bombs\", see 2.2.4 of\nthis treatise. It references Adobe cloud services as an example.\n\nStallman gives only one reason why subscription-based services are wrong -\n\"nonfree software is controlled by its developers, which puts them in a\nposition of power over the users; that is the basic injustice.\"\n\nBut as I discussed in 2.1, the phrase \"developers exercise power over the\nusers\" is misleading, unhelpful and is not contingent on software being\nproprietary. \"Free\" software developers exercise \"power\" over the users in\nmuch the same way.\n\nThis \"basic injustice\", thus, cannot explain what is wrong with subscription-\nbased services. It would've definitely been unjust if the developer would pull\nthe plug suddenly, without any prior agreement. I have discussed this at\nlength in 2.2.4. But subscription-based model openly states that the software\nwill be available to the user as long as she pays for the service.\n\nIt is not clear why Stallman believes that this is unjust. In the same way,\nany subscription-based service should then be unjust in his eyes. A monthly\nbus ticket, a subscription to a fitness club, a contract to rent an apartment.\nIn fact, many \"free\" software vendors make their money by offering tech\nsupport subscriptions. Someone could then say that Red Hat's tech support\nsubscription model is unjust because it is a time bomb, and after a certain\ndate Red Hat specialists will refuse to help people in need.\n\nWhich is why I repeatedly stress the importance of a nuanced approach.\nStallman's black-and-white tactics are limiting his own opportunities at\nstarting a dialog and promoting meaningful change. For example, Adobe has been\nknown to make the termination of its subscription difficult for its\nusers.[128] This is definitely something that one can fight against, and\nsomething that can be argued to be rather malicious.\n\nI must, however, decisively reject Stallman's assertion that subscription-\nbased models in themselves are somehow unjust, unless he makes a coherent\nargument as to why this is so.\n\n2.2.12 By company or type of product\n\nThis section seems to be just an alternative way to organize the material and\nmostly rehashes examples from other sections.\n\n2.2.13 Conclusion\n\nI started this section by quoting Richard Stallman's own introduction to the\nexamples of proprietary abuse:\n\nPower corrupts, so the proprietary program's developer is tempted to design\nthe program to mistreat its users\u2014that is, to make it malware. (Malware means\nsoftware whose functioning mistreats the user.) Of course, the developer\nusually does not do this out of malice, but rather to put the users at a\ndisadvantage. That does not make it any less nasty or more legitimate.\n\nYielding to that temptation has become ever more frequent; nowadays it is\nstandard practice. Modern proprietary software is software for suckers!\n\nUsers of proprietary software are defenseless against these forms of\nmistreatment. The way to avoid them is by insisting on free (freedom-\nrespecting) software. Since free software is controlled by its users, they\nhave a pretty good defense against malicious software functionality. [4]\n\nTo begin with, it is clear that Stallman's approach to proving his claim of\nconsumer abuse being standard practice is fundamentally flawed. The only way\nto demonstrate that something is standard practice is to provide statistical\ndata. Preparing an arbitrary set of isolated incidents is not and cannot be\nevidence to support the claim. Even if we take all cases Stallman presents at\nface value, any area of human activity will have numerous cases of misconduct,\nthat are easy to overwhelm with if presented in one place as a large list. In\nsuch a manner, one can review a list of all aerial incidents in history and be\ntempted to conclude that flight is dangerous. In reality, all one needs to do\nis place this list against all flights and recognize how small the incidents\nlist really is.\n\nSoftware development is an enormous and extremely broad business that touches\nupon countless products, from personal computers to toys, appliances, house\nlighting and car software. Putting together a list of malpractice cases by\nscanning news items across all these products and decades of software\ndevelopment is not informative. Doing comparative analysis, providing proper\nstatistics and establishing the actual scale of consumer right violations is.\nStallman does not even attempt to perform such research.\n\nAdditionally, most of the news items Stallman submits typically describe a\ncourt case or a scandal, which demonstrates that these situations are nowhere\nnear \"standard practice\", and are instead outliers treated as problems to be\ndealt with.\n\nBut what about the cases themselves? Are they indeed accurately represented\nexamples of consumer rights violations?\n\nMostly, not.\n\nStallman routinely misrepresents data, gives incomplete accounts, links to\nunreliable, biased sources, many of which on close inspection turn out to be\nwrong, and denies the reader a balanced, well-researched discussion of ethics,\ninstead committing to the use of loaded language and other rhetorical tactics.\n\nHe constantly talks about developers of proprietary software abusing the user,\nbut the bulk of the cases he presents are examples of a third-party taking\nadvantage of security vulnerabilities and abusing the user. This is a bait-\nand-switch argument. It does not show any intent to harm the user on the part\nof proprietary software developers.\n\nStallman also claims, without providing any evidence, that proprietary\nsoftware developers show no concern for security. Available research, however,\nreveals that \"free\" software projects are not any better in terms of security\nthan their proprietary counterparts.\n\nLittle care is shown to correct or update allegations. Old news stories about\nsecurity bugs in proprietary products continue to be listed, and the\ncommentary is worded so as to give the impression that the problem exists\ntoday, although most problems had been fixed within days and sometimes hours\nof being reported.\n\nSome examples talk about a problem with a particular program in general, like\nin the case of Whatsapp not being secure. But although this allegation is no\nlonger true, it is still listed. The amount of such \"dead issues\" in\nStallman's compilation is very significant.\n\nHis commentary on the provided examples is littered with mistakes,\nmisconceptions and attempts to manipulate the reader. Even basic research\nshows that Stallman is extremely careless with his sources, and typically does\nnot do any fact checking. Sensationalist articles, thoroughly debunked and\nsometimes even corrected by their original authors, continue to provide\n\"evidence\" of \"proprietary abuse\". Stallman readily links to personal blog\nposts, taking any claims about problems with proprietary software at face\nvalue, even when the claims are ridiculous and quick research reveals them to\nbe blatantly false.\n\nSuch lack of rigor leaves an impression of Stallman trying to influence the\nreader with sheer numbers. When corrected for accuracy and relevance to\nStallman's claims, the amount of links that do indeed demonstrate customer\nrights violations becomes quite small. And even those are not without caveats.\n\nStallman does bring up issues that are serious, and do indeed pose an ethical\nand political challenge, which include such exceptionally complex topics as\nfreedom of political expression, privacy in the wake of new technologies, the\nextent of state power, fair competition in the free market.\n\nHowever, his stance on these issues is radical, ideologically charged, borders\non a simplistic binary worldview, and doesn't appear to be backed by much\nargument or evidence. Instead of addressing the complicated nature of the\nproblems that arise in our society as a consequence of new technology, the\nonly problem Stallman seems to care about is that software is proprietary,\neven in cases when a problem has little or nothing to do with the availability\nof source code.\n\nIn some cases the only way to see the current state of affairs as constant\nuser mistreatment is to adopt radical definitions of what is non-abuse. For\nexample, Stallman's position on security is that only total anonymity is\nacceptable, something that is clearly not widely believed and is asserted by\nStallman without any justification.\n\nMost importantly, Stallman's misleading language veers the reader in the\ndirection of despair, as if nothing is being done to fix the situation. In the\nabove quote he says: \"Users of proprietary software are defenseless against\nthese forms of mistreatment.\" Throughout his writings there is a tacit\nassumption that the software world exists in a vacuum, and there are no ways\nto solve the problem other than to adopt Stallman's philosophy. He thus\nfrequently offers a false dichotomy: that problems with software can either be\nfixed by granting everyone full access to its source code - or they cannot be\nfixed at all.\n\nYet, almost every source he quotes explains how the issue in question was\nsolved by a regulation or a court case or proactively by the industry itself.\nScientific research that he links to also demonstrates that regulation works.\n\nAnd finally, the overarching narrative seems to be that all of these \"abuses\"\nwere exactly what Stallman had been predicting from the start, and now it is\nfinally happening. When talking about Windows 10 updates, he writes: \"This\ndemonstrates what we've said for years: using proprietary software means\nletting someone have power over you, and you're going to get screwed sooner or\nlater.\"[129]\n\nNot only is this tantamount to saying that letting someone cook for you means\nthat sooner or later you are going to get a badly prepared meal, which is not\nsaying anything substantial, but also that the dystopia that Stallman\nanticipates does not seem to be coming. His poorly researched examples of\npeople purportedly being \"screwed\" by proprietary software do nothing to\ndemonstrate a dystopian trend that Stallman so passionately tries to detect in\na random stream of news items, blog posts and political scandals, many of\nwhich have to be painstakingly spun in order to appear relevant to Stallman's\ncause.\n\nThus, based on my analysis and the evidence provided, I must conclude that\nthese examples fail to uphold Stallman's argument that abuse from proprietary\nsoftware developers is standard practice. Software development is just another\narea of human expertise, with its occasional misfortunes and mistakes, and\nwith a clear trend of becoming safer and more reliable, as experience and\nregulation shape it to comply with law and human rights - a path that any new\ntrade has gone through.\n\n2.3 Proprietary software keeps people divided and reduces cooperation\n\nThis is the final argument that Stallman puts forward as proof that\nproprietary software is unjust. It may also be the most psychologically\ndecisive one. A person with a cursory familiarity of the subject will read\nthat \"free\" software is about sharing, cooperation and education, and will\nassociate it with moral superiority.\n\nIn fact, this is what frequently happens. Even people who are actively engaged\nwith \"free\" software projects will tend to be largely unaware of the details\nof Stallman's philosophy, but be convinced that \"free\" software is ethical,\nwhile proprietary is not.\n\nSo what is this argument? Stallman writes:\n\nWhen you use proprietary programs or SaaSS, first of all you do wrong to\nyourself, because it gives some entity unjust power over you. For your own\nsake, you should escape. It also wrongs others if you make a promise not to\nshare. It is evil to keep such a promise, and a lesser evil to break it; to be\ntruly upright, you should not make the promise at all. ... Freedom includes\nthe freedom to cooperate with others. Denying people that freedom means\nkeeping them divided, which is the start of a scheme to oppress them. In the\nfree software community, we are very much aware of the importance of the\nfreedom to cooperate because our work consists of organized cooperation. If\nyour friend comes to visit and sees you use a program, she might ask for a\ncopy. A program which stops you from redistributing it, or says you're \u201cnot\nsupposed to\u201d, is antisocial. ... Schools (and this includes all educational\nactivities) influence the future of society through what they teach. They\nshould teach exclusively free software, so as to use their influence for the\ngood. To teach a proprietary program is to implant dependence, which goes\nagainst the mission of education. By training in use of free software, schools\nwill direct society's future towards freedom, and help talented programmers\nmaster the craft.\n\nThey will also teach students the habit of cooperating, helping other people.\nEach class should have this rule: \u201cStudents, this class is a place where we\nshare our knowledge. If you bring software to class, you may not keep it for\nyourself. Rather, you must share copies with the rest of the class\u2014including\nthe program's source code, in case someone else wants to learn. Therefore,\nbringing proprietary software to class is not permitted except to reverse\nengineer it.\u201d ... [5]\n\nLet us break this text down into individual points.\n\n  * a. Proprietary software gives its developer unjust power over the user (see section 2.1)\n  * b. Promising not to distribute software is wrong, as it reduces the habit of cooperation\n  * c. Teaching proprietary software goes against the mission of education and implants dependence\n\nPoint a. I have dealt with in section 2.1 and it is mentioned here only for\ncompleteness. Point c is secondary to point b, but is of some importance as an\napplication of Stallman's reasoning to education, to which he dedicates\nnoticeable space in his writings.\n\nWhat must be noted is that point b focuses not on the availability of the\nsource code, but instead on the terms of the software license. Point c mostly\nfocuses on the availability of source code.\n\n2.3.1 The non-scarcity dilemma\n\nStallman argues that proprietary software is unjust because it denies people\nthe opportunity to cooperate. Although this is worded overly generic,\nStallman's concern is clear: because proprietary software licenses often\nprohibit distributing a program to anyone, including friends and family, he\nbelieves that this will somehow undermine the fabric of society and create a\ndystopian world where everyone is dependent on corporations, and there is no\nwill left to help people in need, and that those who cannot afford to buy\nsoftware would thus be left out.[134] [145]\n\nIt is of paramount importance to stress that this argument is not specifically\nabout software. At it's root it is a solution to a moral dilemma about non-\nscarce products. Basically, Stallman argues that agreeing to obtain something\nthat can be easily duplicated under the obligation to not duplicate it for\nothers is morally wrong.\n\nSuch a dilemma seems to be at the heart of modern debate about information\ntechnology ethics that surrounds not only software development, but also\ndistribution of media and questions of copyright in general. Let us formulate\nthis dilemma by generalizing Stallman's phrasing.\n\nYou have obtained a product that is very useful and is sold at a substantial\ncost, but which can be duplicated at negligible cost. Your friend comes over\nand asks for a copy. What is the right thing to do?\n\nStallman's solution is outlined in the quote above: you should give a copy to\nyour friend. He then provides further opinions on the situation by saying that\nthere were two wrongs committed: first by a software developer who imposed a\nprohibition of copying on a non-scarce product, second by you for having\nagreed to such a prohibition over \"cooperation\".\n\nBefore I analyze Stallman's response to the dilemma, let us look at the\ndilemma itself and appreciate it's non-triviality.\n\nThe first difficulty is the definition of a non-scarce product. Typically, the\nterm \"non-scarce\" is used for a product that can be copied at negligible cost.\nThus, it is non-scarce in a sense that once it is produced - the amount of\ncopies that can be created at no cost is virtually unlimited. However, design,\nproduction and maintenance (where applicable) of such a \"non-scarce\" product\ninvolves quite scarce resources - skilled labor, time, financial investment.\nTherefore, this non-scarcity is not universal and applies only to one aspect\nof the product - its distribution. In all other aspects the product is quite\nscarce.\n\nThe second difficulty is the one-sided aspect of the dilemma, at least in the\nway Stallman formulates it: \"if your friend comes to visit and sees you use a\nprogram, she might ask for a copy.\" It puts the user of a program under\nscrutiny, perhaps even the developer of a program, but it leaves out actions\nof a friend who asks for a copy, as if asking for a copy carries no\nconsequences, and is not something worthy of analysis.\n\nSo, how does Stallman approach this dilemma?\n\nStallman's response rests on several key statements:\n\n  * \\- that distributing software is an act of cooperation\n  * \\- that promising not to share is wrong because it is anti-social and undermines your personal friendships\n  * \\- that promising not to share is wrong because it reduces the habit of cooperation in society in general\n\nFirst of all, let us take note of the language Stallman is using. He routinely\nequivocates \"distributing programs\" with \"cooperation\" and \"sharing\", whereas\nwords \"cooperation\" and \"sharing\" typically define much broader notions.\nCooperation is not limited to distributing software.\n\nAnd even if we do limit ourselves to software and imagine that it is the sole\narena of human cooperation, we are still offered a false dichotomy, as if\nthere are only two options - distribute a program (and cooperate) or refuse to\ndistribute (and not cooperate) - whereas there are many other options to help\nour friend without undermining our friendship. For instance, we can buy him a\nlicense.\n\nBut nor is distributing programs always cooperation. It is certainly not\ncooperation with people who have developed the program. And once we recognize\nthat software development is an area of quite scarce resources, only one\naspect of which - copying - has so far enjoyed the blessings of relative non-\nscarcity, our help in the short-term can very well become hindrance in the\nlong-term, for everyone.\n\nTherefore, another way to solve the supposed conflict is to explain to one's\nfriend that people who write software need resources in order to continue\ndoing that, and as adults we can and should realize this basic fact, and do\nour best to uphold the current order of things, up until the time developing\nsoftware becomes as non-scarce as copying its end product.\n\nWhich leads us to a very important feature of Stallman's argument that is not\nobvious, but plays a large role in the underlying logic. And the reason for\nits obscurity lies in the \"free\" software narrative itself.\n\nThe \"free\" software movement focuses on ethics. In this specific argument\nStallman also consistently aims his attention at ethical categories of\n\"sharing\" and \"cooperation\". The danger of such focus is failure to analyze\ndiffering perspectives. Thinking that narrows its throughput to only a handful\nof principles frequently carries the assumption that the rest of the world\nsees the situation in similar terms.\n\nThis explains why Stallman frequently equivocates words like \"cooperation\" and\n\"sharing\" with \"distributing software\". If one sees the world through the lens\nof a certain cause, everything becomes embroidered in it. It is evident in\nStallman's examples of what he calls \"proprietary abuse\", and especially\napparent in cases which to a neutral investigator might seem to have very\nlittle if anything to do with the topic at hand. (see many examples in section\n2.2)\n\nStallman's argumentation in this case suggests that proprietary software\nlicenses prohibit cooperation and sharing in Stallman's general ethical terms.\nHe must assume so, otherwise his concerns make little sense.\n\nBut this is not what such licenses actually prohibit. What they prohibit is\nsharing in a very narrow sense - the distribution of said software. And they\ndo so for one reason and one reason alone - because a license costs money.\nWhen money is not an issue, not only individual developers, but also large\ncorporations ordinarily bypass prohibitive licenses and opt for some form of\nfreeware or even open source distribution. There are no known software\nlicenses that try to prohibit people from cooperating or sharing in general.\n\nSimilarly, the prevailing reason why someone would require the service of\ndistribution from a friend is because they do not have the money to obtain a\nsoftware license, or because they are unwilling to spend the money they do\nhave on a software license.\n\nStallman's ultimate solution to what he sees as money interests destroying\ncooperation in society is a world where the \"essential freedoms\" ensure that\nit is nearly impossible for software development to be a directly monetized\nactivity. Of course, various forms of indirect economical models are often\nsuggested, but none of these models seem to work reliably. And Stallman's\nfreedoms definitely remove pure software development from the area of\ncommercial enterprise.\n\nThere is, of course, a case to be made that failing to cooperate with a friend\neven in this one narrow sense somewhat hurts the spirit of cooperation in\nother areas. But this is a difficult case to make, and one that Stallman\nprovides neither evidence, nor argument for. And neither does he specifically\nformulate such a case.\n\nAnd the problem with this argument, were he to make it, would be similar to\nhis insistence that software developers exercise \"power\" over users: it is\napplicable to countless situations that are unlikely to be considered\nproblematic by \"free\" software advocates. Any situation where a good costs\nmoney will by definition exclude those who cannot afford it. Unless \"free\"\nsoftware advocates want to push for a utopian socialist society where everyone\nshould be entitled to receive scarce goods at no cost, it would be difficult\nto argue for the problem of proprietary software allegedly \"reducing the habit\nof cooperation\". From the point of view of such a radical standpoint buying\ngroceries basically has the same \"anti-social\" effect.\n\nThe only reason why prohibition on copying software would at all seem like an\nissue worth discussing is because the process of copying costs nothing, which\nmakes one superficially conclude that it is a non-scarce good to which a\nlicense has been somewhat artificially attached. One has to make an additional\nand probably not always obvious mental step to realize that all other factors\nthat make software possible are non-scarce, and thus the product overall is\nnot as non-scarce as it seems. With all the automation and seamless services,\na non-developer can be excused from not appreciating the colossal amount of\nwork that goes into writing software, but that does not change the eventual\nconclusion: software is generally a scarce good.\n\nIf I were to add some additional comments, I would need to point out that not\nall proprietary software licenses forbid copying. A whole area of proprietary\nsoftware has non-prohibitive licenses and should be left out from Stallman's\nargument. It is thus incorrect to refer in his argument to proprietary\nsoftware in general. He fails to make such a distinction.\n\nWhile a lot of the software might depend on the user being prohibited from\nsharing, a lot of notable modern software no longer works that way either.\nPeople need to have accounts with the developer which would be tied to a\npayment for a license. In many cases, this is actually true for completely\nfreeware software too. This is important, because it removes at least some of\nthe ethical concern on the part of the user - there is no longer a reason for\na friend to ask for a copy. One might have concerns that this scarcity is\nartificial and, therefore, still unethical, but I have dealt with these\nconcerns in the paragraphs above: software is generally a scarce good.\n\nFrequently, it is much more beneficial to actually obtain your own license\nrather than ask someone to share it due to the advantages it gives, including\nfree updates, access to official forums and tech support. A number of\nproprietary software allows paying customers to secure access to the developer\nteam and lobby the features they most require.\n\nStallman also says: \"Freedom includes the freedom to cooperate with others.\nDenying people that freedom means keeping them divided, which is the start of\na scheme to oppress them\".\n\nAnother frequent sound byte from Stallman is that software is \"free as in\nfreedom\", with the implication that his proposed software \"freedoms\" are akin\nto basic rights like freedom of speech.\n\nI should clarify that there is a difference between public and private spaces\nthat Stallman is not highlighting. All freedoms, granted to citizens of\nwestern democratic countries by their Constitutions are applicable only in\ncontext of public spaces.\n\nFor example, freedom of speech means that anyone can articulate their opinion\nwithout fear of government retaliation or censorship, or societal\nsanction.[132] However, such freedom is not applicable to private spaces. The\nlaw defending the right to express one's opinion does not force gnu.org to\nallow other authors to publish articles praising proprietary software. In\nfact, gnu.org has every right to completely exclude authors who hold\nalternative opinions from being represented on their website. But if someone\nwere to take Stallman's approach, then one would be able to say that the Free\nSoftware Foundation denies people the freedom of expression, and that denying\nthe freedom of expression is the first step to oppression. Obviously, this is\ntwisting the meaning of the freedom of speech by applying it to an\ninappropriate situation.\n\nTherefore, whenever Stallman insinuates that a proprietary software vendor is\n\"denying the freedom to cooperate\", an allegation of this sort can only be\napplicable to the overall public space. Unless the user would somehow be\ncoerced by the state to agree to particular licenses, this cannot be argued to\nbe the case. It can probably also be said that forcing people to use any type\nof software, be it proprietary or \"free\", is inherently unjust. Instead, one\nshould defend an option to let people have a choice.\n\nBut the option to have a choice is exactly the state of affairs today. The\nclaim that proprietary software developers deny others the freedom to\ncooperate is demonstrably false. Computer developers and companies do not have\nthe power to deny basic freedoms to anyone. Nobody is prevented from using,\nwriting and promoting open source and/or \"free\" software, or even public\ndomain software.\n\nTo say that there is currently no alternative to a given piece of proprietary\nsoftware, and to say that the developer of said software denies people freedom\nto cooperate is fallacious reasoning.\n\nAnd, as mentioned several times above, cooperation is not limited to\ndistributing or not distributing copies of software, therefore it is\nimplausible that the consequences of prohibitive software licenses are as vast\nas Stallman implies.\n\nAdditionally, freedom to cooperate is not an obligation to cooperate, just as\nfreedom of speech is not an obligation to speak one's mind.\n\nThus, Stallman's claim that proprietary software \"denies people the freedom to\ncooperate\" is largely immaterial. It does raise concerns in spaces where\ngovernment sets the rules, like in public schools. This will be discussed in\ngreater detail below and in Chapter 3. But for the majority of cases the\nallegation that proprietary software developers deny people the freedom to\ncooperate is simply wrong.\n\nAnother curious counter-argument to our contention is a belief that useful\nsoftware has to be written only once, similar to an establishment of a\nmathematical theorem. Once the software is \"mostly complete\", there is no need\nto incur additional costs on anybody, the argument goes. The morally right\nthing to do is to make it available to everyone at this point. And the\ncommunity will be able to add the finishing touches.\n\nA concept of a \"complete program\", however, is a mirage that promptly\ndisappears once closely inspected.\n\nWe should recognize that what software is, is a model of certain use cases. It\nis always a tool that serves a purpose. Frequently - several purposes. And any\nmodel is by definition incomplete. Therefore, software will always fail to\naddress a given use case completely. There will always be a gap between\nrequirements and their implementation.\n\nNot only that, but this gap is destined to always expand. Even if a perfect\ntool is built, once we have a set of requirements satisfied, we will naturally\nproceed to outline a set of further ones. Because a program makes a given job\neasier for us, we are now able to shift our attention to other goals, and\nbuild additional capabilities on top of what we have. This creates an endless\ntechnological cat-and-mouse game, with the gap between implementations and new\nrequirements having to be continuously sealed by further development.\n\nA real life example is a text editor. Seemingly, this is a very basic type of\nsoftware and, 30 years into personal computing, we should have written a text\neditor that is \"complete\", with perhaps only small fixes and few features\nrequired. However, this does not seem to be the case. Text editors are\nconstantly evolving, becoming more complex, adopting more and more use cases.\nTo this day there are many commercial text editors which are actually being\nsold, i.e. people are ready to pay for someone's implementation of a text\neditor. The world of open source software is no different, with dozens upon\ndozens of packages in active development.\n\nEven in principle it is difficult to define at which point the program should\nbe considered complete. This difficulty stems from the plethora of use cases\nthat any general purpose software will have. If we take our text editor\nexample, one person might consider a given text editor complete, while another\nwould require it to have line numbering as part of basic functionality.\nSomeone else might need it to be full screen, while others would want it to\nalso be able to highlight and compile code.\n\nProfessional, non-general purpose software is even worse in this regard.\nProfessional areas are developing at a higher pace, and widely used modern\nsoftware tools are more complex than anything humanity has ever designed.\nWhole professions implode into a one-man act, because of constantly evolving\nsoftware.\n\nAt times a concern is voiced that new software versions frequently do not\nsignificantly differ from their predecessors, and that upgrades are artificial\nand are done only to boost sales. And while there are probably cases when this\ndoes happen, one would be hard-pressed to actually support the claim that such\noccasions are frequent with statistics. A bird's eye view of any professional\nsoftware will reveal clear progress. A modern video editor, for instance, can\ndo markedly more things than one a decade ago. A music workstation is capable\nof performing tasks that were unheard of just several years prior. And more\noften than not professional software development is very directly driven by\nthe needs of its customers.\n\nIncidentally, we have good empirical evidence of formerly proprietary tools\nbecoming open source and even \"free\" in Stallman's sense, with their\ndevelopment continued by the community. None of these tools seem to be able to\ncompete with modern software unless very significant and well organized\ndevelopment is continued. And software that was abandoned quickly falls out of\nfavor with end users, as even maintaining it and guaranteeing operability in\nmodern systems is significant work.\n\nSo, unless all software human progress is frozen, we will never have complete\nprograms or complete tools of any sort.\n\nFinally, one can question the whole premise of non-scarcity in Stallman's\ndilemma and maintain that this is not what he is saying.\n\nIndeed, it would be correct to say that nowhere does Stallman directly mention\nnon-scarcity. However, I believe that it is strongly implied in his argument.\nThe whole problem that he poses is predicated on software being copyable with\nno great effort. Otherwise, there is no moral dilemma. He also obviously\nsingles out software (and digital media in general), and does not seem to be\nmaking a similar case for objects that have less efficient methods of\nduplication.[1]\n\n2.3.2 Education\n\nStallman maintains that proprietary software is detrimental to the mission of\neducation and \"implants dependence\". He then gives a number of arguments in\nsupport of his contention.\n\nThe importance of this claim is that while the above section deals with\ncooperation in relation to distributing software, this section deals with the\navailability of source code. The idea that the lack of source code is\nanalogous to a refusal of cooperation is an idea that Stallman highlights\nfrequently, for instance in his essay on the history of the GNU project.[149]\n\nI will proceed to analyze his arguments, but interestingly enough he does not\nmake an argument that I have outlined in 2.3.1 - that in public places, where\ngovernment does set the rules on which software to use, citizens might be\ndenied the choice of licenses and forced into a contract that they are\nunwilling to abide by.\n\nThe problem is broader than education, and applies to a whole set of\ngovernment establishments, tied in with the spending of taxpayer money, but it\ndefinitely does apply to public schools. In some western countries the state\nmight define, usually on a municipal level, the exact software to be used in\nclass, and a lot of that software is distributed under proprietary licenses.\n\nWhile the case for \"free\" software as a solution is not as simple as it looks\non the surface, at the very least it is a real problem, and a problem that\nrequires a solution. More on this in Chapter 3.\n\nStallman's own reasons to insist on \"free\" software in education are listed in\nan essay \"Why Educational Institutions Should Use and Teach Free\nSoftware\",[135] and are further supported by three more essays on the\nsubject.[5][133][134] The reasons are these:\n\n  * i. \"free\" software supports education by allowing the sharing of knowledge\n  * ii. \"free\" software supports education by allowing the sharing of tools\n  * iii. teaching \"free\" software will prepare students to live in a free digital society\n  * iv. using \"free\" software in schools provides independence from software vendors\n  * v. \"free\" software costs no money\n  * vi. \"free\" software is of high quality\n\nIn this case we have the same situation as with the general \"free\" software\ncontention. There are essentially two things being said: that proprietary\nsoftware is detrimental to the mission of education, and that \"free\" software\nis a solution. While Chapter 3 will specifically focus on the latter point, I\nwill have to touch upon this point in this section.\n\ni. \"Free\" software supports education by allowing the sharing of knowledge\n\nStallman expands on this point in the essays, mentioned above:\n\nFree software permits students to learn how software works. Some students,\nnatural-born programmers, on reaching their teens yearn to learn everything\nthere is to know about their computer and its software. They are intensely\ncurious to read the source code of the programs that they use every day.\n\nProprietary software rejects their thirst for knowledge: it says, \u201cThe\nknowledge you want is a secret \u2014 learning is forbidden!\u201d Proprietary software\nis the enemy of the spirit of education, so it should not be tolerated in a\nschool, except as an object for reverse engineering.\n\nFree software encourages everyone to learn. The free software community\nrejects the \u201cpriesthood of technology\u201d, which keeps the general public in\nignorance of how technology works; we encourage students of any age and\nsituation to read the source code and learn as much as they want to know.\n\nSchools that use free software will enable gifted programming students to\nadvance. How do natural-born programmers learn to be good programmers? They\nneed to read and understand real programs that people really use. You learn to\nwrite good, clear code by reading lots of code and writing lots of code. Only\nfree software permits this.\n\nHow do you learn to write code for large programs? You do that by writing lots\nof changes in existing large programs. Free Software lets you do this;\nproprietary software forbids this. Any school can offer its students the\nchance to master the craft of programming, but only if it is a free software\nschool.\n\n...\n\nWhen deciding where they will study, more and more students are considering\nwhether a university teaches computer science and software development using\nFree Software. Free software means that students are free to study how the\nprograms work and to learn how to adapt them for their own needs. Learning\nabout Free Software also helps in studying software development ethics and\nprofessional practice. [134],[135]\n\nWe can infer several arguments from these paragraphs, the first being that\n\"free\" software allows people to see the code and, therefore, encourages them\nto learn programming, whereas proprietary software does not.\n\nTo start, we must recognize that most people interfacing with software tools\nin class will be learning how to use the tools, not how they are built.\nTherefore, this argument can only apply to a narrow selection of programming\nclasses and to people who are curious about programming outside of class. In\nthe majority of cases it is simply wrong to assert that \"proprietary software\nis the enemy of the spirit of education\".\n\nSecond, Stallman seems to insist that the only way to learn programming is to\nread source code of complete programs. In fact, he highlights this in several\nplaces, by first saying that kids are \"curious to read the source code of the\nprograms that they use every day\", and then stressing that in order to become\ngood programmers people \"need to read and understand real programs that people\nreally use\", and that learning how to write big programs necessitates to\n\"write lots of changes in existing large programs\".\n\nIt is clear why he does that - it helps him set up a confrontation between\nproprietary software and education. The problem with this narrative is that it\nrests on an unproven premise that proprietary software has any relation to\neducation, or that it should have a relation to education.\n\nProprietary software is not a set of educational materials, and generally does\nnot claim to be. It is not clear why anyone should feel that any given tool\nstudents are exposed to must also provide means to learn how it is built.\nSaying that proprietary software does not allow people to learn how to program\nis tantamount to saying that a microscope in a science class does not allow\npeople to learn how to build microscopes. Proprietary software is not created\nto teach people how to program.\n\nBut not only proprietary software - most software is created for purposes\ndifferent to that of educating people how to code. And Stallman's claim that\nreading source code of complete programs is the only way to become a good\nprogrammer is a puzzling one. It definitely does not match the reality of how\npeople actually learn to code. It is clear that there are vast numbers of\nhighly skilled programmers who have never been exposed to \"free\" and/or open\nsource software, and yet have managed to master the craft.\n\nBut even in and of itself, the idea of learning how to program by looking at\nsource code of complete programs is generally very poor advice. It is\ndefinitely an outdated one. Many of our everyday programs are extremely\ncomplex, and even if each and every one of them would provide its source code\nto the public, a novice programmer would find it very confusing, unhelpful and\nincredibly discouraging.\n\nTypically, people learn how to code by inspecting code snippets, by reading\ntextbooks and going through programming courses, by working on small projects\nand reading documentation - in other words, by using educational material, not\nby employing source code of actual functioning software, which guarantees\nneither novice-level, nor well-organized or even well-written code.[136] [137]\n[138]\n\nAnd, finally, one of the proven ways to learn is on the job. Many people have\npicked up programming by starting with smaller projects, and then honing their\nskills to expert level by doing programming as their profession.\n\nI cannot accept Stallman's statement that \"free software encourages everyone\nto learn\" either. That source code is formally available does not mean that\nthis alone encourages students to learn. Putting together materials that would\nactually facilitate learning is a very difficult task, and authors and\nteachers all over the world continuously work on text books, courses and\nexercises to help people learn programming. If a given \"free\" software project\nwould like to actually encourage learning, a lot of additional work has to be\ndone - code formatting and commenting, ensuring best practices, writing\ndetailed documentation, etc. This kind of work is very rarely done for any\nsoftware, let alone \"free\" software, which in many cases is written by\nhobbyists in their spare time.\n\nStallman then says that proprietary software developers \"keep the general\npublic in ignorance of how technology works\". This argument again assumes that\nthe only way to teach technology is to give people access to complete source\ncode of software.\n\nMore importantly, he confuses technology with source code. Stallman commits\nthis error frequently, for example saying \"the easy choice was to join the\nproprietary software world, signing nondisclosure agreements and promising not\nto help my fellow hacker.\"[149] In other words, to Stallman the lack of source\ncode is equivalent to the lack of help.\n\nThere is, however, an inherent difference between principles, techniques,\nalgorithms - and source code. Source code is no longer the only or even the\nmost common source of technological knowledge sharing. In many cases what's\nrelevant is a description of an algorithm, a code snippet or a function. It is\nvery rare that someone requires to inspect the code of a whole program. Even\nthen, what's really helpful is an overview of the program's architecture, not\nthe code itself.\n\nDevelopers can and do share their findings by publishing white papers, by\ndisseminating their knowledge in books, courses, on the Internet forums, in\nblog posts, at Q&A resources like Stack Overflow, etc. Simply supplying\ncomplete source code is not likely to encourage people to learn, because they\nmight not even be sure that there is anything interesting to learn there,\nunless they spend valuable time and effort studying it first.\n\nThe public is not kept in ignorance of how technology works, either. Such\ninformation is generally open and accessible. For instance, one might not have\naccess to the source code of Skype, but it is fairly trivial to get access to\ninformation about technologies and techniques that make Skype possible, and\nanyone can write a program with identical functionality based on publicly\navailable knowledge - provided they gain the expertise and spend a significant\namount of time and effort.\n\nSource code alone does not teach programming in general, nor does it teach how\nprograms should be written. The only thing Stallman can claim is that \"free\"\nsoftware gives people the opportunity to learn how a given program was, in\nfact, written.\n\nFinally, Stallman claims that \"more and more students are considering whether\na university teaches computer science and software development using Free\nSoftware\", because only \"free\" software will allow people to learn how\nprograms work and how they can adopt them to their needs.\n\nHowever, teaching computer science is not equivalent to teaching how\nparticular programs work, nor is computer science about teaching how to adopt\nexisting software to one's needs. It is, instead, a vast body of knowledge\nabout how computers work, how software is built, and the fundamental\nprinciples of computing and algorithm design.[139] Stallman tries to redefine\ncomputer science and narrow it down to looking at source code of existing\nprograms, because only then can he erect a conflict between proprietary\nsoftware and education, a conflict that seems to be largely non-existent.\n\nii. \"free\" software supports education by allowing the sharing of tools\n\nTeachers can hand out to students copies of the programs they use in the\nclassroom so that they can use them at home. With Free Software, copying is\nnot only authorized, it is encouraged.[135]\n\nThis is a potent argument that makes sense in certain scenarios. Not being\nable to work with a program at home can be a serious impediment.\n\nIt is a separate question whether \"free\" software should be the solution here.\nThere are many cases when a \"free\" software alternative does not exist, or the\nquality of existing alternatives is too low. If a viable \"free\" alternative\nexists, schools in many cases should opt for this alternative.\n\nSo, I definitely agree with Stallman here, but only to an extent. In most\ncases, we do not need a program that would provide source code and permission\nto change it and redistribute further. All we need to solve this issue, is a\nlicense that allows users to obtain copies free of charge. In other words, any\nfreeware program will do, not only \"free\" program per Stallman's definition.\n\niii. teaching \"free\" software will prepare students to live in a free digital\nsociety\n\nThis argument rests on two premises: that proprietary software is unjust and\nthat \"free\" software is just. As I consider both premises to be unproven - and\neven questionable - I cannot accept that not teaching proprietary software and\nteaching \"free\" software is a moral duty of anyone.\n\niv. using \"free\" software in schools provides independence from software\nvendors\n\nStallman expands on the point:\n\nSchools have an ethical responsibility to teach strength, not dependency on a\nsingle product or a specific powerful company. Furthermore, by choosing to use\nFree Software, the school itself gains independence from any commercial\ninterests and it avoids vendor lock-in.\n\n\\- Proprietary software companies use schools and universities as a\nspringboard to reach users and thus impose their software on society as a\nwhole. They offer discounts, or even gratis copies of their proprietary\nprograms to educational institutions, so that students will learn to use them\nand become dependent on them. After these students graduate, neither they nor\ntheir future employers will be offered discounted copies. Essentially, what\nthese companies are doing is they are recruiting schools and universities into\nagents to lead people to permanent lifelong dependency.\n\n\\- Free software licenses do not expire, which means that once Free Software\nis adopted, institutions remain independent from the vendor. Moreover, Free\nSoftware licenses grant users the rights not only to use the software as they\nwish, to copy it and distribute it, but also to modify it in order to meet\ntheir own needs. Therefore, if institutions eventually wish to implement a\nparticular function in a piece of software, they can engage the services of\nany developer to accomplish the task, independently from the original vendor.\n[135]\n\nThis is a very complicated argument. I believe Stallman's take on it to be\nmostly incorrect. As a lot of it is about \"free\" software as a solution, I\nwill discuss these arguments in greater detail in Chapter 3. Here I will only\nbriefly outline my analysis.\n\nStallman's reasoning rests on the following premises:\n\n  * dependency on a software vendor is problematic\n  * software can make people be dependent on it by mere introduction to it\n  * \"free\" software removes dependency on a software vendor\n\nI do not disagree with the first premise entirely. Vendor lock-in can indeed\nbe a problem. I do disagree that this is the state of affairs today. With the\nexception of Microsoft, whose grip on the operating system market can be\ndescribed as a near monopoly, most other software cannot be described in this\nway. Even titles such as Photoshop, although currently dominating the market,\nare rivaled by other products.[141] [142] [143]\n\nThe point about dependence in general has been shown (see section 2.1) to be\nimmaterial for non-developers, and even for most developers most of the time,\nas we cannot be experts in everything, and are all dependent on professionals\nto varying, and often significant degrees. Software is not even the most\ncritical area in this regard, but rather fields like medicine and food.\n\nIt is true that dependence on a \"free\" software vendor, whoever it might be,\ncarries different consequences. Stallman believes these consequences to be\nmore favorable to the user, and completely disregards any other solutions.\nThis is discussed in great detail in Chapter 3 in the section \"\"Free\" software\nremoves dependency on a software vendor\". Suffice to say, Stallman does not\nprovide any evidence or reasoning as to why dependence on a \"free\" software\nvendor is better, he simply asserts it.\n\nThe second premise which Stallman voices frequently is that people can become\ndependent on software by mere introduction to it. He even employs an analogy\nwith cigarettes:\n\nWhy, after all, do some proprietary software developers offer gratis copies of\ntheir nonfree programs to schools? Because they want to use the schools to\nimplant dependence on their products, like tobacco companies distributing\ngratis cigarettes to school children. They will not give gratis copies to\nthese students once they've graduated, nor to the companies that they go to\nwork for. Once you're dependent, you're expected to pay, and future upgrades\nmay be expensive.[134]\n\nThe analogy is invalid. Nicotine is a drug that is capable of producing actual\nchemical dependency in the brain, and that by itself is a harmful substance\nthat leads to increased risk of disease. Software is nothing like that, it is\na tool. And most of the time mere introduction to a tool is not enough to\nimplant any dependency.\n\nSoftware (or any other technological product) typically becomes widely used\nthanks to its usefulness and competitiveness, not because someone taught it to\nchildren at school. It is absurd to imply that because a teacher decides to\nshow students image editing using Microsoft Paint, once they decide to do\nimage editing, they will go for Microsoft Paint simply because this is what\nthey were taught in school. Microsoft Paint objectively lacks features that\nare required to do involved image editing. Therefore, Microsoft Paint is\nunlikely to be chosen, regardless of its familiarity or sentimental value.\n\nIn other words, software has a tendency to be chosen mostly due to its\nobjective capabilities, not because of memories of previous experiences in\nschool. This is especially true for business situations, where people are\nlooking for results.\n\nThis is not to say that early exposure does not make a difference - it might.\nIt is likely to be a decisive factor when there are several very capable\nalternatives, but not in a situation when most alternatives are simply not up\nfor the task. If the tool is dominating the market, for whatever reason,\nschools do not have a choice. Teaching students tools that are irrelevant to\nthe professional market is not doing a proper job as educators.\n\nStallman objects that schools must opt for ethics first and treat\nfunctionality as a secondary concern, but this again rests on a premise that\nproprietary software is somehow evil, a premise we believe he does not make a\ngood case for.\n\nEven if teaching an inferior, but capable enough product will result in a\nspike in its usage, there is ample evidence that this effect is short-term. A\ngood example of this is the situation with Internet Explorer 6. It was\ndocumented to be used mostly at workplaces where default Windows tools were\nbeing enforced, but at home people were more likely to switch to an\nalternative.[144] Apparently, exposure to software during long work hours was\nnot capable of making people dependent on Internet Explorer in other settings.\n\nAnother problem with Stallman's argument is his use of equivocation. The\ndependency on a software product is fundamentally different to that of a drug\ndependency. By putting together \"drug dependency\" and \"dependency on\nproprietary software\", he creates an impression that the latter situation is\nanalogous to the former. But being dependent on a tool in a sense that this is\nthe only tool capable of producing the desired result is a normal part of\nreality, and is usually neither problematic, nor a permanent state of things.\nStallman alludes to such dependencies being potentially lifelong, but in the\nquickly moving software world this is actually unlikely. Internet Explorer is\nonce more a good example. Despite aggressive push by Microsoft, the browser\nwas not able to secure a dominant market position after more capable browsers\nhave entered the scene.\n\nAs for Stallman's suggestion that with \"free\" software schools will be able to\nemploy \"any developer to accomplish the task, independently from the original\nvendor\", it looks good only on paper. In practice, this puts a school in a\nposition of a software maintainer, a job which is incredibly time consuming,\nlogistically complicated and requires significant expertise. It is precisely\nfor that reason that software development exists as a business. It can perhaps\nbe argued that \"free\" software adoption will create a more competitive\nenvironment, where companies might compete for providing services to schools,\nbut this argument is difficult to pose without backing it up with laborious\nresearch, as there are very many variables to consider, not the least of which\nare price, quality and scalability of such services. Such an argument requires\na fair amount of evidence, not just assertion. I look at this argument in\ngreater detail in Chapter 3.\n\nv. \"free\" software costs no money\n\nIt is true that \"free\" software costs no money to obtain. It is not\nnecessarily true that maintenance costs no money. As seen from the previous\nargument, Stallman suggests schools become software maintainers and hire\npeople to develop software for them. The cost for setting up such an\nenterprise is not nil, and can in the end be higher than what schools will\never pay to professional vendors.\n\nvi. \"free\" software is of high quality\n\nStallman writes:\n\nStable, secure and easily installed Free Software solutions are available for\neducation already. In any case, excellence of performance is a secondary\nbenefit; the ultimate goal is freedom for computer users.[135]\n\nStallman elects on talking about proprietary and \"free\" software in very\ngeneral terms. He frequently makes claims about all of proprietary software,\nor about all of \"free\" software, routinely failing to choose a more nuanced\nwording or provide any evidence for his claims.\n\nIn this case he claims that \"free\" software in general is stable, secure and\neasy to install. However, as noted elsewhere, \"free\" software is actually a\nvery diverse body of software, which is only related to each other by the type\nof license developers choose. Unless Stallman is able to provide data to back\nup his claim that \"free\" software tends to comply with the characteristics he\nascribes to it, his claim must be labeled as unproven. Furthermore, it can be\nargued to be implausible too, as there is no mechanism by which releasing a\nprogram under a \"free\" license automatically makes it more stable, secure and\neasy to install.\n\n\"Excellence of performance\" is also not limited to stability, security and\nease of installation. Software programs are complex products that require a\nmuch more detailed characterization. A program can be stable, secure and easy\nto install, but if it can barely cover basic functionality, it's quality as a\ntool can be described as low. Therefore, I find Stallman's list of quality\nparameters to be insufficient. Even if his claim would be demonstrably true,\nwhich it isn't, it would be an utterly incomplete set of parameters upon which\none can judge the quality of software.\n\nTherefore, I cannot accept this as a proven benefit. More on similar\nassertions about the quality of \"free\" software will be discussed in Chapter\n3.\n\n2.3.3 Conclusion\n\nIn several of his essays Stallman passionately tries to make the case for\nproprietary software being a detriment to a cooperative society. I have\ncarefully inspected his arguments and have found them to be unconvincing, with\nlittle attention to detail, and frequently employing rhetorical devices, such\nas equivocation and redefinition of words, to advance \"free\" software agenda.\nMost of his arguments work only if the statement that proprietary software is\nunjust is taken as a premise. Quite a few of his contentions are mere\nassertions. I have mostly disagreed with his better arguments and have\npresented my objections.\n\n2.4 Chapter conclusion\n\nIn the beginning of this chapter I have summarized Stallman's arguments to\nprove that proprietary software is unjust in this manner:\n\n  1. if the user cannot change the source code, then he is in theory open to abuse from the author of the program\n  2. abuse from proprietary software developers is standard practice\n  3. proprietary software keeps people divided and reduces cooperation\n\nI have meticulously reviewed each of those points and have even enhanced a\nnumber of Stallman's arguments. Nevertheless, I have concluded that Stallman\ngenerally failed to make his case.\n\nHis contention that proprietary software exhibits inherent injustice has not\nbeen demonstrated to my satisfaction, and I have found Stallman's arguments in\nthis regard to be superficial and unconvincing.\n\nThe examples of \"proprietary abuse\" are poorly researched, frequently\npresented with demonstrable and often consequential inaccuracies, and do not\nlend support to the position that abuse from proprietary software developers\nis standard practice. Stallman also falls into a trap of circular reasoning on\nmore than one occasion, when what he tries to prove is taken as a premise of\nthe argument.\n\nThe real issues that are brought up by him are described solely in terms of\nStallman's proprietary vs. \"free\" framework, which at times includes problems\nthat are exceedingly complex and cannot be contained or even accurately\ndescribed by such a framework, and often can be argued to have very little\npertinence to such a framework at all.\n\nArguments, designed to show that proprietary software keeps people divided and\nreduces cooperation, mostly rest on unproven and at time implausible premises,\ncommit logical fallacies, lack nuance and detail, and in their present form\nraise very significant objections.\n\nI, therefore, must conclude that Stallman's writings do not demonstrate\nproprietary software to be unjust.\n\n3\\. \"Free\" software as a solution\n\nWhen arguing for a solution, one must essentially do two things: first,\npropose a solution, by which we mean demonstrate that certain measures\nreliably fix the problem; second, establish that this solution is an effective\nway to fix the problem.\n\nI have been largely unconvinced by Stallman's contention that proprietary\nsoftware is inherently unjust and is, thus, a problem that needs to be fixed.\nNevertheless, it is possible to analyze his arguments in defense of \"free\"\nsoftware as a solution by granting him the assumption that proprietary\nsoftware is a problem.\n\nLet us now analyze Stallman's claim that \"free\" software is the only solution\nto the problems he outlines in greater detail.\n\n3.1 \"Free\" software as panacea\n\nStallman brings up many problems with proprietary software, problems that span\nacross vast topics such as political expression, consumer rights, privacy,\nsecurity and a range of others. Even if we concede that all of these problems\nare real, the overall difficulty with Stallman's philosophy is that it\nbasically tries to offer a single solution to all of these complex issues.\n\nThere is good reason to doubt the efficiency of any umbrella proposal. The\ntopics at hand are so intricate and complicated that it is unrealistic to\nexpect a single solution to exist for all of them. The only way to argue for a\npanacea is to treat the initial problems as simplistic, black-and-white\nissues. Which is exactly the approach employed by Stallman throughout his\nwritings. He focuses solely on the alleged conflict between proprietary and\n\"free\" software, refusing to take into account any other issues involved.\n\nWhen, however, we elect for a nuanced approach, it quickly becomes clear that\neven in relatively simple cases no single solution is possible, as situations\nin the real world tend to be complicated and multifaceted.\n\nOne can regard \"free\" software to not be a proposal per se, but rather a\nchoice of direction. This is certainly not a strategy Stallman employs. He\nclearly advocates a very particular solution, with very little latitude for\ncompromise.\n\nAs will be demonstrated in the following sections, his stringent position is\neasily weakened by the introduction of even a very elementary degree of rigor,\nprecisely because panacea is an intellectual fantasy.\n\n3.2 \"Free\" software removes dependency on a software vendor\n\nIn Chapter 2 I have argued that in a practical realistic sense the problem of\nnon-professionals being dependent on professionals is not a situation that is\ngenerally considered problematic. To put it another way, the division of labor\nis largely considered a trade-off. We economize on a limited resource of time\nby outsourcing an activity to someone else, thereby surrendering part of our\ncontrol over the end product. Additionally, division of labor allows one to\nspecialize in a craft and thus become more performant at it.\n\nThat said, the dependence of consumers on producers is not an issue that is\nignored. A large section of law and activism deals with consumer\nprotection.[146] Existing solutions to these issues are not a complete removal\nof any possibility of misconduct on the part of producers, but rather\nminimization of harm and possibility of harm.\n\nThe power of Stallman's narrative is that a \"free\" software approach seems to\nremove consumer rights violations almost completely. Definitely to a degree\nthat is unparalleled in most other cases.\n\nWhat Stallman fails to mention or understand, is that this approach comes at a\nvery high cost. Let us outline this cost.\n\nIt is safe to assume that the vast majority of people in the world are not\nsoftware developers. Instead, they are software operators, software users.\nEven if a person is a software developer, she typically develops only a few\nproducts, while being an operator of the majority of software she uses\neveryday. If one is developing browsers, she typically does not develop\noperating systems, video editors, databases, games, etc. Indeed, the\nincreasing complexity of software guarantees that today's engineers are highly\nspecialized.\n\nControl over a software product requires a significant degree of expertise.\nWhile the idea to have complete control over one's computing might have seemed\nquite realistic in the 1970s, when whole operating systems had mere thousands\nlines of code, in today's world a web browser we use everyday has millions\nlines of code, spanning across several programing languages, protocols and\ndatabase technologies, with complicated multilayered functionality. To add\nmore data points, Microsoft Office 2013 has over 40 million lines of code.\nFacebook has over 62 million lines of code. Average modern high-end car\nsoftware is at around 100 million.[147]\n\nHaving control over these everyday products effectively means owning a well-\nfunctioning software development company that would be capable of maintenance\nand development across dozens of products and technologies. Any suggestion\nthat a person can open source code of a \"free\" software package, say,\nLibreOffice Writer, and quickly fix something or add a feature - is the\nmanifestation of extreme naivete and ignorance on the subject.\n\nBut then what does Stallman mean?\n\nAs noted in Chapter 1, Stallman focuses his writings on the alleged problems\nwith proprietary software and the assertion that \"free\" software is the only\nsolution to all of these problems. He says very little of substance about why\n\"free\" software is the solution and in what way it is the solution.\n\nEven when he discusses the history and goals of the GNU Project,[149] he says\nnothing about how to reach those goals. The only thing he mentions is work\ndone by the Free Software Foundation, which recruits several people to write\n\"free\" software. He also talks about \"High Priority Projects\", a list of\nprograms that need to be developed.\n\nThe tacit assumption, underlying Stallman's writings, is that \"free\" software\nis to be developed and maintained by a community of developers. This community\nis left undefined. Purportedly, these are all the people who for one reason or\nanother would choose to dedicate their time and efforts to writing and\nmaintaining \"free\" software.\n\nFor a user the dependence on the software vendor is thus converted into a\ndependence on this loosely defined community.\n\nStallman believes that the latter state of affairs is just, and the former is\nunjust. The fact that he does not substantiate this claim severely wounds his\nphilosophical stance. By failing to recognize the complexity of modern day\nsoftware and that most users are not developers, he ends up with a very\nsketchy claim. All we can do at this point is to try to guess his general line\nof reasoning.\n\nIt is possible that Stallman believes a dependence on the community to be more\nethical because it gives more possibilities to the users - to either maintain\nthe software themselves, fork it or ask others for help. This can be inferred\nfrom passages, analyzed in section 2.2.4, where Stallman speaks about users\nfixing bugs. In another place he says: \"The wrong here is Microsoft does this\nafter having made the users dependent on Microsoft, because they are not free\nto ask anyone else to work on the program for them.\" [129]\n\nIt needs to be noted that software can be divided into two main segments:\nsoftware written for private purposes, like a company internal tool, and\nsoftware written for the general public. It is the proprietary nature of the\nlatter that Stallman is concerned with, as software for private use is\ntypically owned by its users, who have a complete set of rights to it. We will\nthus focus on software written for the general public.\n\nIdeas on how a community of developers can help users with software should\nalso be divided into two main scenarios: lone developers being hired to\ndevelop additional features and fix bugs, or reliance on a centralized\ndevelopment community running the project.\n\n3.2.1 Lone developer model\n\nThe first scenario refers to those frequently voiced ideas that with \"free\"\nsoftware all one has to do is call up a \"developer friend\" and ask her to\nhelp, even if for a fee. Unfortunately, this is mostly a fantasy. The\npracticality of this approach in real life is negligible, and it is not\ndifficult to show.\n\nThe easiest thing to point out is that a \"developer friend\" would have only\nvery limited expertise. As noted above, modern software is very specialized\nand complex. Therefore, mere probability suggests that in most cases this\n\"developer friend\" would not be qualified to help. Finding skilled enough\nvolunteers is difficult even among people who are experts in a given area. The\njob could be uninteresting to them or they may have other priorities, or they\nmight ask for way too high a price.\n\nAnd as a lot of the software one tends to use everyday is quite complex, even\nif a developer agrees to help, a lot of time and effort will be spent\nunderstanding the architecture of the program, intricacies of its\nimplementations, etc. Adding a small feature, unless the person has first hand\nexperience with the code of the program in question, is going to be a time-\nconsuming project, likely costly for the customer.\n\nBut this is not even the most consequential problem. Since larger and more\nuseful software is typically developed in a centralized manner, when there\nexists a main development branch, asking someone to write an additional\nfeature would effectively fork the program and make it incompatible with the\nmain package. Patches, written by contractors, would now have to be applied to\neach new update from the main developer team, making it a very costly and\nunreliable procedure.\n\nA solution to this is to submit all patches to the main branch, but there is\nno guarantee that these patches would be accepted quickly, or even be accepted\nat all. Additionally, if everyone would begin submitting countless patches\nbecause of the practice of hiring lone developers, this would quickly turn\ninto a logistical nightmare, forcing the core development team to introduce a\nprocess that would put a filter on the stream of submissions. It is easy to\nimagine that going through such a process would not be trivial. The Linux\nkernel has a very involved operation of adding patches to the system. Think of\na local school, a company or even one user hiring a friend to add something to\nthe kernel - and then trying to have kernel developers add this code to the\nmain branch of the kernel. The amount of effort is difficult to\nunderestimate.[150]\n\nIt is also clear that quite a number of patches will never be accepted simply\nbecause they transform a program into something that is too specific to a\nparticular use case and is irrelevant for the product as it stands now. Open\nsource projects that accept almost anything that goes their way quickly turn\ninto concoctions, difficult to both maintain and use. Even in today's \"free\"\nsoftware world there are enough examples when a solution to a product design\nconflict among groups of developers results in having both features added,\nmaking software more complex. Whenever several options are added to the\npackage just to indulge users who want it, developers now have to maintain\neach one of those options and are likely to have more bugs to fix and more\nthings to test.\n\nAnother version of a lone developer solution is to indeed just fork the\nproject and maintain it oneself. A team of developers can be regarded as a\n\"lone developer\" in relation to the main branch. The obvious difficulty here\nis that this is just way too costly for someone to routinely afford. Taking\ninto account the complexity of modern software, this casts such self-organized\nusers in the role of software maintainers, who now have to hire developers,\nprovide a development roadmap, etc.\n\nThis can be done as a business, and it is not inconceivable that companies\nwould emerge, providing exactly such services. Since anything they do falls\ninto the commons, it is probable that these companies would be local and not\nvery big. It might also make sense to make the local version of the software\nincompatible with all other versions, so as to defend the business and make\nsure the users cannot shop around for other versions. It can also happen\nnaturally, without anyone specifically aiming to introduce such an\nincompatibility. A local version of the software that diverges too much will\nbecome mostly incompatible with the main branch.\n\nExcessive forking will create a fragmented and chaotic market landscape, where\nthere are dozens upon dozens of versions of similar, but incompatible\npackages, all developed in different directions, at different speeds and with\ndifferent quality. The advantages of having one centralized package are so\nnumerous, that a \"lone developer\" scenario is very unlikely to be a method of\nchoice in most cases.\n\n3.2.2 Communal development model\n\nReliance on a community of developers, on the other hand, is the situation\nthat exists today. Most \"free\" software projects, especially those that are\nbigger, will have a core development team that works on its functionality.\n\nThis is definitely a more viable approach that can result in stable, more\ncleanly designed products. However, the fact that these are not businesses,\nbut groups of hobbyists, the behavior of teams developing open source software\nat no cost has its own very specific problems. It is not easy to support all\nof these pronouncements with concrete references, as a lot of it comes from\nthe general experience of being part of these communities, but most of these\nstatements are easily verifiable.\n\nFirst of all, big open source products are often effective monopolies. Because\na product is so big and has been developed for such a long time, typically no\nteam will opt to create a replacement. It can even be considered a poor move\nthat undermines the work of the community, wastes time and effort. Also, once\na project takes off, it will create a snowball effect and attract many\ndevelopers and users, thus stealing potential resources from other projects.\nThe need to market the project to the community requires very serious\ndedication from the initial team, and it make take many years until the\nproject takes off.\n\nAs a result, \"free\" operating systems usually have only one main program in a\ngiven area. For instance, there is but a single serious raster graphics\npackage - GIMP. If GIMP does not satisfy the user - there are virtually no\nalternatives that are able to boast comparable stability and initial feature\nset. If one sees several programs being developed to achieve a similar use\ncase, then it is a good bet that none of them are reliably good. Such is the\nsituation with video editors on Linux as of the moment of writing.\n\nAt the same time developers of the main package might be under very little\npressure to make their product competitive, by virtue of there being no\ncompetition. This allows them to work at their own pace, prioritize new\nfeatures over stability and over polishing existing functionality, spend time\non experiments that are incomplete for years, and often hold bizarre views\nabout software development in general.\n\nThe whole relationship between \"free\" software developers and users is\ncompletely different. Users are not customers, therefore developers owe\nnothing to them. Although in theory developers can be penalized for their\nunproductive behavior by the program being forked, this rarely happens. The\ncost of finding a functional team is very high and software being \"free\" does\nnothing to help this. In fact, since a \"free\" software license can only\nenforce development being mostly a non-commercial activity, finding capable\ndevelopers for a big project that went wrong is not a trivial task. There are\nmany examples when a very sophisticated, useful and powerful program is\nabandoned because no developer wants to pick it up, for one reason or another.\nThere are also examples of projects being picked up by less skilled\ndevelopers, who are able to perform small changes and minor bug fixes, but are\nnot capable of really advancing the software.\n\nThere is no long-term guarantee that a \"free\" software program will continue\nto be developed even when a very active team is present. While less likely for\nvery large projects, middle-sized projects are at a higher risk of the main\ndeveloper(s) leaving and essentially bringing the project to a halt. Since\ntypically developers are not being paid for their work, there are no\nobligations and commitment outside of personal interest in the product.\nSometimes a hobbyist developer will maintain interest in their product for\nyears, sometimes they can leave at a seemingly unexpected moment, never to\nreturn. And then the project enters a phase of being mostly abandoned. Less\nskilled developers that stay with the project now have the need to promote the\nproject and try to lure in skilled developers.\n\nOne of the ways to grow the development team is to employ beginners for simple\nand possibly interesting tasks with the goal of training them to write more\nserious features. This approach, while creates commotion around the program,\nrarely succeeds. Designing a GUI skin might pique a person's interest in\nsoftware development, but there is no sure path from working on simple\nfeatures to becoming an expert, especially when the required expertise might\ngo beyond programming. Someone working on an audio program might need years of\ndigital sound processing experience to be able to contribute. Most of the time\nskilled developers neither join, nor grow out of the community around the\nproject. During this time the project might fall into obscurity, even if it is\npowerful and the only one of its kind. Sometimes distribution maintainers will\nput in additional effort to patch older programs so that they compile for\nnewer systems.\n\nSo, the fact that \"free\" software projects are not dependent on a software\nvendor could be both a blessing and a curse. Yes, there is no vendor that owns\nand fully controls a \"free\" program, but then there is no one who is truly\ncommitted to it either.\n\nCommercial software developers have a strong incentive to grow their user\nbase. \"Free\" software developers normally have no such incentive. It is not\nuncommon for them to be moderately opposed to growing the number of active\nusers, since more users only means more requests and more bug reports. It also\nforces the development team to re-organize and become involved with boring\ntasks: planning, building processes, fixing bugs and writing documentation.\n\nAnother very notable feature of \"free\" software is that it is rarely\nsystematically tested. Testing is crowdsourced to the community of its users.\nThis creates a curious state of affairs when stability is rarely a focus of\ndevelopment. A lot of programs are released as they are, the project website\nwill promote the program as providing a long list of features, but nobody will\nbe overly concerned that it might be very far from production quality. Since\nthe idea is that users need to test and file bugs, it is thought that\nstability is not the primary concern of developers. This leads to many\npackages giving an impeccable first impression, but being absolutely unusable\nin practice.\n\nSince testing is outsourced to users, frequently new versions of operating\nsystems and programs become stable only as they age. Linux distributions can\nbe very stable and functional on older hardware, for which the community has\nalready figured out most of the issues, but be unpredictable when installed on\nnewer hardware. Interestingly enough, this itself does not depend solely on\nvendors putting out only proprietary drivers. There are enough situations when\nvendors provide specs for their hardware, but if this hardware is not widely\nused in a particular community, the drivers might never be written. If a given\npiece of hardware is rarely used by a given community, its problems might\nnever be addressed.[152]\n\nIn general, communal testing is of a different qualitative nature. Instead of\nsystematic, well designed testing processes often employed by commercial\nenterprises, it is more along the lines of a stream of random bug reports.\nSuch methodology does not make it easier to debug programs.\n\nIt is possible that in a world which has only \"free\" software hardware vendors\nmight do a better job focusing on the available operating systems, as opposed\nto them now focusing on Windows, but this in itself is not a proprietary vs.\n\"free\" problem in the first place. Windows just happens to have a dominating\nuser share, so hardware vendors spend resources developing drivers for the\ncore audience. But even if the drivers are there, the challenges are rooted in\nthe \"free\" nature of the operating system, which is developed based on\ncommunal principles. Even with existing drivers systems are often broken,\nsince a rollout of new functionality is rarely tested on a wide range of\nhardware, something that commercial companies do routinely for their products.\n\nAnother recurring feature of \"free\" software is that it tends to look very\noutdated. This is not a coincidence. The availability of source files creates\na temptation to take the existing codebase and fork it, rather than write a\nproduct from scratch that follows a different paradigm. This explains why a\nlot of older \"free\" software programs look more like a result of evolution\nrather than planned product design. Linus Torvalds is known to have said\nexactly that about the Linux kernel.[151]\n\nIn fact, quite a number of \"free\" programs packaged today can be traced back\nto Windows programs of the 90s that obviously served as inspiration. A\ndeveloper would attempt to create a \"free\" version of the package, perhaps\nwith some variations, but with the same basic concept. As the proprietary\nsoftware world marches on, \"free\" and open source programs tend to evolve\nrather than create newer specimens. Therefore, there is this tendency to put\nin new features into older, already existing software.\n\nOne of the things that the \"free\" ecosystem does very well is provide a world\nof shared libraries. That allows a developer to very quickly create software,\nby basing it on existing libraries. However, \"free\" libraries are not free\nfrom the peculiarities of the \"free\" software development described above,\ntherefore they are not guaranteed to be stable or well tested, functional, or\nnew. Instead, many of them are old, had been written a long time ago and\nsimply reused again and again.\n\nTo use an example of video editors again, a fair number of video editors on\nLinux use a library called MLT. This library is notoriously unstable, but for\nmany years it has also been the better available library for video editing. A\nuser, installing seemingly different video editors, will in reality be\nchoosing among different UIs, built on top of the same backend engine. And as\nthe library is unstable, many video editors on Linux might look very nice and\neven be relatively modern in their appearance, but be equally prone to\ncrashes. This situation is the direct result of access to \"free\" libraries.\n\n3.3 \"Free\" software as a public good\n\nLet us remind ourselves and list once more the freedoms Stallman proposes:\n\nThe freedom to run the program as you wish, for any purpose (freedom 0). The\nfreedom to study how the program works, and change it so it does your\ncomputing as you wish (freedom 1). Access to the source code is a precondition\nfor this. The freedom to redistribute copies so you can help your neighbor\n(freedom 2). The freedom to distribute copies of your modified versions to\nothers (freedom 3). By doing this you can give the whole community a chance to\nbenefit from your changes. Access to the source code is a precondition for\nthis.[3]\n\nWhat do these freedoms accomplish?\n\nWhat can immediately be said is that these proposals effectively transform all\nsoftware into a \"public good\".\n\nIn economics, a public good is a good that is both non-excludable and non-\nrivalrous in that individuals cannot be effectively excluded from use and\nwhere use by one individual does not reduce availability to others.[140]\n\nProprietary software can be considered a \"club good\", which means a public\ngood with an exclusion mechanism added. In the realm of informational goods,\ntypical exclusion mechanisms are restricted access to the source, copyright\nand patent laws.[153]\n\nAlthough a public good is defined as a good that is not only non-excludable,\nbut also non-rivalrous, a quick conclusion that such a good, therefore, should\nbe made available to everyone at no cost is in most cases wrong. It is widely\nrecognized that such public goods can be \"subject to excessive use resulting\nin negative externalities affecting all users\" and \"are often closely related\nto the \"free-rider\" problem, in which people not paying for the good may\ncontinue to access it. Thus, the good may be under-produced, overused or\ndegraded.\"[140]\n\nStallman tries to underline that commercial software is conceptually different\nfrom \"free\". In the real world, however, \"free\" software is very rarely a\ncommercial enterprise. There are small businesses which use a combination of\ncrowdsourcing and selling binaries, thus saving users the effort of\ncompilation, but this works only for niche software, where people mostly pay\nto consciously support the product, not because there is no other way to\nobtain it. If the business becomes exposed to a larger audience, someone would\njust compile from source and provide binaries at no cost.\n\nIn other words, software being \"free\" implies it being without charge. The\nonly meaningful difference between \"free software\" and freeware is that \"free\"\nsoftware guarantees access to source code at no cost as well. Any argument\nthat \"free\" software is not about money is deceptive. It is precisely about\nmoney or, to be more accurate, about removing all mechanisms of exclusion.\nMoney is just a common example of such mechanism. Access to source code\nthrough a copyleft license like GPL guarantees that a given piece of software\nstays free of monetary cost forever.\n\nBy transforming all club goods into public goods, Stallman effectively\nexcludes pure software development from the realm of business enterprises and\nforces bolder solutions to the \"free-rider\" problem, which typically take the\nform of government intervention.[154][155]\n\nIn fact, the free-rider problem becomes dominant in this context, and may\nshape the hypothetical world of \"free\" software quite fundamentally. By\nlabeling any form of dependence on software vendors to be unjust, and\ncategorically rejecting any such dependence, we create a world where another\nform of injustice becomes dominant: a situation when a limited group of people\ninvests resources into an activity, the product of which is then available to\neveryone at no cost.\n\nTherefore, people will find ways to prevent this injustice and restrict access\nto software even in the world of \"free\" software, while formally honoring the\n\"free\" license. And it can be argued that this will considerably stifle\ninnovation and degrade public access to capable software.\n\nHow can that happen?\n\nFirst, it is very possible that as soon as software becomes a public good, in\nmany countries governments might become responsible for software development.\nIn fact, it is unlikely this will not happen.[154][155] Taxpayers money would\nthen be used to finance basic software needs. This would create a situation\nwhen taxpayers of one country or even region are effectively using their\nlimited resources to produce a good that ends up in the commons. At least some\ncountries might choose not to invest any resources in software development and\ninstead wait for products, the development of which was paid by citizens of\nanother country.\n\nIn order to prevent that, but honor a \"free\" license, countries might choose\nto fragment standards and create procedures that are tied to a specific\ncountry, so that software made in the US is mostly irrelevant to people living\nin France or India, and vice versa. A software arms race might ensue that will\nincrease the burden on the taxpayers. At the same time this situation would\nstifle innovation, limiting government funded development to a bare minimum,\nand leaving additional non-basic programs to the private sector.\n\nThe private sector would be quite far from the rosy picture painted by \"free\"\nsoftware advocates. Unlike the narrative about a community of hobbyists\nbuilding most of the software, available to anyone at no cost, reality is\nlikely to be quite different. By the end of the 1970s we have seen the\ndecoupling of hardware and software. With software becoming a public good, it\nis only logical that software would again be coupled with hardware.\n\nIn fact, software as a separate product might disappear completely. Instead,\nwe would have software that is tightly integrated into very particular\nhardware, effectively excluding the possibility of programs falling into the\ncommons. Specialized professional products might boast prohibitive prices. The\nsituation would degrade into computing of the 80s, where such apps had been\navailable only to professionals. In other words, any attempt to police\ncommercial software into the realm of the commons would undoubtedly create a\nbackfire effect, when professional-grade software simply becomes unavailable\nto the general public. Obviously, this might also create another programming\narms race, with the community of amateurs trying to modify professional\nsoftware to become compatible with cheaper devices (or have no device\ndependence at all), so as to receive software at no cost. This arms race will\naffect prices, as businesses will have to take into account the cost of\ndefending access to their products. As a result, computers in general can\nbecome more expensive.\n\nOf course, as we saw in the example of GPLv3, it is possible to come up with\nsome newer license, say, GPLv4 that will somehow prohibit tying software to\nparticular hardware. But in the end, there will always be a way around\nlimitations and one cannot keep creating endless versions of licenses to close\nevery single loophole. Not to mention convincing people that yet another\npractice is \"unethical\" would be difficult. Even GPLv3 is not universally\naccepted, and the Linux kernel is firmly released under GPLv2.\n\nIt is difficult to estimate how this state of things will affect the hobbyist\nsoftware community. Will it then become better organized? Or will it actually\nbecome even less effective at delivering replacements for commercial software,\nas expertise and technological focus shift to hardware-based products?\n\nWhen governments adopt \"free\" software in today's realities, the outcomes are\nmixed. In 2016 a number of governments in Europe and government in Brazil have\nreverted back to proprietary software, citing quality issues.[162][164]\n\nNote: the claim about government in Brazil opting for proprietary solutions is\nless clear, as a Brazilian paper seemed to imply in 2016 that it is not the\ncase, and yet the note from the editor supplied in the footnote assets that it\nis actually, indeed the case.[163]\n\nThe analysis above is just one way of how things might develop. Predicting the\ndirection of such an enormous area of human activity is not trivial. However,\nmy analysis perhaps allows to state one thing with confidence: turning all\nsoftware into a public good is unlikely to create a personal computing\nparadise.\n\n3.4 The cost and types of sharing source code\n\nStallman's writings devote little time, if any, to the discussion of specifics\nof sharing source code. Meanwhile, this is an important topic to keep in mind.\n\nFirst, sharing source code does not take zero effort. Releasing source code is\nlogistically harder than releasing a precompiled binary. Unless we are\nspeaking about dumping code as it is, preparing source code in such a way that\nothers may find it useful is time-consuming. It might involve writing an\naltogether cleaner code and preparing documentation, such as providing\ncomments, development notes and a list of necessary dependencies. Badly\nprepared source code, real life examples of which are not unheard of, might\nboast a notable level of ineffectiveness because almost nobody is able to\nextend it without completely reworking it, or even have difficulties compiling\nit into a working program.\n\nSecond, the usefulness of source code varies. A library that is specifically\ndesigned to be used in other projects is generally more useful than a complete\nprogram, only parts of which might be of interest for other developers to\nreuse.\n\n3.5 Extent of the benefits\n\nGiven all the costs and unique challenges that \"free\" software presents, to\nwhat extent does it really solve the issues Stallman finds problematic?\n\nA number of notable cases are solved by this approach. If a developer abandons\na project, unlike with a proprietary program, it is theoretically available\nfor anyone else to pick up. As noted earlier, it is generally unlikely to\nhappen, but at least critical bug fixes can be applied and basic support for\nnewer systems can be added.\n\nA problem outlined in 2.3.1 and 2.3.2 (but not mentioned by Stallman) that in\ngovernment establishments people might be forced into a proprietary license,\nas well as students might have to use software in class that they cannot\nafford to work with at home, is effectively solved by the introduction of\n\"free\" software. This solution is not necessary, as licenses that allow for\ndistribution at no cost may also be utilized, but it is preferred, since\nguarantees that the program will stay available in the future. It is also\nimportant to note that a \"free\" license is a necessary, but not a sufficient\ncondition. The program must also be of high enough quality to be useful.\nChoosing a program which is \"free\", but is not capable of getting work done,\ncannot be considered a solution. In some cases a sub-standard program can\nserve an educational purpose.\n\nBut in most cases \"free\" software removes the alleged problems not by directly\nsolving them, but by making the initial situation impossible.\n\nFor example, DRM, which is a mechanism of exclusion of non-paying users,\nbecomes unnecessary if software development is no longer a business venture,\nand all programs become available to the public at no cost. The problem with\nDRM per se is not solved by this, rather DRM becomes irrelevant.\n\nOne can claim that \"free\" software does solve the issue of DRM directly, as\nopen source nature of the product will allow anyone to re-compile the program\nwithout DRM. While it is certainly true, DRM is a very broad set of\ntechnologies which includes centralized servers and hardware lockouts which\nare not bypassed by \"free\" software. In all fairness, Stallman does not claim\n\"free\" software to be a solution for DRM, instead he demands for DRM to be\nconsidered illegal.[157]\n\nWhat Stallman calls \"sabotage\" is now conceptually meaningless because there\nare no customers and, thus, no customer expectations: \"free\" software\ndevelopers owe nothing to their users. The phenomenon itself will exist, it is\nquite thinkable in the \"free\" software world. It just stops being an\nactionable issue, because users formally own the software to the same degree\nas the developers.\n\nQuite a number of issues are not really solved. Logic dictates that this\nconcerns all problems marked in Chapter 2 as problems not contingent on\nsoftware being proprietary. Interference (situations when an upgrade or a\ndownload initiated by proprietary software has the potential to interfere with\nusers' work on their computers) stays largely intact, since such situations\nhave little to do with software being proprietary. Removing the word\n\"proprietary\" from the definition of \"interference\" does not invalidate it. I\nhave also provided real life examples of such interference in \"free\" software.\n\nStaying secure will likely become a bigger challenge, as part of the security\nthat many \"free\" desktop systems enjoy today is mostly due to the low number\nof their users. This was outlined in greater detail in 2.2.3.\n\n\"Deception\" is hardly solved by \"free\" software. In many cases it merely\ntransfers the power to deceive from a software vendor to every single user,\nwhich admittedly makes it virtually impossible to track. For instance,\nStallman speaks of a Volkswagen scandal as an example where proprietary\nsoftware is a problem. But \"free\" software in people's car would make the\nsituation potentially much worse, as every driver would then be capable of\noverriding limitations. Unless draconian systems of constant checks are in\nplace, \"free\" software would ensure that trickery is rampant and is an\neveryday worry. One would be hard-pressed to not foresee that eventually\n\"free\" software will begin to be regulated and become centralized, evolving\ninto a much less \"free\" version of itself in the process.\n\nWhen it comes to what Stallman calls \"Surveillance\", what changes with \"free\"\nsoftware is actually not that clear. There are \"free\" software packages that\ncollect data anonymously, just like proprietary packages do. Having access to\nsource code might not change the situation with data collection on the\nInternet either, since even today millions of people use open source and\n\"free\" browsers, and yet websites collect data normally. At least in Europe,\nthe laws ensure that users are able to opt out of data collection, and user\ndata is heavily regulated. As Stallman's views are quite radical on this, it\nis quite likely that most people would not have a problem with at least some\nof the data collection. The need to provide one's verified identity for\ncertain online purchases is rarely considered a problem, and often is a\nnecessary security precaution. In many cases this has little to do with\nsoftware at all, but rather with the requirements of law.\n\nStallman's bizarre claim that subscription-based services are somehow wrong is\nunlikely to be solved by \"free\" software. If anything, \"free\" software\ndevelopers are more likely to come up with more subscription-based services,\nas direct monetization becomes impossible. Stallman's main problem with\nsubscription seems to be the fact that software might become unavailable if\none does not pay for it, while he believes that everyone is entitled to\nsoftware available at no cost - forever.\n\nHe also believes that online applications that substitute computing tasks\nnormally done on the desktop are ethically wrong.[156] This, however, is a\ngray area in terms of software freedoms, and it is not clear how this would\nplay out in the hypothetical world of \"free\" software. Suffice to say,\nStallman's contention that subscription-based and online services are wrong is\njust way too questionable and unjustified, and it is entirely possible that it\nwould not be universally ratified even in our hypothetical scenario.\n\n3.6 Efficiency\n\nIn the beginning of this chapter I have stated that a necessary ingredient in\nthe argument for a particular solution is its effectiveness.\n\nThis might include not only comparisons to competing approaches, but also an\nanalysis of the solution itself - it's applicability, side effects and\nrelation to the larger picture. To supply an example, if someone visits a\ndoctor and complains of knee pain, one way to resolve the issue is to amputate\nthe leg. In fact, if we narrow our focus to knee pain alone and ignore all\nother issues, such a solution seems preferable, as unlike a painkiller or a\nsurgical operation, it is capable of removing knee pain - and even the\npossibility of knee pain - permanently. And yet, no sane person would opt for\na leg amputation as a solution to knee pain. The consequences of losing a limb\nare just way too negative and typically don't outweigh the benefits of never\nhaving knee pain.\n\nStallman's solution definitely seems to remove a lot of the problems he\noutlines. But the costs are high: eradication of software development as a\nbusiness, a potential increase of the burden on taxpayers, a significant\nslowdown of technological innovation, making state of the art computing less\naccessible to the general public.\n\nThis happens because in his analysis Stallman focuses only on one issue and\none issue alone - the proprietary nature of software. By choosing to focus\nonly on this feature and consider it to be the primary problem in every\nsituation, Stallman's solution is blind to nuances and neighboring issues.\nSuch a methodology is rarely useful, especially in multifaceted areas of\nsociety and politics.\n\nStallman also routinely fails to compare his solution to other solutions. In\nfact, he never even acknowledges that other solutions exist, although news\nitems he cites in his examples of \"proprietary abuse\" again and again speak\nabout measures taken to fix these issues.\n\n3.7 Chapter conclusion\n\nThe point of this chapter is not to show that the \"free\" software solution is\ncompletely wrong. It is to show that the consequences of this approach are\nvery complicated, and require much thought and research.\n\nStallman does not offer a solution that obviously and unequivocally\nneutralizes all of the problems he sees with the proprietary world. He offers\na solution that neutralizes the alleged problems only very superficially,\nwhile making dramatic changes to the current state of affairs, with very\ncomplicated consequences, and with the introduction of new non-trivial\nproblems. That Stallman's writings do virtually nothing to explore these\nissues demonstrates the superficial nature of his philosophy.\n\nIt is vital to understand that Stallman's solution is not accomplishing the\nworld of software that we have today, but with full access to source code at\nno cost - a utopia that probably many people envision when talking about\n\"free\" software. Instead, Stallman's solution transforms the world of personal\ncomputing as we know it with it's benefits and challenges into an entirely\ndifferent world with a set of its own benefits and challenges. Understanding\nwhich world is better is not trivial.\n\nHis essays are narrowly focused on proprietary software, ignoring all other\nissues, values and goals. Stallman does not assess the cost and consequences\nof his proposed \"free\" software approach, and never acknowledges less radical,\nmore nuanced solutions. At the very least, this makes his argument incomplete\nand, as a result, unconvincing.\n\n4\\. Overall conclusion and proposals for a stronger case for \"free\" software\n\nFundamentally, Stallman is making two claims:\n\n  1. Proprietary software is unjust\n  2. The solution to this is to adopt certain freedoms as essential\n\nThe logic of the case is sequential. Adopting a solution is only reasonable if\nthe problem being discussed is real. I have, nevertheless, analyzed Stallman's\nsecond claim independently, as if the first claim has been made successfully.\n\nI believe that my analysis has shown both claims to be unconvincing and\nlacking in depth, as well as in provided evidence. The case for proprietary\nsoftware being unjust is weaker, but then the statement itself is more\nconsequential and requires stronger evidence than the proposal of the\nsolution. The latter statement is poorly presented, insufficiently thought-out\nand takes the form of a panacea that somehow miraculously cures all\ninjustices.\n\nStallman's writings take the form of ideological storytelling, with loaded\nlanguage, biased assessment of evidence and philosophical shallowness.\nComplex, multi-faceted issues are given simplistic black-and-white treatment,\nmixed in between calls for bush-league political action.\n\nI will dedicate this chapter to suggesting how to make the case for \"free\"\nsoftware stronger, and point out areas which might benefit from additional\nscientific research.\n\n4.1 \"Free\" software as a moderate philosophy\n\nThe primary weakness of Stallman's argument is it's radical nature. His\nunyielding idealism makes his position difficult to argue for and yet stay\ntrue to the facts, nearly impossible to implement in real life, dangerously\nborder on conspiratorial thinking, and essentially construct an \"us and them\"\nnarrative, which is rarely a basis for constructive political action.\n\n\"Free\" philosophy as a choice, however, is a case that is much stronger, more\nconsistent and ultimately easier to defend.\n\nThere is an inherent difference between saying \"I personally want complete\ncontrol of my computing\", and \"everyone should have complete control of their\ncomputing\". An inherent difference between saying \"we want to build an\necosystem for those who don't want to use proprietary software\" and\n\"proprietary software is unethical and it should not be used by anyone\".\n\nWould Stallman argue the former, this treatise would not exist. But this is\nnot what he argues. He instead tries to build a universal case for proprietary\nsoftware being unethical, with \"free\" software as the only ethical\nalternative. And this is a claim which is incredibly hard to defend, primarily\nbecause existing evidence, including evidence Stallman himself presents, does\nnot seem to support his idea. In other words, this radical claim appears to be\nfalse.\n\nThis is not to say that a more moderate philosophy is automatically consistent\nand correct. A lot of what has been said of Stallman's original writings might\napply to the more moderate version as well, like the impossibility of truly\ncontrolling one's computing in our age of technological diversity. But it is\ndefinitely a much more workable line of reasoning, and may result in\nactionable political proposals, as opposed to Stallman's quixotic projects to\ncompletely abolish proprietary software, DRM, data collection of any sort,\nelectronic identification, content filtering, etc.\n\nA moderate philosophy might be based on an idea that it is prudent to build an\necosystem of publicly available software, that offers no restrictions on\nmodification and redistribution, and that is defended by a copyleft license.\nSuch a cause would not at all be antithetic to the existence of proprietary\nsoftware, and would be focused on the positive case for \"free\" software as an\nasset to society, rather than on the negative case of proprietary software\nbeing a problem.\n\nThe benefit of this approach is that it removes many of the difficulties of\nrelying solely on communal-based software development, and instead allows to\nreap the benefits of freely available binaries and source code whenever\npossible and reasonable.\n\nIt is also clear that a moderate philosophy of this kind would not in any way\nundermine \"free\" software efforts that exist today. It is quite safe to assume\nthat most people, passionate about \"free\" software, are either unfamiliar with\nStallman's writings, or their familiarity is cursory and not that\nconsequential. Nothing that is done today in the name of \"free\" software\ndepends on it being as radical as Stallman presents it.\n\nThe author of this treatise is a strong supporter of \"free\" software, believes\nit to be an exceptionally good and even necessary idea, and yet, as is clear\nfrom this treatise, does not share Stallman's stringent views.\n\n4.2 Proposals for realistic political action\n\nEquipped with a positive case for \"free\" software, devoid of revolutionary\ndemands, a group of activists might be better able to advance their cause and\nactually solve some of the genuine problems that exist in the world of\nsoftware. The list of suggestions is by no means exhaustive.\n\n4.2.1 Open standards and open formats\n\nWhile it would be nearly impossible to argue for all companies to have to\nrelease source code, it is much more realistic and perhaps even more\nbeneficial to argue for open standards and open formats.\n\nThe idea of open standards is already entrenched in the modern conversation\nabout technology. Although attempts to insert proprietary standards into\ncommon protocols are still frequent, generally openness and net neutrality\nseem to be winning in the long run.\n\nOnce confronted with the need to prepare a concrete recommendation, the idea\nfor open formats, however, is more complicated, and there is definitely much\nwork to be done in understanding what a push for open formats should look\nlike. The difficulty here is that new formats are frequently an integral part\nof original software development. The cost of providing an open format is not\nnil, and, as software tends to constantly change and grow, the process of\nconstantly keeping the publicly available specification in sync is bound to be\nlaborious. Sometimes a proprietary format is used as an exclusion mechanism\nand allows the company to make money. At what point should the public enjoy\naccess to a proprietary format, under which conditions, which cases must be\nincluded, which cases should be excluded - all of these questions are not\ntrivial.\n\nNevertheless, such an approach could prove much more realistic than arguing\nfor the availability of complete source code of programs, and much easier to\njustify.\n\n4.2.2 \"Free\" software in the public sector\n\nA lot of modern \"free\" software activism quite successfully works towards\nsaving taxpayers' money by introducing \"free\" software in publicly funded\ninstitutions.[158][159][160][161] These successes are not guaranteed to be\npermanent, as software quality proves to be extremely important when required\nto deliver results, and not just the theoretical opportunity to modify and\nshare source code. In recent years a number of critical \"free\" software\nsupporting governments have reverted to using proprietary solutions, citing\npoor quality and lack of interest from local developers to advance \"free\"\nprograms, chosen by the public sector.[162]\n\nHowever, it is clear that this direction is promising, realistic and is\ncapable of adding real value.\n\n4.2.3 Security and privacy standards\n\nIndustries such as food and medical industries are heavily regulated, because\nthe consequences of mishaps can be disastrous. With our society highly\ndependent on software, there is good reason to demand a serious approach to\nsecurity in software. Many options might be explored here, from common\nsoftware security standards to responsibility of public and private\ninstitutions which are dependent on software in critical areas, to be\nresponsible and accountable for providing IT security of their systems.\n\nSame concerns privacy. Organizations like EFF (The Electronic Frontier\nFoundation) are fighting for civil liberties in the digital world. Quite a lot\nof their agenda addresses Stallman's concerns about surveillance. However,\nEFF's work is a good example of a rational approach, based on upholding civil\nliberties and Constitutional rights.[165] Compare that to Stallman's\ndemonstrative rejection of credit cards, because one needs to identify oneself\nin order to use them.\n\nCurrent state of privacy laws is not at all unsatisfactory. Every year less\nand less leeway is given to companies, and their user data usage possibilities\nhave shrunk significantly since the dawn of the Internet. This space does have\nto be continuously monitored and kept in check, as technologies evolve and our\nability to crunch large amounts of data grows.\n\n4.3 Necessary scientific research\n\nActivism, not based on facts and scientifically verified data, quickly turns\ninto a form of ideological warfare. No matter how noble the cause is, not\nbeing able to interpret the situation correctly will cause activists to\nsystematically overreact to or underestimate unfolding events, and as a result\nbecome marginalized, ineffective and even cause long-term harm if the change\nthey try to advance is actually of importance, but now becomes associated with\nhysterical and unreasonable views.\n\nRational activism, however, can do a great deal of service to society, alert\ngovernments and experts of potential dangers, and defend human rights in the\nwake of technologies that dramatically reshape our world. Activists, well\ngrounded in reality have a better chance to be heard and implement measures\nthat produce real change.\n\nA number of studies can be initiated to understand the scale of problems, as\nwell as efficiency of \"free\" software as a solution. Even research based\nsolely on the publicly available data would be of great value.\n\nStatistics based approach to customer rights violations can show whether the\nscale of the problem in the proprietary software world is indeed as\nunprecedented. While existing data already makes this hypothesis quite\nimplausible, it is possible that in some areas malpractice is indeed more\nrampant than in others. Such data will help focus activists' efforts to argue\nfor more checks and balances in these particular areas.\n\nLongevity of \"free\" software teams, the amount of \"free\" projects that are\nreleased and then become widely re-used, the rate of innovation in the \"free\"\nsoftware community, variability of software, speed of bug fixing, satisfaction\nof users, actual maintenance cost, comparison of these attributes to various\nmodels of proprietary software development, including smaller projects - all\nthese topics could prove to be an interesting and fruitful subject of\nscientific research. Data, gathered as a result, can ultimately help \"free\"\nsoftware communities run better and achieve more.\n\nSources:\n\n0\\. Free software movement\n\n1\\. Philosophy of the GNU Project\n\n2\\. The GNU Project\n\n3\\. What is free software?\n\n4\\. Proprietary Software Is Often Malware\n\n5\\. Free Software Is Even More Important Now\n\n6\\. 351,000 People Die of Food Poisoning Globally Every Year\n\n7\\. Eating in Restaurants: A Risk Factor for Foodborne Disease?\n\n8\\. Remotely Eavesdropping on Cell Phone Microphones\n\n9\\. This goes no further...\n\n10\\. The second operating system hiding in every mobile phone\n\n11\\. Recently Bought a Windows Computer? Microsoft Probably Has Your\nEncryption Key\n\n12\\. Microsoft may have your encryption key; here\u2019s how to take it back\n\n13\\. \"We Own You\" - Confessions of an Anonymous Free to Play Producer\n\n14\\. Google Privacy Policy\n\n15\\. Arris password of the day generator\n\n16\\. Apple's Jobs confirms iPhone 'kill switch'\n\n17\\. Microsoft: We can remotely delete Windows 8 apps\n\n18\\. Information privacy law\n\n19\\. Federal Data Protection Act\n\n20\\. CNiL\n\n21\\. Federal Council's Message to Parliament\n\n22\\. Data protection reform\n\n23\\. Privacy concerns and ethics of data mining\n\n24\\. Coolpad at Wikipedia\n\n25\\. FBI\u2013Apple encryption dispute\n\n26\\. How to manage Windows 10 notification and upgrade options\n\n27\\. The JavaScript Trap\n\n28\\. Double standard: Why Apple can force upgrades but Microsoft can't\n\n29\\. Apple says game about Palestinian child isn\u2019t a game\n\n30\\. GNU Software\n\n31\\. Free GNU/Linux distributions\n\n32\\. iFixit App Pulled from Apple's Store\n\n33\\. Apple, your anti-choice tendencies are showing in your app store\n\n34\\. Apple has Approved the Hinder App\n\n35\\. Nintendo's New 3DS Charges 30 Cents to Remove an Internet Browser Filter\n\n36\\. Dell, Comcast, Intel & Who Knows Who Else Are Out to Get You\n\n37\\. Setting the Record Straight on Moplus SDK and the Wormhole Vulnerability\n\n38\\. Wipeout: When Your Company Kills Your iPhone\n\n39\\. Wikipedia: Measuring desktop adoption\n\n40\\. Risks in using open source software\n\n41\\. Is open source software insecure? An introduction to the issues\n\n42\\. Is open source security a myth?\n\n43\\. Open-source software security\n\n44\\. Security of open-source software again being scrutinized\n\n45\\. The Heartbleed Bug\n\n46\\. 44 U.S. Code 3542 - Definitions\n\n47\\. Wikipedia: Definitions of Informational security\n\n48\\. WhatsApp completes end-to-end encryption rollout\n\n49\\. Secure Messaging Scorecard\n\n50\\. Apple Stole My Music. No, Seriously.\n\n51\\. No, Apple Music is not deleting tracks off your hard drive \u2014 unless you\ntell it to\n\n52\\. Uninstall QuickTime for Windows: Apple will not patch its security bugs\n\n53\\. Apple and James' Excellent Adventure\n\n54\\. Apple Sent Two Men to My House. No, They Weren\u2019t Assassins.\n\n55\\. iTunes may play a role in reports that Apple Music was replacing user\nlibraries with DRM-encumbered files.\n\n56\\. More than half of all IE users face patch axe in 10 months\n\n57\\. Windows XP: End of an Era, End of an Error\n\n58\\. Linux adoption\n\n59\\. Mac Virus & Malware Threats\n\n60\\. Linux Malware On The Rise\n\n61\\. Bad arguments for software freedom\n\n62\\. Don't believe these four myths about Linux security\n\n63\\. Competition law\n\n64\\. Philips Hue will no longer block third-party light bulbs (Update)\n\n65\\. Adobe Goes All-In With Subscription-Based Creative Cloud, Will Still Sell\nCS6 For Now But Will Stop Developing It\n\n66\\. \"Error 53\" fury mounts as Apple software update threatens to kill your\niPhone 6\n\n67\\. Apple Apologizes And Updates iOS To Restore iPhones Disabled By Error 53\n\n68\\. Apple Facing Class Action Lawsuit Over \"Error 53\" iPhone 6 Bricking\n\n69\\. Apple's Operating Systems Are Malware\n\n70\\. The good, the bad and the ugly of vendor lock in\n\n71\\. Repairing Your iPhone Home Button From An Unofficial Repair Shop Can\nBrick Your Phone\n\n72\\. Apple Details Touch ID And The A7\u2019s Secure Enclave In Updated iOS\nSecurity Document\n\n73\\. Judge Rules in Apple's Favor, Dismisses \"Error 53\" Lawsuit\n\n74\\. Update: Apple plays hardball: Upgrade 'bricks' unlocked iPhones\n\n75\\. Oracle will continue to bundle 'crapware' with Java\n\n76\\. LG Will Take The 'Smart' Out Of Your Smart TV If You Don't Agree To Share\nYour Viewing And Search Data With Third Parties\n\n77\\. INDICATIVE AND NON-EXHAUSTIVE LIST OF TERMS WHICH MAY BE REGARDED AS\nUNFAIR\n\n78\\. Facing Backlash And A UK Govt Inquiry, LG Now Claims To Be 'Looking Into'\nIts Smart TVs' Data-Slurping Habits\n\n79\\. Not in front of the telly: Warning over 'listening' TV\n\n80\\. NSA gets early access to zero-day data from Microsoft, others\n\n81\\. How Badlock Was Discovered and Fixed\n\n82\\. Twice in the past six months AWS has had to reboot some of its cloud\nservers because of a Xen vulnerability\n\n83\\. Stuxnet\n\n84\\. LTS Enablement Stack\n\n85\\. Microsoft sued for $10,000 after unwanted Windows 10 upgrade\n\n86\\. Nintendo Updates Take Wii U Hostage Until You \"Agree\" to New Legal Terms\n\n87\\. Why Open Source misses the point of Free Software\n\n88\\. When Free Software Isn't (Practically) Superior\n\n89\\. Non-free software can mean unexpected surprises\n\n90\\. Creative Cloud activation and sign-in troubleshooting\n\n91\\. Internet connectivity, offline grace period, and reminders\n\n92\\. ios 9 automatic download making me furious\n\n93\\. How do you stop an iPhone from automatically downloading an iOS update\nwhen on wifi and charging?\n\n94\\. Yahoo Signs Deal With Oracle To Attract New Users Via Java Installs\n\n95\\. New Search Strategy for Firefox: Promoting Choice & Innovation\n\n96\\. Mozilla Public License (MPL) version 2.0\n\n97\\. Three times as bad as malware: Google shines light on pay-per-install\n\n98\\. Investigating Commercial Pay-Per-Install and the Distribution of Unwanted\nSoftware\n\n99\\. New research: Zeroing in on deceptive software installations\n\n100\\. Pok\u00e9mon Go: Restaurants and bars cash in on Pok\u00e9stop locations\n\n101\\. Proprietary Surveillance\n\n102\\. Music Downloads and the Flip Side of Digital Rights Management\n\n103\\. Digital rights management\n\n104\\. Defective by Design\n\n105\\. Intel Processors to Become OS Locked\n\n106\\. Sony agrees to pay millions to gamers to settle PS3 Linux debacle\n\n107\\. Snapchat agrees to settle FTC charges that it deceived users\n\n108\\. Men make up their minds about books faster than women, study finds\n\n109\\. Microsoft\u2019s new small print \u2013 how your personal data is (ab)used\n\n110\\. Issue with 14.04.5 new hardware enablement stack on intel hd graphics\n\n111\\. Hardware Enablement Stack update crashed computer\n\n112\\. Can't install nvidia-current after installing hardware enablement stack\n\n113\\. Black screen at start of 14.04 after update hardware enablement\n\n114\\. Yesterday's 12.04 \"Hardware Update\" Destroyed My System\n\n115\\. Boot problem after enablement stack update\n\n116\\. Cannot boot after updating newest hardware-enablement stack\n\n117\\. How to disable HWE messages (14.04)\n\n118\\. ASIdentifierManager\n\n119\\. Who Knows What About Me? A Survey of Behind the Scenes Personal Data\nSharing to Third Parties by Mobile Apps\n\n120\\. Free Android apps connect to thousands of tracking and ad URLs, research\nshows\n\n121\\. Luigi VIGNERI\n\n122\\. Taming the Android AppStore: Lightweight Characterization of Android\nApplications\n\n123\\. OpenRTB 2.5\n\n124\\. Permissions Reference - Facebook Login\n\n125\\. How do I control my permissions when I sign up for an app or game?\n\n126\\. First Response's Bluetooth pregnancy test is intriguing \u2014 and a privacy\nnightmare\n\n127\\. CloudPets stuffed toys leak details of half a million users\n\n128\\. Adobe will try anything to stop a Creative Cloud cancellation\n\n129\\. Proprietary Sabotage\n\n130\\. Proprietary Back Doors\n\n131\\. Why Schools Should Exclusively Use Free Software\n\n132\\. Freedom of speech\n\n133\\. Free Software and Education\n\n134\\. Why Schools Should Exclusively Use Free Software\n\n135\\. Why Educational Institutions Should Use and Teach Free Software\n\n136\\. What's the Best Way for a Programmer to Learn a New Language?\n\n137\\. What are some of the best ways to learn programming?\n\n138\\. An example of a Programming Methodology course at Stanford\n\n139\\. Computer science\n\n140\\. Public good\n\n141\\. The 25 best alternatives to Photoshop\n\n142\\. 10 Photoshop alternatives that offer powerful editing and photo\nmanagement controls\n\n143\\. The 10 Best Photoshop Alternatives You Need To Know\n\n144\\. British businesses battle with bad browsers \u2013 IE6 usage up 1,200% during\noffice hours\n\n145\\. The Right to Read\n\n146\\. Consumer protection\n\n147\\. Million Lines of Code\n\n148\\. Selling Free Software\n\n149\\. A more detailed history of GNU\n\n150\\. A guide to the Kernel Development Process\n\n151\\. Re: Announce: Linux-next (Or Andrew's dream :-))\n\n152\\. Linux Audio: E-MU 0404 USB\n\n153\\. Club good\n\n154\\. Explaining Collective Action\n\n155\\. The Tragedy of the Commons\n\n156\\. Who does that server really serve?\n\n157\\. Proprietary DRM\n\n158\\. Open Source Adoption\n\n159\\. Use of Open Source Software by the Brazilian Government\n\n160\\. Brazil: Free Software's Biggest and Best Friend\n\n161\\. Adoption of free and open-source software by public institutions\n\n162\\. Brazil Is Ditching Open Source For Microsoft\n\n163\\. Em nota oficial, Planejamento nega que esteja abrindo mercado\ngovernmental para Microsoft\n\n164\\. Region to switch to proprietary cloud office alternative\n\n165\\. About EFF\n\n", "frontpage": false}
