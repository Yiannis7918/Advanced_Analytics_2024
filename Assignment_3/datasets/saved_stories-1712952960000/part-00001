{"aid": "40013150", "title": "Why Panning and Zooming in a Web App Can't Be Perfect", "url": "https://mappedin.ca/resources/blog/why-panning-and-zooming-in-a-web-app-cant-be-perfect/", "domain": "mappedin.ca", "votes": 7, "user": "bhouser", "posted_at": "2024-04-12 14:13:10", "comments": 4, "source_title": "Mappedin", "source_text": "Why Panning and Zooming in a Web App Can't Be Perfect | Mappedin\n\nThis website uses cookies to ensure you get the best experience. Learn more.\n\nAccept Decline\n\n  * products\n\n  * pricing\n\n  * developers\n\n  * solutions\n\n  * company\n\n  * contact us\n\nLog In\n\nSign Up\n\nReturn to Resources\n\n# Why Panning and Zooming in a Web App Can't Be Perfect\n\nApr 11, 2024\n\n12 min read\n\nBy: Brian Houser\n\nDeveloping software is tough. There are complexities and challenges at every\ntwist and turn, especially when creating products that are at the forefront of\nour industry. That said, some folks on our development team want to start\nsharing stories about the challenges of developing indoor mapping\napplications. It will dive deep, sometimes into technical labyrinths, or cover\nstories of how we are solving mapping problems.\n\nI wanted to write up a bit of an expos\u00e9 about working with trackpad gestures\nand mouse wheel events in the browser, as well as panning and zooming. I did a\nbit of a deep dive on this while trying to improve the behavior in Mappedin\nthis week.\n\nI'm going to break this into a couple of parts: An overview of the state of\nplay, and a more practical discussion of browser event handling and\nlimitations (Spoiler: it's difficult to determine whether a trackpad or mouse\nscroll wheel is being used). I'm going to ignore touchscreen devices in the\nfirst part for reasons that will be explained in the second part.\n\n### Part 1: The State of Play\n\nA survey of existing applications will reveal that there is a non-uniform set\nof panning and zooming control choices made by the respective creators of\nthose applications. Some apps enable click-and-drag for panning, and some do\nnot. Sometimes the scroll wheel is assigned to panning, and sometimes to\nzooming. Many of these differences can be attributed to application-specific\nneeds, and some of the differences are compromises made based on the\nlimitations of the platform.\n\nAt the risk of stating the obvious, the simplest case is probably a vertical-\nonly scrolling (panning) document, such as most document-type pages viewed in\na web browser. Zooming is possible but not a prominently placed interaction\nmode. Map viewing applications, on the other hand, are much more interesting\nbecause zooming and panning are the fundamental interactions. Map editors\ncould be the most interesting application type because while panning and\nzooming are just as important as in map viewers, there's also a need to\nreserve mouse buttons for the editing functions. Infinite-canvas editors (e.g.\nFigma) fall into this category as well.\n\nLet's take a tour of some specific use cases.\n\n  1. Google Maps: Zoom is accomplished with a mouse wheel scroll or a trackpad pinching gesture. I can left-click and drag the map to pan. On a trackpad, I can also click-and-drag to pan, but if I attempt a 2-finger panning gesture then vertical swiping zooms the map (an interesting choice), and if I swipe to the left I'll be surprised by a browser \"back\" navigation instead of the expected escapade to the Pacific Ocean (depending on your starting location).\n\n  2. Mappedin Enterprise Editor: The enterprise editor (also known as Mappedin CMS) is probably the most advanced indoor map editor on the planet. But even as we consider how a good thing can be improved further, we see that the panning and zooming controls more closely model best practices for a map viewing application than a map editor. It implements almost the same behavior as Google Maps. The price paid is that since left-click is used for panning, most edit commands (e.g., place a node) use right-click. There\u2019s also some inconsistency here: if you're unsuspectingly hovering a path node before you click-and-drag to pan, you're just going to move the node. Saving the day, unlike Google Maps, is that left-swipe on a trackpad will not leave the page.\n\n  3. Figma: Both Figma and Figjam implement panning with middle-click instead of left-click. The initial objection here might be that middle-click for panning on a trackpad is not possible, but Figma implements two-finger panning in both 2D dimensions. To zoom, you hold Ctrl or Meta, while either scrolling the mouse wheel or dragging vertically with two fingers. If your device supports pinch gestures you can use that as well. The black mark on Figma's record is if one scrolls the mouse wheel without holding Ctrl/Meta, the page pans vertically. Spoiler for Part 2: This is a compromise they made based on browser limitations.\n\n  4. Apple Maps: Apple Maps, like all Apple products, is perfect. For those that haven't experienced Apple Maps' perfection, it may be because Apple Maps is only available as a native application on an Apple device such as a MacBook or iPhone. Panning and zooming can be accomplished as follows: with a mouse, you can click-and-drag to pan, or zoom with the mouse scroll wheel (holding of any modifier key is not necessary). With a trackpad, one can do omnidirectional panning by sliding with two fingers. Trackpad zooming is done with a pinch gesture, and lo and behold, you can even perform a two-finger rotation gesture at the same time as performing a pinch gesture to zoom! Unfortunately, Apple is \"cheating\"( sort of). I'll discuss why as we proceed into part 2.\n\nPanning and zooming the viewport are fundamental interactions in a map editing\ntool.\n\n### Part 2: Browser Event Handling and Limitations\n\nSince we all agree that the mouse and trackpad panning and zooming behavior\nimplemented in Apple Maps is perfect, let's discuss how we might try to\nimplement that, and what problems we'll run into.\n\nOne small change we will make: since we're implementing an editor, we want\nmouse-panning to be done with middle-click instead of left-click. This doesn't\nrepresent a flaw in Apple Maps because Apple Maps is not an editor.\n\nThe Mappedin editor is a browser application, so we'll be using browser\nevents. After browsing the documentation, we determined that wheel events are\nthe way to go. Scroll the mouse wheel? Wheel event. Drag on the trackpad?\nWheel event. Pinch the trackpad? Also...a wheel event? How do we determine\nwhen to pan and when to zoom?\n\nAfter the panic has subsided and we've explored our options further, we\ndetermine that when the user performs a pinch gesture, the browser tells us\nthat the ctrl key is pressed with the event property ctrlKey: true. This is,\nof course, a lie since the control key is not pressed. But it's a useful lie.\nWe can now determine that a user is pinching the trackpad and wishes to zoom.\nIf that property is not set, then this trackpad user is sliding their fingers\nin the same direction to pan.\n\nBut they might be a mouse user scrolling a wheel, not a trackpad user doing a\nswipe gesture! Remember that Apple Maps pans with a two-finger swipe, and\nzooms with a mouse wheel scroll. Our wheel events for these two cases look\nexactly the same though.\n\nAt this point, a reasonable developer might settle for less than perfection.\nLet's just ask the user to press control themselves if they wish to zoom!\nAspiring to be as perfect as Apple Maps is nonsense anyway. Figma made this\ncompromise, surely they explored all the options...\n\nBut wait! Are wheel events the only option? Can't we detect multiple trackpad\ntouches and infer from their relative movement over time what sort of gesture\nis being performed? There's an MDN guide (as close as it gets to a source of\ntruth for browser behavior) about implementing pinch zoom using pointerdown\nevents and tracking the movement of multiple pointers. Can't we do that with a\ntrackpad?\n\nYou would conclude that this will work if you ask ChatGPT how to detect\ntrackpad touches, but ChatGPT is lying. There are no trackpad-unique events\nthat fire when you touch a trackpad. Not for multiple touches, not even for\nsingle touches. pointermove will probably fire, but it looks identical to\nmoving a mouse. Regarding browser events, a trackpad is a mouse, and mice\nproduce clicks, not touches.\n\nAll of the guides about touch handling refer to touchscreens (I promised in\nPart 1 that I would talk about touchscreens!). If you think about it, the\ntouch events produced for touchscreens wouldn't make sense if they were\nemitted for a trackpad. A touch event includes touch coordinates. You can\nreceive coordinates for multiple touches simultaneously. For a trackpad, the\nfirst touch could, in theory, produce the coordinates where the mouse cursor\nwas when the first finger touched. For the second or third touch, the\ncoordinates would be ambiguous though, because the relative position of your\ntwo fingers cannot be mapped to the screen. You're not touching the\nscreen...even if the illusion while using a touchpad that you are touching the\nscreen is often convincing.\n\nNot to say that a new event type couldn't be implemented for trackpads,\nproviding the ability to implement custom gestures. But today, it doesn't\nexist. We're starting to come to terms with the situation. The browser events\nappear to intentionally obscure any difference between a trackpad and a mouse.\nThe events emitted when using a trackpad do not differ from a mouse, our hands\nare tied.\n\nA corollary here is that touchscreen events do not conflate with mouse events\nand can be implemented more or less independently, which is great for\ntouchscreens!\n\nBut we still can't pan with a trackpad and scroll with a mouse wheel. So a\ncompromise similar to the one Figma made may be our fate. Users will need to\nhold down a key like ctrl either while panning, or while zooming. But so as to\nrage against the dying of the light, let us first attempt to scale the cliffs\nof insanity. Can't we heuristically differentiate trackpad \"pan\" wheel events\nfrom mouse \"scrolling\" wheel events?\n\n#### Beginning of the Cliffs of Insanity expedition. Proceed at your own risk!\n\nOur first approach will exploit the polling rate. We notice that trackpads (at\nleast on a MacBook) produce many events that are tightly packed temporally,\ntypically with less than 20ms between events. Let's define a contiguous set of\nevents like this as an \"event burst.\" Event bursts are always trackpads, so\nwe'll pan the map. If we have single events more than 20ms apart, it's a mouse\nwheel. And if the previous event was part of an event burst, it's also a\ntrackpad.\n\nThis almost works. It breaks down if a mouse user flicks the scroll wheel\nquickly. The assumption about the \"slow\" event polling rate on mouse scroll\nwheels was wrong. The resulting behavior is unacceptable: the mouse wheel\nnormally zooms, but if you zoom too fast it pans vertically, usually by a lot\nsince the user flicked the mouse wheel quickly.\n\nLet's not despair though! The cliffs of insanity were never going to be scaled\neasily. For our next attempt we'll use polling rate, and we'll also use the\nwheel event's deltaX property. This indicates horizontal movement. Mouse\nwheels consistently produce deltaX values of 0, trackpads do not (right?).\n\nWe retain our \"event burst\" detection. Regardless of how our heuristic\ndetection works, it must produce a result very quickly. We cannot perform the\nwrong choice of panning vs zooming for hundreds of milliseconds before\nchanging course, since that would break user immersion dramatically.\n\nWheel events are not always slow, but trackpad events are always in fast\nsuccession. So if we get an event burst, and one of the first 5 events has a\nnonzero \u2018deltaX\u2019 value, it's a trackpad and we pan. If the previous event is\npart of an event burst that was identified as a trackpad, we do not wait for\nfive events; we pan immediately. Otherwise, it is a mouse wheel and we zoom.\n\nThis almost works! But unfortunately, it moves the immersion-breaking behavior\nfrom the mouse to the trackpad. Turns out it's possible to produce dozens of\nsequential wheel events on a trackpad with deltaX === 0. MacBook trackpads\nemulate scrolling momentum with a two-finger swipe or flick by emitting\nartificial wheel events with sequentially decreasing position deltas, after\nthe swiped fingers are not touching the trackpad anymore. So if a user does a\nbrief vertical flick and produces, for example, three events with no\nhorizontal movement, 20 more events appear that also have no horizontal\nmovement! Physical mouse confirmed! Except we are wrong, and the user zooms\nout to the maximum when they intend to pan a short distance.\n\n#### Cliffs of Insanity expedition over\n\nWe're reaching the end of our journey. How is Apple \"cheating\" to make Apple\nMaps perfect? I basically said it at the beginning, although the relevance\nwasn't clear at that point: Apple Maps is a native application. They aren't\nbeholden to the limitations of the browser events produced by trackpads vs\nmice. They can use any information the OS provides them. Beyond being a native\napplication, Apple Maps only runs on Apple devices, so their applications\nprobably have access to hardware identifiers telling them unambiguously that\nthe gesture is from a trackpad. I don't know if this is a secret API or\nsomething available to anybody who creates a MacOS application, since I didn't\nresearch that. My problem is in the browser.\n\nWhat can we do in the Mappedin editor? We have to make some compromises. Mouse\nusage is probably the most common interface mode for drawing maps. So what?\nWe'll implement mouse wheel zooming. Two-finger swiping on the trackpad also\nzooms. To pan with the trackpad, hold down the spacebar and swipe two fingers.\nWe've had the hold-spacebar hotkey for a while to enable left-click drag-\npanning so this extends existing behavior.\n\nThanks for joining me on this adventure. And please, tell me if I'm wrong. If\nthere's a way to unambiguously differentiate mouse and trackpad wheel events,\nthen we too can build perfect panning and zooming interactions!\n\nCheck out our Mappedin self-serve mapping tools and start mapmaking for free!\nExplore more advanced subscription tools with Mappedin Plus.\n\nSolutions\n\n  * Indoor Mapping\n  * Advertising and Digital Signage\n  * Indoor Positioning\n  * Workspace Management\n  * Safety and Security\n  * Location Based Analytics\n\nResources\n\n  * Resources Hub\n  * Webinars\n  * Case Studies\n  * Developers\n  * Interactive Demos\n\nProducts\n\n  * Mappedin\n  * Mappedin Web\n  * Digital Directory\n  * Mappedin SDK\n  * Mappedin CMS\n\nAbout\n\n  * About Us\n  * Partner Directory\n  * News\n  * Careers\n\nMappedin Inc. 14 Erb St. W Waterloo, Ontario N2L 1S7 (519) 594 0102\n\nSign up for the latest industry updates, resources, and news\n\n\u00a9 2024 Copyright Mappedin Inc. All Rights Reserved.\n\nPrivacy Policy\n\nAccessibility\n\nDMCA Take Down\n\nMappedin Inc. 14 Erb St. W Waterloo, Ontario N2L 1S7 (519) 594 0102\n\n\u00a9 2024 Copyright Mappedin Inc. All Rights Reserved.\n\nPrivacy Policy\n\nAccessibility\n\nDMCA Take Down\n\nSign up for the latest industry updates, resources, and news\n\nSolutions\n\n  * Indoor Mapping\n  * Advertising and Digital Signage\n  * Indoor Positioning\n  * Workspace Management\n  * Safety and Security\n  * Location Based Analytics\n\nResources\n\n  * Resources Hub\n  * Webinars\n  * Case Studies\n  * Developers\n  * Interactive Demos\n\nProducts\n\n  * Mappedin\n  * Mappedin Web\n  * Digital Directory\n  * Mappedin SDK\n  * Mappedin CMS\n\nAbout\n\n  * About Us\n  * Partner Directory\n  * News\n  * Careers\n\n", "frontpage": false}
