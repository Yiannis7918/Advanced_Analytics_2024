{"aid": "40016355", "title": "An Interactive Quine", "url": "https://www.pbt.dev/blog/quine/", "domain": "pbt.dev", "votes": 2, "user": "thunderbong", "posted_at": "2024-04-12 18:51:20", "comments": 0, "source_title": "p.b. hua", "source_text": "An interactive quine\n\n# p.b. hua\n\n<p>an interactive quine</p>\n\nsource code\n\n# An interactive quine\n\n2024-04-09\n\nThis is not just the source code; this is the user interface itself. Try\nchecking off a todo or typing in one. (view full screen)\n\nAt the Recurse Center, I thought a lot about computers. In a group I\nfacilitated, the subject of the Dynabook came up: Alan Kay and Adele\nGoldberg\u2019s vision for a programmable personal computer. When I read the paper\nit was remarkable to me: Here was a computer that was so simple, a child could\nlearn it, but so powerful a child could learn how to program it.\n\n## As Easy As View-Source\n\nWhen I was a child, I learned how to build websites by copying other people\u2019s\ncode. Code obfuscation was not so common back then, so when I clicked \u201cView\nSource\u201d I could get to where all the source code was. I could copy it and\n(maybe) have it running on my own website.\n\nIt\u2019s that immediacy that got me into coding. Not an IDE, not even syntax\nhighlighting! Just the ability to easily peek behind the curtain.\n\nI don\u2019t think modern software looks like this anymore. These days I find it\nhard to open up source code, even though the tooling is much better. Simple\nthings are abstracted over and over again for the sake of making code easier\nto write, but at the expense of making it much harder to read.\n\n## Quines\n\nI\u2019ve always been fascinated by the concept of a quine: A computer program\nwhose output is its own source code, or in other words, a computer program\nwhose purpose is to reproduce itself. A lifeform in code form.\n\nIt\u2019s not accurate to describe this as an HTML quine, because to make this work\ninvolves HTML, CSS, and JavaScript.\n\nAn HTML/CSS quine has been done before, so I wanted to up the ante: it would\nbe an interactive quine that could change its own source code and accept\ninput.\n\nNaturally, the quine takes the shape of a todo list. Like a todo list, it lets\nyou mark tasks as done; it lets you create new ones; and it lets you delete\nyour tasks. This is all done through a user interface that allows you to\nmanipulate an underlying data structure.\n\nThe difference here is that the underlying data structure is the very source\ncode of the program itself.\n\nSaving your todos becomes an act of copying and pasting the source code to a\nfile on your computer (But there\u2019s even a built-in save button.) Exporting\nyour todos to HTML becomes an act of... copying the HTML.\n\nAnd most importantly, you can figure out how it all works. I\u2019ve left some\ncomments in the code, an attempt at literate programming.\n\n## A constructive quine\n\nTo me, coding up this quine was a lot easier to wrap my head around than a\nstandard constructive quine. A constructive quine has a template that contains\nsome formatting instructions, and code that prints according to the format\nstring.\n\nThis quine works similarly, but the \u201ctemplate\u201d here is the HTML file itself,\nand the construction code walks the entire HTML source tree and reproduces\ntags using information it gets from the HTML DOM. (Finally, some CSS is added\nfor formatting and to make the script and styles visible.) I did have to write\nmy HTML in a constrained style for this.\n\nWhen I added interactivity, I made sure that the code to construct the quine\nwould apply again after every interaction. I make use of a WeakMap to make\nsure that I don\u2019t walk through nodes I\u2019ve already seen.\n\n## Discussion\n\nContenteditable does a lot of heavy lifting: For those who don\u2019t know,\ncontenteditable is an attribute that allows you to make the contents of an\nHTML element editable. It\u2019s a form of WYSIWYG editing that goes back all the\nway to the days of Dreamweaver.\n\nHTML does a lot of heavy lifting: Scripts and styles are not hidden by\ndefault, especially if embedded into the page. They are HTML elements like\nanything else, they are just hidden by default through styling! You can even\nedit the stylesheet of the quine, including removing the rules that make the\nquine a quine!\n\nLiterate programming and understandable programming: We have to make our code\nreadable. A culture where we do not read code leads to exploits, it leads to\nwrong assumptions, it leads to illiteracy!\n\nAs Easy As View-Source?: View source means you can read what the code does.\nAnd when I got the code for the quine working, I found myself able to really\nunderstand what exactly was going on. I wish that it was the same to interact\nwith any computing system.\n\nthanks to Claire Neveu for reading a draft of this post!\n\n", "frontpage": false}
