{"aid": "39961066", "title": "Developing markdown.download: Exporing val.town, Deno, jsr.io", "url": "https://taras.glek.net/post/markdown.download/", "domain": "glek.net", "votes": 1, "user": "tarasglek", "posted_at": "2024-04-07 14:36:32", "comments": 0, "source_title": "Developing markdown.download: Exporing val.town, deno, jsr.io", "source_text": "Developing markdown.download: Exporing val.town, deno, jsr.io - Taras' Blog on\nAI, Perf, Hacks\n\nTaras' Blog on AI, Perf, Hacks\n\nPosts Tags Categories About\n\nTaras' Blog on AI, Perf, Hacks\n\nCancel\n\nPostsTagsCategoriesAbout\n\n## Contents\n\n# Developing markdown.download: Exporing val.town, deno, jsr.io\n\n## How I came to fear Node.JS and love the Deno ecosystem\n\nTaras Glek\n\n2024-03-24 944 words 5 minutes\n\nContents\n\nI read a lot. I enjoy reading on black and white e-readers. Unfortunately many\nwebsites make it hard to read them on simple devices.\nhttps://markdown.download is my really simple solution to that. Prepend it to\nany website and curl:\n\n    \n    \n    1\n\n|\n\n    \n    \n    curl https://markdown.download/https://dev.to/amnish04/introducing-the-idea-of-web-handlers-in-chatcraft-1b4i  \n  \n---|---  \n  \nThat turns a user-hostile website into a thing that almost anything can\nrender:\n\nIt\u2019s amazing how much cleaner the web is when stripped down to essence.\n\nTurns out markdown (or html restricted to what markdown can do) renders\nfantastic on readers of all types.\n\nSince markdown.download is so utterly simple, I decided to try using it to\nlearn a new-to-me dev tool: val.town. Rest of this post covers what I learned.\n\nI initially was going to publish this project as an npm lib and deploy on\ncloudflare, but was putting it off because I loathe the amount of bureaucracy\nthat involves. I love the type system in Typescript. I love Node.JS because\nit\u2019s the least-bad way to write/deploy apps, but much room for improvement\nremains. My spare time is too valuable to spend it suffering.\n\n### val.town: brutally efficient microservice dev-ux\n\nI had the pleasure of meeting Steve Krouse at the val.town HQ. I\u2019ve seen him\ntweet about val.town, but never really understood why I should use it.\n\nEverything clicked once I asked Steve to help me through getting an early ver\nof markdown.download to run on val.town. Watching him use it finally made\nval.town click for me: val.town is a way to write single-file microservices in\nproduction. It\u2019s like an executable github gist. All I have to do to start\nmaking changes is open up the val.town tab for my webservice. This means that\nnow I can edit my microservices inbetween meetings, while waiting for CI, etc.\nI don\u2019t have to open the project in my editor, setup github actions, do github\npushes. Creating/modifying a micro-service is as easy as creating a gist.\n\nBecause val.town is Deno , one can easily write/use libraries using esm.town !\nImagine this, you can publish a typescript lib as easily as writing a github\ngist! Given that I\u2019ve only been able to persevere to publish typescript with\nnode.js once in my life (and it took a lot of help), that blew my mind.\n\nSo now I write a lot more microservices, because val.town erased the cognitive\nbarriers between writing, testing, and deploying microservices.\n\n### val.town goes against good engineering practices\n\nSteve asked me if I would pay for his service. My initial reaction was: pay\nfor what? val.town paid tier has nothing to do with rapid microservice dev and\neverything with running the service. Why would I want to pay to run a service\nthat can\u2019t be versioned in github, can\u2019t geo-distribute like cloudflare, can\u2019t\nbe automated with terraform? Why would I pay for a service runtime that\ncharges a fixed price per month instead of per usage? There is also the\ntechnical limitation of val.town not supporting SSE streaming that\u2019s required\nfor https://chatcraft.org .\n\nThe thing is, val.town micro-effort dev-ex is only possible because it breaks\nthe traditional dev-loop. (Also because it uses Deno which cuts down on\ntranspilation/packaging bureaucracy that is modern node.js)\n\nIMHO, given the incredible focus on productive UX at val.town, paying for this\nservice should be tied to productivity, not to their immature runtime.\n\nSo I thought I\u2019d forever remain a free user on val.town and never use it for\nanything commercial.\n\n### deno deploy\n\nAfter getting sucked into the Deno ecosystem by val.town, I looked at deno\ndeploy . It\u2019s kind of a mix of Cloudflare workers + val.town (via their\nplayground UX). The playground UX is much better than the Cloudflare\nequivalent, and the ability to import arbitrary packages into the playground\nUX is cool too. However, the playground is still very clunky compared to\nval.town. Also, the geo-distributed aspect has some issues, but more on that\nin another post. Luckily, I was able to reach a happy compromise by writing:\n\n    \n    \n    1 2 3\n\n|\n\n    \n    \n    import * as lib from \"https://esm.town/v/taras/markdown_download?v=51\" Deno.serve(lib.default);  \n  \n---|---  \n  \nSo, with 2 lines of code, I get:\n\n  * Geo-distributed equivalent of my val\n  * Working streaming (not needed for this project, but it made possible to use free LLM models for https://chatcraft.org )\n  * dev/prod split. Eg I could now develop fearlessly in val.town and update the import on deno once I feel I wont break any consumers.\n\nI was still not seeing how either val.town + deno deploy experience could\ntranslate into production-grade code.\n\n### jsr.io\n\nEverything changed once I saw how easy it is to publish code on jsr.io .\n\nI wrote a simple Makefile to fetch val source + README and it\u2019s pure magic!\n\nMy dev ux looks like:\n\n  1. make clean deploy deno complains that I have uncommited changes. (This could also run tests prior to publishing to jsr.io)\n\n  2. git commit commit the changes that got pulled from val.\n\n  3. Once git is clean, make clean deploy publishes my lib to jsr.io & pulls it into my cloudflare worker and deploys the cloudflare worker.\n\nNow I have:\n\n  1. A [Rapid] Development branch on https://val.markdown.download/ . This is the only place I edit code.\n\n  2. https://markdown.download on Deno deploy. I use this as the default for now because Deno has better Node compatibility than Cloudflare.\n\n  3. https://github.com/tarasglek/markdown-download\n\n  4. A low-latency https://cf.markdown.download version on Cloudflare workers. Here, I had to figure out an alternative to turndown because the Cloudflare esbuild process confuses this lib\u2019s packaging. agentmarkdown seems alright so far.\n\nThanks to the incredible val.town + Deno ecosystem, I spent zero effort\nscrewing around with esbuild, tsc, or other yuck. Instead, I learned a bunch\nof cool stuff that I can now start using at work too.\n\nPS. I ended up paying for val.town.\n\n### Links\n\n  * reddit\n  * twitter\n\nUpdated on 2024-04-06\n\nRead Markdown\n\nBack | Home\n\nssh-via-cloudflare-tunnel: Alternative way to expose machines behind NAT\n\nPowered by Hugo | Theme - LoveIt\n\n2024 Taras Glek | CC BY-NC 4.0\n\n1 / 0\n\n", "frontpage": false}
