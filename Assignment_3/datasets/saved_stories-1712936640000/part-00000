{"aid": "40010877", "title": "QEMU IPv6 Slirp", "url": "https://blog.izissise.net/posts/qemuipv6slirp/", "domain": "izissise.net", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-12 09:41:43", "comments": 0, "source_title": "Qemu IPv6 Slirp", "source_text": "Qemu IPv6 Slirp\n\nQemu IPv6 Slirp\n\nPosted on 2024-04-12\n\nQemu support rootless mode routing of network packets through the host using\nSlirp, you only need to give the right options to qemu to set this up, without\nhaving to tinker with tap interfaces or iptables.\n\nHowever, using it for IPv6 can be a bit more challenging, especially since the\ndocumentation lacks IPv6 examples.\n\nThe Qemu options look like this -device virtio-net-\npci,netdev=n0,mac=52:54:12:34:56:00 -netdev\nuser,id=n0,ipv4=off,ipv6=on,ipv6-net=??. The only unknown is what to put for\nipv6-net.\n\nOne would guess that using a Unique Local Address would work, but Qemu will\nonly route packets out of the guest for IPs in the specified network.\n\nThe trick is to give ::/0 for the network, this way Qemu will route everything\nout of the guest.\n\n# Test\n\nWe download an Ubuntu cloud image, mask systemd-networkd-wait-online and\nchange the root password with libguestfs^1:\n\n    \n    \n    virt-customize -a jammy-server-cloudimg-amd64-disk-kvm.img --run-command 'systemctl mask systemd-networkd-wait-online.service' virt-customize -a jammy-server-cloudimg-amd64-disk-kvm.img --root-password password:root\n\nThen we run:\n\n    \n    \n    qemu-system-${HOSTTYPE} -m 2G -nographic -serial mon:stdio -nodefaults -enable-kvm -drive file=jammy-server-cloudimg-amd64-disk-kvm.img,format=qcow2 -device virtio-net-pci,netdev=n0,mac=52:54:12:34:56:00 -netdev user,id=n0,ipv4=off,ipv6=on,ipv6-net=::/0 # Press CTRL+a CTRL+x to quit qemu\n\nSetup network in guest:\n\n    \n    \n    root@ubuntu:~# ip link set ens2 up # Bring iface up root@ubuntu:~# echo 'nameserver 2606:4700:4700::1111' > /etc/resolv.conf # use cloudflare DNS\n\nWe get an IPv6 and route are configured:\n\n    \n    \n    root@ubuntu:~# ip -6 --brief a # we get an ipv6 lo UNKNOWN ::1/128 ens2 UP ::5054:12ff:fe34:5600/64 fe80::5054:12ff:fe34:5600/64 root@ubuntu:~# ip -6 r ::1 dev lo proto kernel metric 256 pref medium ::/64 dev ens2 proto kernel metric 256 expires 86274sec pref medium fe80::/64 dev ens2 proto kernel metric 256 pref medium default via fe80::2 dev ens2 proto ra metric 1024 expires 1674sec hoplimit 64 pref medium\n\nPing doesn't work^2:\n\n    \n    \n    root@ubuntu:~# ping google.com PING google.com(par21s23-in-x0e.1e100.net (2a00:1450:4007:81a::200e)) 56 data bytes qemu-system-x86_64: Slirp: external icmpv6 not supported yet\n\nBut curl does:\n\n    \n    \n    root@ubuntu:~# curl -v ifconfig.me * Trying 2600:1901:0:bbc3:::80... * Connected to ifconfig.me (2600:1901:0:bbc3::) port 80 (#0) > GET / HTTP/1.1 > Host: ifconfig.me > User-Agent: curl/7.81.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < server: fasthttp < date: Thu, 11 Apr 2024 08:16:58 GMT < content-type: text/plain < Content-Length: 38 < access-control-allow-origin: * < via: 1.1 google < <ip6> # Slirp translated host ip6\n\nAfter bringing up the iface, we get an ip on ::/0, we use cloudflare\nnameserver and can use curl to get our IPv6.\n\nWe end up with the host IPv6 because it goes trough Slirp.\n\n# Debug\n\nYou can also add -object filter-dump,id=d0,netdev=n0,file=dump.pcap to get a\npcap file of the VM network.\n\nThat's all for today, have fun with IPv6.\n\n# Notes\n\n^1\n\nDespite my best efforts, I couldn't make cloud-init work. Maybe it could have\nits own blog post, but today we're only interested in the Qemu IPv6 Slirp\nstack.\u21a9\n\n^2\n\nhttps://github.com/qemu/libslirp/blob/v4.7.0/src/ip6_icmp.c#L419.\u21a9\n\n", "frontpage": false}
