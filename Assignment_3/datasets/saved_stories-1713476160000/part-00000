{"aid": "40077292", "title": "PlanetScale: Global Replica Credentials", "url": "https://planetscale.com/blog/introducing-global-replica-credentials", "domain": "planetscale.com", "votes": 2, "user": "ksec", "posted_at": "2024-04-18 15:33:20", "comments": 0, "source_title": "Introducing global replica credentials", "source_text": "Introducing global replica credentials\n\nThis website stores cookies on your computer. We use this information to\nimprove your browsing experience and for analytics about our visitors both on\nthis website and other media. To learn more about the cookies used, see our\nPrivacy Policy.\n\nCookies settings\n\nAccept All Decline All\n\nSkip to content\n\nSign inGet started\n\nBlogProduct\n\n# Introducing global replica credentials\n\nWith global replica credentials, you can now automatically route reads to the\nclosest replica.\n\nYou can now create global replica credentials that will automatically route\nreads to the nearest read replica from anywhere on the planet.\n\nAll PlanetScale clusters are made up of, at minimum, one primary and two\nreplicas in the same region spread across three availability zones. With\ntoday's release, it's now much easier to utilize this extra compute by\ncreating a single password dedicated for replica use. Global replica\ncredentials automatically load-balance across the replicas in a region for\nyou.\n\nThese new credentials also seamlessly route to the read-only region with the\nlowest latency without any code changes, even as you add or remove new read-\nonly regions. The underlying architecture, PlanetScale Global Network, also\nmanages this without requiring you to reconnect. This allows you to add a\nread-only region and start using it immediately.\n\nIf you have existing replica credentials for each of your read-only regions,\nyou can now swap them out for a single global replica credential.\n\nUsing global replica credentials is as simple as clicking \u201cConnect\u201d from the\nPlanetScale dashboard, selecting \u201cReplica\u201d, and generating your new\ncredentials. You can also generate credentials from the CLI or API. If you\nhave the CLI installed and you want to try replica credentials out in a MySQL\nconsole, you can run pscale shell --replica. See the Replica documentation for\nmore information.\n\n## Building PlanetScale Global Network\n\nFor the past few years, we have been quietly building and architecting a\ndatabase connectivity layer structured like a CDN, this layer we call the\nPlanetScale Global Network.\n\nThis layer is responsible for a few things:\n\n  * Terminating every MySQL connection globally.\n  * Handling our RPC API (to support things like database-js).\n  * Connection pooling at a near infinite scale.\n  * TLS termination.\n  * Routing connections to your database.\n\nAt a high level, the first step when connecting to your database is connecting\nto our Edge network. Where this is like a CDN, is this first hop is nearest to\nyou geographically, or nearest to your application. Whether you are directly\nin AWS next door, or on the other side of the world, connections begin at our\nedge network.\n\nOnce in our network, we fully terminate the MySQL connection and TLS handshake\nat the outermost layer, closest to your application. And connection pooling\nhappens here, similar to running an instance of ProxySQL in your datacenter.\nFrom this outer layer, connections are able to be multiplexed and tunneled\nback to your origin database over a small number of long held, encrypted\nconnections that are already warmed up and ready to go.\n\nThe net effect of this is TCP and TLS handshake is faster, since there's less\nnetwork latency and less hops needed. By terminating this closest to you, a\nhandshake can happen faster. By doing this at the MySQL connection layer is\nwhat separates us from a traditional CDN or Network Accelerator. Similar to an\nHTTP proxy, the MySQL connection pooler is able to complete the full MySQL\nhandshake as well closest to you, and keep chatter over a shorter geographic\ndistance.\n\n## What's in a Credential?\n\nA Credential to us is broken up into three pieces, the Credential, a Route,\nand an Endpoint. The Route is shared to every geographic region at our edge,\nand the Credential remains inside your unique database cluster region. While\nthe Endpoint is the hostname you use to connect to us, typically something\nlike aws.connect.psdb.cloud or gcp.connect.psdb.cloud.\n\nThe Route and Credential are stored in etcd which we are able to watch for\nchanges in near realtime and respond to mutations, or deletions as soon as\nthey happen.\n\n### The Route\n\nIn practice, a Route to us looks like this:\n\nProtobuf\n\n    \n    \n    message Route {\n    \n    string branch = 1;\n    \n    repeated string cluster = 2;\n    \n    fixed64 expiration = 3;\n    \n    ...\n    \n    }\n\nIf you notice, this Route contains no authentication information and is not\nauthoritative for auth, it is effectively a mapping of username to a list of\nclusters. This list of clusters covers where this database branch is running.\n\nIn the case of a normal, single Primary credential, this Route may look like:\n\n    \n    \n    Route(branch=\"abc123\", cluster=[\"us-east-1\"])\n\nIn the case of a Replica credential that has multiple read-only regions, this\ncluster expands for that list of all of them.\n\n    \n    \n    Route(branch=\"abc123\", cluster=[\"us-east-1\", \"us-west-2\"])\n\nNow we have a single Route with multiple options of where we could go.\n\n### The Credential\n\nI'm not going to go into a bunch of detail here since a lot of it is internal\nimplementation, but the Credential is effectively the source of truth for\nauthentication and only exists inside the same cluster as your database.\n\nIt relatively looks like this:\n\nProtobuf\n\n    \n    \n    enum TabletType {\n    \n    TABLET_TYPE_UNSPECIFIED = 0;\n    \n    TABLET_TYPE_PRIMARY = 1;\n    \n    TABLET_TYPE_REPLICA = 2;\n    \n    TABLET_TYPE_RDONLY = 3;\n    \n    }\n    \n    message Credential {\n    \n    string branch = 1;\n    \n    bytes password_sha256 = 2;\n    \n    psdb.data.v1.Role role = 3;\n    \n    fixed64 expiration = 4;\n    \n    TabletType tablet_type = 5;\n    \n    }\n\nIn here, we contain more information about the Credential, including the\nRole/ACL assigned at creation, the information needed to verify the password\nis correct, and an additional TabletType which indicates if this is intended\nfor a primary, replica, or readonly database. This is all automatic and is\njust an internal representation.\n\nWhile the Route is just a mapping of username -> cluster, the Credential\ncontains the rest of the information needed to fully connect to the underlying\ndatabase with the correct ACLs and to which TabletType.\n\n### The Endpoint\n\nNow the endpoint is where the first bit of magic happens. As you may have\nnoticed in the product, we surface two different hostname options, a \"Direct\"\nand an \"Optimized\". The \"Direct\" has the form of {region}.connect.psdb.cloud\nand the \"Optimized\" is of the form {provider}.connect.psdb.cloud.\n\nThe Direct endpoint is the most straightforward, and represents the Edge node\nin that region explicitly. You can choose really any region you'd like as the\nfirst hop to route through and you'll still get to the correct destination,\nbut we give you the endpoint that is closest to the database, not the endpoint\nclosest to you. But really, you can pick any public endpoint in the same\nprovider if you're clever.\n\nThe Optimized endpoint is backed by a latency-based DNS resolver. In AWS, for\nexample, this is their Route53 latency-based routing policy. Which is most of\nthe magic to resolve aws.connect.psdb.cloud to the nearest edge region to you.\nThis means whether you're connecting from your local machine with pscale\nconnect or from the datacenter next to your database, you get routed through\nthe closest region to you, which gives us the CDN effect.\n\n## Putting this together\n\nWith these three bits, we can put together the story for how we can route to\nany of your replicas geographically.\n\nStarting with the initial connection pool at our edge, this applies exactly\nthe same to a connection over HTTP and MySQL protocol.\n\nOnce a connection is established to us, regardless of where your database is\nlocated, your connection is terminated at this same edge node in our network.\nWhen a new region is added, the underlying Route is mutated to add the new\ncluster.\n\nSince we maintain warm connections between all of our regions ready to go, we\nutilize these to measure latency continuously as a part of regular health\nchecking. So, for example, the us-east-1 edge node is continuously pinging its\npeers, similar to a mesh network and measuring their latency.\n\nOnce a Route is seen over the etcd watcher, before it's accessible to being\nused, we are able to simply sort the list of clusters based on their latency\ntimes we already are tracking. We periodically re-sort every Route if/when\nlatency values change. This keeps the \"next hop\" decision always clusters[0]\nin practice. In the event if a hard failure (if for some reason this entire\nregion were down), we could go over to the next option if there were multiple\nchoices.\n\nUltimately, because the connection is already established with us during all\nof this, the Route is utilized on a per-query basis, thus without needing to\nreconnect or anything, we can route you to the lowest latency next hop in\nrealtime.\n\nSimilarly, when read-only regions are added and removed, we only need to\nmutate this Route with a new set of what regions your database is in, and we\njust maintain a sorted list ready to go.\n\n## Share\n\n## Next post\n\nProfiling memory usage in MySQL\n\nWritten by\n\nMatt Robenolt\n\nIheanyi Ekechukwu\n\nLast updated April 17, 2024\n\n## Database scaling course\n\nThis 22 lesson video course covers partitioning, caching, replication,\nsharding, and more.\n\nTable of contents\n\n  * Building PlanetScale Global Network\n  * What's in a Credential?\n\n    * The Route\n    * The Credential\n    * The Endpoint\n  * Putting this together\n\n## Related posts\n\nProduct\n\n### Introducing schema recommendations\n\nProduct\n\n### OAuth applications are now available to everyone\n\nProduct\n\n### Introducing the Vantage and PlanetScale integration\n\n## Database scaling course\n\nThis 22 lesson video course covers partitioning, caching, replication,\nsharding, and more.\n\n\u00a9 2024 PlanetScale, Inc. All rights reserved.\n\nPrivacyTermsCookiesDo Not Share My Personal Information\n\n", "frontpage": false}
