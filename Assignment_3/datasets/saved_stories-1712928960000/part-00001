{"aid": "40010238", "title": "Alerting on Process Completion", "url": "https://badgerbadgerbadgerbadger.dev/posts/automation/2024-04-04-alerting-on-process-complete/", "domain": "badgerbadgerbadgerbadger.dev", "votes": 1, "user": "badgerbbbadger", "posted_at": "2024-04-12 07:33:29", "comments": 0, "source_title": "Alerting on Process Completion", "source_text": "Alerting on Process Completion \u2013 Badger Badger Badger Badger\n\n# Badger Badger Badger Badger\n\nLinkedIn Twitter\n\n# Alerting on Process Completion\n\n2024-04-04\n\nMost of my technical endeavours have something to do with enabling me to work\nas little as possible for as much reward as possible. And yet, paradoxically,\nin a pursuit of doing less I often end up doing more. I have this idea that in\nthe long term this will eventually lead me to doing much less. I\u2019m not sure if\nthat\u2019s true, but it\u2019s a nice thought and keeps me going. Plus, I learn a lot\nof fun things along the way.\n\nWhenever I have a long-running process on my home-lab I start it in a screen\nsession. I check back on it occasionally to see if it has completed. The same\ncould be true of something I\u2019m running on my local machine, though, in that\ncase, it is in a live terminal session. The latter is usually during the\ncourse of my day-job and is somewhat of an easier problem to solve since I am\nat my machine for the duration of the process.\n\nFor my local machine (which is a MacBook), I use the say command extensively.\nIt\u2019s trivial to add a say \"Done\" at the end of a command chain to aurally\ninform me of a task\u2019s completion. But that wasn\u2019t quite spicy enough for me,\nso I came up with something more interesting.\n\n    \n    \n    \u279c ~ which sdd sdd () { if [ $# -eq 0 ] then title=\"Done\" text=\"Done\" else title=$1 shift text=\"$@\" fi osascript -e \"display notification \\\"$text\\\" with title \\\"$title\\\"\" && afplay ~/Documents/star-wars-b1-battle-droid_kampfdroide-roger-roger-sound.mp3 }\n\nBehold the sdd function I add to the end of every script and command chain. I\ncan invoke it with a title and an optional message, or invoke it with nothing\nand let it default to \u201cDone\u201d and \u201cDone\u201d. When invoked, I will be shown a\nnotification on my screen along with an audible \u201cRoger! Roger!\u201d\n\n> Disclaimer I have no idea if this is required. I find copyright laws almost\n> maliciously confusing. Anyway, just to cover my backside:\n>\n> I do not own any rights to the \u201cRoger, Roger\u201d voice line, which is\n> associated with the Star Wars franchise created by George Lucas and owned by\n> Lucasfilm Ltd. and The Walt Disney Company. This phrase is used here under\n> the principles of fair use for educational or informational purposes only.\n\nThis is all fine and dandy for my local machine, but what about my home-lab? I\ndon\u2019t want to keep a live SSH session running all the time, nor do I want to\nhave to check back on it at odd intervals. Nor am I at a terminal all the\ntime!\n\nThe solution to that comes from my Home Assistant setup (look out for another\npost that talks about my Home Assistant and dryer smartification journey).\n\nI have created an Automation that listens to a webhook and sends a\nnotification to my phone whenever that webhook fires.\n\n    \n    \n    alias: Notify Sharpie description: \"\" trigger: - platform: webhook allowed_methods: - POST local_only: false webhook_id: \"<webhook-id>\" condition: [] action: - service: notify.mobile_app_sharpie data_template: title: Notification message: \"{{ trigger.json.message }}\" mode: single\n\n> Sharpie is the name of my phone.\n\nNow I can curl from any device anywhere and receive a notification on my\nphone!\n\n    \n    \n    curl -i -H \"Content-Type: application/json\" -d \"{\\\"message\\\": \\\"Sup?\\\"}\" https://<home-assistant-server>/api/webhook/<wehook-id>\n\nI can plop this down at the end of any command chain or script and be notified\nwhen it completes.\n\nBut I figured out all this after the fact. During the fact (is that even a\nphrase?), I had already started a long-running process that I wanted to\nmonitor and be informed of when it terminated. So there was no way for me to\nappend a notification curl at the end of the chain without stopping the\nprocess.\n\nEnter the ps command with the -p flag. This can be passed a process ID and\ngives you information about the process.\n\n    \n    \n    \u279c ~ echo $$ 266386 \u279c ~ ps -p 266386 PID TTY TIME CMD 266386 pts/1 00:00:00 zsh \u279c ~ echo $? 0\n\n> $$ is the PID of the current shell process.\n\nNote that the exit code returned by the ps -p command is 0. If we were to try\na PID that does not exist, we will get a 1.\n\n    \n    \n    \u279c ~ ps -p 42069 PID TTY TIME CMD \u279c ~ echo $? 1\n\nThus, without knowing the exact details or output of using ps -p on our target\nprocess, we can check the exit code and find out if the process is running.\nThis leads us to this helper function.\n\n    \n    \n    # Check if the process with PID exists process_exists() { ps -p $1 > /dev/null 2>&1 }\n\nChecking if our target process is still running, now becomes a matter of a\nsleepy loop (to avoid spamming the command).\n\n    \n    \n    # Loop until the process no longer exists while process_exists $PID; do sleep 1 done echo \"Process $PID has stopped.\" # Send the notification send_message $MESSAGE\n\nThe send_message function can take advantage of our webhook and notify us when\nthe process completes!\n\n    \n    \n    send_message() { curl -i -H \"Content-Type: application/json\" -d \"{\\\"message\\\": \\\"$1\\\"}\" https://<home-assistant-server>/api/webhook/<wehook-id> }\n\nAnd with that we have a script that can monitor a process and let us know when\nit completes.\n\n# Wrapping it Up\n\nI hope you enjoyed this brief exploration of figuring out how to monitor a\nlive process. If you were to try something like this yourself, you could, no\ndoubt, switch out the notification part with any number of other services.\nPerhaps send yourself an SMS or blink the lights in your house on and off 21\ntimes.\n\nTags: #home-assistant #shell-scripting #webhooks\n\nM \u2193 Markdown\n\nCommento\n\n## More posts like this\n\n## Is it Dry Yet?\n\n2024-04-08 | #home-assistant #home-automation #smart-plugs\n\nClarification: This is literally about my laundry. I am not being\nmetaphorical. I am not talking about my feelings or my secrets. I am talking\nabout my clothes. Intro Our washing machine is a Samsung something-something\nthat sends me a notification on the SmartThings app when it completes a wash\ncycle. This is useful since we almost always need to follow up a washing cycle\nwith a drying one and maybe even another load of laundry.\n\nContinue reading\n\n## Short Tale of Intel -> Apple Silicon Migration\n\n2024-03-13 | #apple #shell-scripting\n\nNote: I will be using the terms amd64, x86_64, and Intel interchangeably in\nthis post. They all refer to the same architecture. Similarly arm64 and Apple\nSilicon are used interchangeably. I recently got handed a new MacBook at work.\nIt\u2019s a MacBook Pro with an M3 chip and my first encounter with Apple Silicon.\nI have been hearing many good things about Apple Silicon and having\nexperienced it for myself for the past day I must say that my old Intel\nMacBook can\u2019t compare.\n\nContinue reading\n\n2024 \u00a9 Shaun Das - Creative Commons Attribution 4.0 International License.\n\nFicurinia theme for Hugo by Gabriele Musco. Licensed under GNU AGPLv3.\n\n", "frontpage": false}
