{"aid": "40030616", "title": "We now have crypto/rand back ends that ~never fail", "url": "https://github.com/golang/go/issues/66821", "domain": "github.com/golang", "votes": 1, "user": "weinzierl", "posted_at": "2024-04-14 12:20:16", "comments": 0, "source_title": "proposal: crypto/rand: throw on errors \u00b7 Issue #66821 \u00b7 golang/go", "source_text": "proposal: crypto/rand: throw on errors \u00b7 Issue #66821 \u00b7 golang/go \u00b7 GitHub\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ngolang / go Public\n\n  * Notifications\n  * Fork 17.1k\n  * Star 119k\n\nJump to bottom\n\n# proposal: crypto/rand: throw on errors #66821\n\nOpen\n\nFiloSottile opened this issue Apr 14, 2024 \u00b7 0 comments\n\nOpen\n\n# proposal: crypto/rand: throw on errors #66821\n\nFiloSottile opened this issue Apr 14, 2024 \u00b7 0 comments\n\nLabels\n\nProposal Proposal-Crypto Proposal related to crypto packages or other security\nissues\n\nMilestone\n\nProposal\n\n## Comments\n\nContributor\n\n###\n\nFiloSottile commented Apr 14, 2024\n\nOn almost all our platforms, we now have crypto/rand backends that ~never\nfail.\n\n  * On Linux, we primarily use the getrandom(2) system call, which never fails.\n    * It may block if the pool is not initialized yet at early boot, and may be interrupted by a signal handler if requesting more than 256 bytes, but neither of those surface as errors to the application.\n    * getrandom() was first available in Linux 3.17, released in October 2014. Debian oldstable is on Linux 5.10.\n    * getrandom() can be blocked with seccomp. That's a bad (and weird) idea, and the default Docker profile doesn't do that. In that case we fall back to opening /dev/urandom, which might fail if the file is not available or file descriptors run out.\n  * On macOS and iOS we use arc4random() since https://go.dev/cl/569655. From the man page:\n\n> These functions are always successful, and no return value is reserved to\n> indicate an error.\n\n  * On Windows we use the ProcessPrng function. From the docs:\n\n> Always returns TRUE.\n\n  * The BSDs use similar syscalls with similar properties (wither getrandom or getentropy) although we should switch the ones we can to arc4random.\n  * On js/wasm we use getRandomValues which doesn't have documented failure modes.\n  * On WASIP1 there's random_get which regrettably has an error return value, making it the one platform (ignoring misconfigured Linux) where there might be errors getting platform random bytes. Since WASI rests on an underlying platform, and every underlying platform has failure-less CSPRNGs, it's hard to imagine why random_get should actually return an error.\n\nI'm proposing we make crypto/rand throw (irrecoverably crash the program) if\nan error occurs, and document that the error return value of crypto/rand.Read\nand crypto/rand.Reader.Read are always nil.This will free applications from\nhaving to do error handling for a condition that essentially can't happen, and\nthat if it did happen is essentially not possible to handle securely by the\napplication.This will also allow introducing new APIs like a hypothetical\nString(charset string) string (not part of this proposal) without an error\nreturn, making them more usable and appealing.Based on a suggestion by\n@rsc./cc @golang/security @golang/proposal-review  \n---  \nThe text was updated successfully, but these errors were encountered:  \n  \nFiloSottile added the Proposal-Crypto Proposal related to crypto packages or\nother security issues label Apr 14, 2024\n\ngopherbot added this to the Proposal milestone Apr 14, 2024\n\ngopherbot added the Proposal label Apr 14, 2024\n\nSign up for free to join this conversation on GitHub. Already have an account?\nSign in to comment\n\nLabels\n\nProposal Proposal-Crypto Proposal related to crypto packages or other security\nissues\n\n2 participants\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
