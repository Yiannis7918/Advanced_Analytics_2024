{"aid": "39962349", "title": "ActivityPub/Nostr/At-Bluesky Compared", "url": "https://nate.mecca1.net/posts/2024-01-30_microblogging-protocols/", "domain": "mecca1.net", "votes": 27, "user": "nameequalsmain", "posted_at": "2024-04-07 17:44:11", "comments": 8, "source_title": "ActivityPub/Nostr/AT-BlueSky Compared", "source_text": "ActivityPub/Nostr/AT-BlueSky Compared | An Untitled Blog\n\n# ActivityPub/Nostr/AT-BlueSky Compared\n\nJan 30, 2024 \u00b7 31 min read \u00b7 tech protocols nostr \u00b7\n\nDistributed social media networks have been on my mind for a while, especially\nduring my deep dive into Nostr over the last few months. Being on my mind I\nstarted writing a comparison between the big three, which sort of morphed into\nthis. I should clarify that I\u2019m a layman here: I\u2019ve never participated in the\ndevelopment of any of them, or the development of anything built on top of\nthem (nor the development of anything complex at all). I have tried to cover\nmy bases by looking into each one and clarifying things I assumed, but with\nsuch a broad list of topics there\u2019s a chance I\u2019m wrong about something here.\n\nStill though, I think a broad fairly technical bird\u2019s eye view of how each\ncompares could be useful, or if not at least somewhat interesting to those\nwith similar interests to me. The plan is to introduce each protocol and then\nlist off how I believe they perform in the following categories:\n\n  * Server Load/Simplicity - How resource heavy is it to run a server?\n  * Ease of Use - How easy is it to join, and after joining how easy is it to master?\n  * Account Ownership - What degree of ownership do you have over your account?\n  * Client Load/Simplicity - How much does your client need to process?\n  * Client Side Customization - How much does your client let you choose what you see and how you see it (as opposed to what\u2019s set by a server)?\n  * Portability - How easy is it to migrate an account and data?\n  * Malleability - How easily can the protocol be used in other projects/platforms while still retaining some or all interactability?\n  * Direct Messages - What\u2019s the state of direct messaging?\n\nAfterward, I figured I would go over my thoughts on the state of the protocol\nas it\u2019s currently being used:\n\n  * Growth - How has it been growing in use?\n  * Scaling Issues - What scaling issues do I foresee if we continue as it\u2019s implemented now?\n  * Moderation & Community - Are there issues with quirks in the community or moderation protocol wide that could hinder the protocol\u2019s adoption?\n  * Future Changes - As a layman, what changes would I propose that I believe could add value?\n  * The Perfect Model, and Conclusions - What\u2019s the perfect use case and my final thoughts?\n\nThere\u2019s no right or wrong answer - each protocol has different pros and cons -\nso let\u2019s get started.\n\n## Activity Pub\n\nActivity Pub is the oldest decentralized microblogging protocol still widely\nused today, which development started around 2014 and was adopted as a W3C\nstandard in its current form in 2018. As the oldest of the three it has the\nmost momentum in both userbase and adoption on more \u2018mainstream\u2019 platforms.\nMost projects that integrate Activity Pub resemble a traditional service at\nfirst glance (i.e. accounts and posts on a server in a local database), but\nthe inclusion of Activity Pub allows accounts on remote servers to interact\nseamlessly in most cases, or partially if the two projects differ\nsignificantly.\n\n#### Server Load/Simplicity\n\nThe comparison between email and Activity Pub is often used to explain\nfederation, and I would like to extend that explanation by comparing how the\nserver handles communication to an email mailing list for discussions. It\u2019s\nnot a 1:1 comparison, but fairly close. When somebody makes a post it\u2019s stored\nin their server\u2019s database, which then provides a copy of that post to all\nfollowers on other instances (as a side note, it sends a copy per follower,\nmeaning if 10 users on one server follow the same user on a remote server that\nremote server sends 10 copies of the message). Any interaction with the post\nfrom a remote server (e.g. likes or replies) is sent to the server that hosts\nthe account that made the post, and then that server broadcasts those\ninteractions to all other servers similarly to how it broadcasted that\noriginal post.\n\nThe duplication and constant communication brings smoother federation and\nallows you to access content in a limited fashion even if the origin server is\nhaving difficulties. However, it also means there\u2019s a considerably larger load\non the server than on other centralized and federated/decentralized protocols.\n\n#### Ease of Use\n\nWhile a more subjective thing to compare, I would give Activity Pub a moderate\ndifficulty to join and a moderate difficulty to master. Trying to put myself\nin the shoes of somebody who doesn\u2019t work on tech for a living; figuring out\nwhat server to join, and the concept of independent servers interacting with\neach other would likely take a little reading, but otherwise isn\u2019t a\ncompletely foreign concept - and the \u201cit\u2019s like email\u201d explanation would\nprobably give a good bird\u2019s eye view of the protocol to anybody with tech\nliteracy. With the basics of federation learned and an instance joined, the\nidea of learning things like defederation or account migration wouldn\u2019t be a\nbig jump in difficulty.\n\n#### Account Ownership\n\nOn Activity Pub accounts are controlled by the server and not the user, and\nwhile in practice most servers will treat you well, the server and not the\nuser has the final say over the control of an account.\n\n#### Client Load/Simplicity\n\nBecause federation and accounts are controlled server side on Activity Pub,\nclients are lightweight. This is beneficial in both that a client is easier to\nmake & configure, and in that a client won\u2019t be bogged down even if it\u2019s\nlogged into an account that\u2019s heavily federated or otherwise very active.\n\n#### Client Side Customization\n\nWhile a user can elect to block particular users, keywords, or instances; a\nmajority of what the user sees and can interact with is setup by the server\nadmins. This does allow people to join a server with policies in mind, but if\nthose policies are changed or the user changes their mind on which policies\nare desired their only option is to migrate to a different server (if\npermitted by the local server) or start fresh.\n\n#### Portability\n\nPortability on Activity Pub is fairly poor. Accounts can be redirected from\none server to another if both servers allow it, and followers will\nautomatically follow the new account if their server is properly federated\nwith both the old and new server; so Activity Pub is capable of allowing some\nform of portability. This, however, is about the limit to what sort of\nmigration is possible. If the server is taken offline, the account is banned,\nor the server they\u2019re migrating to is defederated then migration is limited or\nimpossible. Defederation can mess with migration if the migrator\u2019s original\ninstance is defederated with the new instance or vice versa, and followers\nwill not transfer over if a follower\u2019s instance is defederated with the\noriginal instance or new instance of the person they are following. Migration\nof posts or changes to a server\u2019s domain is generally not possible either.\n\n#### Malleability\n\nAgain, while somewhat subjective, I would rank Activity Pub as moderately\nmalleable. While Activity Pub is implemented into a wide variety of projects,\nand can usually interact with the various projects at some level, because\neverything is handled server side there are limitations to how it can do so.\nFor example, Mastodon and Lemmy allow limited interactions but are unable to\nfully process posts cross-platform as well as with another instance running\nthe same project.\n\n#### Direct Messages\n\nWhile direct messages are likely less of a dealbreaker than other features,\nthey\u2019re still worth bringing up in this comparison. Activity Pub offers fairly\nbare-bones messaging: a user can send a direct message to another user on most\nActivity Pub platforms, however, it remains unencrypted and since accounts are\ncontrolled by the server the messages can be intercepted or hijacked by a\nmalicious or compromised server.\n\n### Activity Pub\u2019s Current State\n\nMy opinions/interpretations on the current state of Activity Pub and its\npotential future.\n\n#### Growth\n\nOf the three discussed here, Activity Pub has had the largest growth by a\nconsiderable margin, and being first it has had the most established\ncommunities and the largest amount of recognition. This has also led to its\nadoption or planned adoption in various \u201ccorporate Twitter alternatives\u201d such\nas Threads, TruthSocial, and Gab (in order from largest to smallest); as well\nas similar interest from non-microblogging platforms such as Tumblr, Getty\nImages, and GitLab.\n\n#### Scaling Issues\n\nI believe the largest issues Activity Pub will face when scaling up the\nnetwork is the increasing need for computing resources to interact with large\ninstances and fragmentation. The need to replicate such a large amount of\ncontent could disrupt one\u2019s ability to interact with large servers from a\nsmall VPS or busy home server, and greatly increase the cost of running the\nlarge servers that can scale to meet the demands.\n\nBeyond activity pub\u2019s potential scaling issues due to its more resource-\nintensive nature, there\u2019s also an issue with moderation/federation that I\nperceive to be a second potential issue. My summary is almost long enough to\nbe a short blog post in its own right, so click the dropdown below at your own\nperil.\n\n#### Moderation & Community\n\nMostly see my above dropdown, but to summarize Activity Pub currently houses\nsome of the less-desired groups in its unfiltered form, and moderation of the\nunfiltered Activity Pub firehose can sometimes be an overcorrection.\n\n#### Future Changes\n\nRecommending changes to protocols is very much above my pay grade, but that\nwon\u2019t stop me from rambling on about it anyway. The first future change I see\nbringing value to Activity Pub would be to lighten the load on servers. This\nwas already done for videos by canceling their duplication across federated\nservers and only linking to the original source, and I can imagine low hanging\nfruit would be to do the same for images and the like. I also foresee value in\nlightening how servers communicate while federating content, such as more\nefficiently pushing out updates.\n\nBeyond that, I think an intentionally lightweight fork of something like\nMastodon (beyond something like Pleroma or GoToSocial does) could also be\nbeneficial. I can imagine a lightweight server with no federated timeline\n(duplication of all the known network), the above changes in the first\nparagraph, and possibly even one that hands the responsibility of outgoing\ncommunication and archival of remote posts to the client (pop3 instead of imap\nkind of deal) could be beneficial in creating a super lightweight server for\nthose who\u2019d be willing to accept the trade offs.\n\nFinally, I think there would be value in some form of optional identification\noutside of the server\u2019s domain, such as something that resembles Nostr\u2019s key-\nbased accounts, Hubzilla\u2019s nomadic identities, or Nostr & AT\u2019s ability to use\nyour domain to identify your account. This would allow users to retain some\nlevel of ownership over their identity outside of a server that could go down,\nwhile also preventing malicious control of a user\u2019s account by an admin, and\nproviding somewhat more seamless migration regardless of the server\u2019s state.\n\n#### The Perfect Model, and Conclusions\n\nI believe Activity Pub excels at what people have called \u201cthe islands\u201d model.\nThat being smaller interconnected servers, often having a lot of communication\nbetween members of the same server but also capable of communicating with\nanybody else on any other \u2018island\u2019. Smaller servers would negate the potential\nheftyness of the software, and allow self hosting to be really easy and use\nminimal resources. In a world where the future of microblogging protocols is\nlargely made up of smaller self hosted systems for individual communities\n(from topics such as tech to small friend groups), Activity Pub would be the\nway to go.\n\nContinuing with the landmasses metaphor, it\u2019s also an alright model for large\ninstances as metaphorical \u201ccontinents\u201d as well. I\u2019m confident that Threads,\nTumbler, Mastodon.Social, and similar large instances will have the resources\nto keep up with a relatively heavy load while offering communication between\ntheir various servers.\n\nLast, I believe Activity Pub also excels in smaller groups with at least one\n\u2019techy\u2019 guy or gal. Unlike some models such as Nostr, as long as somebody has\nthe technical knowledge to set up a server the rest of its users won\u2019t need\nany technical expertise beyond what it would take to set up a normal social\nmedia profile.\n\nOverall, I believe Activity Pub is here to stay, and while I do think there\nare some minor issues to work around or through, I expect it to be a major\nplayer in the growing decentralized social media platforms and I expect it to\nbring a lot of value to a lot of people.\n\n## Nostr\n\nNostr is the newest of the three microblogging platforms, being released in\n2020. Nostr is a decentralized social media platform that uses key pairs to\nidentify accounts and sign messages, which are then pushed out to relays\n(servers) that mirror a copy of the posts. Posts are always only plain text,\nthough links to files are generally displayed in clients as if they were\nembedded into the post, and the client itself handles the combination of\ncontent from relays into one large user defined network.\n\n#### Server Load/Simplicity\n\nStandard Nostr relays, given they don\u2019t communicate with other relays or store\nanything beyond signed text, are very lightweight and by far the least\nresource intensive to run.\n\n#### Ease of Use/Simplicity\n\nWhile again, this is fairly subjective, I would consider Nostr easy to join\nbut difficult to master. Joining Nostr is extremely easy: install an app and\ngenerate a key pair (which could be explained as a username and password that\ncan\u2019t be reset), and the app will already have you plugged into default relays\nand set to start posting. There\u2019s no further registration, risks of joining on\na bad-for-you instance, and a well explained 1-2 paragraph introductory by any\ngood app during the account creation process.\n\nHowever, beyond account creation, it takes a much more difficult turn. I\nimagine trying to explain to somebody relatively tech illiterate what\nasymmetric encryption is, only to quickly pivot to the fact you\u2019re generating\nsigned messages and mirroring them on servers called relays, would be a\ndifficult conversation. Further, if keys are lost or stolen the account is\nirrevocably destroyed, which could spell a lot of headache to anybody who\u2019s\ntrying out the technology without fully understanding it.\n\n#### Account Ownership\n\nBecause accounts are key pairs with posts mirrored on relays, the user is\nentirely in control of their account. While relays can restrict who can post\nto their specific relay or moderate what is posted on them, no person other\nthan the holder(s) of the key pair can control the account itself in any way.\n\n#### Client Load/Simplicity\n\nBecause clients handle the combination of data from different relays into one\nlarge \u201cnetwork\u201d of the user\u2019s configuration, Nostr clients have more work than\nclients of other protocols. With a low powered device or a slower internet\nconnection, a client can be bogged down if it\u2019s forced to process a lot of\ndata all at once (such as viewing the global timeline of a large number of\nrelays simultaneously).\n\nFurther, because of Nostr\u2019s fairly broad ambitions to add large amounts of\nfunctionality, clients may or may not support all features that are possible\nwithin the network.\n\n#### Client Customization\n\nBecause account ownership and interactivity between relays occur client side\nthe user can heavily customize their \u201cnetwork\u201d and how it operates. For\nexample, by setting one or a group of relays to make up the global feed, or by\nprohibiting particular relays from delivering content such as direct messages\nfrom other users. Similarly, unlike Activity Pub it\u2019s entirely up to the\nclient what relays do and do not get communcated with. For example, if you\nwanted to follow a particular user on an otherwise problematic relay you can\nset that particular relay to stay out of the global timeline and not deliver\nprivate messages, but still allow posts from the user(s) you followed to show\nup in your home timeline. In this way, unlike a federated protocol, it\u2019s up to\nthe user to choose what is part of their network. While a relay can moderate\nwhat content is on that particular relay they cannot moderate what other\nrelays users of that relay use or communicate with.\n\n#### Portability\n\nBecause accounts are based on key pairs, and because Nostr users almost always\nhave at least a couple relays set up, if a relay goes down (temporarily or\npermanently) the user will likely not even notice unless their client notifies\nthem of such as their content (and likely the content of the people they\nfollow) is spread across multiple relays. Similarly, if a user finds they want\nto change up what relays they do or do not want to participate in it\u2019s nothing\nmore than changing them and continuing without any need to migrate or relocate\ntheir account.\n\n#### Malleability\n\nNostr as a protocol is very simple and has often been described as the\nspiritual successor to RSS. Its simplicity, its ability to support extended\nfunctionality through NIPs, and its overall lightweightness makes it\nparticularly malleable and a good candidate to be built upon. Similarly,\nbecause account management is entirely client-side, as long as a particular\nclient supports what is built upon Nostr there\u2019s no need to worry if a server\nyou\u2019re on will support the particular features or services implemented.\n\n#### Direct Messaging\n\nNostr is a mixed bag when it comes to direct messaging, and not ideal in my\nopinion. While messages are end-to-end encrypted and have the redundancy of\nmultiple relays passing along the encrypted message, the encrypted message\nitself is publicly accessible like any other post. Though it cannot be\ndecrypted unless one holds the private key, it does make a public record of\nwho\u2019s contacting who and provides the risk of future decryption if technology\nadvances (keep in mind 38-bit encryption used to be military grade, now\ndecades later it\u2019s a joke).\n\n### Nostr\u2019s Current State\n\nMy opinions/interpretations on the current state of Nostr and its potential\nfuture.\n\n#### Growth\n\nNostr has experienced a particularly quick growth in the short amount of time\nit\u2019s been around, growing at a considerably faster rate than the other two\nprotocols discussed. Nevertheless, it\u2019s still new and smaller, and some of the\ngrowth can be attributed to the Twitter exodus making the earlier days of\ndecentralized social media a poor comparison to Nostr\u2019s launch.\n\nNostr has also had some integration into other social media services such as\nMinds, which similar to Threads can offer infrastructure to users through a\nprofit driven business model.\n\n#### Scaling Issues\n\nThe largest scaling issue I foresee for Nostr is the scaling of \u201chub\u201d relays.\nWhile many smaller relays exist to serve smaller groups, it\u2019s likely many\npeople will want to be capable of following anybody on the network and want to\nbe capable of being followed by anybody on the network. This will likely mean\nthat there will continue to be half a dozen to a dozen relays where everybody\nis a member of at least one or two that act as hubs of the network that keep\neverybody interconnected.\n\nWhile the small gardening relay or the friend group who wants their own space\nprobably won\u2019t have difficulty paying the $3-6 VPS bill, the larger hub nodes\nwill need to fund a much larger bill to continue to exist.\n\n#### Moderation and Community\n\nThe English speaking portion of Nostr is currently heavily populated by crypto\nenthusiasts, with many of the remaining people being categorized as\ncypherpunks, technology enthusiasts, libertarians, or a combination of the\nfour. While continued growth brings in a broader group of people, and user\ncuration can create a network more curated towards particular interests, the\nconcentration of those groups can push other people away.\n\nFurther, on moderation specifically, most relays do not require any sort of\nregistration to participate and heavily rely on automated moderation tools.\nWhile in my experience the network I\u2019m participating in has been fairly free\nof problematic people (minus the occasional spam or rude comment), I expect\nthat if the community grows it may experience growing pains in the form of a\nsudden uptick in problematic posts as it\u2019s fairly easy to generate many key\npairs and then act with impunity.\n\n#### Future Changes\n\nAgain, while not exactly my expertise level, I thought I would go over some\nthings I would expect could bring value to Nostr. First is the idea of a DHT\nlayer that acts entirely independently of relays. DHT, short for distributed\nhash tables, would be the idea of creating a decentralized network (almost\nidentical to IPFS) that would allow any client/relay running the software to\noptionally distribute posts to and pull posts from any other account also\nusing a client/relay with DHT. Something like this would allow a phone or\ncomputer to effectively host their posts or other\u2019s posts of their choosing if\nintegrated into a client, and could likely also allow the creation of\n\u2018universal\u2019 relays that can pull posts from anywhere or distribute someone\u2019s\npost to anyone also using DHT. Given the small size of posts, this would\nlikely be easily feasible, and if used in conjunction with normal relays this\nwould likely serve as a means of solving the \u2018hub relays\u2019 issue I talked about\nabove.\n\nFurther, I believe the protocol would benefit from having some means of better\nlocating users on other relays. Whether that be having some relays \u2018gossip\u2019\n(effectively some form of federation/duplication among relays that choose to\ndo so), having some sort of search tool in clients that can find an event\n(post) from other relays even if it\u2019s not added to the user\u2019s relays, or have\nsome sort of tagging on events as to where the post was originally mirrored on\n(though this is sort of accomplished oppositely by \u2018broadcasting\u2019 a post to\nall your relays if you re-post it).\n\nFinally, for the possibility of large scale adoption, I foresee the need for a\nservice (or set of services) to come out that hides keys and NPUBs (probably\nutilizing NIP05s in its place) on the backend. Something that allows users to\nregister like a centralized/federated social media service but remain able to\ninteract with other Nostr users. Something like Ditto or a more mainstream-\nfriendly version of Minds are potential contenders for something like this,\nand would prevent the technical knowledge barrier to participating on the\nNostr network.\n\n#### The Perfect Model, and Conclusions\n\nIn Activity Pub\u2019s summary I talked about islands, and in Nostr\u2019s summary I\u2019ll\nuse the metaphor of roads. All roads lead to Rome (or so they say, I doubt\nthat the roads I travel on cross oceans), and on Nostr all communities branch\nout in a number of ways, but most have their content make its way to the\nmetaphorical \u2018Rome\u2019 which is those main relays I\u2019ve been calling the \u2018hub\nrelays\u2019. This is already happening as there are sets of communities branching\nout in different directions from the English and Japanese speaking Nostr\ncommunities (the two biggest languages I\u2019ve witnessed on Nostr, albeit it\u2019s\nhappening across numerous different languages).\n\nIn this way, there\u2019s a plethora of relays that house individual communities\nand groups, and those individual relays often could be grouped up into sets of\nrelays with a lot of people participating throughout a number of them, and\nthen almost everything eventually makes its way (by the original user\u2019s relay\nconfiguration or by re-broadcasts) towards the center of the network and the\nhub relays. In this way I believe Nostr is at its best simultaneously in the\ntwo extremes, both in having insular communities interacting among themselves\nand as a \u2018city center\u2019 model where anybody can interact with anybody on the\nnetwork if they choose to do so.\n\nWhile being new, and having some potential issues to work through such as the\nexpertise requirement and scaling the hub relays, I believe Nostr has a lot of\npromise and will play a large part in the decentralized social media\nlandscape.\n\n## AT Protocol\n\nThe AT protocol was originally a secondary project within Twitter, which has\nsince been spun off. It\u2019s the red-headed middle child off playing alone in the\ncorner of the three decentralized protocols I\u2019m talking about today, coming\nout in 2019. I originally assumed it was \u201cnot made here syndrome,\u201d where its\ndevelopers liked Activity Pub but didn\u2019t want to use something they didn\u2019t\nhave total control over. In researching for this post, however, I realized I\nwas mistaken and AT has some unique ways of addressing a distributed social\nmedia protocol that both have a lot of promise and could be considered\nsomething of a hybrid between Nostr and Activity Pub.\n\nBut if it has some promise and is older than Nostr, why would I be referring\nto it as the red-headed middle child off in the corner and an interesting\nhybrid? Well, that\u2019s because even though the protocol is older it only really\nexists on paper and as the base for BlueSky, which is effectively centralized\nand not really a good proof of concept of a decentralized network. As such, I\nfeel the least confident in my ability to compare it as accurately as the\nothers, but will go over what it could at least do on paper if utilized as a\nreal distributed social media network.\n\n#### Server Load/Simplicity\n\nDiscussing the resource requirements of AT is a little more difficult, as it\nsplits most of its function across two types of servers: PDSs (personal data\nservers) and crawlers. PDSs are what you would think of as a server on a\ndecentralized social media network, they house content from accounts that are\na part of that PDS. PDSs are fairly simple and lightweight, they\u2019re mostly\njust a simple repository of all content and interactions of the accounts on\nthat PDS and don\u2019t do much beyond house the account and its content.\n\nCrawlers are the second layer on top of PDSs and access data to facilitate the\na specific application built on AT. The crawler is what would access data from\nvarious accounts spread across PDSs and aggregate it for a client to use.\n\nThis makes AT fairly lightweight in the sense that it\u2019s separated into two\ntypes of servers. Most individuals would likely be hosting a PDS, which is\nlightweight because it\u2019s simpler and outsources the work of aggregating data\nto a crawler. A crawler is more lightweight than an Activity Pub based service\nbecause it only accesses content on remote servers instead of hosting on its\nservice while duplicating content from remote services alongside processing\nand outputting the data for users.\n\n#### Ease of Use/Simplicity\n\nThis is hard to say. How easy it would be to create and manage an account on a\nPDS, or to configure a client to use your own or a third party\u2019s crawler, is\nhard to say outside of the more centralized BlueSky that I have not used (and\ncould not without an invitation). To properly judge this not only would\nBlueSky need to be opened up but other projects/configurations would need to\nbe added to the AT network.\n\n#### Account Ownership\n\nAccounts on the AT protocol are cryptographic and in the control of the user.\nWhile accounts are tied to a particular PDS, they are intended to be\nmigratable to a new PDS as the user holds the cryptographic keys. Given AT is\neffectively BlueSky, and BlueSky is effectively centralized, further\ndiscussion of the pros and cons of AT\u2019s account ownership in a decentralized\nmanner would be more difficult.\n\n#### Client Load/Simplicity\n\nClients, posting to a PDS and receiving content from a crawler, do not have to\nprocess much information.\n\n#### Client Customization\n\nThe amount of configuration and customization you can get from the AT protocol\nis theoretically both very limited and very advanced depending on how you\nconsider it. Given PDSs are fairly simple and can be accessed by any kind of\ncrawler, the data on the network posted by accounts could be used in a very\nwide variety of ways by various crawlers. However, since crawlers serve a more\nspecific goal the use of a client utilizing a specific crawler would likely be\nlimited to the tailor-made experience setup by the crawler and client. Again,\nas AT is effectively BlueSky, and BlueSky is effectively centralized, a lot of\nthis is more \u2018on paper\u2019 than \u2018in practice\u2019.\n\n#### Portability\n\nBecause the AT protocol uses cryptographic identifiers accounts are intended\nto be portable between PDSs, but at the time of writing the protocol\u2019s process\nof doing so is still in development.\n\n#### Malleability\n\nExact answer as in \u201cClient Customization,\u201d a lot could be done with the data\non PDSs, but data read from crawlers and output to a specific application\nwould likely be less malleable.\n\n#### Direct Messaging\n\nThe AT protocol doesn\u2019t include direct messaging. Since PDSs don\u2019t do much\nother than store data if there is direct messaging on an AT-based client or\napplication it\u2019s separate from the protocol itself. Direct messages may be\nimplemented more officially at a later time, probably at the crawler or client\nlayer, or in a similar fashion to Nostr.\n\n### AT\u2019s Current State\n\nMy opinions/interpretations on the current state of the AT protocol and its\npotential future.\n\n#### Growth\n\nThe AT protocol has experienced alright growth, all in the form of BlueSky, as\nmany people left Twitter in search of a generic Twitter alternative (either in\nthe form of \u2018old Twitter\u2019 or Twitter under the board right before Elon Musk).\nBeing all Bluesky, however, it hasn\u2019t received the same growth in the\ndistributed microblogging space as Activity Pub or Nostr has and appears to be\nsought out as a generic Twitter alternative as opposed to a distributed one.\n\n#### Scaling Issues\n\nI am not aware of any portion of the AT protocol that would provide unique\nscaling issues beyond the generic scaling issues that I will touch on at the\nend of this post. However, that could change if AT were to be used in a\ndecentralized manner instead of its currently centralized nature (for example,\nspecific crawlers could become the center of everything, smaller PDSs could be\nexcluded from the network, or other issues could rear their face if it were to\nbe put in real production).\n\n#### Moderation and Community\n\nI can\u2019t speak too much of community or moderation on AT. I have not used it so\nI can\u2019t speak to its community much beyond I\u2019ve heard it\u2019s sort of old\nTwitter, and protocol wide moderation has not been seen as it\u2019s still all on\nBlueSky which is effectively centralized.\n\n#### Future Changes\n\nThe future change I would propose to AT is to decentralize. Again, BlueSky is\nthe only main implementation of AT, and as BlueSky remains locked down it\ninhibits the use of AT as a decentralized protocol.\n\n#### The Perfect Model, and Conclusions\n\nI believe AT could excel with its compartmentalization. Accounts are owned by\nthe user, data is stored on a PDS, and data is aggregated by a crawler. This\ncompartmentalization would make it easier to build as its members can control\nlittle pieces of the network, and easier to build on as crawlers can focus on\naggregating and processing content for specific purposes while not needing to\nhost/duplicate the base layer.\n\nNevertheless, I am unsure if AT will play a part in the growing distributed\nsocial media landscape. AT is still just BlueSky, a locked down and\neffectively centralized platform. Its features are also not too unique to be\nimplemented into other protocols as well. Nostr more or less can do it all\nalready - Nostr clients are effectively \u201ccrawlers\u201d running on a local device,\nand various other applications already built on Nostr (like Nostr blogging\nplatforms) can already fulfill the function that centralized crawlers would\ndo.\n\nActivity Pub can also fulfill many of the same functions as AT. While Activity\nPub servers are more monolithic making a \u201ccrawler\u201d fairly impossible, there\nare several various Activity Pub server types (e.g. Mastodon vs Lemmy) that\nare mostly/partially compatible and would replace the need for crawlers.\nThrowing in user-owned account identification Activity Pub could also do\neverything AT can do.\n\nWhile I believe the AT protocol itself has considerable promise, and again\nfunctions sort as a hybrid between Activity Pub and Nostr, if it remains\nlocked down I foresee a lack of adoption and minimal/no participation in the\ndistributed social media landscape.\n\n## Misc Ramblings\n\n#### Universal Scaling Issue\n\nBeyond the issues mentioned above, such as Activity Pub\u2019s being fairly hefty\nor Nostr\u2019s \u2018hub relay\u2019 issue, there\u2019s the general issue in any decentralized\nprotocol of getting volunteers to scale. Servers cost money and somebody has\nto host them. There will generally be certain flagship instances (such as\nMastodon.Social or Primal\u2019s Nostr relay) that are funded by the\ndonations/revenue of major players in the development surrounding the\nprotocol. There will also likely be \u201ccorporate\u201d portions of the network, such\nas Activity Pub\u2019s Threads or Nostr\u2019s Minds, which can monetize themselves and\noffer an easy in to the platform.\n\nThere will also be people willing to pay a few dollars to host a community for\ntheir friends (online or in person), or for a community on a topic they like.\nThe price of an (ever-growing) Netflix monthly payment would cover a small\nActivity Pub server or a moderately sized Nostr relay. Still though, there\ndoes come an issue with the funding of servers with a moderate or large size\nnot affiliated with any project or group, and the development of third party\nclients, all of which may bring along revenue models like ads or subscriptions\nor die out if the donation model does not scale up.\n\n#### Federated vs Decentralized\n\nI kept saying federated, decentralized, and distributed throughout the post\nand figured it might be worth delving into here. Kevin Cox\u2019s post\nDecentralized vs Federated is what I believe to be the best explainer you can\nwrite. Nevertheless, to summarize, federated services are any number of\ncentralized servers that can communicate with each other. For example, with\nActivity Pub where user@example.com is an account with the centralized server\nexample.com managed by said server, but can communicate accounts on any other\nserver. Decentralized protocols exist when a particular user (and likely their\nposts) exist independent of a server hosting them (such as Nostr or IPFS).\nUsually using some form of cryptography, the content can continue to exist or\neasily be migrated even if the original server goes down.\n\nDistributed doesn\u2019t have an official definition (to my knowledge), but it\u2019s\nhopefully self-evident. I\u2019m just using it as a placeholder for any protocol\nthat has content distributed across multiple independent servers, be it\nfederated or decentralized.\n\n#### Protocols can change\n\nDuring this comparison, it\u2019s important to clarify that protocols can change as\ntheir development continues. For example, with Activity Pub, duplicating every\nvideo across every instance was once standard. Of course that would have\nobliterated the network\u2019s computing requirements at scale, so it was dropped\nand videos just link to the original source - crisis averted.\n\n#### Things are interoperable\n\nAnother aspect worth clarifying is that in the world of open protocols it\u2019s\nnever a zero-sum game. You can already talk to people on Activity Pub with a\nNostr account and vice versa. You can also usually follow BlueSky users on the\nAT protocol while on Activity Pub or Nostr, but of course interacting with\nthem is impossible thanks to BlueSky being locked down and AT doesn\u2019t really\nexist outside of BlueSky.\n\nI sort of recently created a GitHub repo called Follow Anything Anywhere which\ntries to demonstrate just that, that you can follow just about anything\nthrough a variety of platforms. This of course means that open protocols\naren\u2019t really competing per se, and instead integrating into one larger\ndistributed social media landscape,\n\n## Sum Up\n\nSo, like a lot of my posts, man did that turn out longer than I anticipated.\nStill though, hopefully it was interesting or useful in some way. Again, I\u2019d\nlike to reiterate that I\u2019m not an expert here just combining some research\nwith a surface-level to mid-level understanding going in to hopefully\naccurately portray the state the three protocols are in and how they compare\nand interact. Of course, as always, if I was incorrect about anything please\nreach out.\n\n## Recent Posts\n\n  * Local LLMs and AI Ethics (mine makes nukes)\n  * Making Pickles and Sauerkraut (the lazy way)\n  * I made a client, Nostr surpassed Mastodon, and BlueSky is open?\n  * ActivityPub/Nostr/AT-BlueSky Compared\n  * Blogging in 2023\n  * Firefox: a brink of their own making?\n  * Platform Agnostic Following\n  * Nostr\n\n## Categories\n\n## Tags\n\n", "frontpage": true}
