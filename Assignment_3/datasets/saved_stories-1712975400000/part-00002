{"aid": "40017310", "title": "XZ backdoor story \u2013 Initial analysis", "url": "https://securelist.com/xz-backdoor-story-part-1/112354/", "domain": "securelist.com", "votes": 3, "user": "kryster", "posted_at": "2024-04-12 20:28:36", "comments": 0, "source_title": "Kaspersky analysis of the backdoor in XZ", "source_text": "Kaspersky analysis of the backdoor in XZ | Securelist\n\n  * Consent\n  * Details\n  * [#IABV2SETTINGS#]\n  * About\n\n## This website uses cookies\n\nWe use cookies to personalise content and ads, to provide social media\nfeatures and to analyse our traffic. We also share information about your use\nof our site with our social media, advertising and analytics partners who may\ncombine it with other information that you\u2019ve provided to them or that they\u2019ve\ncollected from your use of their services.\n\nShow details\n\n  * Necessary cookies help make a website usable by enabling basic functions like page navigation and access to secure areas of the website. The website cannot function properly without these cookies.\n\n    * Adobe Inc.\n\n1\n\nLearn more about this provider\n\ndemdexVia a unique ID that is used for semantic content analysis, the user's\nnavigation on the website is registered and linked to offline data from\nsurveys and similar registrations to display targeted ads.\n\nExpiry: 180 daysType: HTTP\n\n    * Cookiebot\n\n2\n\nLearn more about this provider\n\nCookieConsent [x2]Stores the user's cookie consent state for the current\ndomain\n\nExpiry: 1 yearType: HTTP\n\n    * Google\n\n3\n\nLearn more about this provider\n\ntest_cookieUsed to check if the user's browser supports cookies.\n\nExpiry: 1 dayType: HTTP\n\nrc::aThis cookie is used to distinguish between humans and bots. This is\nbeneficial for the website, in order to make valid reports on the use of their\nwebsite.\n\nExpiry: PersistentType: HTML\n\nrc::cThis cookie is used to distinguish between humans and bots.\n\nExpiry: SessionType: HTML\n\n    * Kaspersky Lab\n\n6\n\nLearn more about this provider\n\nAMCV_# [x2]Unique user ID that recognizes the user on returning visits\n\nExpiry: 2 yearsType: HTTP\n\nAMCVS_#AdobeOrg [x2]Pending\n\nExpiry: SessionType: HTTP\n\ntest [x2]Used to detect if the visitor has accepted the marketing category in\nthe cookie banner. This cookie is necessary for GDPR-compliance of the\nwebsite.\n\nExpiry: SessionType: HTTP\n\n  * Preference cookies enable a website to remember information that changes the way the website behaves or looks, like your preferred language or the region that you are in.\n\n    * Kaspersky Lab\n\n1\n\nLearn more about this provider\n\nsfcsrftokenPending\n\nExpiry: 1 yearType: HTTP\n\n  * Statistic cookies help website owners to understand how visitors interact with websites by collecting and reporting information anonymously.\n\n    * Google\n\n9\n\nLearn more about this provider\n\n_ga [x4]Registers a unique ID that is used to generate statistical data on how\nthe visitor uses the website.\n\nExpiry: 2 yearsType: HTTP\n\n_gid [x2]Registers a unique ID that is used to generate statistical data on\nhow the visitor uses the website.\n\nExpiry: 1 dayType: HTTP\n\n_ga_# [x2]Used by Google Analytics to collect data on the number of times a\nuser has visited the website as well as dates for the first and most recent\nvisit.\n\nExpiry: 2 yearsType: HTTP\n\ntdRegisters statistical data on users' behaviour on the website. Used for\ninternal analytics by the website operator.\n\nExpiry: SessionType: Pixel\n\n    * Kaspersky Lab\n\n3\n\nLearn more about this provider\n\nb/ss/#/1/#/s#Registers data on visitors' website-behaviour. This is used for\ninternal analysis and website optimization.\n\nExpiry: SessionType: Pixel\n\ns_cc [x2]Used to check if the user's browser supports cookies.\n\nExpiry: SessionType: HTTP\n\n    * LinkedIn\n\n1\n\nLearn more about this provider\n\nbrowser_idUsed to recognise the visitor's browser upon reentry on the website.\n\nExpiry: 5 yearsType: HTTP\n\n  * Marketing cookies are used to track visitors across websites. The intention is to display ads that are relevant and engaging for the individual user and thereby more valuable for publishers and third party advertisers.\n\n    * Meta Platforms, Inc.\n\n5\n\nLearn more about this provider\n\nfbssls_#Collects data on the visitor\u2019s use of the comment system on the\nwebsite, and what blogs/articles the visitor has read. This can be used for\nmarketing purposes.\n\nExpiry: SessionType: HTML\n\nlastExternalReferrerDetects how the user reached the website by registering\ntheir last URL-address.\n\nExpiry: PersistentType: HTML\n\nlastExternalReferrerTimeDetects how the user reached the website by\nregistering their last URL-address.\n\nExpiry: PersistentType: HTML\n\n_fbp [x2]Used by Facebook to deliver a series of advertisement products such\nas real time bidding from third party advertisers.\n\nExpiry: 3 monthsType: HTTP\n\n    * Adobe Inc.\n\n1\n\nLearn more about this provider\n\n_dpThis cookie is set by the audience manager of a website in order to\ndetermine if any additional third-party cookies can be set in the visitor\u2019s\nbrowser \u2013 third-party cookies are used to gather information or track visitor\nbehavior on multiple websites. Third-party cookies are set by a third-party\nwebsite or company.\n\nExpiry: SessionType: HTTP\n\n    * Google\n\n6\n\nLearn more about this provider\n\nIDEUsed by Google DoubleClick to register and report the website user's\nactions after viewing or clicking one of the advertiser's ads with the purpose\nof measuring the efficacy of an ad and to present targeted ads to the user.\n\nExpiry: 1 yearType: HTTP\n\nreceive-cookie-deprecationPending\n\nExpiry: 180 daysType: HTTP\n\npagead/1p-conversion/#/Pending\n\nExpiry: SessionType: Pixel\n\n_gcl_au [x2]Used by Google AdSense for experimenting with advertisement\nefficiency across websites using their services.\n\nExpiry: 3 monthsType: HTTP\n\nAwinChannelCookiePending\n\nExpiry: SessionType: HTTP\n\n    * Marketo\n\n3\n\nLearn more about this provider\n\n__cf_bmThis cookie is used to distinguish between humans and bots. This is\nbeneficial for the website, in order to make valid reports on the use of their\nwebsite.\n\nExpiry: 1 dayType: HTTP\n\nBIGipServer#Used to distribute traffic to the website on several servers in\norder to optimise response times.\n\nExpiry: SessionType: HTTP\n\n_mkto_trkContains data on visitor behaviour and website interaction. This is\nused in context with the email marketing service Marketo.com, which allows the\nwebsite to target visitors via email.\n\nExpiry: 2 yearsType: HTTP\n\n    * Twitter Inc.\n\n1\n\nLearn more about this provider\n\ni/jot/embedsSets a unique ID for the visitor, that allows third party\nadvertisers to target the visitor with relevant advertisement. This pairing\nservice is provided by third party advertisement hubs, which facilitates real-\ntime bidding for advertisers.\n\nExpiry: SessionType: Pixel\n\n    * YouTube\n\n22\n\nLearn more about this provider\n\n#-#Pending\n\nExpiry: SessionType: HTML\n\niU5q-!O9@$Registers a unique ID to keep statistics of what videos from YouTube\nthe user has seen.\n\nExpiry: SessionType: HTML\n\nLAST_RESULT_ENTRY_KEYUsed to track user\u2019s interaction with embedded content.\n\nExpiry: SessionType: HTTP\n\nLogsDatabaseV2:V#||LogsRequestsStorePending\n\nExpiry: PersistentType: IDB\n\nnextIdUsed to track user\u2019s interaction with embedded content.\n\nExpiry: SessionType: HTTP\n\nremote_sidNecessary for the implementation and functionality of YouTube video-\ncontent on the website.\n\nExpiry: SessionType: HTTP\n\nrequestsUsed to track user\u2019s interaction with embedded content.\n\nExpiry: SessionType: HTTP\n\nServiceWorkerLogsDatabase#SWHealthLogNecessary for the implementation and\nfunctionality of YouTube video-content on the website.\n\nExpiry: PersistentType: IDB\n\nTESTCOOKIESENABLEDUsed to track user\u2019s interaction with embedded content.\n\nExpiry: 1 dayType: HTTP\n\nVISITOR_INFO1_LIVETries to estimate the users' bandwidth on pages with\nintegrated YouTube videos.\n\nExpiry: 180 daysType: HTTP\n\nVISITOR_PRIVACY_METADATAStores the user's cookie consent state for the current\ndomain\n\nExpiry: 180 daysType: HTTP\n\nYSCRegisters a unique ID to keep statistics of what videos from YouTube the\nuser has seen.\n\nExpiry: SessionType: HTTP\n\nyt.innertube::nextIdRegisters a unique ID to keep statistics of what videos\nfrom YouTube the user has seen.\n\nExpiry: PersistentType: HTML\n\nytidb::LAST_RESULT_ENTRY_KEYStores the user's video player preferences using\nembedded YouTube video\n\nExpiry: PersistentType: HTML\n\nYtIdbMeta#databasesUsed to track user\u2019s interaction with embedded content.\n\nExpiry: PersistentType: IDB\n\nyt-remote-cast-availableStores the user's video player preferences using\nembedded YouTube video\n\nExpiry: SessionType: HTML\n\nyt-remote-cast-installedStores the user's video player preferences using\nembedded YouTube video\n\nExpiry: SessionType: HTML\n\nyt-remote-connected-devicesStores the user's video player preferences using\nembedded YouTube video\n\nExpiry: PersistentType: HTML\n\nyt-remote-device-idStores the user's video player preferences using embedded\nYouTube video\n\nExpiry: PersistentType: HTML\n\nyt-remote-fast-check-periodStores the user's video player preferences using\nembedded YouTube video\n\nExpiry: SessionType: HTML\n\nyt-remote-session-appStores the user's video player preferences using embedded\nYouTube video\n\nExpiry: SessionType: HTML\n\nyt-remote-session-nameStores the user's video player preferences using\nembedded YouTube video\n\nExpiry: SessionType: HTML\n\n    * securelist.com\n\n1\n\nga_clientIdUsed to send data to Google Analytics about the visitor's device\nand behavior. Tracks the visitor across devices and marketing channels.\n\nExpiry: PersistentType: HTML\n\n  * Unclassified cookies are cookies that we are in the process of classifying, together with the providers of individual cookies.\n\nWe do not use cookies of this type.\n\nCross-domain consent2 Your consent applies to the following domains:\n\nList of domains your consent applies to:\n\nsecurelist.lat\n\nsecurelist.com\n\nCookie declaration last updated on 3/27/24 by Cookiebot\n\n## [#IABV2_TITLE#]\n\n[#IABV2_BODY_INTRO#]\n\n[#IABV2_BODY_LEGITIMATE_INTEREST_INTRO#]\n\n[#IABV2_BODY_PREFERENCE_INTRO#]\n\n[#IABV2_BODY_PURPOSES_INTRO#]\n\n[#IABV2_BODY_PURPOSES#]\n\n[#IABV2_BODY_FEATURES_INTRO#]\n\n[#IABV2_BODY_FEATURES#]\n\n[#IABV2_BODY_PARTNERS_INTRO#]\n\n[#IABV2_BODY_PARTNERS#]\n\nCookies are small text files that can be used by websites to make a user's\nexperience more efficient.\n\nThe law states that we can store cookies on your device if they are strictly\nnecessary for the operation of this site. For all other types of cookies we\nneed your permission.\n\nThis site uses different types of cookies. Some cookies are placed by third\nparty services that appear on our pages.\n\nYou can at any time change or withdraw your consent from the Cookie\nDeclaration on our website.\n\nLearn more about who we are, how you can contact us and how we process\npersonal data in our Privacy Policy.\n\nPlease state your consent ID and date when you contact us regarding your\nconsent.\n\nPowered by Cookiebot by Usercentrics\n\nby Kaspersky\n\n  * CompanyAccount\n  * Get In Touch\n  * Dark mode off\n  * English\n\n    * Russian\n    * Spanish\n\n  * Subscribe Dark mode off Login\n  * Securelist menu\n  * English\n\n    * Russian\n    * Spanish\n  * Existing Customers\n\n    * Personal\n\n      * My Kaspersky\n      * Renew your product\n      * Update your product\n      * Customer support\n    * Business\n\n      * KSOS portal\n      * Kaspersky Business Hub\n      * Technical Support\n      * Knowledge Base\n      * Renew License\n  * Home\n\n    * Products\n    * Trials&Update\n    * Resource Center\n  * Business\n\n    * Kaspersky Next\n    * Small Business (1-50 employees)\n    * Medium Business (51-999 employees)\n    * Enterprise (1000+ employees)\n  * Securelist\n  * Threats\n\n    * Financial threats\n    * Mobile threats\n    * Web threats\n    * Secure environment (IoT)\n    * Vulnerabilities and exploits\n    * Spam and Phishing\n    * Industrial threats\n  * Categories\n\n    * APT reports\n    * Incidents\n    * Research\n    * Malware reports\n    * Spam and phishing reports\n    * Publications\n    * Kaspersky Security Bulletin\n  * Archive\n  * All Tags\n  * APT Logbook\n  * Webinars\n  * Statistics\n  * Encyclopedia\n  * Threats descriptions\n  * KSB 2021\n  * About Us\n\n    * Company\n    * Transparency\n    * Corporate News\n    * Press Center\n    * Careers\n    * Sponsorships\n    * Policy Blog\n    * Contacts\n  * Partners\n\n    * Find a Partner\n    * Partner Program\n\nContent menu Close\n\nSubscribe\n\nIncidents\n\n# XZ backdoor story \u2013 Initial analysis\n\nIncidents\n\n12 Apr 2024\n\n12 minute read\n\nTable of Contents\n\n  * The timeline of events\n  * Backdoored source distributions\n  * Initial infection analysis\n    * Stage 1 \u2013 The modified build-to-host script\n    * Stage 2 \u2013 The injected shell script\n    * Stage 3 \u2013 Backdoor extraction\n  * Binary backdoor analysis\n    * A stealth loading scenario\n    * Backdoor code analysis\n    * Core behavior\n    * Execution environment check\n    * The trie structure\n    * Symbol resolver\n    * The Symbind hook\n  * Conclusion\n  * Indicators of compromise\n    * Yara rules\n    * Known backdoored libraries\n\nAuthors\n\n  * GReAT\n\nOn March 29, 2024, a single message on the Openwall OSS-security mailing list\nmarked an important discovery for the information security, open source and\nLinux communities: the discovery of a malicious backdoor in XZ. XZ is a\ncompression utility integrated into many popular distributions of Linux.\n\nThe particular danger of the backdoored library lies in its use by the OpenSSH\nserver process sshd. On several systemd-based distributions, including Ubuntu,\nDebian and RedHat/Fedora Linux, OpenSSH is patched to use systemd features,\nand as a result has a dependency on this library (note that Arch Linux and\nGentoo are unaffected). The ultimate goal of the attackers was most likely to\nintroduce a remote code execution capability to sshd that no one else could\nuse.\n\nUnlike other supply chain attacks we have seen in Node.js, PyPI, FDroid, and\nthe Linux Kernel that mostly consisted of atomic malicious patches, fake\npackages and typosquatted package names, this incident was a multi-stage\noperation that almost succeeded in compromising SSH servers on a global scale.\n\nThe backdoor in the liblzma library was introduced at two levels. The source\ncode of the build infrastructure that generated the final packages was\nslightly modified (by introducing an additional file build-to-host.m4) to\nextract the next stage script that was hidden in a test case file\n(bad-3-corrupt_lzma2.xz). These scripts in turn extracted a malicious binary\ncomponent from another test case file (good-large_compressed.lzma) that was\nlinked with the legitimate library during the compilation process to be\nshipped to Linux repositories. Major vendors in turn shipped the malicious\ncomponent in beta and experimental builds. The compromise of XZ Utils is\nassigned CVE-2024\u20133094 with the maximum severity score of 10.\n\n## The timeline of events\n\n2024.01.19 XZ website moved to GitHub pages by a new maintainer (jiaT75)\n2024.02.15 \u201cbuild-to-host.m4\u201d is added to .gitignore 2024.02.23 two \u201ctest\nfiles\u201d that contained the stages of the malicious script are introduced\n2024.02.24 XZ 5.6.0 is released 2024.02.26 commit in CMakeLists.txt that\nsabotages the Landlock security feature 2024.03.04 the backdoor leads to\nissues with Valgrind 2024.03.09 two \u201ctest files\u201d are updated, CRC functions\nare modified, Valgrind issue is \u201cfixed\u201d 2024.03.09 XZ 5.6.1 is released\n2024.03.28 bug is discovered, Debian and RedHat notified 2024.03.28 Debian\nrolls back XZ 5.6.1 to 5.4.5-0.2 version 2024.03.29 an email is published on\nthe OSS-security mailing list 2024.03.29 RedHat confirms backdoored XZ was\nshipped in Fedora Rawhide and Fedora Linux 40 beta 2024.03.30 Debian shuts\ndown builds and starts process to rebuild it 2024.04.02 XZ main developer\nrecognizes the backdoor incident\n\n## Backdoored source distributions\n\nxz-5.6.0\n\nMD5| c518d573a716b2b2bc2413e6c9b5dbde  \n---|---  \nSHA1| e7bbec6f99b6b06c46420d4b6e5b6daa86948d3b  \nSHA256| 0f5c81f14171b74fcc9777d302304d964e63ffc2d7b634ef023a7249d9b5d875  \n  \nxz-5.6.1\n\nMD5| 5aeddab53ee2cbd694f901a080f84bf1  \n---|---  \nSHA1| 675fd58f48dba5eceaf8bfc259d0ea1aab7ad0a7  \nSHA256| 2398f4a8e53345325f44bdd9f0cc7401bd9025d736c6d43b372f4dea77bf75b8  \n  \n## Initial infection analysis\n\nThe XZ git repository contains a set of test files that are used when testing\nthe compressor/decompressor code to verify that it\u2019s working properly. The\naccount named Jia Tan or \u201cjiaT75\u201c, committed two test files that initially\nappeared harmless, but served as the bootstrap to implant backdoor.\n\nThe associated files were:\n\n  * bad-3-corrupt_lzma2.xz (86fc2c94f8fa3938e3261d0b9eb4836be289f8ae)\n  * good-large_compressed.lzma (50941ad9fd99db6fca5debc3c89b3e899a9527d7)\n\nThese files were intended to contain shell scripts and the backdoor binary\nobject itself. However, they were hidden within the malformed data, and the\nattacker knew how to properly extract them when needed.\n\n### Stage 1 \u2013 The modified build-to-host script\n\nWhen the XZ release is ready, the official Github repository distributes the\nproject\u2019s source files. Initially, these releases on the repository, aside\nfrom containing the malicious test files, were harmless because they don\u2019t get\nthe chance to execute. However, the attacker appears to have only added the\nmalicious code that bootstrap the infection when the releases were sourced\nfrom https://xz[.]tukaani.org, which was under the control of Jia Tan.\n\nThis URL is used by most distributions, and, when downloaded, it comes with a\nfile named build-to-host.m4 that contains malicious code.\n\nbuild-to-host.m4 (c86c8f8a69c07fbec8dd650c6604bf0c9876261f) is executed during\nthe build process and executes a line of code that fixes and decompresses the\nfirst file added to the tests folder:\n\nDeobfuscated line of code in build-to-host.m4\n\nThis line of code replaces the \u201cbroken\u201d data from bad-3-corrupt_lzma2.xz using\nthe tr command, and pipes the output to the xz -d command, which decompresses\nthe data. The decompressed data contains a shell script that will be executed\nlater using /bin/bash, triggered by this .m4 file.\n\n### Stage 2 \u2013 The injected shell script\n\nThe malicious script injected by the malicious .m4 file verifies that it\u2019s\nrunning on a Linux machine and also that it\u2019s running inside the intended\nbuild process.\n\nInjected script contents\n\nTo execute the next stage, it uses good-large_compressed.lzma, which is indeed\ncompressed correctly with XZ, but contains junk data inside the decompressed\ndata.\n\nThe junk data removal procedure is as follows: the eval function executes the\nhead pipeline, with each head command either ignoring the next 1024 bytes or\nextracting the next 2048 or 724 bytes.\n\nIn total, these commands extracted 33,492 bytes (2048*16 + 724 bytes). The\ntail command then retains the final 31,265 bytes of the file and ignores the\nrest.\n\nThen, the tr command applies a basic substitution to the output to deobfuscate\nit. The second XZ command decompresses the transformed bytes as a raw lzma\nstream, after which the result is piped into shell.\n\n### Stage 3 \u2013 Backdoor extraction\n\nThe last stage shell script performs many checks to ensure that it is running\nin the expected environment, such as whether the project is configured to use\nIFUNC (which will be discussed in the next sections).\n\nMany of the other checks performed by this stage include determining whether\nGCC is used for compilation or if the project contains specific files that\nwill be used by the script later on.\n\nIn this stage, it extracts the backdoor binary code itself, an object file\nthat is currently hidden in the same good-large_compressed.lzma file, but at a\ndifferent offset.\n\nThe following code handles this:\n\nPartial command used by the last script stage\n\nThe extraction process operates through a sequence of commands, with the\nresult of each command serving as the input for the next one. The formatted\none-liner code is shown below:\n\nFormatted backdoor extraction one-liner\n\nInitially, the file good-large_compressed.lzma is extracted using the XZ tool\nitself. The subsequent steps involve calling a chain of head calls with the\n\u201ceval $i\u201d function (same as the stage 3 extraction).\n\nThen a custom RC4-like algorithm is used to decrypt the binary data, which\ncontains another compressed file. This compressed file is also extracted using\nthe XZ utility. The script then removes some bytes from the beginning of the\ndecompressed data using predefined values and saves the result to disk as\nliblzma_la-crc64-fast.o, which is the backdoor file used in the linking\nprocess.\n\nFinally, the script modifies the function is_arch_extension_supported from the\ncrc_x86_clmul.h file in liblzma, to replace the call to the __get_cpuid\nfunction with _get_cpuid, removing one underscore character.\n\nThis modification allows it to be linked into the library (we\u2019ll discuss this\nin more detail in the next section). The whole build infection chain can be\nsummarized in the following scheme:\n\n## Binary backdoor analysis\n\n### A stealth loading scenario\n\nIn the original XZ code, there are two special functions used to calculate the\nCRC of the given data: lzma_crc32 and lzma_crc64. Both of these functions are\nstored in the ELF symbol table with type IFUNC, a feature provided by the GNU\nC Library (GLIBC). IFUNC allows developers to dynamically select the correct\nfunction to use. This selection takes place when the dynamic linker loads the\nshared library.\n\nThe reason XZ uses this is that it allows for determining whether an optimized\nversion of the lzma_crcX function should be used or not. The optimized version\nrequires special features from modern processors (CLMUL, SSSE3, SSE4.1). These\nspecial features need to be verified by issuing the cpuid instruction, which\nis called using the __get_cpuid wrapper/intrinsic provided by GLIBC, and it\u2019s\nat this point the backdoor takes advantage to load itself.\n\nThe backdoor is stored as an object file, and its primary goal is to be linked\nto the main executable during compilation. The object file contains the\n_get_cpuid symbol, as the injected shell scripts remove one underscore symbol\nfrom the original source code, which means that when the code calls\n_get_cpuid, it actually calls the backdoor\u2019s version of it.\n\nBackdoor code entry point\n\n### Backdoor code analysis\n\nThe initial backdoor code is invoked twice, as both lzma_crc32 and lzma_crc64\nuse the same modified function (_get_cpuid). To ensure control over this, a\nsimple counter is created to verify that the code has already been executed.\nThe actual malicious activity starts when the lzma_crc64 IFUNC invokes\n_get_cpuid, sees the counter value 1 indicating that that the function has\nalready been accessed, and initiates one final step to redirect to the true\nentry point of this malware.\n\nBackdoor initialization\n\nTo initialize the malicious code, the backdoor first initializes a couple of\nstructures that hold core information about the current running process.\nPrimarily, it locates the Global Offset Table (GOT) address using hardcoded\noffsets, and uses this information to find the cpuid pointer inside it.\n\nGOT modification code\n\nThe GOT contains the offsets of symbols, including the cpuid wrapper. The\nbackdoor then swaps the pointers to the main malware function, and calls it as\nif it were calling cpuid.\n\n### Core behavior\n\nThe main goal of the backdoor is to successfully hook specific functions that\nwill allow it to monitor every connection to the infected machine. The\ntargeted functions include:\n\nTargeted function| Description  \n---|---  \nRSA_public_decrypt| Used by libcrypto to decrypt a ciphertext signed by a\nprivate key  \nEVP_PKEY_set1_RSA| Used by libcrypto to set the RSA key of a given context  \nRSA_get0_key| Used by libcrypto to retrieve an RSA key  \n  \nHowever, hooking all these functions is not a simple and straightforward task\nfor the backdoor. It involves accessing many internal structures and\nmanipulating process-specific structures until it achieves its goal, and it\nalso needs to be as stealthy as possible, which means that the malicious code\ncontains multiple checks to avoid being analyzed.\n\n### Execution environment check\n\nIt first parses ld-linux (dynamic linker), which is primarily responsible for\ndynamically resolving symbol addresses in memory. It also extracts various\ninformation about the environment and verifies that the current process the\nbackdoor is running in matches its execution criteria, which are:\n\n  * The current process is /usr/bin/sshd\n  * Check if the kill switch is present\n\nIt extracts the name of the current process from argv[0] and also parses all\nthe process environment variables to see if any of them are present in its\ninternal string table. If a match is found, or the process is not sshd, the\nmalware halts its execution.\n\nProcess environment check\n\nThe only variable inside its own table is yolAbejyiejuvnup=Evjtgvsh5okmkAvj,\nwhich in this context serves as a kill switch.\n\n### The trie structure\n\nOne of the distinctive features of the backdoor is the use of a single trie\nstructure for string operations. Instead of directly comparing strings or\nusing string hashes to match a particular constant (for example, the name of a\nlibrary function), the code performs a trie lookup, and checks if the result\nis equal to a certain constant number. For example, the magic value for the\nELF header results in the trie returning 0x300, and the name of the system\nfunction is matched with a return value of 0x9F8. Trie is not just used for\ncomparisons: certain functions that use pointers to strings (for example,\nssh-2.0) search for these strings in the host binary using the trie, so there\nwill be no suspicious data in the backdoor\u2019s body.\n\nThe implementation of the trie uses 16-byte bitmasks, each half corresponding\nto the byte input ranges 0x00-0x3F and 0x40-0x7F, and 2-byte trie leaf nodes,\n3 bits of which are flags (direction, termination) and the rest is reserved\nfor the value (or the location of the next node).\n\nPart of the trie lookup function that performs the bitmap match\n\n### Symbol resolver\n\nThere are at least three symbol resolver-related routines used by the backdoor\nto locate the ELF Symbol structure, which holds information such as the symbol\nname and its offset. All symbol resolver functions receive a key to be\nsearched in the trie.\n\nSymbol resolver example\n\nOne of the backdoor resolver functions iterates through all symbols and\nverifies which one has the desired key. If it is found, it returns the\nElf64_Sym structure, which will later be used to populate an internal\nstructure of the backdoor that holds all the necessary function pointers. This\nprocess is similar to that commonly seen in Windows threats with API hashing\nroutines.\n\nThe backdoor searches many functions from the libcrypto (OpenSSL) library, as\nthese will be used in later encryption routines. It also keeps track of how\nmany functions it was able to find and resolve; this determines whether it is\nexecuting properly or should stop.\n\nAnother interesting symbol resolver abuses the lzma_alloc function, which is\npart of the liblzma library itself. This function serves as a helper for\ndevelopers to allocate memory efficiently using the default allocator (malloc)\nor a custom one. In the case of the XZ backdoor, this function is abused to\nmake use of a fake allocator. In reality, it functions as another symbol\nresolver. The parameter intended for \u201callocation size\u201d is, in fact, the symbol\nkey inside the trie. This trick is meant to complicate backdoor analysis.\n\nSymbol resolver using a fake allocator structure\n\nThe backdoor dynamically resolves its symbols while executing; it doesn\u2019t\nnecessarily do so all at once or only when it needs to use them. The resolved\nsymbols/functions range from legitimate OpenSSL functions to functions such as\nsystem, which is used to execute commands on the machine.\n\n### The Symbind hook\n\nAs mentioned earlier, the primary objective of the backdoor initialization is\nto successfully hook functions. To do so, the backdoor makes use of rtdl-\naudit, a feature of the dynamic linker that enables the creation of custom\nshared libraries to be notified when certain events occur within the linker,\nsuch as symbol resolution. In a typical scenario, a developer would create a\nshared library following the rtdl-audit manual. However, the XZ backdoor opts\nto perform a runtime patch on the already registered (default) interfaces\nloaded in memory, thereby hijacking the symbol-resolving routine.\n\ndl-audit runtime patch\n\nThe maliciously crafted structure audit_iface, stored in the dl_audit global\nvariable within the dynamic linker\u2019s memory area, contains the symbind64\ncallback address, which is invoked by the dynamic linker. It sends all the\nsymbol information to the backdoor control, which is then used to obtain a\nmalicious address for the target functions, thus achieving hooking.\n\nHooking placement inside the Symbind modified callback\n\nThe addresses for dl_audit and dl_naudit, which holds the number of audit\ninterfaces available, are obtained by disassembling both the dl_main and\ndl_audit_symbind_alt functions. The backdoor contains an internal minimalistic\ndisassembler used for instruction decoding. It makes extensive use of it,\nespecially when hunting for specific values like the *audit addresses.\n\ndl_naudit hunting code\n\nThe dl_naudit address is found by one of the mov instructions within the\ndl_main function code that accesses it. With that information, the backdoor\nhunts for access to a memory address and saves it.\n\nIt also verifies if the memory address acquired is the same address as the one\naccessed by the dl_audit_symbind_alt function on a given offset. This allows\nit to safely assume that it has indeed found the correct address. After it\nfinds the dl_naudit address, it can easily calculate where dl_audit is, since\nthe two are stored next to each other in memory.\n\n## Conclusion\n\nIn this article, we covered the entire process of backdooring liblzma (XZ),\nand delved into a detailed analysis of the binary backdoor code, up to\nachieving its principal goal: hooking.\n\nIt\u2019s evident that this backdoor is highly complex and employs sophisticated\nmethods to evade detection. These include the multi-stage implantation in the\nXZ repository, as well as the complex code contained within the binary itself.\n\nThere is still much more to explore about the backdoor\u2019s internals, which is\nwhy we have decided to present this as Part I of the XZ backdoor series.\n\nKaspersky products detect malicious objects related to the attack as\nHEUR:Trojan.Script.XZ and Trojan.Shell.XZ. In addition, Kaspersky Endpoint\nSecurity for Linux detects malicious code in SSHD process memory as\nMEM:Trojan.Linux.XZ (as part of the Critical Areas Scan task).\n\n## Indicators of compromise\n\n### Yara rules\n\n123456789| rule liblzma_get_cpuid_function {meta:description = \"Rule to find\nthe malicious get_cpuid function CVE-2024-3094\"author = \"Kaspersky\nLab\"strings:$a = { F3 0F 1E FA 55 48 89 F5 4C 89 CE 53 89 FB 81 E7 00 00 00 80\n48 83 EC 28 48 89 54 24 18 48 89 4C 24 10 4C 89 44 24 08 E8 ?? ?? ?? ?? 85 C0\n74 27 39 D8 72 23 4C 8B 44 24 08 48 8B 4C 24 10 45 31 C9 48 89 EE 48 8B 54 24\n18 89 DF E8 ?? ?? ?? ?? B8 01 00 00 00 EB 02 31 C0 48 83 C4 28 5B 5D C3\n}condition:$a}  \n---|---  \n  \n### Known backdoored libraries\n\nDebian Sid liblzma.so.5.6.0 4f0cf1d2a2d44b75079b3ea5ed28fe54\n72e8163734d586b6360b24167a3aff2a3c961efb\n319feb5a9cddd81955d915b5632b4a5f8f9080281fb46e2f6d69d53f693c23ae\n\nDebian Sid liblzma.so.5.6.1 53d82bb511b71a5d4794cf2d8a2072c1\n8a75968834fc11ba774d7bbdc566d272ff45476c\n605861f833fc181c7cdcabd5577ddb8989bea332648a8f498b4eef89b8f85ad4\n\nRelated files d302c6cb2fa1c03c710fa5285651530f, liblzma.so.5\n4f0cf1d2a2d44b75079b3ea5ed28fe54, liblzma.so.5.6.0\n153df9727a2729879a26c1995007ffbc, liblzma.so.5.6.0.patch\n53d82bb511b71a5d4794cf2d8a2072c1, liblzma.so.5.6.1\n212ffa0b24bb7d749532425a46764433, liblzma_la-crc64-fast.o\n\nAnalyzed artefacts 35028f4b5c6673d6f2e1a80f02944fb2, bad-3-corrupt_lzma2.xz\nb4dd2661a7c69e85f19216a6dbbb1664, build-to-host.m4\n540c665dfcd4e5cfba5b72b4787fec4f, good-large_compressed.lzma\n\n  * Backdoor\n  * Cyber espionage\n  * Linux\n  * Malware\n  * Malware Descriptions\n  * Malware Technologies\n  * SSH\n  * XZ\n\nAuthors\n\n  * GReAT\n\nXZ backdoor story \u2013 Initial analysis\n\nTable of Contents\n\n  * The timeline of events\n  * Backdoored source distributions\n  * Initial infection analysis\n    * Stage 1 \u2013 The modified build-to-host script\n    * Stage 2 \u2013 The injected shell script\n    * Stage 3 \u2013 Backdoor extraction\n  * Binary backdoor analysis\n    * A stealth loading scenario\n    * Backdoor code analysis\n    * Core behavior\n    * Execution environment check\n    * The trie structure\n    * Symbol resolver\n    * The Symbind hook\n  * Conclusion\n  * Indicators of compromise\n    * Yara rules\n    * Known backdoored libraries\n\nGReAT webinars\n\n13 May 2021, 1:00pm\n\n### GReAT Ideas. Balalaika Edition\n\n  * Boris Larin\n  * Denis Legezo\n\n26 Feb 2021, 12:00pm\n\n### GReAT Ideas. Green Tea Edition\n\n  * John Hultquist\n  * Brian Bartholomew\n  * Suguru Ishimaru\n  * Vitaly Kamluk\n  * Seongsu Park\n  * Yusuke Niwa\n  * Motohiko Sato\n\n17 Jun 2020, 1:00pm\n\n### GReAT Ideas. Powered by SAS: malware attribution and next-gen IoT\nhoneypots\n\n  * Marco Preuss\n  * Denis Legezo\n  * Costin Raiu\n  * Kurt Baumgartner\n  * Dan Demeter\n  * Yaroslav Shmelev\n\n26 Aug 2020, 2:00pm\n\n### GReAT Ideas. Powered by SAS: threat actors advance on new fronts\n\n  * Ivan Kwiatkowski\n  * Maher Yamout\n  * Noushin Shabab\n  * Pierre Delcher\n  * F\u00e9lix Aime\n  * Giampaolo Dedola\n  * Santiago Pontiroli\n\n22 Jul 2020, 2:00pm\n\n### GReAT Ideas. Powered by SAS: threat hunting and new techniques\n\n  * Dmitry Bestuzhev\n  * Costin Raiu\n  * Pierre Delcher\n  * Brian Bartholomew\n  * Boris Larin\n  * Ariel Jungheit\n  * Fabio Assolini\n\nFrom the same authors\n\n### Android malware, Android malware and more Android malware\n\n### Coyote: A multi-stage banking Trojan abusing the Squirrel installer\n\n### FakeSG campaign, Akira ransomware and AMOS macOS stealer\n\n### Advanced threat predictions for 2024\n\n### Stealer for PIX payment system, new Lumar stealer and Rhysida ransomware\n\n##### Subscribe to our weekly e-mails\n\nThe hottest research right in your inbox\n\nIn the same category\n\n### A hack in hand is worth two in the bush\n\n### QBot banker delivered through business correspondence\n\n### Not just an infostealer: Gopuram backdoor deployed through 3CX supply\nchain attack\n\n### CVE-2022-41040 and CVE-2022-41082 \u2013 zero-days in MS Exchange\n\n### Ongoing exploitation of CVE-2022-41352 (Zimbra 0-day)\n\n##### Latest Posts\n\nMalware reports\n\n### Android malware, Android malware and more Android malware\n\n  * GReAT\n\nSOC, TI and IR posts\n\n### A patched Windows attack surface is still exploitable\n\n  * Elsayed Elrefaei\n  * Ashraf Refaat\n  * Kaspersky GERT\n\nMalware descriptions\n\n### What\u2019s in your notepad? Infected text editors target Chinese users\n\n  * Sergey Puzan\n\nPublications\n\n### The State of Stalkerware in 2023\u20132024\n\n  * Kaspersky\n\n##### Latest Webinars\n\nTechnologies and services\n\n11 Dec 2023, 4:00pm 60 min\n\n### The Future of AI in cybersecurity: what to expect in 2024\n\n  * Vladimir Dashchenko\n  * Victor Sergeev\n  * Vladislav Tushkanov\n  * Dennis Kipker\n\nThreat intelligence and IR\n\n30 Nov 2023, 4:00pm 70 min\n\n### Responding to a data breach: a step-by-step guide\n\n  * Anna Pavlovskaya\n\nCyberthreat talks\n\n14 Nov 2023, 4:00pm 60 min\n\n### 2024 Advanced persistent threat predictions\n\n  * Igor Kuznetsov\n  * David Emm\n  * Marc Rivero\n  * Dan Demeter\n  * Sherif Magdy\n\nCyberthreat talks\n\n09 Nov 2023, 5:00pm 60 min\n\n### Overview of modern car compromise techniques and methods of protection\n\n  * Alexander Kozlov\n  * Sergey Anufrienko\n\n##### Reports\n\n### HrServ \u2013 Previously unknown web shell used in APT attack\n\nIn this report Kaspersky researchers provide an analysis of the previously\nunknown HrServ web shell, which exhibits both APT and crimeware features and\nhas likely been active since 2021.\n\n### Modern Asian APT groups\u2019 tactics, techniques and procedures (TTPs)\n\nAsian APT groups target various organizations from a multitude of regions and\nindustries. We created this report to provide the cybersecurity community with\nthe best-prepared intelligence data to effectively counteract Asian APT\ngroups.\n\n### A cascade of compromise: unveiling Lazarus\u2019 new campaign\n\nWe unveil a Lazarus campaign exploiting security company products and examine\nits intricate connections with other campaigns\n\n### How to catch a wild triangle\n\nHow Kaspersky researchers obtained all stages of the Operation Triangulation\ncampaign targeting iPhones and iPads, including zero-day exploits, validators,\nTriangleDB implant and additional modules.\n\n##### Subscribe to our weekly e-mails\n\nThe hottest research right in your inbox\n\nThreats\n\nThreats\n\n  * APT (Targeted attacks)\n  * Secure environment (IoT)\n  * Mobile threats\n  * Financial threats\n  * Spam and phishing\n  * Industrial threats\n  * Web threats\n  * Vulnerabilities and exploits\n\nCategories\n\nCategories\n\n  * APT reports\n  * Malware descriptions\n  * Security Bulletin\n  * Malware reports\n  * Spam and phishing reports\n  * Security technologies\n  * Research\n  * Publications\n\nOther sections\n\n  * Archive\n  * All tags\n  * Webinars\n  * APT Logbook\n  * Statistics\n  * Encyclopedia\n  * Threats descriptions\n  * KSB 2023\n\n\u00a9 2024 AO Kaspersky Lab. All Rights Reserved. Registered trademarks and\nservice marks are the property of their respective owners.\n\n  * Privacy Policy\n  * License Agreement\n  * Cookies\n\n##### Subscribe to our weekly e-mails\n\nThe hottest research right in your inbox\n\nNotifications\n\n", "frontpage": true}
