{"aid": "40007971", "title": "ble.sh: Revolutionize the BASH user experience", "url": "https://github.com/akinomyoga/ble.sh", "domain": "github.com/akinomyoga", "votes": 1, "user": "metadat", "posted_at": "2024-04-11 23:39:26", "comments": 0, "source_title": "GitHub - akinomyoga/ble.sh: Bash Line Editor\u2015a line editor written in pure Bash with syntax highlighting, auto suggestions, vim modes, etc. for Bash interactive sessions.", "source_text": "GitHub - akinomyoga/ble.sh: Bash Line Editor\u2015a line editor written in pure\nBash with syntax highlighting, auto suggestions, vim modes, etc. for Bash\ninteractive sessions.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nakinomyoga / ble.sh Public\n\n  * Sponsor\n  * Notifications\n  * Fork 73\n  * Star 2k\n\nBash Line Editor\u2015a line editor written in pure Bash with syntax highlighting,\nauto suggestions, vim modes, etc. for Bash interactive sessions.\n\n### License\n\nBSD-3-Clause license\n\n2k stars 73 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# akinomyoga/ble.sh\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n6 Branches\n\n40 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nJaredNeildocs: fix bashrc instructions in blerc template (#428)adf9ab8 \u00b7\n\n## History\n\n2,101 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| github: update versions of GitHub Actions  \n  \n### archive\n\n|\n\n### archive\n\n| highlight: generalize \"region\" layer  \n  \n### contrib @ 852eece\n\n|\n\n### contrib @ 852eece\n\n| histdb: add subcommands  \n  \n### docs\n\n|\n\n### docs\n\n| edit: support \"bleopt edit_magic_{expand,accept}=autocd\"  \n  \n### lib\n\n|\n\n### lib\n\n| edit: support \"bleopt edit_magic_{expand,accept}=autocd\"  \n  \n### make\n\n|\n\n### make\n\n| global(leakvar): fix variable leak  \n  \n### memo\n\n|\n\n### memo\n\n| README: extend description of fzf integration and disabling features  \n  \n### src\n\n|\n\n### src\n\n| edit: support \"bleopt edit_magic_{expand,accept}=autocd\"  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| README: extend description of fzf integration and disabling features  \n  \n### .gitmodules\n\n|\n\n### .gitmodules\n\n| support \"contrib\"  \n  \n### .srcoption\n\n|\n\n### .srcoption\n\n| menu-complete: support \"bleopt complete_menu_complete_opts\"  \n  \n### GNUmakefile\n\n|\n\n### GNUmakefile\n\n| decode, vi_digraph: trim CR of text resources in MSYS  \n  \n### LICENSE.md\n\n|\n\n### LICENSE.md\n\n| chore: finalize 0.4.0-devel3  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Makefile: add fallback Makefile for BSD make  \n  \n### README-ja_JP.md\n\n|\n\n### README-ja_JP.md\n\n| term: adjust \"tput clear\" for ncurses >= 6.1  \n  \n### README.md\n\n|\n\n### README.md\n\n| term: adjust \"tput clear\" for ncurses >= 6.1  \n  \n### ble.pp\n\n|\n\n### ble.pp\n\n| main: record external file descriptors on \"ble-attach\"  \n  \n### blerc.template\n\n|\n\n### blerc.template\n\n| docs: fix bashrc instructions in blerc template (#428)  \n  \n### make_command.sh\n\n|\n\n### make_command.sh\n\n| histdb: add subcommands  \n  \n### note.txt\n\n|\n\n### note.txt\n\n| edit: support \"bleopt edit_magic_{expand,accept}=autocd\"  \n  \n## Repository files navigation\n\n[ Languages: English | \u65e5\u672c\u8a9e (Japanese) ]\n\n# ble.sh (/bl\u025b\u0283/) \u2015Bash Line Editor\u2015\n\n[ README | Manual | Q&A | contrib | Recipes ]\n\nBash Line Editor (ble.sh) is a command line editor written in pure Bash which\nreplaces the default GNU Readline.\n\nThe current devel version is 0.4. This script supports Bash 3.0 or higher\nalthough we recommend using ble.sh with release versions of Bash 4.0 or\nhigher. Currently, only UTF-8 encoding is supported for non-ASCII characters.\nThis script is provided under the BSD License (3-clause BSD license).\n\nDisclaimer: The core part of the line editor is written in pure Bash, but\nble.sh relies on POSIX stty to set up TTY states before and after the\nexecution of user commands. It also uses other POSIX utilities for\nacceleration in some parts of initialization and cleanup code, processing of\nlarge data in completions, pasting large data, etc.\n\nPronunciation: The easiest pronunciation of ble.sh that users use is /bl\u025b\u0283/,\nbut you can pronounce it as you like. I do not specify the canonical way of\npronouncing ble.sh. In fact, I personally call it simply /bi\u02d0\u025bli\u02d0/ or\nverbosely read it as /bi\u02d0\u025bli\u02d0 d\u0251t \u025bse\u026at\u0283/ in my head.\n\n## Quick instructions\n\nTo use ble.sh, Bash 3.0+ and POSIX standard utilities are required.\n\nThere are two ways to get ble.sh: to download and build ble.sh using git, or\nto download the nightly build using curl or wget. For the detailed\ndescriptions, see Sec 1.1 and Sec 1.2 for trial/installation, and Sec 1.3 for\nthe setup of your ~/.bashrc.\n\nNote\n\nIf you want to use fzf with ble.sh, you need to check Sec 2.8.\n\n## Features\n\n  * Syntax highlighting: Highlight command lines input by users as in fish and zsh-syntax-highlighting. Unlike the simple highlighting in zsh-syntax-highlighting, ble.sh performs syntactic analysis to enable the correct highlighting of complex structures such as nested command substitutions, multiple here documents, etc. Highlighting colors and styles are fully configurable.\n  * Enhanced completion: Extend completion by syntax-aware completion, completion with quotes and parameter expansions in prefix texts, ambiguous candidate generation, etc. Also, menu-complete supports the selection of candidates in the menu (candidate list) by cursor keys, TAB, and S-TAB. The feature auto-complete supports the automatic suggestion of completed texts as in fish and zsh-autosuggestions (with Bash 4.0+). The feature menu-filter integrates automatic filtering of candidates into menu completion (with Bash 4.0+). There are other functionalities such as dabbrev and sabbrev like zsh abbreviations or zsh-abbr.\n  * Vim editing mode: Enhance readline's vi editing mode available with set -o vi. Vim editing mode supports various vim modes such as char/line/block visual/select mode, replace mode, command mode, operator pending mode as well as insert mode and normal mode. Vim editing mode supports various operators, text objects, registers, keyboard macros, marks, etc. It also provides vim-surround as an option.\n  * Other interesting features include status line, history share, right prompt, transient prompt, xterm title, etc.\n\nNote: ble.sh does not provide specific settings of the prompt, aliases,\nfunctions, etc. ble.sh provides a more fundamental infrastructure so that\nusers can set up their own prompt, aliases, functions, etc. Of course ble.sh\ncan be used in combination with other Bash configurations such as bash-it and\noh-my-bash.\n\n> Demo (version 0.2)\n\n## History and roadmap\n\nMy little experiment took place in one corner of my bashrc at the end of May\n2013 after I enjoyed an article on zsh-syntax-highlighting. I initially\nthought something could be achieved by writing a few hundred lines of code but\nsoon realized that everything needs to be re-implemented for the authentic\nsupport of syntax highlighting in Bash. I decided to make it as an independent\nscript ble.sh. The name stemmed from that of Zsh's line editor, ZLE (Zsh Line\nEditor), but suffixed with .sh for the implication of being written in a shell\nscript. I'm occasionally asked about the pronunciation of ble.sh, but you can\npronounce it as you like. After the two-week experiment, I was satisfied with\nmy conclusion that it is possible to implement a full-featured line editor in\nBash that satisfies the actual daily uses. The real efforts to improve the\nprototype implementation for real uses started in February 2015. I released\nthe initial version in the next December. Until then, the basic part of the\nline editor was completed. The implementation of vim mode was started in\nSeptember 2017 and completed in the next March. I started working on the\nenhancement of the completion in August 2018 and released it in the next\nFebruary.\n\n  * 2013-06 v0.0 -- prototype\n  * 2015-12 v0.1 -- Syntax highlighting [v0.1.15]\n  * 2018-03 v0.2 -- Vim mode [v0.2.7]\n  * 2019-02 v0.3 -- Enhanced completion [v0.3.4]\n  * 20xx-xx v0.4 (plan) -- programmable highlighting [nightly build]\n  * 20xx-xx v0.5 (plan) -- TUI configuration\n  * 20xx-xx v0.6 (plan) -- error diagnostics?\n\n## Limitations\n\nThere are some limitations due to the way ble.sh is implemented. Also, some\nuser configurations or other Bash frameworks may conflict with ble.sh. For\nexample,\n\n  * ble.sh does not set PIPESTATUS for the previous command line by default because it adds extra execution costs. Instead, the array BLE_PIPESTATUS contains the values of PIPESTATUS of the previous command line. If you need to access the values directly through the variable PIPESTATUS, please use the option bleopt exec_restore_pipestatus=1.\n  * ble.sh assumes that common variable names and environment variables (such as LC_*) are not used for the global readonly variables. In Bash, global readonly variables take effect in any scope including the local scope of the function, which means that we cannot even define a local variable that has the same name as a global readonly variable. This is not the problem specific to ble.sh, but any Bash framework may suffer from the global readonly variables. It is generally not recommended to define global readonly variables in Bash except for the security reasoning (Refs. [1], [2], [3]). Also, ble.sh overrides the builtin readonly with a shell function to prevent it from making global variables readonly. It allows only uppercase global variables and _* to become readonly except _ble_*, __ble_*, and some special uppercase variables.\n  * ble.sh overrides Bash's built-in commands (trap, readonly, bind, history, read, and exit) with shell functions to adjust the behavior of each built-in command and prevent them from interfering with ble.sh. If the user or another framework directly calls the original builtins through builtin BUILTIN, or if the user or another framework replaces the shell functions, the behavior is undefined.\n  * The shell and terminal settings for the line editor and the command execution are different. ble.sh adjusts them for the line editor and try to restore the settigns for the command execution. However, there are settings that cannot be restored or are intentionally not restored for various reasons. Some of them are summarlized on a wiki page.\n\n# 1 Usage\n\n## 1.1 Try ble.sh generated from source (version ble-0.4 devel)^\u2020\n\n### Generate\n\nTo generate ble.sh, gawk (GNU awk) and gmake (GNU make) (in addition to Bash\nand POSIX standard utilities) are required. The file ble.sh can be generated\nusing the following commands. If you have GNU make installed on gmake, please\nuse gmake instead of make.\n\n    \n    \n    git clone --recursive https://github.com/akinomyoga/ble.sh.git cd ble.sh make\n\nA script file ble.sh will be generated in the directory ble.sh/out.\n\n### Try\n\nThen, you can load ble.sh in the Bash session using the source command:\n\n    \n    \n    source out/ble.sh\n\n### Install\n\nTo install ble.sh in a specified directory, use make install.\n\n    \n    \n    # INSTALL to ~/.local/share/blesh make install # INSTALL to a specified directory make install INSDIR=/path/to/blesh # PACKAGE (for package maintainers) make install DESTDIR=/tmp/blesh-package PREFIX=/usr/local\n\nIf either the make variables DESTDIR or PREFIX is supplied, ble.sh will be\ncopied to $DESTDIR/$PREFIX/share/blesh. Otherwise, if the make variables\nINSDIR is specified, it will be installed directly on $INSDIR. Otherwise, if\nthe environment variable $XDG_DATA_HOME is defined, the install location will\nbe $XDG_DATA_HOME/blesh. If none of these variables are specified, the default\ninstall location is ~/.local/share/blesh.\n\nThe comment lines and blank lines in the script files are stripped in the\ninstallation process. If you would like to keep these lines in the script\nfiles, please specify the argument strip_comment=no to make.\n\nTo set up .bashrc see Sec. 1.3.\n\n## 1.2 Or, use a tar ball of ble.sh obtained from GitHub releases^\u2020\n\nFor download, trial and install, see the description at each release page. The\nstable versions are significantly old compared to the devel version, so many\nfeatures are unavailable.\n\n  * Devel v0.4.0-devel3 (2020-12), nightly build\n  * Stable v0.3.4 (2019-02 fork) Enhanced completions\n  * Stable v0.2.7 (2018-03 fork) Vim mode\n  * Stable v0.1.15 (2015-12 fork) Syntax highlighting\n\n## 1.3 Set up .bashrc^\u2020\n\nIf you want to load ble.sh in interactive sessions of bash by default, usually\none can just source ble.sh in ~/.bashrc, but a more reliable way is to add the\nfollowing codes to your .bashrc file:\n\n    \n    \n    # bashrc # Add this lines at the top of .bashrc: [[ $- == *i* ]] && source /path/to/blesh/ble.sh --noattach # your bashrc settings come here... # Add this line at the end of .bashrc: [[ ${BLE_VERSION-} ]] && ble-attach\n\nBasically, when source /path/to/ble.sh and ble-attach are performed, standard\nstreams (stdin, stdout, and stderr) should not be redirected but should be\nconnected to the controlling TTY of the current session. Also, please avoid\ncalling source /path/to/ble.sh in shell functions. The detailed conditions\nwhere the above more reliable setup is needed are explained in an answer in\nDiscussion #254.\n\n## 1.4 User settings ~/.blerc\n\nUser settings can be placed in the init script ~/.blerc (or\n${XDG_CONFIG_HOME:-$HOME/.config}/blesh/init.sh if ~/.blerc is not available)\nwhose template is available as the file blerc.template in the repository. The\ninit script is a Bash script that is sourced during the load of ble.sh, so any\nshell commands can be used in ~/.blerc. If you want to change the default path\nof the init script, you can add the option --rcfile INITFILE to source ble.sh\nas the following example:\n\n    \n    \n    # in bashrc # Example 1: ~/.blerc will be used by default [[ $- == *i* ]] && source /path/to/blesh/ble.sh --noattach # Example 2: /path/to/your/blerc will be used [[ $- == *i* ]] && source /path/to/blesh/ble.sh --noattach --rcfile /path/to/your/blerc\n\n## 1.5 Update\n\nYou need Git (git), GNU awk (gawk) and GNU make (make). For ble-0.3+, you can\nrun ble-update in the session with ble.sh loaded:\n\n    \n    \n    $ ble-update\n\nFor ble.0.4+, you can also update it outside the ble.sh session using\n\n    \n    \n    $ bash /path/to/ble.sh --update\n\nYou can instead download the latest version by git pull and install it:\n\n    \n    \n    cd ble.sh # <-- enter the git repository you already have git pull git submodule update --recursive --remote make make INSDIR=\"$HOME/.local/share/blesh\" install\n\n## 1.6 Uninstall\n\nBasically you can simply delete the installed directory and the settings that\nthe user added.\n\n  * Close all the ble.sh sessions (the Bash interactive sessions with ble.sh)\n  * Remove related user data. If you would like to keep them, you can skip these steps.\n\n    * Remove the added lines in .bashrc.\n    * Remove blerc files (~/.blerc or ~/.config/blesh/init.sh) if any.\n    * Remove the state directory ~/.local/state/blesh if any.\n  * Remove the directory where ble.sh is installed. When you use out/ble.sh inside the working tree of the git repository, the installed directory is the directory of the repository. When you use ble.sh installed by make install, the installed directory is <PREFIX>/share/blesh where <PREFIX> (default: ~/.local) is the prefix specified to make install in the installation stage. When you use the version extracted from a tarball, the directory created by extracting the tarball is the installed directory.\n  * Remove the cache directory ~/.cache/blesh if any.\n  * Remove the temporary directory /tmp/blesh if any [ Only needed when your system does not automatically clear /tmp ].\n\n# 2 Basic settings\n\nHere, some of the settings for ~/.blerc are picked up. You can find useful\nsettings also in Q&A, Recipes, and contrib repository. The complete list of\nsetting items can be found in the file blerc.template. For detailed\nexplanations please refer to Manual.\n\n## 2.1 Vim mode\n\nFor the vi/vim mode, check the wiki page.\n\n## 2.2 Disable features\n\nOne of frequently asked questions is the way to disable a specific feature\nthat ble.sh adds. Here the settings for disabling features are summarized.\n\n    \n    \n    # Disable syntax highlighting bleopt highlight_syntax= # Disable highlighting based on filenames bleopt highlight_filename= # Disable highlighting based on variable types bleopt highlight_variable= # Disable auto-complete (Note: auto-complete is enabled by default in bash-4.0+) bleopt complete_auto_complete= # Tip: you may instead specify the delay of auto-complete in millisecond bleopt complete_auto_delay=300 # Disable auto-complete based on the command history bleopt complete_auto_history= # Disable ambiguous completion bleopt complete_ambiguous= # Disable menu-complete by TAB bleopt complete_menu_complete= # Disable menu filtering (Note: auto-complete is enabled by default in bash-4.0+) bleopt complete_menu_filter= # Disable EOF marker like \"[ble: EOF]\" bleopt prompt_eol_mark='' # Tip: you may instead specify another string: bleopt prompt_eol_mark='\u23ce' # Disable error exit marker like \"[ble: exit %d]\" bleopt exec_errexit_mark= # Tip: you may instead specify another string: bleopt exec_errexit_mark=$'\\e[91m[error %d]\\e[m' # Disable elapsed-time marker like \"[ble: elapsed 1.203s (CPU 0.4%)]\" bleopt exec_elapsed_mark= # Tip: you may instead specify another string bleopt exec_elapsed_mark=$'\\e[94m[%ss (%s %%)]\\e[m' # Tip: you may instead change the threshold of showing the mark bleopt exec_elapsed_enabled='sys+usr>=10*60*1000' # e.g. ten minutes for total CPU usage # Disable exit marker like \"[ble: exit]\" bleopt exec_exit_mark= # Disable some other markers like \"[ble: ...]\" bleopt edit_marker= bleopt edit_marker_error=\n\n## 2.3 CJK Width\n\nThe option char_width_mode controls the width of the Unicode characters with\nEast_Asian_Width=A (Ambiguous characters). Currently, four values emacs, west,\neast, and auto are supported. With the value emacs, the default width in emacs\nis used. With west, all the ambiguous characters have width 1 (Hankaku). With\neast, all the ambiguous characters have width 2 (Zenkaku). With auto, the\nwidth mode west or east is automatically chosen based on the terminal\nbehavior. The default value is auto. The appropriate value should be chosen in\naccordance with your terminal behavior. For example, the value can be changed\nto west as:\n\n    \n    \n    bleopt char_width_mode='west'\n\n## 2.4 Input Encoding\n\nThe option input_encoding controls the encoding scheme used in the decode of\ninput. Currently UTF-8 and C are available. With the value C, byte values are\ndirectly interpreted as character codes. The default value is UTF-8. For\nexample, the value can be changed to C as:\n\n    \n    \n    bleopt input_encoding='C'\n\n## 2.5 Bell\n\nThe options edit_abell and edit_vbell control the behavior of the edit\nfunction bell. If edit_abell is a non-empty string, the audible bell is\nenabled, i.e. ASCII Control Character BEL (0x07) will be written to stderr. If\nedit_vbell is a non-empty string, the visual bell is enabled. By default, the\naudible bell is enabled while the visual bell is disabled.\n\nThe option vbell_default_message specifies the message shown as the visual\nbell. The default value is ' Wuff, -- Wuff!! '. The option vbell_duration\nspecifies the display duration of the visual-bell message. The unit is a\nmillisecond. The default value is 2000.\n\nFor example, the visual bell can be enabled as:\n\n    \n    \n    bleopt edit_vbell=1 vbell_default_message=' BEL ' vbell_duration=3000\n\nFor another instance, the audible bell is disabled as:\n\n    \n    \n    bleopt edit_abell=\n\n## 2.6 Highlight Colors\n\nThe colors and attributes used in the syntax highlighting are controlled by\nthe function ble-face. The following code reproduces the default\nconfiguration:\n\n    \n    \n    # highlighting related to editing ble-face -s region bg=60,fg=white ble-face -s region_target bg=153,fg=black ble-face -s region_match bg=55,fg=white ble-face -s region_insert fg=12,bg=252 ble-face -s disabled fg=242 ble-face -s overwrite_mode fg=black,bg=51 ble-face -s auto_complete fg=238,bg=254 ble-face -s menu_filter_fixed bold ble-face -s menu_filter_input fg=16,bg=229 ble-face -s vbell reverse ble-face -s vbell_erase bg=252 ble-face -s vbell_flash fg=green,reverse ble-face -s prompt_status_line fg=231,bg=240 # syntax highlighting ble-face -s syntax_default none ble-face -s syntax_command fg=brown ble-face -s syntax_quoted fg=green ble-face -s syntax_quotation fg=green,bold ble-face -s syntax_escape fg=magenta ble-face -s syntax_expr fg=26 ble-face -s syntax_error bg=203,fg=231 ble-face -s syntax_varname fg=202 ble-face -s syntax_delimiter bold ble-face -s syntax_param_expansion fg=purple ble-face -s syntax_history_expansion bg=94,fg=231 ble-face -s syntax_function_name fg=92,bold ble-face -s syntax_comment fg=242 ble-face -s syntax_glob fg=198,bold ble-face -s syntax_brace fg=37,bold ble-face -s syntax_tilde fg=navy,bold ble-face -s syntax_document fg=94 ble-face -s syntax_document_begin fg=94,bold ble-face -s command_builtin_dot fg=red,bold ble-face -s command_builtin fg=red ble-face -s command_alias fg=teal ble-face -s command_function fg=92 ble-face -s command_file fg=green ble-face -s command_keyword fg=blue ble-face -s command_jobs fg=red ble-face -s command_directory fg=26,underline ble-face -s filename_directory underline,fg=26 ble-face -s filename_directory_sticky underline,fg=white,bg=26 ble-face -s filename_link underline,fg=teal ble-face -s filename_orphan underline,fg=teal,bg=224 ble-face -s filename_executable underline,fg=green ble-face -s filename_setuid underline,fg=black,bg=220 ble-face -s filename_setgid underline,fg=black,bg=191 ble-face -s filename_other underline ble-face -s filename_socket underline,fg=cyan,bg=black ble-face -s filename_pipe underline,fg=lime,bg=black ble-face -s filename_character underline,fg=white,bg=black ble-face -s filename_block underline,fg=yellow,bg=black ble-face -s filename_warning underline,fg=red ble-face -s filename_url underline,fg=blue ble-face -s filename_ls_colors underline ble-face -s varname_array fg=orange,bold ble-face -s varname_empty fg=31 ble-face -s varname_export fg=200,bold ble-face -s varname_expr fg=92,bold ble-face -s varname_hash fg=70,bold ble-face -s varname_number fg=64 ble-face -s varname_readonly fg=200 ble-face -s varname_transform fg=29,bold ble-face -s varname_unset fg=124 ble-face -s argument_option fg=teal ble-face -s argument_error fg=black,bg=225\n\nThe current list of faces can be obtained by the following command (ble-face\nwithout arguments):\n\n    \n    \n    $ ble-face\n\nThe color codes can be checked in output of the function ble-color-show\n(defined in ble.sh):\n\n    \n    \n    $ ble-color-show\n\n## 2.7 Key Bindings\n\nKey bindings can be controlled with the shell function, ble-bind. For example,\nwith the following setting, \"Hello, world!\" will be inserted on typing C-x h\n\n    \n    \n    ble-bind -f 'C-x h' 'insert-string \"Hello, world!\"'\n\nThe details on the key representation, such as C-x h in the above example, are\ndescribed in Manual \u00a73.1. The representations of Space, Tab, Enter, Backspace,\nEscape, etc. are described in Manual \u00a73.1.1: The space is represented as SP,\nthe tab key is represented as C-i or TAB depending on the terminal, the\nenter/return key is represented as C-m or RET depending on the terminal, and\nthe backspace key is represented as C-?, DEL, C-h, or BS depending on the\nterminal. The representations of modified special keys such as Ctrl+Return and\nShift+Return are described in Manual \u00a73.6.4: If your terminal does not support\nmodifyOtherKeys, you need to manually configure the escape sequences of\nmodified special keys.\n\nFor another example, if you want to invoke a command on typing M-c, you can\nwrite it as follows:\n\n    \n    \n    ble-bind -c 'M-c' 'my-command'\n\nOr, if you want to invoke a edit function (designed for Bash bind -x) on\ntyping C-r, you can write it as follows:\n\n    \n    \n    ble-bind -x 'C-r' 'my-edit-function'\n\nThe existing key bindings are shown by the following command:\n\n    \n    \n    $ ble-bind -P\n\nThe list of widgets is shown by the following command:\n\n    \n    \n    $ ble-bind -L\n\nIf you want to run multiple widgets with a key, you can define your own widget\nby creating a function of the name ble/widget/YOUR_WIDGET_NAME as illustrated\nin the following example. It is highly recommended to prefix the widget name\nwith YOUR_NAME/, my/, blerc/, dotfiles/, etc. in order not to conflict with\nthe names of the existing standard widgets.\n\n    \n    \n    # Example of calling multiple widgets with the key C-t function ble/widget/my/example1 { ble/widget/beginning-of-logical-line ble/widget/insert-string 'echo $(' ble/widget/end-of-logical-line ble/widget/insert-string ')' } ble-bind -f C-t my/example1\n\n## 2.8 fzf integration^\u2020\n\nIf you would like to use fzf in combination with ble.sh, you need to configure\nfzf using the contrib/fzf integration. Please follow the instructions in the\nlink for the detailed description.\n\n    \n    \n    # blerc # Note: If you want to combine fzf-completion with bash_completion, you need to # load bash_completion earilier than fzf-completion. This is required # regardless of whether to use ble.sh or not. source /etc/profile.d/bash_completion.sh ble-import -d integration/fzf-completion ble-import -d integration/fzf-key-bindings\n\nThe option -d of ble-import delays the initialization. In thise way, the fzf\nsettings are loaded in background after the prompt is shown. See ble-import -\nManual \u00a78 for details. If you would like to additionally configure the fzf\nsettings after loading them, there are four options. The easiest way is to\ndrop the -d option (Option 1 below). As another option, you may also delay the\nadditional settings with ble-import -d [2] or ble/util/idle.push [3]. Or, you\ncan hook into the loading of the fzf settings by ble-import -C [4].\n\n    \n    \n    # [1] Drop -d ble-import integration/fzf-completion ble-import integration/fzf-key-bindings <settings> # [2] Use ble-import -d for additional settings ble-import -d integration/fzf-completion ble-import -d integration/fzf-key-bindings ble-import -d '<filename containing the settings>' # [3] Use \"ble/util/idle.push\" for additional settings ble-import -d integration/fzf-completion ble-import -d integration/fzf-key-bindings ble/util/idle.push '<settings>' # [4] Use \"ble-import -C\" for additional settings ble-import -d integration/fzf-completion ble-import -d integration/fzf-key-bindings ble-import -C '<settings>' integration/fzf-key-bindings\n\n# 3 Tips\n\n## 3.1 Use multiline mode\n\nWhen the command line string contains a newline character, ble.sh enters the\nMULTILINE mode.\n\nBy typing C-v C-j or C-q C-j, you can insert a newline character in the\ncommand line string. In the MULTILINE mode, RET (C-m) causes the insertion of\na new newline character. In the MULTILINE mode, the command can be executed by\ntyping C-j.\n\nWhen the shell option shopt -s cmdhist is set (which is the default), RET\n(C-m) inserts a newline if the current command line string is syntactically\nincomplete.\n\n## 3.2 Use vim editing mode\n\nIf set -o vi is specified in .bashrc or set editing-mode vi is specified in\n.inputrc, the vim mode is enabled. For details, please check the wiki page.\n\n## 3.3 Use auto-complete\n\nThe feature auto-complete is available in Bash 4.0 or later. auto-complete\nautomatically suggests a possible completion on user input. The suggested\ncontents can be inserted by typing S-RET (when the cursor is at the end of the\ncommand line, you can also use right, C-f, or end to insert the suggestion).\nIf you want to insert only the first word of the suggested contents, you can\nuse M-right or M-f. If you want to accept the suggestion and immediately run\nthe command, you can use C-RET (if your terminal does not support special key\ncombinations like C-RET, please check Manual \u00a73.6.4).\n\n## 3.4 Use sabbrev (static abbrev expansions)\n\nBy registering words to sabbrev, the words can be expanded to predefined strings. When the cursor is just after a registered word, typing SP causes the sabbrev expansion. For example, with the following settings, when you type SP after the string command L, the command line will be expanded to command | less.\n    \n    \n    # blerc ble-sabbrev L='| less'\n\nThe sabbrev names that start with \\ plus alphabetical letters are also\nrecommended since it is unlikely to conflict with real words that are a part\nof the executed command.\n\n    \n    \n    # blerc ble-sabbrev '\\L'='| less'\n\nThe sabbrevs starting with ~ can be expanded also by /. This can be used to\napproximate Zsh's named directories. For example, with the following settings,\ntyping ~mybin/ expands it to e.g. /home/user/bin/ (where we assumed\nHOME=/home/user).\n\n    \n    \n    # blerc ble-sabbrev \"~mybin=$HOME/bin\"\n\n# 4 Contributors\n\nI received many feedbacks from many people in GitHub Issues/PRs. I thank all\nsuch people for supporting the project. Among them, the following people have\nmade particularly significant contributions.\n\n  * @cmplstofB helped me implement vim-mode by testing it and giving me a lot of suggestions.\n  * @dylankb reported many issues with the fzf integration, initialization, etc.\n  * @rux616 reported several issues and created a PR for fixing the default path of .blerc\n  * @timjrd suggested and contributed to performance improvements in completion.\n  * @3ximus reported many issues for a wide variety of problems.\n  * @SuperSandro2000 reported many issues related to NixOS and others\n\n## About\n\nBash Line Editor\u2015a line editor written in pure Bash with syntax highlighting,\nauto suggestions, vim modes, etc. for Bash interactive sessions.\n\n### Topics\n\nsyntax-highlighting bash auto-complete line-editor vim-mode bash-configuration\nblesh\n\n### Resources\n\nReadme\n\n### License\n\nBSD-3-Clause license\n\nActivity\n\n### Stars\n\n2k stars\n\n### Watchers\n\n24 watching\n\n### Forks\n\n73 forks\n\nReport repository\n\n## Releases 18\n\nDevel 0.4.0-devel3 Latest\n\nApr 3, 2023\n\n\\+ 17 releases\n\n## Sponsor this project\n\nakinomyoga Koichi Murase\n\nSponsor\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Contributors 15\n\n## Languages\n\n  * Shell 95.3%\n  * C++ 1.6%\n  * Awk 1.5%\n  * HTML 0.9%\n  * Makefile 0.3%\n  * C 0.2%\n  * Other 0.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
