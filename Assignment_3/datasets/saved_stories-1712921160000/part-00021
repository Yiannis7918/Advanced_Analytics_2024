{"aid": "40008102", "title": "Kaleidoscope: Implementing a Language with LLVM", "url": "https://llvm.org/docs/tutorial/#kaleidoscope-implementing-a-language-with-llvm", "domain": "llvm.org", "votes": 1, "user": "swatson741", "posted_at": "2024-04-12 00:06:08", "comments": 0, "source_title": "LLVM Tutorial: Table of Contents \u2014 LLVM 19.0.0git documentation", "source_text": "LLVM Tutorial: Table of Contents \u2014 LLVM 19.0.0git documentation\n\n### Navigation\n\n  * index\n  * next |\n  * previous |\n  * LLVM Home |\n  * Documentation\u00bb\n  * Getting Started/Tutorials \u00bb\n  * LLVM Tutorial: Table of Contents\n\n### Documentation\n\n  * Getting Started/Tutorials\n  * User Guides\n  * Reference\n\n### Getting Involved\n\n  * Contributing to LLVM\n  * Submitting Bug Reports\n  * Mailing Lists\n  * IRC\n  * Meetups and Social Events\n\n### Additional Links\n\n  * FAQ\n  * Glossary\n  * Publications\n  * Github Repository\n\n### This Page\n\n  * Show Source\n\n### Quick search\n\n# LLVM Tutorial: Table of Contents\u00b6\n\n## Kaleidoscope: Implementing a Language with LLVM\u00b6\n\nMy First Language Frontend with LLVM Tutorial\n\n    \n\nThis is the \u201cKaleidoscope\u201d Language tutorial, showing how to implement a\nsimple language using LLVM components in C++.\n\n  * 1\\. Kaleidoscope: Kaleidoscope Introduction and the Lexer\n  * 2\\. Kaleidoscope: Implementing a Parser and AST\n  * 3\\. Kaleidoscope: Code generation to LLVM IR\n  * 4\\. Kaleidoscope: Adding JIT and Optimizer Support\n  * 5\\. Kaleidoscope: Extending the Language: Control Flow\n  * 6\\. Kaleidoscope: Extending the Language: User-defined Operators\n  * 7\\. Kaleidoscope: Extending the Language: Mutable Variables\n  * 8\\. Kaleidoscope: Compiling to Object Code\n  * 9\\. Kaleidoscope: Adding Debug Information\n  * 10\\. Kaleidoscope: Conclusion and other useful LLVM tidbits\n\n## Building a JIT in LLVM\u00b6\n\n  * 1\\. Building a JIT: Starting out with KaleidoscopeJIT\n  * 2\\. Building a JIT: Adding Optimizations \u2013 An introduction to ORC Layers\n  * 3\\. Building a JIT: Per-function Lazy Compilation\n  * 4\\. Building a JIT: Extreme Laziness - Using LazyReexports to JIT from ASTs\n\n## External Tutorials\u00b6\n\nTutorial: Creating an LLVM Backend for the Cpu0 Architecture\n\n    \n\nA step-by-step tutorial for developing an LLVM backend. Under active\ndevelopment at https://github.com/Jonathan2251/lbd (please contribute!).\n\nHowto: Implementing LLVM Integrated Assembler\n\n    \n\nA simple guide for how to implement an LLVM integrated assembler for an\narchitecture.\n\n## Advanced Topics\u00b6\n\n  1. Writing an Optimization for LLVM\n\n### Navigation\n\n  * index\n  * next |\n  * previous |\n  * LLVM Home |\n  * Documentation\u00bb\n  * Getting Started/Tutorials \u00bb\n  * LLVM Tutorial: Table of Contents\n\n\u00a9 Copyright 2003-2024, LLVM Project. Last updated on 2024-04-11. Created using\nSphinx 7.1.2.\n\n", "frontpage": false}
