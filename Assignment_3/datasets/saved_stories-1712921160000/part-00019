{"aid": "40008095", "title": "A Launchd Tutorial", "url": "https://www.launchd.info/", "domain": "launchd.info", "votes": 1, "user": "swatson741", "posted_at": "2024-04-12 00:04:59", "comments": 0, "source_title": "A launchd Tutorial", "source_text": "A launchd Tutorial\n\nIntroduction\n\nConfiguration\n\nOperation\n\nTroubleshooting\n\nCookbook\n\n# What is launchd?\n\nWikipedia defines launchd as \"a unified, open-source service management\nframework for starting, stopping and managing daemons, applications,\nprocesses, and scripts. Written and designed by Dave Zarzycki at Apple, it was\nintroduced with Mac OS X Tiger and is licensed under the Apache License.\"\n\n# What is a Daemon\n\nA daemon is a program running in the background without requiring user input.\nA typical daemon might for instance perform daily maintenance tasks or scan a\ndevice for malware when it is connected.\n\n# Daemons and Agents\n\nlaunchd differentiates between agents and daemons. The main difference is that\nan agent is run on behalf of the logged in user while a daemon runs on behalf\nof the root user or any user you specify with the UserName key. Only agents\nhave access to the macOS GUI.\n\n# Job Definitions\n\nThe behavior of a daemon/agent is specified in a special XML file called a\nproperty list. Depending on where it is stored it will be treated as a daemon\nor an agent.\n\nJob definitions crucial for the operation of the operating system are stored\nbelow /System/Library. You should never need to create a daemon or agent in\nthese directories. Third-Party definitions which are relevant for every user\nare stored below /Library. Job definitions for a specific user are stored\nbelow the respective user's Library directory.\n\nType| Location| Run on behalf of  \n---|---|---  \nUser Agents| ~/Library/LaunchAgents| Currently logged in user  \nGlobal Agents| /Library/LaunchAgents| Currently logged in user  \nGlobal Daemons| /Library/LaunchDaemons| root or the user specified with the\nkey UserName  \nSystem Agents| /System/Library/LaunchAgents| Currently logged in user  \nSystem Daemons| /System/Library/LaunchDaemons| root or the user specified with\nthe key UserName  \n  \nThe ~ character stands for the users home directory.\n\nThe following example shows a complete job definition with only three keys:\n\n  * Label This key is required for every job definition. It identifies the job and has to be unique for the launchd instance. Theoretically it is possible for an agent to have the same label as a daemon, as daemons are loaded by the root launchd whereas agents are loaded by a user launchd, but it is not recommended.\n  * Program This key defines what to start, in this case a shell script /Users/Me/Scripts/cleanup.sh.\n  * RunAtLoad This is one of several optional keys specifying when the job should be run, in this case right after it has been loaded.\n\nPlain Text\n\nLaunchControl\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD\nPLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist\nversion=\"1.0\"> <dict> <key>Label</key> <string>com.example.app</string>\n<key>Program</key> <string>/Users/Me/Scripts/cleanup.sh</string>\n<key>RunAtLoad</key> <true/> </dict> </plist>\n\nlaunchd supports more than 36 different configuration keys. Most of them are\nexplained in the Configuration-Section of this primer.\n\n# Automatic Loading of Job Definitions\n\nUpon system start the root launchd process will scan the daemon directories\n/System/Library/LaunchDaemons and /Library/LaunchDaemons for job definitions\nand load them depending on the existence/value of the Disabled key and the\ncontents of the override database.\n\nWhen a user logs in a new launchd process will be started for this user. This\nlaunchd process will scan the agent directories /System/Library/LaunchAgents,\n/Library/LaunchAgents and ~/Library/LaunchAgents for job definitions and load\nthem depending on the existence/value of the Disabled key and the contents of\nthe override database.\n\n# Loading vs Starting\n\nLoading a job definition does not necessarily mean to start the job. When a\njob is started is determined by the job definition. In fact, only when\nRunAtLoad or KeepAlive have been specified,launchd will start the job\nunconditionally when it has been loaded.\n\nContent\n\nConfiguring is done using a text editor of your choice or using a 3rd-Party\ntool like LaunchControl. While it is not difficult to create or edit job\ndefinitions using a text editor this method is prone to errors and finding a\nproblem in your configuration can be a daunting task. LaunchControl will make\nsure you always create valid job definitions and highlight errors even before\nyou load the job.\n\nImage: The key palette of LaunchControl\n\nAll examples provided in this tutorial are shown as plain text along with the\ncorresponding configuration section in LaunchControl.\n\nWhen using a text editor, make sure to save your configuration as plain text.\n\n# Label: Naming your job\n\nThis key is required for every job definition. It identifies the job and has\nto be unique for the launchd instance. Theoretically it is possible for an\nagent to have the same label as a daemon, as daemons are loaded by the root\nlaunchd whereas agents are loaded by a user launchd, but it is not\nrecommended.\n\nBy convention job names are written in reverse domain notation. The helper\nprocess for our program LaunchControl, for instance, is named com.soma-\nzone.LaunchControl.Helper. For private agents the domain local is a good\nchoice: local.cleanup\n\n# What to Start\n\nA valid job definition requires at least one of these keys: Program and\nProgramArguments. The first one takes a single string as its value, the latter\none requires a list of strings.\n\n## Program\n\nThis is as simple as it gets. Just specify the complete path to your\nexecutable:\n\nPlain Text\n\nLaunchControl\n\n<key>Program</key> <string>/path/to/program</string>\n\nA macOS application is not an executable, just a directory. Use this recipe to\nstart an application.\n\n## ProgramArguments\n\nUse this one if your executable requires command line options:\n\nPlain Text\n\nLaunchControl\n\n<key>ProgramArguments</key> <array> <string>/usr/bin/rsync</string>\n<string>\\--archive</string> <string>\\--compress-level=9</string>\n<string>/Volumes/Macintosh HD</string> <string>/Volumes/Backup</string>\n</array>\n\nThis is equivalent to the shell command\n\n/usr/bin/rsync --archive --compress-level=9 \"/Volumes/Macintosh HD\"\n\"/Volumes/Backup\"\n\nThe first string in the list is not the first argument but the path to the\nexecutable you want to run.\n\n## Program and ProgramArguments\n\nWhen you provide both keys, the value of Program is the executable to be\nstarted. The first string in ProgramArguments will show up as argv[0] in the\nexecutable. If this makes no sense to you, just think that launchd will ignore\nit.\n\n# Program environment\n\nUse the keys in this section to customize the environment the program runs in.\nSet environment variables, the working directory, standard in- and output,\nenable core file creation or limit the CPU time the executable gets.\n\n## Setting environment variables: EnvironmentVariables\n\nPlain Text\n\nLaunchControl\n\n<key>EnvironmentVariables</key> <dict> <key>PATH</key>\n<string>/bin:/usr/bin:/usr/local/bin</string> </dict>\n\nShell globbing and variable expansion do not work for this key.\n\nYou can set environment variables per launchd instance by issuing the\nlaunchctl command setenv. Logging out (in case of a user launchd) or rebooting\n(in case of the root launchd) will revert those changes. To make these changes\npersistent you'll have to placing this command in /etc/launchd-user.conf (in\ncase of a user launchd) or /etc/launchd.conf (for all launchd processes).\n\n## Redirecting input and output: StandardInPath StandardOutPath\nStandardErrorPath\n\nAll these keys take a string as argument. Provide absolute paths when\npossible. Relative paths are interpreted relative to RootDirectory or /.\n\nPlain Text\n\nLaunchControl\n\n<key>StandardInPath</key> <string>/tmp/test.stdin</string>\n<key>StandardOutPath</key> <string>/tmp/test.stdout</string>\n<key>StandardErrorPath</key> <string>/tmp/test.stderr</string>\n\nThese input fields support auto-completion by pressing Esc. Clicking on the\nbutton lets you select the file. The button opens the selected file in\nConsole.app.\n\nThe keys StandardOutPath and StandardErrorPath are very important when it\ncomes to debugging a job. Always configure these keys should a job not behave\nas expected. Check the resulting files for errors.\n\n## Setting the working directory: WorkingDirectory\n\nUse this key to set your programs working directory. Every relative path the\nexecutable accesses will be relative to its working directory.\n\nPlain Text\n\nLaunchControl\n\n<key>WorkingDirectory</key> <string>/tmp</string>\n\nThis input field supports auto-completion by pressing Esc. Clicking on the\nbutton lets you select the directory.\n\n## Constraining your job: SoftResourceLimit HardResourceLimit\n\nSometimes it is desirable to constrain a program to prevent resource\nstarvation or enhance system performance.\n\nA resource limit is specified as a soft limit and a hard limit. When a soft\nlimit is exceeded a process may receive a signal (for example, if the cpu time\nor file size is exceeded), but it will be allowed to continue execution until\nit reaches the hard limit (or modifies its resource limit).\n\nOnly the super-user may raise the hard limits. Other users may only alter soft\nlimits within the range from 0 to the corresponding hard limit or\n(irreversibly) lower the hard limit.\n\nThe biggest value you can specify is the maximum value of a 64-bit signed\ninteger: 9223372036854775807\n\n### CPU\n\nThe maximum amount of CPU time in seconds the process can use. If it runs for\nlonger than this, it receives signal SIGXCPU.\n\n### FileSize\n\nThe program won't be able to create files larger than this. Trying to create a\nlarger file will result in signal SIGXFSZ being sent.\n\nThe following example sets the soft limit to 512kiB, the hard limit to 1MiB.\n\nPlain Text\n\nLaunchControl\n\n<key>HardResourceLimits</key> <dict> <key>FileSize</key>\n<integer>1048576</integer> </dict> <key>SoftResourceLimits</key> <dict>\n<key>FileSize</key> <integer>524288</integer> </dict>\n\nValues in grey represent the current default values of the launchd instance.\n\n### NumberOfFiles\n\nThe maximum number of files the program can have opened at the same time.\nTrying to open more files will result in error EMFILE.\n\nThe maximum value for this subkey is OPEN_MAX as defined in sys/syslimits.h:\n10240\n\n### Core\n\nThe maximum size core file that this process can create. If the process\nterminates and would dump a core file larger than this, then no core file is\ncreated, so setting this limit to zero prevents core files from ever being\ncreated.\n\nCore files will be written to the directory /cores.\n\n### Data\n\nThe maximum size of data memory in bytes for the process. If the process tries\nto allocate data memory beyond this amount, the allocation function fails.\n\n### MemoryLock\n\nThe maximum amount of memory in bytes that can be locked into physical memory.\nLocked memory will never be paged out.\n\n### NumberOfProcesses\n\nThe maximum number of processes that can be created with the same user ID. If\nyou have reached the limit for your user ID, fork will fail with error EAGAIN.\n\n### ResidentSetSize\n\nThe maximum amount of physical memory in bytes that this process should get.\nThis parameter is a guide for the system's scheduler and memory allocator; the\nsystem may give the process more memory when there is a surplus.\n\n### Stack\n\nThe maximum stack size for the process. If the process tries to extend its\nstack past this size, it gets a SIGSEGV signal.\n\n# When to Start\n\nA job definition is perfectly valid just with a Label and the Program or\nProgramArguments key, but it won't do anything. You need to tell launchd when\nto start it.\n\n## RunAtLoad: Running the job when it is loaded\n\nThis key is used to start the job as soon as it has been loaded. For daemons\nthis means execution at boot time, for agents execution at login.\n\nPlain Text\n\nLaunchControl\n\n<key>RunAtLoad</key> <true/>\n\n## Starting a job every n seconds: StartInterval\n\nIf you have a job that you want to execute every n seconds, this is for you.\nTo run your job once every hour specify:\n\nPlain Text\n\nLaunchControl\n\n<key>StartInterval</key> <integer>3600</integer>\n\nIf the system is asleep, the job will be started the next time the computer\nwakes up. If multiple intervals transpire before the computer is woken, those\nevents will be coalesced into one event upon wake from sleep.\n\n## Starting a job at a specific time/date: StartCalendarInterval\n\nUse this key to run your job at a specific time, say every day at 3:00 AM:\n\nPlain Text\n\nLaunchControl\n\n<key>StartCalendarInterval</key> <dict> <key>Hour</key> <integer>3</integer>\n<key>Minute</key> <integer>0</integer> </dict>\n\nAvailable keys are\n\nKey| Type| Values  \n---|---|---  \nMonth| Integer| Month of year (1..12, 1 being January)  \nDay| Integer| Day of month (1..31)  \nWeekday| Integer| Day of week (0..7, 0 and 7 being Sunday)  \nHour| Integer| Hour of day (0..23)  \nMinute| Integer| Minute of hour (0..59)  \n  \nOmitted keys are interpreted as a wildcard. If we omitted the Minute key in\nour previous example the job would run every minute of the third hour of every\nday.\n\nYou may specify several calendar intervals by providing a list of\ndictionaries. The following job is run every day at 3:00 AM and every full\nhour on Sundays.\n\nPlain Text\n\nLaunchControl\n\n<key>StartCalendarInterval</key> <array> <dict> <key>Hour</key>\n<integer>3</integer> <key>Minute</key> <integer>0</integer> </dict> <dict>\n<key>Minute</key> <integer>0</integer> <key>Weekday</key> <integer>0</integer>\n</dict> </array>\n\n### Cron-style time specifications\n\nSome intervals are very tedious to specify in launchd. Users familiar with\ncron know that there is a more elegant way to specify such intervals. A quick\nexample: You want to run a program every five minutes between 20:00 and 23:00.\nIn launchd you have to list all 36 matching timestamps like this:\n\n<key>StartCalendarInterval</key> <array> <dict> <key>Hour</key>\n<integer>20</integer> <key>Minute</key> <integer>0</integer> </dict> <dict>\n<key>Hour</key> <integer>20</integer> <key>Minute</key> <integer>5</integer>\n</dict> . . . <dict> <key>Hour</key> <integer>22</integer> <key>Minute</key>\n<integer>55</integer> </dict> </array>\n\nLaunchControl allows you to generate this list from the equivalent cron-style\nspecification: */5 20-22 * * *\n\nThe following description of the cron time specification was taken from the\ncron manual page:\n\nField| Supported values  \n---|---  \nMinutes| 0-59  \nHours| 0-23  \nDay of month| 1-31  \nMonth| 1-12  \nDay of week| 0-7 (0 and 7 is Sunday)  \n  \nA field may be an asterisk (*), which always stands for \"first-last\".\n\nRanges of numbers are allowed. Ranges are two numbers separated with a hyphen.\nThe specified range is inclusive. For example, 8-11 for an \"hours\" entry\nspecifies execution at hours 8, 9, 10 and 11.\n\nLists are allowed. A list is a set of numbers (or ranges) separated by commas.\nExamples: \"1,2,5,9\", \"0-4,8-12\".\n\nStep values can be used in conjunction with ranges. Following a range with\n\"/<number>\" specifies skips of the number's value through the range. For\nexample, \"0-23/2\" can be used in the hours field to specify command execution\nevery other hour. Steps are also permitted after an asterisk, so if you want\nto say \"every two hours\", just use \"*/2\".\n\nUnlike cron which skips job invocations when the computer is asleep, launchd\nwill start the job the next time the computer wakes up. If multiple intervals\ntranspire before the computer is woken, those events will be coalesced into\none event upon wake from sleep.\n\n## Run when a device has been mounted: StartOnMount\n\nA job with this key set to true will be started whenever a device is mounted,\nin other words, when you insert a CD/DVD, connect an external hard disk or\nmount a virtual filesystem.\n\nPlain Text\n\nLaunchControl\n\n<key>StartOnMount</key> <true/>\n\nlaunchd does not report which device has been mounted.\n\n## Run when a path has been modified: WatchPaths\n\nThis key takes a list of strings, each string representing a file or\ndirectory.\n\nPlain Text\n\nLaunchControl\n\n<key>WatchPaths</key> <array> <string>/path/to/directory_or_file</string>\n</array>\n\nIf the path points to a file, creating, removing and writing to this file will\nbe start the job.\n\nIf the path points to a directory, creating and removing this directory, as\nwell as creating, removing and writing files in this directory will start the\njob. Actions performed in subdirectories of this directory will not be\ndetected.\n\nlaunchd does not report which path has been modified.\n\n## Run when files are available for processing: QueueDirectories\n\nThis key takes a list of strings, each string representing a directory.\n\nPlain Text\n\nLaunchControl\n\n<key>QueueDirectories</key> <array> <string>/path/to/directory</string>\n</array>\n\nWhenever one of the directories specified is not empty, the job will be\nstarted. It is the responsibility of the job to remove each processed file,\notherwise the job will be restarted after ThrottleInterval seconds.\n\nlaunchd does not report in which directory new files have been found nor what\ntheir names are.\n\n# KeepAlive: Keeping a Job Alive...\n\nlaunchd may be used to make sure that a job is running depending on certain\nconditions.\n\n## ...no Matter What\n\nThis is the most basic setting. A value of true will run the job as soon as\nthe job definition is loaded and restart it should it ever go down. launchd\nwill wait ThrottleInterval seconds between restarts.\n\nPlain Text\n\nLaunchControl\n\n<key>KeepAlive</key> <true/>\n\nIf you configure your job to be kept alive 'no matter what', launchd will run\nthe job immediately after loading it.\n\n## ...depending on the Last Exit Status: SuccessfulExit\n\nWhen a job terminates it can set a numeric return value, its exit status. By\nconvention an exit status of 0 is used when the program exited successfully.\nAny other number informs about a problem.\n\nThe subkey SuccessfulExit can be used to restart your program depending on its\nprevious exit status. When set to true the job will be restarted until it\nfails. Setting this value to false will restart the job until it succeeds.\n\nPlain Text\n\nLaunchControl\n\n<key>KeepAlive</key> <dict> <key>SuccessfulExit</key> <true/> </dict>\n\nIf this subkey is specified, launchd will run the job immediately after\nloading. To avoid this behaviour set the subkey AfterInitialDemand.\n\n## ...depending on Crashes: Crashed\n\nThe subkey Crashed can be used to restart your program after it has crashed.\nWhen set to true the job will be restarted after it crashed. Setting this\nvalue to false will restart the job unless it has crashed.\n\nPlain Text\n\nLaunchControl\n\n<key>KeepAlive</key> <dict> <key>Crashed</key> <true/> </dict>\n\nIf this subkey is specified, launchd will run the job immediately after\nloading. To avoid this behaviour set the subkey AfterInitialDemand.\n\n## ...depending on Network Availability: NetworkState 10.5 10.10\n\nSetting this subkey to true will start the job when/while any network\nis/becomes available. Setting this subkey to false will start the job\nwhen/while all network connections are down.\n\nPlain Text\n\nLaunchControl\n\n<key>KeepAlive</key> <dict> <key>NetworkState</key> <true/> </dict>\n\nIf this subkey is specified, launchd will run the job immediately after\nloading. To avoid this behaviour set the subkey AfterInitialDemand.\n\n## ...depending on the Existence of a Path: PathState\n\nUse this subkey to keep a job alive as long as a given path exists (true) or\ndoes not exist (false).\n\nPlain Text\n\nLaunchControl\n\n<key>KeepAlive</key> <dict> <key>PathState</key> <dict> <key>/tmp/runJob</key>\n<true/> </dict> </dict>\n\nIf this subkey is specified, launchd will run the job immediately after\nloading. To avoid this behaviour set the subkey AfterInitialDemand.\n\n## ...depending on Other Jobs: OtherJobEnabled\n\nThe name of this subkey is somewhat misleading. It does not check if a certain\njob is enabled, but if a job is loaded. The following job will be started (and\nrestarted) when a job with label local.otherJob is not loaded. It will be\nterminated when a job with label local.otherJob is loaded.\n\nAlways specify the Label of the job you are referring to, not the name of the\njob definition file.\n\nPlain Text\n\nLaunchControl\n\n<key>KeepAlive</key> <dict> <key>OtherJobEnabled</key> <dict>\n<key>local.otherJob</key> <false/> </dict> </dict>\n\n## Delaying the start: AfterInitialDemand\n\nThis key affects other keys related to run conditions like RunAtLoad,\nStartCalendarInterval, WatchPaths or KeepAlive. If set, these keys will be\nignored until the job has been started manually.\n\nPlain Text\n\nLaunchControl\n\n<key>KeepAlive</key> <dict> <key>AfterInitialDemand</key> <dict>\n<key>local.otherJob</key> <true/> </dict> </dict>\n\n## Permissions and Security\n\n## UserName GroupName InitGroups\n\nUsing the keys UserName and GroupName you can specify as which user the job\nshould run. Both keys expect a string (the name of the user/group, not the id)\nas value.\n\nThe key InitGroups specifies if launchd should call the function initgroups(3)\nbefore starting the job.\n\nPlain Text\n\nLaunchControl\n\n<key>UserName</key> <string>nobody</string> <key>GroupName</key>\n<string>nobody</string> <key>InitGroups</key> <true/>\n\nThese keys will be ignored when specified for an agent.\n\n## Umask\n\nUsing this key you can specify which permissions a file or folder will have by\ndefault when it is created by this job. The value is expected to be a decimal\nnumber.\n\nIn the following example we specify that new files should be readable and\nwritable by the user owning the file. In addition new directories should be\nsearchable by the user. Group members should be able to read new files and\nsearch created directories. Others should not be able to access new files or\ndirectories at all.\n\nPlain Text\n\nLaunchControl\n\nFirst you have to come up with three digits between 0 and 7. The first one\ndefines user access, the second one group access and the third one world\naccess.\n\nDigit| Granted permissions  \n---|---  \n0| read, write and execute/search  \n1| read and write  \n2| read and execute/search  \n3| read only  \n4| write and execute  \n5| write only  \n6| execute/search only  \n7| none  \n  \nWe want read, write and search permissions for the user: 0. We want read and\nsearch permissions for the group: 2. We want no access at all for everyone\nelse: 7. Together: 027\n\nThe last step is to convert this octal number to its decimal representation.\nWe'll use the bc command line tool to do that:\n\nhost:~ user$ echo \"obase=10;ibase=8; 027\" | bc 23\n\nThe number we want is 23:\n\n<key>Umask</key> <integer>23</integer>\n\nLaunchControl saves you the trouble of coming up with a bit mask and\nconverting it to decimal. Just select the bits you'd like to set. Every\nselected bit is a revoked permission. To make things more clear the actual\nfolder/file permissions are displayed along with the octal representation.\n\nThis key will be ignored when specified for an agent.\n\nNew files will never be created with the execute bit set.\n\n## RootDirectory\n\nUsing this key you can execute the job in a chroot(2) jail. As far as the job\nis concerned, the directory provided with this key is the root of the\nfilesystem. This implies that you need copies of all files required for the\njob inside this directory. This includes libraries, frameworks, command line\ntools and configuration files.\n\nPlain Text\n\nLaunchControl\n\n<key>RootDirectory</key> <string>/var/jail</string>\n\nThis key will be ignored when specified for an agent.\n\n# Miscellaneous\n\n## AbandonProcessGroup\n\nWhen launchd wants to terminate a job it sends a SIGTERM signal which will be\npropagated to all child processes of the job as well. Setting the value of\nthis key to true will stop this propagation, allowing the child processes to\nsurvive their parents.\n\nPlain Text\n\nLaunchControl\n\n<key>AbandonProcessGroup</key> <true/>\n\n## ExitTimeOut\n\nlaunchd stops a job by sending the signal SIGTERM to the process. Should the\njob not terminate within ExitTimeOut seconds (20 seconds by default), launchd\nwill send signal SIGKILL to force-quit it.\n\nPlain Text\n\nLaunchControl\n\n<key>ExitTimeOut</key> <integer>30</integer>\n\n## TimeOut 10.10\n\nThe suggested idle time in seconds before the job should quit.\n\nPlain Text\n\nLaunchControl\n\n<key>TimeOut</key> <integer>30</integer>\n\nlaunchd will not stop the job. This is the responsibility of the job itself.\n\n## ThrottleInterval\n\nTime in seconds to wait between program invocations.\n\nThis key may me used in combination with KeepAlive to run a job every n\nseconds while a certain condition applies.\n\nPlain Text\n\nLaunchControl\n\n<key>ThrottleInterval</key> <integer>30</integer>\n\n# Performance\n\n## LegacyTimers 10.9.2\n\nThis key controls the behavior of timers created by the job. By default on OS\nX Mavericks version 10.9 and later, timers created by launchd jobs are\ncoalesced. Batching the firing of timers with similar deadlines improves the\noverall energy efficiency of the system. If this key is set to true, timers\ncreated by the job will opt into less efficient but more precise behavior and\nnot be coalesced with other timers.\n\nPlain Text\n\nLaunchControl\n\n<key>LegacyTimers</key> <true/>\n\n## Nice\n\nRun a job at an altered scheduling priority. Possible values range from -20 to\n20. The default value is 0. Lower nice values cause more favorable scheduling.\n\nPlain Text\n\nLaunchControl\n\n<key>Nice</key> <integer>-5</integer>\n\nNice values lower than zero are honored by daemons only.\n\nThis section explains how to acquire information about launchd jobs and how to\nload, unload, start and stop them.\n\nAll of this can be accomplished using the command line utility launchctl, but\nyou will see that it is far easier using LaunchControl. To quote Nathan Grigg:\n\n\"LaunchControl is a Mac app by soma-zone that helps manage launchd lobs. It\naims to do \u201cone thing well\u201d and succeeds spectacularly. Whether you are new to\nwriting launchd agents or you already have some system in place, go buy\nLaunchControl now.\"\n\nImage: LaunchControl with all its views\n\nBold text is input, regular text is output.\n\n# Getting information about a job\n\nWe will get some information about a Launch Agent with Label com.example.app.\n\nlaunchctl\n\nLaunchControl\n\nWe issue the command launchctl list, which returns a long list of currently\nloaded jobs. To search for our specific job with the label com.example.app we\nsend the output to the command grep using the pipe character |.\n\nhost:~ user$ launchctl list | grep com.example.app - 2 com.example.app\n\n  * We received one line of output, which means that our job is currently loaded.\n  * The first colum contains the current process id. We received a - instead of a number, which means that while the job is loaded it is currently not running. Any numeric value in this column would indicate a running job.\n  * The second column displays the last exit code. A value of 0 indicates that the job finished successfully, a positive number that the job has reported an error, a negative number that the process was terminated because it received a signal.\n\nTo query the state of a Launch Daemon you have to run launchctl as root.\n\nlaunchctl also accepts the Label of a job as an optional argument. This\nresults in a more detailed output in a JSON-like format.\n\nTo find out if a job's Disabled key has been overridden we query the override\ndatabase.\n\n## Mac OS X 10.5\u2013OS X 10.9\n\nUse the xpath command line utility. Its first argument is the name of the file\nto query, its second argument the query itself. You have to replace the job\nlabel in the query.\n\nhost:~ user$ xpath /var/db/launchd.db/com.apple.launchd.peruser.`id\n-u`/overrides.plist \\ \"/plist/dict/key[text()='com.example.app']/following-\nsibling::*[1]/key/following-sibling::*[1]\" Found 1 nodes: -- NODE -- <true />\n\nThe input has been split across two lines, hence the \\ at the end of the first\nline. You can enter the command as a single line by omitting this character\nand the newline.\n\nFor Launch Daemons the database path is\n/var/db/launchd.db/com.apple.launchd/overrides.plist\n\nWe get a single hit, which means that the Disabled key is overridden with the\nvalue true. We would receive No nodes found if the key had not been overriden.\n\n## OS X 10.10 and later\n\nhost:~ user$ launchctl print-disabled gui/`id -u` | grep com.example.app \"com.example.app\" => disabled\n\nWe get a single hit, which means that the Disabled key is overridden with the\nvalue true. We would receive no output if the key had not been overriden.\n\nFor Launch Daemons replace gui/`id -u` with system/ in the command above.\n\nThis is the same job as seen using LaunchControl.\n\nAll information concerning the job status can be found in the left section of\nthe main window.\n\n  * It is loaded (Status not equal to \"Unloaded\")\n  * It is currently not running (Status not equal to \"Running\")\n  * It failed with exit code 2 (Status \"Error 2\")\n  * A description of \"Error 2\": The program we tried to start could not be found.\n  * The job has been disabled (the checkbox is unchecked)\n  * The Disabled key is not overridden (grey checkbox; a green checkbox indicates that the job is permanently enabled, a red one that the job is permanently disabled)\n\nThe problematic key would have been highlighted even if the job had not been\nloaded/run yet.\n\n# Loading a Job\n\nlaunchctl\n\nLaunchControl\n\nWe have already learned that launchd loads jobs automatically, daemons at boot\ntime, agents when the user logs in. launchctl allows you to load jobs\nmanually. The following example loads the agent com.example.error. It is an\nuser agent, so we know its definition will be in ~/Library/LaunchAgents.\n\nhost:~ user$ launchctl load ~/Library/LaunchAgents/com.example.app.plist\n\nIf everything went ok you will see no output. But you may receive this line:\n\nnothing found to load\n\nIf that happens the job has either set the Disabled key to true or the job has\nbeen disabled in the override database. In either case you can force launchctl\nto load the job like this:\n\nhost:~ user$ launchctl load -F ~/Library/LaunchAgents/com.example.app.plist\n\nIn case you want to load a Launch Daemon execute launchctl as root.\n\n## OS X 10.10 and later\n\nWhile the syntax above is still supported on OS X 10.10 and later Apple\nintroduced a new command to accomplish the task.\n\nhost:~ user$ launchctl bootstrap gui/`id -u`\n~/Library/LaunchAgents/com.example.app.plist\n\nIn case you want to load a Launch Daemon use the system domain target:\nlaunchctl bootstrap system/ /Library/LaunchDaemons/com.example.app.plist.\n\nIf everything went ok you will see no output. But you may receive this line:\n\nBootstrap failed: 5: Input/output error Try re-running the command as root for\nricher errors.\n\nThis can mean several things. Maybe the job has its Disabled key set to True.\nIn this case remove the key from the service description or set its value to\nfalse. Maybe the job has been disabled in the override database. In this case\nyou have to enable it first as outlined in the section Permanently enabling a\njob. You will also see this error message if the job has already been loaded.\n\nTo load a job select the Load button from the toolbar. Alternatively you can\nuse the keyboard shortcut \u2318\u21e7L).\n\n# Unloading a Job\n\nlaunchctl\n\nLaunchControl\n\nlaunchctl allows you to unload jobs manually. The following example unloads\nthe agent com.example.app. It is an user agent, so we know its definition will\nbe in ~/Library/LaunchAgents.\n\nhost:~ user$ launchctl unload ~/Library/LaunchAgents/com.example.app.plist\n\nIf everything went ok you will see no output.\n\nIn case you want to unload a Launch Daemon execute launchctl as root.\n\n## OS X 10.10 and later\n\nWhile the syntax above is still supported on OS X 10.10 and later Apple\nintroduced a new command to accomplish the task.\n\nhost:~ user$ launchctl bootout gui/`id -u`\n~/Library/LaunchAgents/com.example.app.plist\n\nIn case you want to unload a Launch Daemon use the system domain target:\nlaunchctl bootout system/ /Library/LaunchDaemons/com.example.app.plist.\n\nIf everything went ok you will see no output. In case the job has already been\nunloaded you'll receive this error:\n\nBootout failed: 5: Input/output error Try re-running the command as root for\nricher errors.\n\nTo unload a job select the Unload button from the toolbar. Alternatively you\ncan use the keyboard shortcut \u2318\u21e7L).\n\n## Starting a Job\n\nSometimes you may want to start a job regardless of its run conditions. This\nsection explains how to do that.\n\nlaunchctl\n\nLaunchControl\n\nThis command expects the job Label as its argument.\n\nhost:~ user$ launchctl start com.example.app\n\nIf everything went ok you will see no output. But you may get something like\nthis:\n\nlaunchctl start error: No such process\n\nYou either misspelled the Label of the job or forgot to load it in the first\nplace.\n\nIn case you want to start a Launch Daemon execute launchctl as root.\n\n## OS X 10.10 and later\n\nWhile the syntax above is still supported on OS X 10.10 and later Apple\nintroduced a new command to accomplish the task.\n\nhost:~ user$ launchctl kickstart gui/`id -u`/com.example.app\n\nIf everything went ok you will see no output. If you have misspelled the job\nlabel or the daomain target you will receive an error:\n\nCould not find service \"local.jobs\" in domain for user gui: 501\n\nIn case you want to start a Launch Daemon use the system domain target:\nlaunchctl kickstart system/com.example.app.\n\nTo start a job select the Start button from the toolbar. Alternatively you can\nuse the keyboard shortcut \u2318\u21e7T).\n\nA job has to be loaded before it can be started.\n\n# Stopping a Job\n\nlaunchctl\n\nLaunchControl\n\nThis command expects the job Label as its argument.\n\nhost:~ user$ launchctl stop com.example.app\n\nIf everything went ok you will see no output. But you may get something like\nthis:\n\nlaunchctl stop error: No such process\n\nYou either misspelled the Label of the job or forgot to load it in the first\nplace.\n\n## OS X 10.10 and later\n\nWhile the syntax above is still supported on OS X 10.10 and later Apple\nintroduced a new command to accomplish the task.\n\nhost:~ user$ launchctl kill SIGTERM gui/`id -u`/com.example.app\n\nIn case you want to stop a Launch Daemon use the system domain target:\nlaunchctl kill SIGTERM system/com.example.app.\n\nIf everything went ok you will see no output. If you have misspelled the job\nlabel or the daomain target you will receive an error:\n\nCould not find service \"local.jobs\" in domain for user gui: 501\n\nTo stop a job select the Stop button from the toolbar. Alternatively you can\nuse the keyboard shortcut \u2318\u21e7T).\n\nStopping a job will send the signal SIGTERM to the process. Should this not\nstop the process launchd will wait ExitTimeOut seconds (20 seconds by default)\nbefore sending SIGKILL.\n\nThe job may be intantly restarted when its run conditions are met.\n\n# The override database\n\nWhen launchd is about to load a job it will check if it has the Disabled key\nset. Disabled jobs will not be loaded. But the value of this key can be\noverridden.\n\nThe database for daemons is\n/var/db/launchd.db/com.apple.launchd/overrides.plist (Mac OS X 10.5 \u2013 OS X\n10.9) or /var/db/com.apple.xpc.launchd/disabled.plist (OS X 10.10 and later).\n\n## Permanently disabling a job\n\nTerminal\n\nLaunchControl\n\nhost:~ user$ launchctl unload -w ~/Library/LaunchAgents/com.example.app.plist\n\n## OS X 10.10 and later\n\nWhile the syntax above is still supported on OS X 10.10 and later Apple\nintroduced a new command to accomplish the task.\n\nhost:~ user$ launchctl disable gui/`id -u`/local.job\n\nSelect the job and select Job>Override Disabled Key>Always True from the menu.\n\nOS X 10.10 Yosemite and later: While you will always be able to switch a job's\npermanent status between enabled and disabled, you cannot (trivially) remove\nit from the override database again.\n\n## Permanently enabling a job\n\nTerminal\n\nLaunchControl\n\nhost:~ user$ launchctl load -w ~/Library/LaunchAgents/com.example.app.plist\n\n## OS X 10.10 and later\n\nWhile the syntax above is still supported on OS X 10.10 and later Apple\nintroduced a new command to accomplish the task.\n\nhost:~ user$ launchctl enable gui/`id -u`/local.job\n\nSelect the job and select Job>Override Disabled Key>Always False from the\nmenu.\n\nOS X 10.10 Yosemite and later: While you will always be able to switch a job's\npermanent status between enabled and disabled, you cannot (trivially) remove\nit from the override database again.\n\n## Removing a job from the override database (Mac OS x 10.5 Leopard - OS X\n10.9 Mavericks)\n\nTerminal\n\nLaunchControl\n\nThe procedure is different for agents and daemons. You'll need the label of\nthe job you want to remove. In this example: local.job. For agents type:\n\nhost:~ user$ sudo /usr/libexec/Plistbuddy\n/var/db/launchd.db/com.apple.launchd.peruser.`echo $UID`/overrides.plist -c\nDelete:local.job\n\nFor daemons the command reads\n\nhost:~ user$ sudo /usr/libexec/Plistbuddy\n/var/db/launchd.db/com.apple.launchd/overrides.plist -c Delete:local.job\n\nSelect the job and select Job>Override Disabled Key>Don't Override from the\nmenu.\n\n## Removing a job from the override database (OS X 10.10 Yosemite and later)\n\nStarting with OS X 10.10 Yosemite the override database was moved to a\ndifferent location. Additionally the database is read only when launchd\nstarts. Modifications to the database will be overwritten when launchd quits.\nBecause of this modifications have to be done in Recovery Mode. On OS X 10.10\nYosemite and later LaunchControl can not be used to remove jobs from the\noverride database.\n\n### Note current UID (user id) if you want to remove an agent from the\noverride database.\n\nOpen Terminal.app and enter\n\nhost:~ user$ id -u\n\nThe number returned is the user id of the current user. You will need this\nnumber later. In this example we assume that the returned user id is 502.\n\n### Boot into Recovery Mode\n\n  * Restart your Mac\n  * Hold down \u2318R before macOS starts up. Hold these keys until the Apple logo appears. After your computer finishes starting up, you should see a desktop with a menu bar and a Utilities window\n  * Select Terminal from the Utilities menu\n\n### Remove the job from the override database\n\nThe following command lines assume that your system volume is called\n\u201cMacintosh HD\u201d. Please adjust the commands below in case your system volume\nname differs.\n\nThe procedure is different for agents and daemons. You'll need the label of\nthe job you want to remove. In this example: local.job. For agents type:\n\nhost:~ user$ /usr/libexec/Plistbuddy \"/Volumes/Macintosh\nHD/var/db/com.apple.xpc.launchd/disabled.502.plist\" -c Delete:local.job\n\nDon't forget to replace the 502 with your actual user id. For daemons the\ncommand reads\n\nhost:~ user$ /usr/libexec/Plistbuddy \"/Volumes/Macintosh\nHD/var/db/com.apple.xpc.launchd/disabled.plist\" -c Delete:local.job\n\n### Reboot\n\n  * Type reboot and press the \u23ce key.\n\nFinding out why a launchd job does not perform as expected can be a time\nconsuming task if you have to do it manually. Using LaunchControl you can\ntroubleshoot a job in a matter of seconds. Most of the time just selecting the\njob will highlight the problem and give advice on how to fix it.\n\nImage: Troubleshooting a job with LaunchControl\n\nRemember to always (re)load a job definition after changing it. Just saving it\nwill leave launchd oblivious to the change.\n\n# Common mistakes\n\n## launchd(8) is not init(8)\n\nIt is important to remember that launchd is responsible for turning a process\ninto a background process. When referencing a shell script in Program or\nProgramArguments make sure the script does not put the actual program into the\nbackground. Some programs require special command line arguments (something\nlike --foreground) to prevent them from daemonizing themselves. If in doubt\ntry to run the program/script from the terminal. The program/script should\nonly return after the process is done.\n\nThe same goes for resource limits, redirection of standard input/output/error,\nre-nicing and so on. launchd supports a wealth of configuration options. Use\nthem and don't try to emulate their effects.\n\n## launchd(8) is no shell\n\nPipes (|), redirection (<,>) and variable expansion ($VAR) are only three\nexamples for shell constructs that won't be interpreted by launchd(8). If you\nwant to write shell code, give it to the shell. Instead of\n\n<key>ProgramArguments</key> <array> <string>/bin/cat</string>\n<string>/etc/passwd</string> <string>|</string> <string>sort</string> </array>\n\nwrite\n\n<key>ProgramArguments</key> <array> <string>/bin/sh</string> <string>-c</string> <string>cat /etc/passwd | sort</string> </array>\n\n## Don't use sudo in Launch Agents\n\nThe Unix command sudo is used to run Unix commands as a different user. If\nexecuted by an unprivileged (non-root) user it requires the user to enter a\npassword. Obviously, when used by a Launch Agent the password cannot be\nentered. Solution: Convert the agent to a daemon.\n\n# My job is not loaded on login/boot\n\nTerminal\n\nLaunchControl\n\nLoad the job manually and see what launchd has to say. The following example\ndid not load because the job definition had the wrong permissions.\n\nhost:~ user$ launchctl load ~/Library/LaunchAgents/com.example.app.plist\nlaunchctl: Dubious permissions on file (skipping):\n/Users/Me/Library/LaunchAgents/com.example.app.plist nothing found to load\n\nMake sure to load your job definition into the correct launchd instance. The\nexample above loads an agent definition into the user launchd instance.\nExecute this command with root privileges (sudo) to load a daemon definition\ninto the system launchd instance.\n\nChecklist:\n\n  * Check the job definition has the proper file extension (.plist (Error: Dubious file. Not of type .plist)\n  * Check the job definition for wellformedness (Error: no plist was returned for)\n\nhost:~ user$ plutil -lint ~/Library/LaunchAgents/com.example.app.plist\n/Users/Guest/Library/LaunchAgents/com.example.app.plist: OK\n\n  * Check the Disabled key. Disabled jobs won't be automatically loaded.\n  * Check if the job has been disabled in the override database\n  * Check the permissions of the job definition. Job definitions have to be readable by the user. Job definitions must not be writable by group or other. Suggested privileges: 0644. (Error: Dubious permissions on file)\n  * Check the permissions of the directory containing the job definition. It has to be searchable by the user and must not be writable by group or other. Suggested privileges: 0755\n  * Check who owns the job definition. Agents must be owned by their respective user, daemons by root. (Error: Dubious ownership on file)\n  * Make sure the Label you provided is unique for this particular launchd instance.\n\nLaunchControl will mark invalid jobs automatically. Select any invalid job to\nget further details. All issues (except wellformedness) can be auto-corrected\nwith the click of a button.\n\n# My job does not start automatically after loading\n\nMake sure you defined a run condition. LaunchControl will display a warning\nwhen no run condition has been specified.\n\n# My job does not start\n\nTerminal\n\nLaunchControl\n\nOpen two windows in Terminal.app. In the first one we will monitor the system\nlog file for errors of our launchd instance. Replace the argument of the\nsecond grep with the Label of the job refusing to start. If you want to debug\nan agent enter:\n\nhost:~ user$ tail -F /var/log/system.log | grep --line-buffered \"com.apple.launchd.peruser.`id -u`\\\\[\" | grep \"com.example.app\"\n\nIf you want to debug a daemon enter:\n\nhost:~ user$ sudo tail -F /var/log/system.log | grep --line-buffered \"com.apple.launchd\\\\[\" | grep \"com.example.app\"\n\nThe last command asks for your super user password. Now start the job manually\nin the second window and see what launchd has to say. The following example\ndid not start because the script did not define an executing interpreter:\n\nSep 19 12:01:52 host com.apple.launchd.peruser.201[235]\n(com.example.app[38643]): Job failed to exec(3) for weird reason: 8\n\nlaunchd tells us that it was unable to execute the program specified in the\njob definition. To find out what \"weird reason: 8\" is, type this command:\n\nhost:~ user$ perl -E 'say $!=shift' 8 Exec format error\n\nBut you may also get a line like this:\n\nSep 19 12:01:52 host com.apple.launchd.peruser.201[235]\n(com.example.app[38643]): Exited with code: 8\n\nWhile the code is the same, the problem is a different one. launchd has\nexecuted the program specified in our job definition just fine, but the\nprogram exited with exit code 8. Unfortunately there is no way of knowing what\nthis code means, as a programmer can choose arbitrary exit codes if he wants.\nMaybe the program uses standard exit codes, in which case you can use the Perl\none-liner to get a description. If you are lucky the user manual of the\nprogram contains a list of all exit codes with an explanation. Otherwise ask\nthe author about the meaning of the error code.\n\nFortunately exit codes are not the only way programs can communicate with the\nuser. Add the keys StandardOutPath and StandardErrorPath to your job\ndefinition. Reload it and try to start it again. Now examine the files you\nspecified for those keys. It is very likely that you will find the problem\ndescription in one of those files.\n\nSome programs accept special arguments to set the location of log files. Make\nsure to examine those files too.\n\n  * Select the job and fix any errors/warnings that LaunchControl points out\n\n  * Check the system log\n\nSelect the job, bring up the log panel by selecting View>Toggle Log (\u2318\u2325L) from\nthe menu. Start log monitoring by clicking the button. Now start the job by\nselecting Job>Start (\u2318\u21e7T) from the menu.\n\nIf you get a message Job failed to exec(3) for weird reason then you can get a\ndescription by moving your mouse cursor over the error code in the job list\n(See screenshot). If you get a message Exite with code then launchd started\nthe job just fine. Its just that the program specified in the job definition\nexited with an error code. Unfortunately there is no way of knowing what this\ncode means, as a programmer can choose arbitrary exit codes if he wants. Maybe\nthe program uses standard exit codes, in which case you can trust the\ndescription LaunchControl provides. If you are lucky the user manual of the\nprogram contains a list of all exit codes with an explanation. Otherwise ask\nthe author about the meaning of the error code.\n\n  * Check the program output\n\nFortunately exit codes are not the only way programs can communicate with the\nuser. Add the keys StandardOutPath and StandardErrorPath to your job\ndefinition and start it again by selecting Job>Start (\u2318\u21e7T) from the menu. Now\nexamine the files you specified for those keys by clicking the button. It is\nvery likely that you will find the problem description in one of those files.\n\nSome programs accept special arguments to set the location of log files. Make\nsure to examine those files too.\n\n# I cannot save changes to System Agents and Daemons\n\n## OS X 10.11 El Capitan and newer\n\nOS X 10.11 El Capitan introduced System Integrity Protection (SIP). This\nfeature provides an additional layer of security by protecting certain sytem\nfiles from modification even by root. In order to make changes to those\nprotected files you have to disable SIP:\n\n  * Restart your Mac\n  * Hold down \u2318R before macOS starts up. Hold these keys until the Apple logo appears. After your computer finishes starting up, you should see a Desktop with a menu bar and a window offering several utility functions.\n  * Select Terminal from the Utilities menu (the menu, not said window)\n  * Type csrutil disable and press the \u23ce key.\n  * You should see a message that System Integrity Protection has been disabled\n  * Reboot by entering reboot and press the \u23ce key.\n\nSIP is now disabled.\n\nIt is recommended to enable SIP again. Follow the instructions above. The\ncommand to enable SIP is csrutil enable\n\n## macOS 10.15 Catalina\n\nIn addition to SIP macOS 10.15 Catalina separates the Operating System (OS)\nfrom the user data. The OS is mounted read-only, so even with SIP disabled you\ncannot make changes to system files. In order to mount the OS partition in\nread/write mode disable SIP (see above), open Termina.app and enter:\n\nsudo mount -uw /\n\nThis is a collection of recipes serving as examples and inspiration.\n\n# Automatically restart application\n\nThe trick here is that an macOS application is a folder containing (among\nother things) the executable file. The name of the executable is stored in a\nfile called Info.plist inside this directory. Fortunately the command line\nutility open knows how to deal with application bundles.\n\nPlain Text\n\nLaunchControl\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD\nPLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist\nversion=\"1.0\"> <dict> <key>KeepAlive</key> <true/> <key>Label</key>\n<string>local.Safari.keepAlive</string> <key>ProgramArguments</key> <array>\n<string>/usr/bin/open</string> <string>-W</string>\n<string>/Applications/Safari.app</string> </array> </dict> </plist>\n\nBy far the easiest war to create a job definition like this is to drag and\ndrop the icon of the application onto the LaunchControl icon (in Dock or in\nFinder). This will create a job definition like this:\n\n# Run job every hour while a certain file exists\n\nWe want to perform a backup of a database but this backup should only be\nperformed while the database is running. We will use the PID file to find out\nif it is running or not.\n\nUsing the subkey PathState of the key KeepAlive we can make sure that our job\nis run (and kept alive) while our PID file exists. We will delay restarts\nusing the ThrottleInterval key.\n\nPlain Text\n\nLaunchControl\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD\nPLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist\nversion=\"1.0\"> <dict> <key>Label</key> <string>com.example.app</string>\n<key>Program</key> <string>/Users/Me/Scripts/backup.sh</string>\n<key>KeepAlive</key> <dict> <key>PathState</key> <dict>\n<key>/var/log/mysql.pid</key> <true/> </dict> </dict>\n<key>ThrottleInterval</key> <integer>3600</integer> </dict> </plist>\n\n# Creating a network server\n\nlaunchd makes it very easy to create servers. In fact, launchd can turn any\nprogram reading from standard input into a server.\n\nIn this recipe we will turn Unix cat(1), a program which copies STDIN to\nSTDOUT, into an network server listening on port 8888 on our machine, copying\neverything it receives to the file /tmp/test.stdout.\n\nPlain Text\n\nLaunchControl\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD\nPLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist\nversion=\"1.0\"> <dict> <key>Label</key> <string>com.example.srv</string>\n<key>Program</key> <string>/bin/cat</string> <key>Sockets</key> <dict>\n<key>sock1</key> <dict> <key>SockNodeName</key> <string>localhost</string>\n<key>SockPassive</key> <true/> <key>SockServiceName</key>\n<string>8888</string> </dict> </dict> <key>StandardOutPath</key>\n<string>/tmp/test.stdout</string> <key>inetdCompatibility</key> <dict>\n<key>Wait</key> <false/> </dict> </dict> </plist>\n\nAfter loading our job definition we will do a quick test.\n\n  1. Open Terminal.app and establish a network connection to port 8888: telnet localhost 8888\n  2. Open another Terminal.app window and have a look at our job's STDOUT: tail -f /tmp/test.out\n  3. Type some text in the first window, press enter.\n  4. The text you entered in the first window appears in the second one.\n\n\u00a9 2013\u20132024 by soma-zone\n\n", "frontpage": false}
