{"aid": "40084614", "title": "20-Year Experience of Software Development Methodologies", "url": "https://zwischenzugs.com/2017/10/15/my-20-year-experience-of-software-development-methodologies/", "domain": "zwischenzugs.com", "votes": 1, "user": "mariuz", "posted_at": "2024-04-19 08:53:23", "comments": 0, "source_title": "My 20-Year Experience of Software Development Methodologies", "source_text": "My 20-Year Experience of Software Development Methodologies \u2013 zwischenzugs\n\nSkip to content\n\nzwischenzugs\n\n# My 20-Year Experience of Software Development Methodologies\n\nzwischenzugs Uncategorized October 15, 2017May 16, 2021 7 Minutes\n\n# Sapiens and Collective Fictions\n\nRecently I read Sapiens: A Brief History of Humankind by Yuval Harari. The\nbasic thesis of the book is that humans require \u2018collective fictions\u2019 so that\nwe can collaborate in larger numbers than the 150 or so our brains are big\nenough to cope with by default. Collective fictions are things that don\u2019t\ndescribe solid objects in the real world we can see and touch. Things like\nreligions, nationalism, liberal democracy, or Popperian falsifiability in\nscience. Things that don\u2019t exist, but when we act like they do, we easily\nforget that they don\u2019t.\n\n## Collective Fictions in IT \u2013 Waterfall\n\nThis got me thinking about some of the things that bother me today about the\nworld of software engineering. When I started in software 20 years ago, God\nwas waterfall. I joined a consultancy (ca. 400 people) that wrote very long\nspecs which were honed to within an inch of their life, down to the individual\nJava classes and attributes. These specs were submitted to the customer (God\nknows what they made of it), who signed it off. This was then built,\ndelivered, and monies were received soon after. Life was simpler then and\neveryone was happy. Except there were gaps in the story \u2013 customers complained\nthat the spec didn\u2019t match the delivery, and often the product delivered would\nnot match the spec, as \u2018things\u2019 changed while the project went on. In other\nwords, the waterfall process was a \u2018collective fiction\u2019 that gave us enough\nstability and coherence to collaborate, get something out of the door, and get\npaid. This consultancy went out of business soon after I joined. No\nconclusions can be drawn from this.\n\n## Collective Fictions in IT \u2013 Startups ca. 2000\n\nI got a job at another software development company that had a niche with lots\nof work in the pipe. I was employee #39. There was no waterfall. In fact,\nthere was nothing in the way of methodology I could see at all. Specs were\nagreed with a phone call. Design, prototype and build were indistinguishable.\nIn fact it felt like total chaos; it was against all of the precepts of my\ntraining. There was more work than we could handle, and we got on with it. The\nfact was, we were small enough not to need a collective fiction we had to\nname. Relationships and facts could be kept in our heads, and if you needed\nhelp, you literally called out to the room. The tone was like this, basically:\nOf course there were collective fictions, we just didn\u2019t name them:\n\n  * We will never have a mission statement\n  * We don\u2019t need HR or corporate communications, we have the pub (tough luck if you have a family)\n  * We only hire the best\n\nWe got slightly bigger, and customers started asking us what our software\nmethodology was. We guessed it wasn\u2019t acceptable to say \u2018we just write the\ncode\u2019 (legend had it our C-based application server \u2013 still in use and\nblazingly fast \u2013 was written before my time in a fit of pique with a stash of\namphetamines over a weekend. It\u2019s still in use.) Turns out there was this\nthing called \u2018Rapid Application Development\u2019 that emphasized prototyping. We\ntold customers we did RAD, and they seemed happy, as it was A Thing. It\nsounded to me like \u2018hacking\u2019, but to be honest I\u2019m not sure anyone among us\nreally properly understood it or read up on it. As a collective fiction it\nworked, because it kept customers off our backs while we wrote the software.\nSoon we doubled in size, moved out of our cramped little office into a much\nbigger one with bigger desks, and multiple floors. You couldn\u2019t shout out your\nquestion to the room anymore. Teams got bigger, and these things called\n\u2018project managers\u2019 started appearing everywhere talking about \u2018specs\u2019 and\n\u2018requirements gathering\u2019. We tried and failed to rewrite our entire platform\nfrom scratch. Yes, we were back to waterfall again, but this time the working\ncycles were faster and smaller, and the same problems of changing requirements\nand disputes with customers as before. So was it waterfall? We didn\u2019t really\nknow.\n\n## Collective Fictions in IT \u2013 Agile\n\nI started hearing the word \u2018Agile\u2019 about 2003. Again, I don\u2019t think I properly\nread up on it... ever, actually. I got snippets here and there from various\nwebsites I visited and occasionally from customers or evangelists that talked\nabout it. When I quizzed people who claimed to know about it their\nexplanations almost invariably lost coherence quickly. The few that really had\nread up on it seemed incapable of actually dealing with the very real\npressures we faced when delivering software to non-sprint-friendly customers,\ntimescales, and blockers. So we carried on delivering software with our specs,\nand some sprinkling of agile terminology. Meetings were called \u2018scrums\u2019 now,\nbut otherwise it felt very similar to what went on before. As a collective\nfiction it worked, because it kept customers and project managers off our\nbacks while we wrote the software. Since then I\u2019ve worked in a company that\ngrew to 700 people, and now work in a corporation of 100K+ employees, but the\npattern is essentially the same: which incantation of the liturgy will satisfy\nthis congregation before me?\n\n## Don\u2019t You Believe?\n\nI\u2019m not going to beat up on any of these paradigms, because what\u2019s the point?\nIf software methodologies didn\u2019t exist we\u2019d have to invent them, because how\nelse would we work together effectively? You need these fictions in order to\nfunction at scale. It\u2019s no coincidence that the Agile paradigm has such a\nquasi-religious hold over a workforce that is immensely fluid and mobile. (If\nyou want to know what I really think about software development methodologies,\nread this because it lays it out much better than I ever could.) One of many\ninteresting arguments in Sapiens is that because these collective fictions\ncan\u2019t adequately explain the world, and often conflict with each other, the\ninteresting parts of a culture are those where these tensions are felt. Often,\nhumour derives from these tensions.\n\n\u2018The test of a first-rate intelligence is the ability to hold two opposed\nideas in mind at the same time and still retain the ability to function.\u2019 F.\nScott Fitzgerald\n\nI don\u2019t know about you, but I often feel this tension when discussion of Agile\ngoes beyond a small team. When I\u2019m told in a motivational poster written by\nsomeone I\u2019ve never met and who knows nothing about my job that I should\n\u2018obliterate my blockers\u2019, and those blockers are both external and non-\nnegotiable, what else can I do but laugh at it?\n\nHow can you be agile when there are blockers outside your control at every\nturn? Infrastructure, audit, security, financial planning, financial\nstructures all militate against the ability to quickly deliver meaningful\niterations of products. And who is the customer here, anyway? We\u2019re talking\nabout the square of despair:\n\nWhen I see diagrams like this representing Agile I can only respond with black\nhumour shared with my colleagues, like kids giggling at the back of a church.\nWhen within a smaller and well-functioning functioning team, the totems of\nAgile often fly out of the window and what you\u2019re left with (when it\u2019s good)\nis a team that trusts each other, is open about its trials, and has a clear\nstructure (formal or informal) in which agreement and solutions can be found\nand co-operation is productive. Google recently articulated this (reported\nbriefly here, and more in-depth here).\n\n## So Why Not Tell It Like It Is?\n\nYou might think the answer is to come up with a new methodology that\u2019s better.\nIt\u2019s not like we haven\u2019t tried: It\u2019s just not that easy, like the book says:\n\u2018Telling effective stories is not easy. The difficulty lies not in telling the\nstory, but in convincing everyone else to believe it. Much of history revolves\naround this question: how does one convince millions of people to believe\nparticular stories about gods, or nations, or limited liability companies? Yet\nwhen it succeeds, it gives Sapiens immense power, because it enables millions\nof strangers to cooperate and work towards common goals. Just try to imagine\nhow difficult it would have been to create states, or churches, or legal\nsystems if we could speak only about things that really exist, such as rivers,\ntrees and lions.\u2019 Let\u2019s rephrase that: \u2018Coming up with useful software\nmethodologies is not easy. The difficulty lies not in defining them, but in\nconvincing others to follow it. Much of the history of software development\nrevolves around this question: how does one convince engineers to believe\nparticular stories about the effectiveness of requirements gathering, story\npoints, burndown charts or backlog grooming? Yet when adopted, it gives\norganisations immense power, because it enables distributed teams to cooperate\nand work towards delivery. Just try to images how difficult it would have been\nto create Microsoft, Google, or IBM if we could only speak about specific\ntechnical challenges.\u2019 Anyway, does the world need more methodologies? It\u2019s\nnot like some very smart people haven\u2019t already thought about this.\n\n## Acceptance\n\nSo I\u2019m cool with it. Lean, Agile, Waterfall, whatever, the fact is we need\nsome kind of common ideology to co-operate in large numbers. None of them are\nevil, so it\u2019s not like you\u2019re picking racism over socialism or something.\nWhichever one you pick is not going to reflect the reality, but if you expect\nperfection you will be disappointed. And watch yourself for unspoken or\nunarticulated collective fictions. Your life is full of them. Like that your\nopinion is important. I can\u2019t resist quoting this passage from Sapiens about\nour relationship with wheat: \u2018The body of Homo sapiens had not evolved for\n[farming wheat]. It was adapted to climbing apple trees and running after\ngazelles, not to clearing rocks and carrying water buckets. Human spines,\nknees, necks and arches paid the price. Studies of ancient skeletons indicate\nthat the transition to agriculture brought about a plethora of ailments, such\nas slipped discs, arthritis and hernias. Moreover, the new agricultural tasks\ndemanded so much time that people were forced to settle permanently next to\ntheir wheat fields. This completely changed their way of life. We did not\ndomesticate wheat. It domesticated us. The word \u2018domesticate\u2019 comes from the\nLatin domus, which means \u2018house\u2019. Who\u2019s the one living in a house? Not the\nwheat. It\u2019s the Sapiens.\u2019 Maybe we\u2019re not here to direct the code, but the\ncode is directing us. Who\u2019s the one compromising reason and logic to grow\ncode? Not the code. It\u2019s the Sapiens.\n\nIf you like this, you might like one of my books: Learn Bash the Hard Way\nLearn Git the Hard Way Learn Terraform the Hard Way\n\nBuy in a bundle here\n\nIf you enjoyed this, then please consider buying me a coffee to encourage me\nto do more.\n\n### Share this:\n\n  * Email\n  * Reddit\n\nLike Loading...\n\n### Related\n\nNotes on Books Read in 2018January 2, 2019With 1 comment\n\nHow 3D Printing Kindled A Love For Baroque SculptureMarch 13, 2022Liked by 2\npeople\n\nWhy Do We Have Dev Rels Now?July 13, 2020With 4 comments\n\n## Published by zwischenzugs\n\nView all posts by zwischenzugs\n\nPublished October 15, 2017May 16, 2021\n\n## 66 thoughts on \u201cMy 20-Year Experience of Software Development\nMethodologies\u201d\n\n  1. Pingback: My 20-Year Experience of Software Development Methodologies | ExtendTree\n\n  2. gregjor says:\n\nOctober 15, 2017 at 11:28 am\n\nGreat article, matches my experience. And thanks for the link and compliment\non my article.\n\nReply\n\n    1. zwischenzugs says:\n\nOctober 15, 2017 at 1:07 pm\n\nWow, that was yours? Have toted that article around for years. Pleasure to\nfinally meet you!\n\nReply\n\n  3. primogatto says:\n\nOctober 15, 2017 at 1:04 pm\n\n\u201cAnd watch yourself for unspoken or unarticulated collective fictions. Your\nlife is full of them.\u201d\n\nAgree completely.\n\nAs for software development methodologies, I personally think that with a few\ntweaks the waterfall methodology could work quite well. The key changes I\u2019d\nsuggest would help is to introduce developer guidance at the planning stage,\nincluding timeboxed explorations of the feasibility of the proposals, as well\nas aiming for specs to outline business requirements rather than dictating how\nthey should be implemented.\n\nReply\n\n    1. pheeque says:\n\nOctober 15, 2017 at 6:19 pm\n\nAnd then there were 16 competing standards.\n\nReply\n\n  4. Neel says:\n\nOctober 15, 2017 at 5:30 pm\n\nwonderful\n\nReply\n\n  5. Rob Lang says:\n\nOctober 15, 2017 at 9:15 pm\n\nA very entertaining article! I have as similar experience and outlook. I\u2019ve\nnot tried LEAN. I once heard a senior developer say that methodologies were\njust a stick with which to beat developers. This was largely in the case of\nclients who agree to engage in whatever process when amongst business people\nand then are absent at grooming, demos, releases, feedback meetings and so on.\nWhen the software is delivered at progressively short notice, it\u2019s always the\ndeveloper that has to carry the burden of ensuring quality, feeling keenly\nresponsible for the work they do (the conscientious ones anyway). Then non-\ntechnical management hide behind the process and failing to have the client\nfully engaged is quickly forgotten.\n\nIt reminds me (I\u2019m rambling now, sorry) of factory workers in the 80s\ncomplaining about working conditions and the management nodding and smiling\nwhile doing nothing to rectify the situation and doomed to repeat the same\nerror. Except now the workers are intelligent and will walk, taking their\nbusiness knowledge and skill set with them.\n\nReply\n\n  6. Mike Will says:\n\nOctober 16, 2017 at 1:36 am\n\nVery enjoyable. I had a stab at the small sub-trail of \u2018syntonicity\u2019 here:\nhttp://www.scidata.ca/?p=895 Syntonicity is Stuart Watt\u2019s term which he\nprobably got from Seymour Papert.\n\nOf course, this may all become moot soon as our robot overlords take their\nplace at the keyboard.\n\nReply\n\n  7. joskid says:\n\nOctober 16, 2017 at 7:23 am\n\nReblogged this on josephdung.\n\nReply\n\n  8. otomato says:\n\nOctober 16, 2017 at 8:31 am\n\nA great article! I was very much inspired by Yuval\u2019s book myself. So much that\nI wrote a post about DevOps being a collective fiction :\nhttp://otomato.link/devops-is-a-myth/ Basically same ideas as yours but from a\ndifferent angle.\n\nReply\n\n  9. Roger says:\n\nOctober 16, 2017 at 5:24 pm\n\nFantastic article \u2013 I wonder what the next fashionable methodology will be?\n\nReply\n\n  10. Pingback: Evolving Software Development | CR 279 | Jupiter Broadcasting\n\n  11. Rafiqunnabi Nayan says:\n\nOctober 17, 2017 at 5:31 am\n\nA great article. Thanks a lot for writing.\n\nReply\n\n  12. Follow Blog Widget - Support - WordPress.com says:\n\nOctober 17, 2017 at 6:47 am\n\nThis site truly has all the information I needed about this subject and didn\u2019t\nknow who to ask.\n\nReply\n\n  13. Pingback: Five Blogs \u2013 18 October 2017 \u2013 5blogs\n\n  14. Pingback: Weekly Links #83 \u2013 Useful Links For Developers\n\n  15. Anthony Kesterton says:\n\nOctober 22, 2017 at 3:16 pm\n\nBrilliant \u2013 well said Ian!\n\nI think part of the \u201cneed\u201d for methodology is the desire for a common\nterminology. However, if everyone has their own view of what these terms mean,\nthen it all starts to go horribly wrong. The focus quickly becomes adhering to\nthe methodology rather than getting the work done.\n\nReply\n\n  16. Pingback: Die KW 42/2017 im Link-R\u00fcckblick | artodeto's blog about coding, politics and the world\n\n  17. Pingback: programming reading notes | Electronics DIY\n\n  18. Steve Naidamast says:\n\nOctober 23, 2017 at 1:15 pm\n\nA very well-written article. I retired from corporate development in 2014 but\nam still developing my own projects. I have written on this very subject and\nthese pieces have been published as well.\n\nThe idea that the Waterfall technique for development was the only one in use\nas we go back towards the earlier years is a myth that has been built up by\nthe folks who have been promoting the Agile technique, which for seniors like\nme has been just another word for what we used to call \u201cguerrilla\nprogramming\u201d. In fact, if one were to review that standards of design in\nsoftware engineering there are 13 types of design techniques, all of which\nhave been used at one time or another by many different companies\nsuccessfully. Waterfall was just one of them and was only recommended for very\nlarge projects.\n\nThe author is correct to conclude by implication that the best technique for\ndesign and implementation is the RAD technique promoted by Stephen McConnell\nof Construx and a team that can work well with other. His book, still in its\nfirst edition since 1996, is considered the Bible for software development and\ndescribes every aspect of software engineering one could require. His point.\nHowever, his book is only suggested as a guide where engineers can pick what\nthey really need for the development of their projects; not hard standards.\nNonetheless, McConnell stresses the need for good specifications and risk\nmanagement, the latter if not used always causes a project to fail or result\nin less than satisfactory results. His work is proven by over 35 years of\nresearch...\n\nReply\n\n  19. Mike says:\n\nOctober 23, 2017 at 1:39 pm\n\nHilarious and oh so true. Remember the first time you were being taught Agile\nand they told you that the stakeholders would take responsibility for their\nrole and decisions. What a hoot! Seriously, I guess they did used to write\ndetailed specs, but in my twenty some years, I\u2019ve just been thrilled if I had\na business analyst that knew about what they wanted\n\nReply\n\n  20. Kurt Guntheroth says:\n\nOctober 23, 2017 at 4:16 pm\n\nOK, here\u2019s a collective fiction for you. \u201cMethodologies don\u2019t work. They don\u2019t\nreflect reality. They are just something we tell customers because they are\nappalled when we admit that our software is developed in a chaotic and\nunprofessional manner.\u201d This fiction serves those people who already don\u2019t\nlike process, and gives them excuses. We do things the same way over and over\nfor a reason. We have traffic lights because it reduces congestion and reduces\ntraffic fatalities. We make cakes using a recipe because we like it when the\nresult is consistently pleasing. So too with software methodologies. Like cake\nrecipes, not all software methodologies are equally good at producing a\nconsistently good result. This fact alone should tell you that there is\nsomething of value in the best ones. While there may be a very few software\nchefs who can whip up a perfect result every time, the vast bulk of developers\nneed a recipe to follow or the results are predictably bad. Your diatribe\nagainst process does the community a disservice.\n\nReply\n\n  21. Doug says:\n\nOctober 24, 2017 at 5:34 am\n\nI have arrived at the conclusion that any and all methodologies would work \u2013\nIF (and it\u2019s a big one), everyone managed to arrive at a place where they\nconsidered the benefit of others before themselves. And, perhaps, they all\nused the same approach.\n\nFor me, it comes down to character rather than anything else. I can learn the\nskills or trade a chore with someone else.\n\nSoftware developers; the ones who create \u201cnew stuff\u201d, by definition, have no\nroadmap. They have experience, good judgment, the ability to \u2018survive in the\nwild\u2019, are always wanting to \u201csee what is over there\u201d and trust, as was noted\nis key. And there are varying levels of developer. Some want to build the\nroads; others use the roads built for them and some want to survey for the\nroad yet to be built. None of these are wrong \u2013 or right.\n\nThe various methodology fights are like arguing over what side of the road to\ndrive on, how to spell colour and color. Just pick one, get over yourself and\nhelp your partner(s) become successful.\n\nAh, right... Where do the various methodologies resolve greed, envy, distrust,\nselfishness, stepping on others for personal gain, and all of the other REAL\nkillers of success again?\n\nI have seen great teams succeed and far too many fail. Those that have failed\nmore often than not did so for character-related issues rather than technical\nones.\n\nReply\n\n  22. Pingback: into #SoftwareDevelopment ? this is a good read https://zwischenzugs.wordpress.com/2017/10/15/my-20-year-experience-of-software-development-methodologies/\n\n  23. Morten Damsgaard-madsen says:\n\nOctober 24, 2017 at 7:32 am\n\nOne of the best articles I have read in a long time about \u2013 well everything\n:-).\n\nReply\n\n  24. Pingback: Java Weekly, Issue 199 | Baeldung\n\n  25. Pingback: My 20-Year Experience of Software Development Methodologies | beloschuk\n\n  26. Pingback: \ud14c\uc2a4\ud2b8\uba54\uc77c | simple note\n\n  27. Ben Hayden says:\n\nNovember 7, 2017 at 1:36 pm\n\nBefore there exists any success, a methodology must freeze a definition for\nroles, as well as process. Unless there exist sufficient numbers and\nspecifications of roles, and appropriate numbers of sapiens to hold those\nroles, then the one on the end becomes overburdened and triggers systemic\nfailure.\n\nThere has never been a sufficiently-complex methodology that could encompass\nevery field, duty, and responsibility in a software development task. (This is\none of the reasons \u201cchaos\u201d is successful. At least it accepts the natural\norder of things, and works within the interstitial spaces of a thousand\nobjects moving at once.)\n\nWe even lie to ourselves when we name what we\u2019re doing: Methodology. It sounds\nso official, so logical, so orderly. That\u2019s a myth. It\u2019s just a way of pushing\nthe responsibility down from the most powerful to the least powerful \u2014 every\ntime.\n\nFor every \u201cmethodology,\u201d who is the caboose on the end of this authority\ntrain? The \u201ccoder.\u201d\n\nThe tighter the role definitions become in any methodology, the more actual\nresponsibilities cascade down to the \u201ccoder.\u201d If the specs conflict, who\nraises his hand and asks the question? If a deadline is unreasonable, who\ncomplains? If a technique is unusable in a situation, who brings that up?\n\nThe person is obviously the \u201ccoder.\u201d And what happens when the coder asks this\nquestion?\n\nIn one methodology the \u201ccoder\u201d is told to stop production and raise the issue\nwith the manager who will talk to the analyst who will talk to the client who\nwill complain that his instructions were clear and it all falls back to the\n\u201ccoder\u201d who, obviously, was too dim to understand the 1,200 pages of\nspecifications the analyst handed him.\n\nIn another, the \u201ccoder\u201d is told, \u201cyou just work it out.\u201d And the concomitant\nchaos renders the project unstable.\n\nIn another, the \u201ccoder\u201d is told \u201cjust do what you\u2019re told.\u201d And the result is\nincompatible with the rest of the project.\n\nI\u2019ve stopped \u201ccoding\u201d for these reasons and... because everybody is happy with\nthe myth of programming process because they aren\u2019t the caboose.\n\nReply\n\n    1. Kurt Guntheroth says:\n\nNovember 7, 2017 at 4:29 pm\n\nI was going to make fun of this post for being whiney and defeatust. But the\nmore I thought about it, the more I realized it contained a big nugget of\ntruth. A lot of methodologies, as practiced, have the purpose of putting off\nrisk onto the developers, of fixing responsibility on developers so the\nmanagers aren\u2019t responsible for any of the things that can go wrong with\nprojects.\n\nReply\n\n  28. Pingback: Organizing Teams With Collective Fictions | Hackaday\n\n  29. Pingback: Organizing Teams With Collective Fictions \u2013 High Tech Newz\n\n  30. Pingback: Organizing Teams With Collective Fictions \u2013 LorePop\n\n  31. Pingback: Seven Hypothesis of German Tech Culture and Challenging the Status Quo \u2013 @Virtual_Patrick\n\n  32. Pingback: My 20-Year Experience of Software Development Methodologies \u2013 InnovateStartup\n\n  33. Pingback: Interesting Links for 04-12-2017 | Made from Truth and Lies\n\n  34. Pingback: My 20-Year Trip of Gadget Trend Methodologies | A1A\n\n  35. William (Bill) Meade says:\n\nDecember 4, 2017 at 2:27 pm\n\nA pleasure to read. G\u00f6del incompleteness in software? Development environments\nare nothing if not formalisms. :-)\n\nReply\n\n  36. Pingback: My 20-Year Experience of Software Development Methodologies \u2013 Demo\n\n  37. Scott Armit (@smarmit) says:\n\nDecember 4, 2017 at 4:32 pm\n\nReally enjoyable and matches my 20+ years in the industry. Thank you.\n\nReply\n\n  38. dinkarshastri says:\n\nDecember 4, 2017 at 5:44 pm\n\nReblogged this on High output engineering.\n\nReply\n\n  39. Pedro Liska says:\n\nDecember 6, 2017 at 4:14 pm\n\nGreat article! I have experienced the same regarding software methodologies.\nAnd at a greater level, thank you for introducing me to the concept of\ncollective fictions; it makes so much sense. I will be reading Sapiens.\n\nReply\n\n  40. Pingback: The 20 MB hard drive; 3.5 billion Reddit comments; and much more - Intertech Blog\n\n  41. Alex Staveley says:\n\nDecember 8, 2017 at 5:33 pm\n\nActually, come to think of it there are two types of Software Engineers who\ntake process very seriously. One who is acutely aware of software entropy and\nwants to pro -actively fight against it because they want to engineer to a\nhigh standard and don\u2019t like working the weekend. So they wants things\norganised. Then there\u2019s another type who can come across as being a bit\ndogmatic. Maybe your links with collective delusions help explain some of the\nhuman psychology here.\n\nReply\n\n  42. Pingback: My 20-Year Experience of Software Development Methodologies \u2013 zwischenzugs | A Place Like This\n\n  43. Pingback: Newsletter 40 | import digest\n\n  44. Pingback: Interesting articles Jan-Mar 2018 \u2013 ProgBlog\n\n  45. Frank Thun says:\n\nFebruary 11, 2018 at 10:31 am\n\nGreat Article. Here is one I did about about Agile Management Systems, which\nare trying to lay the managerial foundations for \u201cAgile\u201d . Or should I say to\nliberate Organisations? None of the systems help if a full is using this tool,\nthough. https://managementdigital.net/2017/06/30/holacracy-liberation-and-\nmanagement-3-0/\n\nReply\n\n  46. Pingback: Five Things I Did to Change a Team\u2019s Culture \u2013 zwischenzugs\n\n  47. Pingback: Things I Learned Managing Site Reliability for Some of the World\u2019s Busiest Gambling Sites \u2013 zwischenzugs\n\n  48. Cara Mudah Memblokir Situs dengan MikroTik says:\n\nJune 2, 2018 at 4:02 pm\n\nMumtaz, i like this so much\n\nReply\n\n  49. Pingback: Personal experiences with agile: 16 comments, pictures and a video about practically applying agile - stratejos blog\n\n  50. Praxent says:\n\nJuly 24, 2018 at 2:49 pm\n\nreally good site\n\nReply\n\n  51. Pingback: The software dev \"process\" | Joe Teibel\n\n  52. Pingback: Why Are Enterprises So Slow? \u2013 zwischenzugs\n\n  53. Kostas Chairopoulos (@khairop) says:\n\nNovember 17, 2018 at 8:54 am\n\nFirst of all this is a great article, very well written. A couple of remarks.\nEarly in waterfall, the large business requirements documents didn\u2019t work for\ntwo reasons: There was no new business process, it was the same business\nprocess that should be applied within a new technology (from mainframes to\nopen unix systems, from ascii to RAD tools and 4-GL languages). . Second many\nconsultancy companies (mostly the big 4) there were using \u201ccopy&paste\u201d methods\nto fill these documents, submit the time and material forms for the\nconsultants, increasing the revenue and move on. Things have change with the\nadoption of the smartphones use etc ... To reflect the author idea, to my\nhumble opinion the collective fictions is the embedded quality of work into\nthe whole life cycle development Thanks Kostas\n\nReply\n\n  54. AriC says:\n\nDecember 8, 2018 at 3:40 pm\n\nSorry, did you forget to finish the article? I don\u2019t see the conclusion\nproviding the one true programming methodology that works in all occasions.\nWhat is the magic procedure? Thanks in advance.\n\nReply\n\n  55. Pingback: Notes on Books Read in 2018 \u2013 zwischenzugs\n\n  56. Pingback: \u2018AWS vs K8s\u2019 is the new \u2018Windows vs Linux\u2019 \u2013 zwischenzugs\n\n  57. Pingback: Notes on Books Read in 2019 \u2013 zwischenzugs\n\n  58. Pingback: Why Do We Have Dev Rels Now? \u2013 zwischenzugs\n\n  59. Pingback: Why Do We Have Dev Rels Now? - NSO News\n\n  60. Pingback: Why Do We Have Dev Rels Now? \u2013 WordPress Ecosystem News\n\n  61. James Bolwell says:\n\nJanuary 7, 2021 at 11:12 am\n\nthanks for sharing the post. Keep up the good post\n\nReply\n\n  62. Pingback: Software development theories are collective fictions | Smash Company\n\n  63. Pingback: \u201cWho Should Write the Terraform?\u201d \u2013 zwischenzugs\n\n### Leave a comment Cancel reply\n\nThis site uses Akismet to reduce spam. Learn how your comment data is\nprocessed.\n\n# Top Posts & Pages\n\n  * grep Flags - The Good Stuff\n  * Five Ansible Techniques I Wish I'd Known Earlier\n  * My 20-Year Experience of Software Development Methodologies\n  * How (and Why) I Run My Own DNS Servers\n  * Anatomy of a Linux DNS Lookup - Part I\n  * Convert Any Server to a Docker Container (Updated)\n  * Bash to Python Converter\n  * How to Manually Clear Locks in Jenkins\n  * Unprivileged Docker Builds - A Proof of Concept\n  * GitOps Decisions\n\n# Recent Posts\n\n  * What I Learned Using Private LLMs to Write an Undergraduate History Essay\n  * Learn jq the Hard Way,Part IV: Pipes\n  * Learn jq the Hard Way,Part III: Filters\n  * Learn jq the Hard Way, Part II: The jq Command\n  * Learn jq the Hard Way, Part I: JSON\n  * Monoliths, Microservervices and Mainframes \u2013 Reflections on Amazon Prime Video\u2019s Monolith Move\n  * Is it Imperative to be Declarative?\n  * The Biggest Cloud Native Strategy Mistake\n  * Practical Strategies for Implementing DevSecOps in Large Enterprises\n  * A Little Shell Rabbit Hole\n  * \u201cWho Should Write the Terraform?\u201d\n  * Business Value, Soccer Canteens, Engineer Retention, and the Bricklayer Fallacy\n  * Five Reasons To Master Git On The Command Line\n  * How 3D Printing Kindled A Love For Baroque Sculpture\n  * grep Flags \u2013 The Good Stuff\n  * Why It\u2019s Great To Be A Consultant\n  * Practical Shell Patterns I Actually Use\n  * Why I Keep Coming Back to Cynefin\n  * Is Agility Related to Commitment? \u2013 Money Flows Part II\n  * Five Ansible Techniques I Wish I\u2019d Known Earlier\n  * A \u2018Hello World\u2019 GitOps Example Walkthrough\n  * If You Want To Transform IT, Start With Finance\n  * How To Waste Hundreds of Millions on Your IT Transformation\n  * When Should I Interrupt Someone?\n  * An Incompetent Newbie Takes Up 3D Printing\n  * GitOps Decisions\n  * Five Ways to Undo a Commit in Git\n  * The Halving of the Centre: Covid and its Effect on London Property\n  * Why Do We Have Dev Rels Now?\n  * The Runbooks Project\n  * Some Relatively Obscure Bash Tips\n  * Riding the Tiger: Lessons Learned Implementing Istio\n  * The Astonishing Prescience of Nam June Paik\n  * Notes on Books Read in 2019\n  * The First Non-Bullshit Book About Culture I\u2019ve Read\n  * Why Everyone Working in DevOps Should Read The Toyota Way\n  * Surgically Busting the Docker Cache\n  * Software Security Field Guide for the Bewildered\n  * The Lazy Person\u2019s Guide to the Info Command\n  * A Hot Take on GitHub Actions\n  * Seven God-Like Bash History Shortcuts You Will Actually Use\n  * How Long Will It Take For The Leavers To Leave?\n  * Goodbye Docker: Purging is Such Sweet Sorrow\n  * Seven Surprising Bash Variables\n  * The Missing Readline Primer\n  * Apple\u2019s HQ, Ruskin, Gothic Architecture, and Agile\n  * Eight Obscure Bash Options You Might Want to Know About\n  * \u2018AWS vs K8s\u2019 is the new \u2018Windows vs Linux\u2019\n  * Pranking the Bash Binary\n  * Bash Startup Explained\n  * Git Hooks the Hard Way\n  * Notes on Books Read in 2018\n  * Six Ways to Level Up Your nmap Game\n  * Five Things I Wish I\u2019d Known About Git\n  * Eleven bash Tips You Might Want to Know\n  * Learn Bash Debugging Techniques the Hard Way\n  * Why Are Enterprises So Slow?\n  * Anatomy of a Linux DNS Lookup \u2013 Part V \u2013 Two Debug Nightmares\n  * Anatomy of a Linux DNS Lookup \u2013 Part IV\n  * Anatomy of a Linux DNS Lookup \u2013 Part III\n  * Anatomy of a Linux DNS Lookup \u2013 Part II\n  * Anatomy of a Linux DNS Lookup \u2013 Part I\n  * A Docker Image in Less Than 1000 Bytes\n  * Autotrace \u2013 Debug on Steroids\n  * Beyond \u2018Punk Rock Git\u2019 in Eleven Steps\n  * Sandboxing Docker with Google\u2019s gVisor\n  * Unprivileged Docker Builds \u2013 A Proof of Concept\n  * Learn Git Rebase Interactively\n  * Terminal Perf Graphs in one Command\n  * git log \u2013 the Good Parts\n  * Five Key Git Concepts Explained the Hard Way\n  * Create Your Own Git Diagrams\n  * Five Things I Did to Change a Team\u2019s Culture\n  * Centralise Your Bash History\n  * How (and Why) I Run My Own DNS Servers\n  * Ten More Things I Wish I'd Known About bash\n  * Download a Free Sample of Learn Bash the Hard Way\n  * Ten Things I Wish I\u2019d Known About bash\n  * Project Management as Code with Graphviz\n  * How to Manually Clear Locks in Jenkins\n  * How I Manage My Time\n  * Ten Things I Wish I\u2019d Known About Chef\n  * Vagrant and Ohai / Chef IP Address Hack\n  * \u2018Towards a National Computer Grid\u2019 \u2013 Electronic Computers, 1965\n  * A Complete Chef Infrastructure on Your Laptop\n  * Ten Things I Wish I\u2019d Known Before Using Vagrant\n  * A Checklist for Docker in the Enterprise (Updated)\n  * OpenShift 3.6 DNS In Pictures\n  * Puppeteer \u2013 Headless Chrome in a Container\n  * My 20-Year Experience of Software Development Methodologies\n  * A Non-Cloud Serverless Application Pattern Using Git and Docker\n  * Run Your Own AWS APIs on OpenShift\n  * Dockerized Headless Chrome Example\n  * Convert a Server to a Docker Container (Update II)\n  * Automating Dockerized Jenkins Upgrades\n  * Ten Things I Wish I\u2019d Known Before Using Jenkins Pipelines\n  * Five Books I Advise Every DevOps Engineer to Read\n  * Things I Learned Managing Site Reliability for Some of the World\u2019s Busiest Gambling Sites\n  * Clustered VM Testing How-To\n  * Easy Shell Automation\n  * 1-Minute Multi-Node VM Setup\n  * Migrating an OpenShift etcd Cluster\n  * A Complete OpenShift Cluster on Vagrant, Step by Step\n  * Learn Kubernetes the Hard Way (the Easy and Cheap Way)\n  * Docker in the Enterprise\n  * Terraform and Dynamic Environments\n  * Bash to Python Converter\n  * Hello world Unikernel Walkthrough\n  * A checklist for Docker in the Enterprise\n  * A Quick Tour of Docker 1.12\n  * Power \u2018git log\u2019 graphing\n  * ssh -R (reverse tunnel) man page hell\n  * Writing a Technical Book\n  * Interactive Git Tutorials \u2013 Rebase and Bisect\n  * Hitler Uses Docker, Annotated\n  * Linux Scales\n  * Play With Kubernetes Quickly Using Docker (Updated)\n  * Convert Any Server to a Docker Container (Updated)\n  * CI as Code Part III: Dynamic Jenkins-Swarm Example\n  * Docker 1.10 Highlights \u2013 Updated\n  * CI as Code Part II: Stateless Jenkins With Dynamic Docker Slaves\n  * CI as Code Part I: Stateless Jenkins Deployments Using Docker\n  * Docker Ecosystem Rosetta Stones\n  * Understanding Docker \u2013 A Tour of Logical Volume Management\n  * Automating Docker Security Validation\n  * The IT Crowd Was Right \u2013 What I learned by reading a lot of RFCs\n  * Understanding Docker \u2013 Network Namespaces\n  * DockerConEU 2015 Talk \u2013 You Know More Than You Think\n  * Docker Migration In-Flight CRIU\n  * A High Availability Phoenix and A/B Deployment Framework using Docker\n  * Quick Intro to Kubernetes\n  * Take OpenShift for a spin in four commands\n  * RedHat's Docker Build Method \u2013 S2I\n  * RedHat\u2019s Docker Build Method \u2013 S2I\n  * Bash Shortcuts Gem\n  * A CoreOS Cluster in Two Minutes With Four Commands\n  * The Most Pointless Docker Command Ever\n  * My Favourite Docker Tip\n  * A Field Guide to Docker Security Measures\n  * Docker SELinux Experimentation with Reduced Pain\n  * Storage Drivers and Docker\n  * Play With Kubernetes Quickly Using Docker\n  * Play with an OpenShift PaaS using Docker\n  * Scale Your Jenkins Compute With Your Dev Team: Use Docker and Jenkins Swarm\n  * Docker in Practice \u2013 A Guide for Engineers\n  * Fight Docker Package Drift!\n  * Win at 2048 with Docker and ShutIt (Redux)\n  * Set Up a Deis (Docker-Friendly) Paas on Digital Ocean for $0.18 Per Hour in Six Easy Steps Using ShutIt\n  * Create your own CoreOS cluster in 6 easy steps for $0.03\n  * Make Your Own Bespoke Docker Image\n\nWebsite Built with WordPress.com.\n\n  * Comment\n  * Reblog\n  * Subscribe Subscribed\n\n    * zwischenzugs\n    * Already have a WordPress.com account? Log in now.\n\n  * Privacy\n  *     * zwischenzugs\n    * Customize\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\nLoading Comments...\n\n%d\n\n", "frontpage": false}
