{"aid": "40011111", "title": "Why I recommend Renovate over any other dependency update tools", "url": "https://www.jvt.me/posts/2024/04/12/use-renovate/", "domain": "jvt.me", "votes": 10, "user": "ingve", "posted_at": "2024-04-12 10:35:48", "comments": 0, "source_title": "Why I recommend Renovate over any other dependency update tools \u00b7 Jamie Tanna | Software Engineer", "source_text": "Why I recommend Renovate over any other dependency update tools \u00b7 Jamie Tanna | Software Engineer\n\nWritten by Jamie Tanna on April 12, 2024 CC-BY-NC-SA-4.0 Apache-2.0 10 mins\n\n# Why I recommend Renovate over any other dependency update tools\n\nIf you've read my blog before, or interacted with me at work or in the Open\nSource world, you're likely to know that I'm a huge fan of Renovate.\n\nFor those that aren't aware, Renovate is one of the big players in dependency\nupdating tooling, commonly seen in comparisons with Dependabot or Snyk.\n\nI've been using Renovate for the last ~5 years, alongside a mix of Dependabot\nand Snyk to keep me grounded. I absolutely love Renovate, and make a point of\nmaking it so I can run Renovate where possible.\n\nI've also had the experience operating Renovate in self-hosted mode as well as\nused the hosted Renovate app by Mend and the Mend Enterprise SAAS, and plan to\nblog about the lessons learned self-hosting Renovate.\n\nRenovate has some really key features that set it apart from the competition,\nand I'm sure in the time it's taken me to write this, they've shipped some new\nones \ud83d\ude3b\n\n(Aside: I'm largely writing this blog post now, as I've recently been shouting\nthe benefits of Renovate, and instead of writing another internal-only\ndocument at work (as I did at Deliveroo), I wanted to write it as a form of\nblogumentation).\n\n## Prior art\n\nA few years back, I wrote about some tips for using Renovate to make keeping\nyour software up-to-date easier, which I still stand by.\n\nSince then, I've worked across a number of different ecosystems, repository\nsizes, and levels of comfort merging dependency updates, and have learned a\nfew more things about effectively using Renovate - but through it, I'm still\nvery sure of Renovate being the best tool in the ecosystem.\n\n## Configurability\n\nRenovate is extremely configurable, with dozens of configuration options to\ntune your experience. But Renovate doesn't end up being \"too\" configurable,\nwhere you end up spending more time tweaking config than doing the changes,\nbut configurable enough that it's very likely you can do what you need to with\nit.\n\n## Centralised, shareable presets\n\nThis is something that really hit me when we were rolling out Dependabot at\nDeliveroo, where my team owned ~30 repositories, and so for each of these\nrepos, we needed to hand-craft a dependabot.yml, as Dependabot needs to be\ntold which directories contain which dependencies, and how often to update\nthem.\n\nAfter we'd had about a week of usage, we started needing to tweak the\nconfiguration in a few of them to reduce the noise, which then required us to\nraise PRs across all the repos and get them updated.\n\nBecause Dependabot requires a bit of a snowflake configuration per repository,\nthis wasn't easily automatable, even with great tools available to automate\nsome of the bulk updates, which made this a rather onerous and frustrating\nprocess.\n\nCompare this to Renovate, where there's an excellent first-class support for\nshareable config presets, in which you can \"extend\" multiple configuration(s).\n\nThis allows a team that wants to have consistency (i.e. in how often they\nreceive updates to the AWS and Google Cloud SDKs, or which labels they want on\nPRs) to create a shared preset for their team that defines this. Then, each of\ntheir repositories can \"extend\" this configuration, as well as defining their\nown configuration on top of it at a repo-specific level.\n\nThis also makes it possible to provide good guardrails for your organisation,\nproviding a good set of defaults, such as a base.json:\n\n    \n    \n    { \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\", \"postUpdateOptions\": [ \"gomodTidy\", \"gomodUpdateImportPaths\" ], \"regexManagers\": [ { \"fileMatch\": [ \"^Makefile$\" ], \"matchStrings\": [ \"curl .*https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- .* (?<currentValue>.*?)\\\\n\" ], \"depNameTemplate\": \"github.com/golangci/golangci-lint\", \"datasourceTemplate\": \"go\" } ] }\n\nThis then allows defining a somewhat opinionated good starting point for teams\nwith a default.json:\n\n    \n    \n    { \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\", \"extends\": [ \"local>your-org-here/renovate-config:base\", \"config:best-practices\" ] }\n\nThen, teams only need to set the following in their repos' renovate.json, and\nthey'll have the benefits of onboarding with a lot of the hard work done with\nstarting:\n\n    \n    \n    { \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\", \"extends\": [ \"local>your-org-here/renovate-config\" ] }\n\nAnd that's it \ud83d\udc4f\n\n## Good defaults\n\nLinking back to the comment about having to hand-craft dependabot.ymls, the\ngreat thing about Renovate is that there's some great defaults, and that it\ncan autodetect the ecosystems your repo uses, and appropriately raises PRs.\n\nThis ease of onboarding is truly excellent, and you can even have an\nonboarding PR raised to your repos to make it even simpler.\n\nFor instance, at Deliveroo, we made it so there was a default set of\nconfiguration for all repos to give us an easy means to update Docker images,\nbut then if teams wanted to manage everything, they could add a renovate.json,\nand it'd be more fully featured.\n\nAdditionally, Renovate comes with some great inbuilt configuration in the form\nof presets, including a \"best practices\" guide and associated preset, which\nmakes it easier to keep on top of community best practices, without needing to\nbikeshed about what you think is best.\n\nIf you find that config:best-practices is a little too much, there's\nconfig:recommended as a starting point, and you can always downgrade or\nexclude rules you'd prefer not to follow. Or if you really want to control\nthings config:base is the minimum you should pull in.\n\n## Grouping\n\nAs suggested above, it's possible to tune how different packages get updated,\nwhere you can group multiple updates into a single PR.\n\nFor instance, let's say that you use 9 different AWS services in your\napplication, and instead of receiving 9 PRs every time there are updates\nacross the SDKs, you want a single one. In this case, you could craft the\nfollowing Renovate configuration:\n\n    \n    \n    { \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\", \"packageRules\": [ { \"groupName\": \"aws-sdk-go\", \"matchPackagePatterns\": [ \"^github.com/aws/aws-sdk-go-v2\" ] } ] }\n\nWhat's great about this is that you can also bundle things like all patch\nupdates into a single PR:\n\n    \n    \n    { \"packageRules\": [ { \"matchPackagePatterns\": [ \"*\" ], \"matchUpdateTypes\": [ \"patch\" ], \"groupName\": \"all patch dependencies\", \"groupSlug\": \"all-patch\" } ] }\n\nThis is something that's recently been added to Dependabot, which is great,\ncause Renovate's had it for years \ud83d\ude1d\n\n## Use for one-off bumps\n\nBecause Renovate is an Open Source tool you can run on the command-line, it\nmeans you can also get the ability to use Renovate for one-off executions, for\ninstance to get everyone in your organisation to a minimum version of a given\ndependency, or just to do an infrequently performed set of updates.\n\n## Supports more than other tools\n\nSomething I always refer back to is the fact that Renovate has a tonne of\nsupported package managers, package ecosystems and versioning tools.\n\nRenovate's bot comparison guide docs has a good example which links out to the\ndifferences between:\n\n  * What platforms Renovate supports\n  * What platforms Dependabot supports\n\nAs Dependabot is more focussed on being used on GitHub's platforms (citation\nneeded?) support for things like CircleCI, GitLab CI or other competitors'\ntooling doesn't seem to be available.\n\n## Adding support for additional ecosystems\n\nOne of the things you'll be used to having from your dependency update tool of\nchoice is your standard package manager support, where it'll update a go.mod\nor a pom.xml in your repositories.\n\nBut one thing that's quite important to understand is that there are many more\ndependencies in your project than those installed in your package manager.\nSomething I find great about Renovate is that, as well as managing\nDockerfiles, build.gradles, .gitlab-ci.yml, etc, it will also manage things\nyour .ruby-version or configuration for the ASDF version manager.\n\nBut what about some of the non-standard, or organisation-specific means for\ntracking versions?\n\nFor instance, installing the golangci-lint linting tool recommends using curl | sh:\n    \n    \n    $(GOBIN)/golangci-lint: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(GOBIN) v1.57.2\n\nAnd it's common for Dockerfiles to have a definition of the version of\ndependencies:\n\n    \n    \n    ARG MONGODB_VERSION=6.0.4\n\nOr what if you have a custom deployment configuration like:\n\n    \n    \n    # this is an (imaginary) company specific deployment configuration file application: lb: image: uk-tooling/load-balancer@v3.0.0\n\nIt's very unlikely that you have these supported by other tools out-of-the-\nbox, and Renovate is the same.\n\nBut Renovate does give you the ability to manage these versions yourself.\n\nUsing Renovate's custom managers we can craft a configuration file such as:\n\n    \n    \n    { \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\", \"regexManagers\": [ { \"fileMatch\": [ \"^Makefile$\" ], \"matchStrings\": [ \"curl .*https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- .* (?<currentValue>.*?)\\\\n\" ], \"depNameTemplate\": \"github.com/golangci/golangci-lint\", \"datasourceTemplate\": \"go\" } ] }\n\nAnd this will allow us to manage the golangci-lint installation.\n\nIdeally, this sort of configuration may make it upstream so Renovate can do it\nout-of-the-box, but as we can see from the above example, there may be things\nthat are organisation- or repo-specific, and so having it upstream'd doesn't\nmake sense.\n\n## Because you can do more with it\n\nAnd you can do even more with it - I've mentioned you can use it for one-off\nupdates on the command-line, but for instance I've also written a tool\nrenovate-graph which takes the detected dependency data from Renovate and\ngives you a JSON blob you can consume.\n\nThis underpins a large swathe of the power behind dependency-management-data\nand can be used for other means, such as converting Renovate data exports to a\nSoftware Bill of Materials (SBOM).\n\n## Dependency Dashboard\n\nOne thing I love about Renovate is that you can enable the Dependency\nDashboard, which gives you an overview of the detected dependencies, open PRs,\nas well s anything that may be waiting, or has failed to update.\n\nThis is a hugely useful insight into the at-a-glance how far behind are we on\nupdates, giving a view of whether you maybe want to spend a bit more time\nfocussing on updates, or looking at ways to cut through the noise.\n\nWhen you merge a PR into your default branch, Renovate will rebase open PRs,\nso they're easier to review, and are guaranteed to run against the latest\nchanges. However, if you're not getting to your updates as often as changes\nare going in, you may have a tonne of PRs constantly building, which is a\nwaste of energy and CI minutes.\n\nInstead, you can use the Dependency Dashboard for its ability to i.e. require\nmajor bumps be gated behind a manual approval, as it's likely you'll need some\nhuman interaction for that PR, and can then only raise it when you're actually\nready to deal with it.\n\n## Open Source\n\nA very important factor to me is that Renovate is Open Source, and open to\ncommunity contributions.\n\nAlthough it's probably best to be split into another article, I love the\nAGPL3, and it's a great way of making sure that anyone hosting Renovate as a\nplatform makes sure that their users get the access to the source code.\n\nAlternatively, Snyk is proprietary, and Dependabot is source available (or at\na stretch \"open source\" not \"Open Source\") with a license that doesn't even\nappear on the SPDX license list.\n\nRenovate is also brilliantly set up as a community project, where they're\nshipping hundreds of PRs a month, alongside managing the community really\nwell. I've seen a few things change in the last few years I've been more\nactively contributing, and it's a really well run project and an indication of\nsomething I'd love to be able to replicate at some point!\n\nIt also helps that Mend, the company behind Renovate, invests a fair bit of\ntime and money into development of the project, as well as their commercial\nofferings on top of it, which continue to make the project sustainable and\nremain Free and Open.\n\n## Great documentation\n\nFollowing on from the excellent community and maintainer contributions alike,\nthere's also some really excellent work on a technical writing and\ndocumentation point of view, which makes a lot of tasks straightforward to\nsolve.\n\nIf there's something a little more complex or custom than the docs can offer,\nit's usually something that can be answered by the community in a GitHub\nDiscussion, and likely could turn into a docs improvement, if necessary.\n\nThere's even a great comparison table between Renovate and other dependency\nupdate bots, as well as tips on how best to update your projects.\n\nI've recently discovered a few pages and features that I wasn't aware, just by\ngoing through the docs.\n\n## Overall\n\nIn summary, there's just so much that makes Renovate a greater choice than any\nof the alternatives, and I'm sure I could talk about more things that make it\ngreat.\n\nWhether you self-host it for maximum control (such as being able to access\ninternal artifact registries), or run the hosted app for ease of operations,\nor just run it from the command-line once in a while, it can be hugely useful\nto your experience as an engineer.\n\nI hope you'll check it out!\n\nThis post's permalink is https://www.jvt.me/posts/2024/04/12/use-renovate/ and\nhas the following summary:\n\n.\n\n> Explaining why Renovate is going to be my solution to keeping up-to-date\n> with dependencies and it's not likely to change any time soon.\n\nThe canonical URL for this post is https://www.jvt.me/posts/2024/04/12/use-\nrenovate/ .\n\nWritten by Jamie Tanna on Fri, 12 Apr 2024 11:06:35+01:00, and last updated on\nFri, 12 Apr 2024 11:06:35+01:00.\n\nContent for this article is shared under the terms of the Creative Commons\nAttribution Non Commercial Share Alike 4.0 International, and code is shared\nunder the Apache License 2.0.\n\n#blogumentation #renovate #dependabot #snyk.\n\nHas this content helped you? Did it solve that difficult-to-resolve issue\nyou've been chasing for weeks? Or has it taught you something new you'll be\nable to re-use daily?\n\nPlease consider supporting me so I can continue to create content like this!\n\nThis post was filed under articles.\n\n\u2190 \u2192 Top\n\nWant to get in touch? Drop me an email at hi@jamietanna.co.uk. I try to get\nback to everything, if I don't reply in a couple of weeks, feel free to give\nme a nudge!\n\nYou can also check out a list of all the places /elsewhere you can find me.\n\n\u00a9 2024 Jamie Tanna. Post content and code snippets licensing is detailed on\nrespective pages, otherwise default to Creative Commons Attribution Non\nCommercial Share Alike 4.0 International and Apache License 2.0. Site design\nreleased under the MIT License, based on Hack.css. Proudly hosted on AWS using\nS3 + CloudFront, deployed by GitLab CI, and generated by ea53bba2c7 on Fri, 12\nApr 2024 11:06:35 +0100..\n\n", "frontpage": true}
