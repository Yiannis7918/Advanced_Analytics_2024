{"aid": "40027061", "title": "We cut costs by 70% by moving from GCP and CockroachDB to Hetzner and PostgreSQL", "url": "https://blog.mikoto.io/building-your-own-cloud-for-fun-and-profit", "domain": "mikoto.io", "votes": 30, "user": "CactusBlue", "posted_at": "2024-04-13 23:10:23", "comments": 49, "source_title": "Building Your Own Cloud for Fun and Profit", "source_text": "Building Your Own Cloud for Fun and Profit\n\n# Mikoto\n\n# Mikoto\n\n# Building Your Own Cloud for Fun and Profit\n\n## How we cut costs by 70% by moving from GCP and CockroachDB into Hetzner and\nPostgreSQL\n\nCactusBlue\n\n\u00b7Apr 13, 2024\u00b7\n\n5 min read\n\n## The Old Infrastructure\n\nMikoto is completely bootstrapped, without a monetization strategy so far.\nThis means that every cent counts to maximize our runway. Prior to this\nmigration, we were spending around 48.08 USD per month on a single-node GKE\ncluster. While this isn't much for most startups, this is a major cost for a\nproject ran by a fresh graduate with little sources of other income.\n\nOur analysis for the costs:\n\n  * Nodes were much more expensive than what you could get from other clouds.\n\n  * Kubernetes creates Load Balancers per ingress, which eats into a lot of the costs.\n\nEventually, we've decided the cost was too much, so we'd have to move.\n\n## We Have Kubernetes at Home\n\nI've the other Big 3 (AWS, Azure) clouds; while they offered slightly cheaper\nprices on their cluster. Another option could be to on-prem with our own\nhardware; this was not feasible due to our geographical location, as well as\nthat we are a fully remote team.\n\nThe solution? Run our own Kubernetes cluster. Luckily, K3s exists, which is a\nsmall k8s distribution that can be installed with a single command. We've\ninstalled it on a Hetzner VPS.\n\n## Installing the Necessary Services\n\nI set up a VPS on Hetzner and set up a k3s node on it. Wasn't particularly\ndifficult.\n\nEven out of the box, k3s comes with Traefik + ServiceLB out of the box. Using\na software-based load balancer means that you do not need to pay for fees\nincurred by additional LoadBalancers (something that most cloud seem to create\nper Ingress!). Traefik is also a very nice Ingress controller to work with,\nsupporting more feature than the NGINX-based one that comes with many other\nk8s distros.\n\nOne of the first things I set up in any k8s cluster is ArgoCD. It handles\nGitOps - watching a git repository for changes in your Kubernetes manifest,\nwhich will be applied to the Kubernetes cluster. We use an app of apps pattern\nto create an App containing other ArgoCD apps (even ArgoCD itself is managed\nwith it), I was able to quickly replicate the old services from the cluster on\nGoogle Cloud into the Hetzner cluster.\n\n> Some of the services that power Mikoto now\n\nAfter that, I've installed Cert-Manager, so that every service in the cluster\ncan get HTTPS with minimal work on the container-level. Previously, we used\nHTTP01 challenge (which was less effort to set up), but we moved to DNS01\nchallenge, so that one Let's Encrypt Certificate could be shared for the\nentire infrastructure, and that we didn't need to wait for the certificate\nissuance every time we add a new service.\n\n    \n    \n    apiVersion: cert-manager.io/v1 kind: Issuer metadata: name: letsencrypt-dns spec: acme: server: https://acme-v02.api.letsencrypt.org/directory privateKeySecretRef: # Secret resource that will be used to store the account's private key. name: letsencrypt-dns-private-key solvers: - selector: dnsZones: - \"mikoto.io\" dns01: cloudflare: apiTokenSecretRef: name: cloudflare-api-token key: API_TOKEN --- apiVersion: cert-manager.io/v1 kind: Certificate metadata: name: mikoto-wildcard spec: secretName: mikoto-certificate issuerRef: name: letsencrypt-dns kind: Issuer commonName: \"*.mikoto.io\" dnsNames: # ... the domains go here --- apiVersion: traefik.containo.us/v1alpha1 kind: TLSStore metadata: name: default spec: defaultCertificate: secretName: mikoto-certificate\n\nJust adding this manifest will automatically make every Ingress in your K8s\nproject use HTTPS!\n\n## Getting Rid of CockroachDB\n\nNow, one of the things that we had problems with was moving out of CockroachDB\nServerless. Mikoto keeps the DB close to the server for performance, but they\ndid not offer CockroachDB serverless on Hetzner.\n\nWe previously used CockroachDB because it was free and it advertised itself as\nPostgreSQL-compatible. However, this is misleading, as the compatibility was\nsurface level deep. Sure, the wire protocol is the same, and much of the\nsyntax will work on both databases as well. However, no extension will work on\nCockroachDB, like PGVector, which blocked us from releasing our AI-powered\nsearch features.\n\nEven more, CockroachDB cannot take advantages of the wide range of tools built\nfor PostgreSQL (ORMs, Migration tools, Database Viewers), because the\nmetadata-related queries for retrieving table information work in different\nways.\n\nAnother main issue was the licensing: CockroachDB is licensed under BSL, a\nsource-available license. This is problematic for us, in that Mikoto is open-\nsource and running Mikoto would require using non-OSS software. While I have\nnothing against the CockroachDB team, but it was increasingly clear that their\nproduct direction did not fit my needs.\n\n### PostgreSQL on Kubernetes\n\nBecause of this, we've decided to bite the bullet and migrate out of\nCockroachDB and back into PostgreSQL. But even that was difficult; again,\nCockroachDB is only compatible with PostgreSQL on surface level. CockroachDB\nhandles backups by its BACKUP statements.\n\nThe solution we settled on was to use cockroach dump from an old version of\nCockroachDB (the newer versions had deprecated the command), to dump just the\ntable data, then use a few scripts to patch up the data to be imported into\nthe PostgreSQL server running on my Kubernetes cluster.\n\nWe've used CloudNative-PG operator for PostgreSQL, which manages the\ninstallation of the software. We have it configured to continuously archive\nthe cluster using Barman into a S3-compatible storage.\n\n## The Future\n\nInfrastructure| GCP (Old)| Hetzner (New)  \n---|---|---  \nStack| GKE + CockroachDB| k3s + PostgreSQL  \nSpecs| 2 Cores / 4GB RAM| 4 Cores / 8GB RAM  \nCost (USD)| $48.08| $15.34  \n  \nOur move brought our costs to 15.34 USD per month (nearly 70% in savings),\neven when using a node that was almost twice as powerful!\n\nFrom our move from GCP to Hetzner, we've saved cut our costs by over 2/3 and\ndoubled our capacity, while keeping all the benefits of running your services\non a cloud. Of course, the big clouds have a reason to be more expensive, and\nwhile I haven't had to deal with them, I assume they have more support\nregarding scaling up and support. However, modern computers are stupidly\npowerful, and you can get decently far with just optimizing your code - our\ncurrent infrastructure is expected to support at least a few hundred thousand\nconcurrent users!\n\nThis blog post was written somewhat hastily and might contain many mistakes -\nplease let me know if you're interested in some parts, or if you want me to\nexpand on the parts I haven't covered, and I will update this post. Sorry for\nnot keeping up with my own blogging schedules. Expect a lot more blog posts\nfrom me now!\n\nDevopsKubernetesProgramming BlogsCloud\n\n### Written by\n\n# CactusBlue\n\n### Published on\n\n# Mikoto\n\nThe blog from the world's most overkill messaging application\n\nThe blog from the world's most overkill messaging application\n\nShare this\n\n### More articles\n\nCactusBlue\n\n# Our Super-Secret Plan to Bring the Internet Back (Part 1)\n\nCurrently, not many people know of Mikoto other than as \"An open-source\nalternative to Discord\", eve...\n\nampdot\n\n# AI-native collaboration means desegregating AIs and humans\n\nOn many platforms, humans and AIs are separate types of entities with separate\ncapabilities. Discord...\n\n\u00a92024 Mikoto\n\nArchive\u00b7Privacy policy\u00b7Terms\n\nWrite on Hashnode\n\nPowered by Hashnode - Home for tech writers and readers\n\n", "frontpage": true}
