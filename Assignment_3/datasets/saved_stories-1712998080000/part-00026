{"aid": "40018013", "title": "What is a machine learning pipeline?", "url": "https://www.hopsworks.ai/dictionary/ml-pipeline", "domain": "hopsworks.ai", "votes": 1, "user": "jamesblonde", "posted_at": "2024-04-12 21:44:45", "comments": 0, "source_title": "What is a Machine Learning Pipeline? - Hopsworks", "source_text": "What is a Machine Learning Pipeline? - Hopsworks\n\nLoginContact\n\nDownload Now\n\nO'Reilly's Book \"Building ML Systems\" First Chapter Available!\n\nBack to the Index\n\n# Machine Learning Pipeline\n\n## What is a Machine Learning Pipeline?\n\nA Machine Learning Pipeline (ML pipeline) is a program that takes input and\nproduces one or more ML artifacts as output. Typically, a ML pipeline is one\nof the following: a feature pipeline, a training pipeline, or an inference\npipeline.\n\nIn the above figure, we can see three different examples of ML pipelines:\n\n  * a feature pipeline that takes as input raw data that it transforms into features (and labels),\n  * a training pipeline that takes as input features and labels, trains a model, and outputs the trained model,\n  * an inference pipeline that takes as input new feature data and a trained ML model, and produces as output predictions and prediction logs.\n\nFeature pipelines can be batch programs or streaming programs. Inference\npipelines can be batch programs or online inference pipelines, that wrap\nmodels made accessible via a network endpoint using model serving\ninfrastructure.\n\n## Why are ML Pipelines important?\n\nML pipelines enable you to move from training ML models on static data and\nmaking a single prediction on your static dataset to working with dynamic\ndata, so your model can continually generate value by making predictions on\nnew data. ML pipelines also help ensure the reproducibility and scalability of\nmachine learning workflows. By encapsulating the entire process in multiple\npipelines, it is easier to manage, version control, and share the different\nstages of the process.\n\n## What is a monolithic ML pipeline?\n\nA monolithic ML pipeline is a single program that can be run as either (1) a\nfeature pipeline followed by a training pipeline or (2) a feature pipeline\nfollowed by a batch inference pipeline.\n\n## Is a Data Pipeline a ML Pipeline?\n\nA data pipeline can be a ML pipeline, but unfortunately, the term data\npipeline is too generic to clearly define what the inputs and outputs to the\ndata pipeline are - thus making it an unclear term when communicating about ML\npipelines and ML systems.\n\n## How are ML pipelines related to the feature store?\n\nIf you have a feature store, you can decompose a monolithic ML pipeline into\nfeature, training and inference pipelines, where the output of. The feature\nstore becomes the data layer for your ML pipelines, storing the outputs of the\nfeature pipeline, and providing inputs to the training and inference\npipelines.\n\n### Interested for more?\n\n  * \ud83e\udd16 Register for free on Hopsworks Serverless\n  * \ud83d\udcda Get your early copy: O'Reilly's 'Building Machine Learning Systems' book\n  * \ud83d\udc0d Learn all about the Python-Centric Feature Store\n  * \ud83d\udee0\ufe0f Explore all Hopsworks Integrations\n  * \ud83e\udde9 Get started with codes and examples\n  * \u2696\ufe0f Compare other Feature Stores with Hopsworks\n\nDoes this content look outdated? If you are interested in helping us maintain\nthis, feel free to contact us.\n\nM\n\nAuto-regressive Models\n\nAutoML\n\nM\n\nBackfill features\n\nBackfill training data\n\nBackpressure for feature stores\n\nBatch Inference Pipeline\n\nM\n\nCI/CD for MLOps\n\nCompound AI Systems\n\nContext Window for LLMs\n\nM\n\nDAG Processing Model\n\nData Compatibility\n\nData Contract\n\nData Lakehouse\n\nData Leakage\n\nData Modeling\n\nData Partitioning\n\nData Pipelines\n\nData Quality\n\nData Transformation\n\nData Type (for features)\n\nData Validation (for features)\n\nData-Centric ML\n\nDimensional Modeling and Feature Stores\n\nDownstream\n\nM\n\nELT\n\nETL\n\nEmbedding\n\nEncoding (for Features)\n\nEntity\n\nM\n\nFeature\n\nFeature Data\n\nFeature Engineering\n\nFeature Freshness\n\nFeature Function\n\nFeature Groups\n\nFeature Logic\n\nFeature Monitoring\n\nFeature Pipeline\n\nFeature Platform\n\nFeature Reuse\n\nFeature Selection\n\nFeature Service\n\nFeature Store\n\nFeature Type\n\nFeature Value\n\nFeature Vector\n\nFeature View\n\nFiltering\n\nFine-Tuning LLMs\n\nM\n\nGenerative AI\n\nGradient Accumulation\n\nM\n\nHallucinations in LLMs\n\nHyperparameter\n\nHyperparameter Tuning\n\nM\n\nIdempotent Machine Learning Pipelines\n\nIn Context Learning (ICL)\n\nInference Data\n\nInference Logs\n\nInference Pipeline\n\nInstruction Datasets for Fine-Tuning LLMs\n\nM\n\nLLM Code Interpreter\n\nLLMOps\n\nLLMs - Large Language Models\n\nLagged features\n\nLangChain\n\nLatent Space\n\nM\n\nML\n\nML Artifacts (ML Assets)\n\nMLOps\n\nMVPS\n\nMachine Learning Observability\n\nMachine Learning Systems\n\nModel Architecture\n\nModel Bias\n\nModel Deployment\n\nModel Development\n\nModel Evaluation (Model Validation)\n\nModel Governance\n\nModel Inference\n\nModel Interpretability\n\nModel Monitoring\n\nModel Performance\n\nModel Quantization\n\nModel Registry\n\nModel Serving\n\nModel Training\n\nM\n\nNatural Language Processing (NLP)\n\nM\n\nOffline Store\n\nOn-Demand Features\n\nOn-Demand Transformation\n\nOnline Inference Pipeline\n\nOnline Store\n\nOnline-Offline Feature Skew\n\nOnline-Offline Feature Store Consistency\n\nOrchestration\n\nM\n\nKServe\n\nPandas UDF\n\nParameter-Efficient Fine-Tuning (PEFT) of LLMs\n\nPoint-in-Time Correct Joins\n\nPrecomputed Features\n\nPrompt Engineering\n\nPrompt Tuning\n\nPython UDF\n\nM\n\nRLHF - Reinforcement Learning from Human Feedback\n\nReal-Time Machine Learning\n\nRepresentation Learning\n\nRetrieval Augmented Generation (RAG) for LLMs\n\nRoPE Scaling\n\nM\n\nSQL UDF in Python\n\nSample Packing\n\nSchema\n\nSimilarity Search\n\nSkew\n\nSplitting Training Data\n\nStreaming Feature Pipeline\n\nStreaming Inference Pipeline\n\nM\n\nTest Set\n\nTheory-of-Mind Tasks\n\nTime travel (for features)\n\nTrain (Training) Set\n\nTraining Data\n\nTraining Pipeline\n\nTraining-Inference Skew\n\nTransformation\n\nTwo-Tower Embedding Model\n\nTypes of Machine Learning\n\nM\n\nUpstream\n\nM\n\nValidation Set\n\nVector Database\n\nVersioning (of ML Artifacts)\n\nPRODUCT\n\nThe Feature StoreProduct CapabilitiesOpen SourceCustomersIntegrationsApp\nStatus\n\nRESOURCES\n\nThe MLOps DictionaryEU AI Act GuideExamplesUse-\nCasesBlogEventsDocumentationFeature Store ComparisonCommunityFAQ\n\nCOMPANY\n\nAbout UsContact Us\n\nSlack\n\nGithub\n\nTwitter\n\nLinkedin\n\nYoutube\n\nJOIN OUR MAILING LIST\n\nSubscribe to our newsletter and receive the latest product updates, upcoming\nevents, and industry news.\n\n\u00a9 Hopsworks 2024. All rights reserved. Various trademarks held by their\nrespective owners.\n\n# Notice\n\nWe and selected third parties use cookies or similar technologies for\ntechnical purposes and, with your consent, for other purposes as specified in\nthe cookie policy.\n\nUse the \u201cAccept\u201d button to consent. Use the \u201cReject\u201d button to continue\nwithout accepting.\n\nPress again to continue 0/2\n\n", "frontpage": false}
