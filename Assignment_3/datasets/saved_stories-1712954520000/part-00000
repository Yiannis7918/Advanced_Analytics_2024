{"aid": "40013458", "title": "Dateutils", "url": "http://www.fresse.org/dateutils/", "domain": "fresse.org", "votes": 1, "user": "smartmic", "posted_at": "2024-04-12 14:39:23", "comments": 0, "source_title": "dateutils", "source_text": "dateutils\n\n  * github page\n  * latest release (dateutils-0.4.11.tar.xz)\n  * latest snapshot\n\n# Dateutils\n\nDateutils are a bunch of tools that revolve around fiddling with dates and\ntimes in the command line with a strong focus on use cases that arise when\ndealing with large amounts of financial data.\n\nDateutils are hosted primarily on github:\n\n  * project homepage: http://www.fresse.org/dateutils/\n  * github page: https://github.com/hroptatyr/dateutils\n  * downloads: https://bitbucket.org/hroptatyr/dateutils/downloads\n\nBelow is a short list of examples that demonstrate what dateutils can do, for\nfull specs refer to the info and man pages. For installation instructions\nrefer to the INSTALL file.\n\nDateutils commands are prefixed with a date but otherwise resemble known unix\ncommands for reasons of intuition. The only exception being strptime which is\nanalogous to the libc function of the same name.\n\n  * strptime Command line version of the C function\n  * dateadd Add durations to dates or times\n  * dateconv Convert dates or times between calendars\n  * datediff Compute durations between dates or times\n  * dategrep Grep dates or times in input streams\n  * dateround Round dates or times to \u201cfuller\u201d values\n  * dateseq Generate sequences of dates or times\n  * datesort Sort chronologically.\n  * datetest Compare dates or times\n  * datezone Convert date/times to timezones in bulk\n\n# Distributions\n\nFollowing Linux distros and BSD flavours provide native packages (in\nalphabetical order):\n\n  * Debian http://packages.debian.org/sid/dateutils\n  * DragonFly BSD http://gitweb.dragonflybsd.org/dports.git/tree/HEAD:/sysutils/dateutils\n  * Fedora https://admin.fedoraproject.org/pkgdb/package/dateutils/\n  * FreeBSD http://svnweb.freebsd.org/ports/head/sysutils/dateutils/\n  * Gentoo https://packages.gentoo.org/package/app-misc/dateutils\n  * NetBSD http://pkgsrc.se/time/dateutils\n  * OpenSuSE http://software.opensuse.org/download.html?project=utilities&package=dateutils\n  * OS X Homebrew http://brewformulas.org/Dateutils\n  * Slackware http://slackbuilds.org/repository/14.1/system/dateutils/\n  * Ubuntu http://packages.ubuntu.com/xenial/dateutils\n\n# Changelog\n\nSee dedicated changelog page.\n\n# Examples\n\nI love everything explained by example to get a first impression. So here it\ncomes.\n\n## dateseq\n\nA tool mimicking seq(1) but whose inputs are from the domain of dates rather\nthan integers. Typically scripts use something like\n\n    \n    \n    $ for i in $(seq 0 9); do date -d \"2010-01-01 +${i} days\" \"+%F\" done\n\nwhich now can be shortened to\n\n    \n    \n    $ dateseq 2010-01-01 2010-01-10\n\nwith the additional benefit that the end date can be given directly instead of\nbeing computed from the start date and an interval in days. Also, it provides\ndate specific features that would be a PITA to implement using the above\nseq(1)/date(1) approach, like skipping certain weekdays:\n\n    \n    \n    $ dateseq 2010-01-01 2010-01-10 --skip sat,sun => 2010-01-01 2010-01-04 2010-01-05 2010-01-06 2010-01-07 2010-01-08\n\ndateseq also works on times:\n\n    \n    \n    $ dateseq 12:00:00 5m 12:17:00 => 12:00:00 12:05:00 12:10:00 12:15:00\n\nand also date-times:\n\n    \n    \n    $ dateseq --compute-from-last 2012-01-02T12:00:00 5m 2012-01-02T12:17:00 => 2012-01-02T12:02:00 2012-01-02T12:07:00 2012-01-02T12:12:00 2012-01-02T12:17:00\n\n## dateconv\n\nA tool to convert dates between different calendric systems and/or time zones.\nWhile other such tools usually focus on converting Gregorian dates to, say,\nthe Chinese calendar, dconv aims at supporting calendric systems which are\nessential in financial contexts.\n\nTo convert a (Gregorian) date into the so called ymcw representation:\n\n    \n    \n    $ dateconv 2012-03-04 -f \"%Y-%m-%c-%w\" => 2012-03-01-00\n\nand vice versa:\n\n    \n    \n    $ dateconv 2012-03-01-Sun -i \"%Y-%m-%c-%a\" -f '%F' => 2012-03-04\n\nwhere the ymcw representation means, the %c-th %w of the month in a given\nyear. This is useful if dates are specified like, the third Thursday in May\nfor instance.\n\ndateconv can also be used to convert occurrences of dates, times or date-times\nin an input stream on the fly\n\n    \n    \n    $ dateconv -S -i '%b/%d %Y at %I:%M %P' <<EOF Remember we meet on Mar/03 2012 at 02:30 pm EOF => Remember we meet on 2012-03-03T14:30:00\n\nand most prominently to convert between time zones:\n\n    \n    \n    $ dateconv --from-zone \"America/Chicago\" --zone \"Asia/Tokyo\" 2012-01-04T09:33:00 => 2012-01-05T00:33:00 $ dateconv --zone \"America/Chicago\" now -f \"%d %b %Y %T\" => 05 Apr 2012 11:11:57\n\n## datetest\n\nA tool to perform date comparison in the shell, it\u2019s modelled after test(1)\nbut with proper command line options.\n\n    \n    \n    $ if datetest today --gt 2010-01-01; then echo \"yes\" fi => yes\n\n## dateadd\n\nA tool to perform date arithmetic (date maths) in the shell. Given a date and\na list of durations this will compute new dates. Given a duration and a list\nof dates this will compute new dates.\n\n    \n    \n    $ dateadd 2010-02-02 +4d => 2010-02-06 $ dateadd 2010-02-02 +1w => 2010-02-09 $ dateadd -1d <<EOF 2001-01-05 2001-01-01 EOF => 2001-01-04 2000-12-31\n\nAdding durations to times:\n\n    \n    \n    $ dateadd 12:05:00 +10m => 12:15:00\n\nand even date-times:\n\n    \n    \n    $ dateadd 2012-03-12T12:05:00 -1d4h => 2012-03-11T08:05:00\n\nIf supported by the system\u2019s zoneinfo database leap-second adjusted\ncalculations are possible. Use the unit rs to denote \u201creal\u201d seconds:\n\n    \n    \n    $ dateadd '2012-06-30 23:59:30' +30rs => 2012-06-30T23:59:60\n\nas opposed to:\n\n    \n    \n    $ dateadd '2012-06-30 23:59:30' +30s => 2012-07-01T00:00:00\n\n## datediff\n\nA tool to calculate the difference between two (or more) dates. This is\nsomewhat the converse of dadd. Outputs will be durations that, when added to\nthe first date, give the second date.\n\nGet the number of days between two dates:\n\n    \n    \n    $ datediff 2001-02-08 2001-03-02 => 22\n\nThe duration format can be controlled through the -f switch:\n\n    \n    \n    $ datediff 2001-02-08 2001-03-09 -f \"%m month and %d day\" => 1 month and 1 day\n\ndatediff also accepts time stamps as input:\n\n    \n    \n    $ datediff 2012-03-01T12:17:00 2012-03-02T14:00:00 => 92580s\n\nThe -f switch does the right thing:\n\n    \n    \n    $ datediff 2012-03-01T12:17:00 2012-03-02T14:00:00 -f '%dd %Ss' => 1d 6180s\n\ncompare to:\n\n    \n    \n    $ datediff 2012-03-01T12:17:00 2012-03-02T14:00:00 -f '%dd %Hh %Ss' => 1d 1h 2580s\n\nIf supported by the system\u2019s zoneinfo database leap-second adjusted\ncalculations can be made. Use the format specifier %rS to get the elapsed time\nin \u201creal\u201d seconds:\n\n    \n    \n    datediff '2012-06-30 23:59:30' '2012-07-01 00:00:30' -f '%rS' => 61\n\n## dategrep\n\nA tool to extract lines from an input stream that match certain criteria,\nshowing either the line or the match:\n\n    \n    \n    $ dategrep '<2012-03-01' <<EOF Feb 2012-02-28 Feb 2012-02-29 leap day Mar 2012-03-01 Mar 2012-03-02 EOF => Feb 2012-02-28 Feb 2012-02-29 leap day\n\n## dateround\n\nA tool to \u201cround\u201d dates or time stamps to a recurring point in time, like the\nnext/previous January or the next/previous Thursday.\n\nRound (backwards) to the first of the current month:\n\n    \n    \n    $ dateround '2011-08-22' -1 => 2011-08-01\n\nFind the next Monday from the current date (today is 2016-01-08):\n\n    \n    \n    $ dateround today Mon => 2015-01-11\n\nGo back to last September, then round to the end of the month:\n\n    \n    \n    $ dateround today -- -Sep +31d => 2015-09-30\n\nRound a stream of dates strictly to the next month\u2019s first:\n\n    \n    \n    $ dateround -S -n 1 <<EOF pay cable 2012-02-28 pay gas 2012-02-29 pay rent 2012-03-01 redeem loan 2012-03-02 EOF => pay cable 2012-03-01 pay gas 2012-03-01 pay rent 2012-04-01 redeem loan 2012-04-01\n\nRound a timeseries to the next minute (i.e. the seconds part is 00) and then\nto the next half-past time (and convert to ISO):\n\n    \n    \n    $ dateround -S 0s30m -i '%d/%m/%Y %T' -f '%F %T' <<EOF 06/03/2012 14:27:12 eventA 06/03/2012 14:29:59 eventA 06/03/2012 14:30:00 eventB 06/03/2012 14:30:01 eventB EOF => 2012-03-06 14:30:00 eventA 2012-03-06 14:30:00 eventA 2012-03-06 14:30:00 eventB 2012-03-06 15:30:00 eventB\n\nAlternatively, if you divide the day into half-hours you can round to one of\nthose using the co-class notation:\n\n    \n    \n    $ dateround -S /30m -i '%d/%m/%Y %T' -f '%F %T' <<EOF 06/03/2012 14:27:12 eventA 06/03/2012 14:29:59 eventA 06/03/2012 14:30:00 eventB 06/03/2012 14:30:01 eventB EOF => 2012-03-06 14:30:00 eventA 2012-03-06 14:30:00 eventA 2012-03-06 14:30:00 eventB 2012-03-06 15:00:00 eventB\n\nThis is largely identical to the previous example except, that a full hour\n(being an even multiple of half-hours) is a possible rounding target.\n\n## datesort\n\nA tool to bring the lines of a file into chronological order.\n\nAt the moment the datesort tool depends on sort(1) with support for fields, in\nparticular -t to select a separator and -k to sort by a particular field.\n\n    \n    \n    $ datesort <<EOF 2009-06-03 caev=\"DVCA\" secu=\"VOD\" exch=\"XLON\" xdte=\"2009-06-03\" nett/GBX=\"5.2\" 2011-11-16 caev=\"DVCA\" secu=\"VOD\" exch=\"XLON\" xdte=\"2011-11-16\" nett/GBX=\"3.05\" 2013-11-20 caev=\"DVCA\" secu=\"VOD\" exch=\"XLON\" xdte=\"2013-11-20\" nett/GBX=\"3.53\" 2012-06-06 caev=\"DVCA\" secu=\"VOD\" exch=\"XLON\" xdte=\"2012-06-06\" nett/GBX=\"6.47\" 2013-06-12 caev=\"DVCA\" secu=\"VOD\" exch=\"XLON\" xdte=\"2013-06-12\" nett/GBX=\"6.92\" 2010-11-17 caev=\"DVCA\" secu=\"VOD\" exch=\"XLON\" xdte=\"2010-11-17\" nett/GBX=\"2.85\" EOF => 2009-06-03 caev=\"DVCA\" secu=\"VOD\" exch=\"XLON\" xdte=\"2009-06-03\" nett/GBX=\"5.2\" 2010-11-17 caev=\"DVCA\" secu=\"VOD\" exch=\"XLON\" xdte=\"2010-11-17\" nett/GBX=\"2.85\" 2011-11-16 caev=\"DVCA\" secu=\"VOD\" exch=\"XLON\" xdte=\"2011-11-16\" nett/GBX=\"3.05\" 2012-06-06 caev=\"DVCA\" secu=\"VOD\" exch=\"XLON\" xdte=\"2012-06-06\" nett/GBX=\"6.47\" 2013-06-12 caev=\"DVCA\" secu=\"VOD\" exch=\"XLON\" xdte=\"2013-06-12\" nett/GBX=\"6.92\" 2013-11-20 caev=\"DVCA\" secu=\"VOD\" exch=\"XLON\" xdte=\"2013-11-20\" nett/GBX=\"3.53\"\n\n## datezone\n\nA tool to quickly inspect date/time values in different timezones. The result\nwill be a matrix that shows every date-time value in every timezone:\n\n    \n    \n    $ datezone Europe/Berlin Australia/Sydney now 2014-06-30T05:00:00 => 2014-01-30T17:37:13+01:00 Europe/Berlin 2014-01-31T03:37:13+11:00 Australia/Sydney 2014-06-30T07:00:00+02:00 Europe/Berlin 2014-06-30T15:00:00+10:00 Australia/Sydney\n\nThe datezone tool can also be used to obtain the next or previous DST\ntransition relative to a given date/time:\n\n    \n    \n    $ datezone --next Europe/Berlin Australia/Sydney 2013-02-19 => 2013-03-31T02:00:00+01:00 -> 2013-03-31T03:00:00+02:00 Europe/Berlin 2013-04-07T03:00:00+11:00 -> 2013-04-07T02:00:00+10:00 Australia/Sydney\n\nwhere the left time stamp denotes the current zone offset and the right side\nis the zone offset after the transition. The date/time indicates the exact\nmoment when the transition is about to take place.\n\nIn essence datezone is a better zdump(8).\n\n## strptime\n\nA tool that brings the flexibility of strptime(3) to the command line. While\n(at least GNU) date(1) has support for output formats, it lacks any kind of\nsupport to read arbitrary input from the domain of dates, in particular when\nthe input format is specifically known beforehand and only matching\ndates/times shall be considered.\n\nWith the strptime tool reading weird dates like Mon, May-01/2000 becomes a\nmatter of\n\n    \n    \n    strptime -i \"%a, %b-%d/%Y\" \"Mon, May-01/2000\" => 2000-05-01\n\njust as you would have done in C.\n\nNote that strptime actually uses the system libc\u2019s strptime routine, and for\noutput the system\u2019s strftime routine. Input and output modifiers will\ntherefore vary between systems.\n\nFor a portable parser/printer combination use dateconv as described above. Its\ninput and output format specifiers are independent of the C runtime.\n\n# Timezone map files\n\nStarting with version 0.3.0 dateutils has built-in support for tzmaps. We\u2019ve\ndedicated a branch (orphan tzmaps) for their development and a website for\nfurther information.\n\n# Locale support\n\nSince version 0.4.0 dateutils allows for reading and printing localised dates:\nSeeing as input had to be specified explicitly from day 1, this feature covers\nweekday and month names only.\n\nAs is generally the philosophy of dateutils, locale support does not depend on\nsystem infrastructure (libc in this case) nor does it follow the usual\nsemantics of setting LC_TIME, so different locales can be used for input and\noutput independent of the user\u2019s environment.\n\nAll tools support the --from-locale parameter while tools that output\ndate/times also support --locale.\n\n    \n    \n    $ dateconv --from-locale it_IT -i '%d %B %Y' '19 maggio 2016' 2016-05-19 $ dateconv --locale fr_FR -f '%d %B %Y' 2016-05-19 19 mai 2016 $\n\nThe locale file is a simple tab separated text, following the locale\nidentifier line (xx_XX) is the line of abbreviated weekday names (%a) of which\nthere must be 7 corresponding to Mon, Tue, ..., followed by long weekday names\n(%A), followed by abbreviated month names (%b) of which there must be 12\ncorresponding to Jan, Feb, ..., followed last by the long month names (%B).\n\nExtending the file is thus a matter of adding 5 lines. The environment\nvariable LOCALE_FILE can be used to override the default location.\n\n# Similar projects\n\nIn no particular order and without any claim to completeness:\n\n  * dateexpr: http://www.eskimo.com/~scs/src/#dateexpr\n  * allanfalloon\u2019s dateutils: https://github.com/alanfalloon/dateutils\n  * yest http://yest.sourceforge.net/\n  * pdd https://github.com/jarun/pdd\n\nUse the one that best fits your purpose. And in case you happen to like mine,\nvote: dateutils\u2019 openhub page\n\n# Social Media et al\n\nYes, we\u2019re aware of social media:\n\n  * twitter\n  * Openhub\n  * Google Groups Mailing List\n\n", "frontpage": false}
