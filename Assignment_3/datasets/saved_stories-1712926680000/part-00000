{"aid": "40010041", "title": "Ring: Simple and flexible programming language for applications development", "url": "https://ring-lang.github.io/", "domain": "ring-lang.github.io", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-12 06:56:09", "comments": 0, "source_title": "Ring Language", "source_text": "The Ring Programming Language\n\nDownload\n\nDocumentation\n\nResources\n\nGroup\n\n### Simple and flexible programming language for applications development\n\n#### Introduction\n\nThe Ring is a practical general-purpose multi-paradigm language. The supported\nprogramming paradigms are imperative, procedural, object-oriented, declarative\nusing nested structures, functional, meta programming and natural programming.\nThe language is portable (MS-DOS, Windows, Linux, macOS, Android, WebAssembly,\netc.) and can be used to create Console, GUI, Web, Games and Mobile\napplications. The language is designed to be simple, small and flexible.\n\nRing is distributed as a Free-Open Source project under the MIT License.\n\n#### News\n\nApril 11, 2024| Ring 1.20 Released!  \n---|---  \nApril 04, 2024| Try Ring Online (WebAssembly)  \nMarch 23, 2024| Will AI replace programmers?  \n  \nSee more!\n\nGet Excited!\n\n#### Quick Introduction\n\nRing comes with better support for Natural Language Programming and\nDeclarative Programming. The language support these paradigms with new\npractical techniques on the top of Object-Oriented Programming and Functional\nProgramming. No need to know anything about (Compilers and Parsing). You get\nthe language constructs ready for use to create domain-specific languages in a\nfraction of time.\n\nAim Ring Article Syntax Flexibility The Declarative Approach Natural Language\nProgramming Natural Language Programming Library Programming Without Coding\nTechnology (PWCT)\n\nPractical\n\n#### Libraries and Tools\n\nMany of the Ring libraries (StdLib, WebLib, Natural Library, Games Engine,\netc.) and the Ring IDE (Ring Notepad, Form Designer, etc.) are written in the\nRing language itself. Ring is ready for use in production and increase the\ndevelopers productivity.\n\n#### Custom Styles And Modern Programming Paradigms\n\nUsing Ring you will feel that the language is yours! A lot of modern\nprogramming paradigms are ready for use in production and using the Natural\nLanguage Programming you can quickly integrate natural interfaces to your\nprograms. Also, you can start your software development with writing natural\ndescriptions, then adding the implementation later.\n\nPrevious Next\n\n#### GUI Applications Development And RAD Tools\n\nMany developers reported that using Ring we can develop many GUI applications\nin a few hours. Ring comes with Rapid Application Development (RAD) tools that\nwe can use to quickly develop GUI applications using the MVC design pattern.\nAlso, using the same source code we can distribute our applications for\nDesktop, Web and Mobile platforms.\n\nPrevious Next\n\n#### First Class Support For Game Development\n\nWe believe in Games as a nice way to encourage people to learn programming.\nRing comes with many game programming libraries in the standard library. Ring\nprovides native support for Allegro, LibSDL, RayLib, OpenGL and Qt3D\nlibraries. Also, Ring comes with simple game engine for 2D games development\nusing Declarative Programming.\n\nPrevious Next\n\n#### WebAssembly (Front-End Web Development)\n\nUsing Ring we can quickly develop web applications using WebAssembly (Binary\nformat that allows sand-boxed executable code in web pages. This format is\nnearly as fast as native machine code, and is now supported by all major web\nbrowsers)\n\nPrevious Next\n\n#### Back-End Web Development\n\nUsing Ring we can quickly develop web applications using the MVC design\npattern. We can easily use HTML templates with embedded Ring code. Also, we\ncan generate HTML code from Ring programs using Declarative Programming.\n\nPrevious Next\n\n#### Mobile Development\n\nUsing Ring we can distribute our applications for Mobile platforms (Android,\niOS, etc.)\n\nPrevious Next\n\n#### Building Tools (Command Line)\n\nUsing Ring we can whip up a CLI tool quickly and distribute it with ease. The\nRing Package Manager is an example about a powerful tool that we developed\nusing Ring in a few hours. We recorded the development time (21 hours of\ndevelopment includes explaining each step)\n\nPrevious Next\n\nWhy Ring?\n\n#### Why Ring?\n\nThe language is simple, trying to be natural, encourage organization and comes\nwith transparent and visual implementation. It comes with compact syntax and a\ngroup of features that enable the programmer to create natural interfaces and\ndeclarative domain-specific languages in a fraction of time. It is very small,\nflexible and comes with smart garbage collector that puts the memory under the\nprogrammer control. It supports many programming paradigms, comes with useful\nand practical libraries. The language is designed for productivity and\ndeveloping high quality solutions that can scale.\n\n#### Designed for a Clear Goal\n\n  * Applications programming language.\n  * Productivity and developing high quality solutions that can scale.\n  * Small and flexible language that can be embedded in C/C++ projects.\n  * Simple language that can be used in education and introducing Compiler/VM concepts.\n  * General-Purpose language that can be used for creating domain-specific libraries, frameworks and tools.\n  * Practical language designed for creating the next version of the Programming Without Coding Technology software.\n\n#### Simple\n\nRing is a very simple language, and has a very straightforward syntax. It\nencourages programmers to program without boilerplate code. To print something\nusing the standard output, We can use the 'See' command.\n\n    \n    \n    see \"Hello, World!\"\n\nThe Main function is optional and will be executed after the statements, and\nis useful for using the local scope.\n\n    \n    \n    func main see \"Hello, World!\"\n\nUses Dynamic Typing and Lexical scoping. Also we can use the '+' operator for\nstring concatenation.\n\n    \n    \n    nCount = 10 # Global variable func main nID = 1 # Local variable see \"Count = \" + nCount + nl + \" ID = \" + nID\n\n#### Trying to be natural\n\nRing is not case-sensitive\n\n    \n    \n    see \"Enter your name ? \" give name see \"Hello \" + Name # Name is the same as name\n\nThe list index starts from 1\n\n    \n    \n    aList = [\"one\",\"two\",\"three\"] see aList[1] # print one\n\nCall functions before definition\n\n    \n    \n    one() two() three() func one see \"One\" func two see \"two\" func three see \"three\"\n\nThe assignment operator uses Deep copy (no references in this operation)\n\n    \n    \n    aList = [\"one\",\"two\",\"three\"] aList2 = aList aList[1] = 1 see alist[1] # print 1 see aList2[1] # print one\n\nPass numbers and strings by value, but pass lists and objects by reference.\nThe for in loop can update the list items.\n\n    \n    \n    func main aList = [1,2,3] update(aList) see aList # print one two three func update aList for x in aList switch x on 1 x = \"one\" on 2 x = \"two\" on 3 x = \"three\" off next\n\nUsing Lists during definition\n\n    \n    \n    aList = [ [1,2,3,4,5] , aList[1] , aList[1] ] see aList # print 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n\nExit from more than one loop\n\n    \n    \n    for x = 1 to 10 for y = 1 to 10 see \"x=\" + x + \" y=\" + y + nl if x = 3 and y = 5 exit 2 # exit from 2 loops ok next next\n\n#### Encourage Organization\n\nThe language encourage organization, Forget bad days using languages where the\nprogrammer start with function then class then function and a strange mix\nbetween things!\n\nEach source file follow the next structure\n\n  * Load Files\n  * Statements and Global Variables\n  * Functions\n  * Packages and Classes\n\nThis enable us to use Packages, Classes and Functions without the need to use\na keyword to end these components.\n\nWe can write one line comments and multi-line comments The comment starts with\n# or // Multi-line comments are written between /* and */\n\n    \n    \n    /* Program Name : My first program using Ring Author : Ring Team */ see \"What is your name? \" # print message on screen give cName # get input from the user see \"Hello \" + cName # say hello! // See \"End of Program!\"\n\n#### Data Representation\n\nRing contains only four (4) types that represent the program data. These types\nare (String, Number, List & Object). The idea is to have many use cases for\neach type which increase the flexibility and the ability to write functions\nthat are more usable in different situations.\n\nThe String type is used to represent:\n\n  * One character\n  * A string of many characters\n  * Multi-line string\n  * Binary Data\n\n    \n    \n    cStr1 = \"a\" # One character cStr2 = \"Hello, World!\" # A string of many characters cStr3 = \"Hello Welcome to the Ring language! \" # Multi-line string cStr4 = read(EXEFileName()) # Read executable file (Binary Data)\n\nThe Number type is used to represent\n\n  * Boolean Values\n  * Signed/Unsigned Integers\n  * Float/Double\n\n    \n    \n    nNum1 = True # Boolean Value (1) nNum2 = False # Boolean Value (0) nNum3 = 10 # Integer nNum4 = -10 # Signed Integer nNum5 = 1250.11 # Float/Double\n\nThe List type is used instead of\n\n  * One Dimension Arrays\n  * Multi-Dimension Arrays\n  * Lists of multiple types\n  * Nested Lists\n  * Hash Tables (Key & Value)\n  * Tree\n  * Wrapper around a C Pointer\n\n    \n    \n    aList1 = [\"one\",\"two\",\"three\"] # Strings aList2 = [1,2,3,4,5,6,7,8,9,10] # Numbers aList3 = [\"Ring\",1234] # Multiple types aList4 = [[\"Fayed\",\"Egypt\"],[\"Mansour\",\"Tunisia\"]] # Nested Lists aList5 = [ :name = \"Fayed\", :country = \"Egypt\"] # Hash Tables\n\nThe Object type is used to represent objects created from classes\n\nUsing classes and operator overloading we can create custom types\n\n#### Compact Syntax\n\nThe language is not line sensitive, you don't need to write ; after\nstatements, also you don't need to press ENTER or TAB, so we can write the\nnext code\n\n    \n    \n    see \"The First Message\" see \" Another message in the same line! \" + nl see \"Enter your name?\" give Name see \"Hello \" + Name\n\nThe next code create a class called Point contains three attributes X,Y and Z.\nNo keywords is used to end the package/class/function definition. Also, we can\nwrite the attributes names directly below the class name.\n\n    \n    \n    class Point X Y Z\n\nWe can use classes and functions before their definition, In this example we\nwill create new object, set the object attributes then print the object\nvalues.\n\n    \n    \n    o1 = new point o1.x=10 o1.y=20 o1.z=30 see O1 class Point X Y Z\n\nInstead of using the dot '.' operator to access the object attributes and\nmethods we can use braces { } to access the object, then we can use the object\nattributes and methods.\n\n    \n    \n    o1 = new point { x=10 y=20 z=30 } see O1 class Point X Y Z\n\nNow we will call a method after accessing the object using { }\n\n    \n    \n    oPerson = new Person { Name = \"Somebody\" Address = \"Somewhere\" Phone = \"0000000\" Print() # here we call the Print() method } class Person Name Address Phone func Print see \"Name :\" + name + nl + \"Address :\" + Address + nl + \"Phone : \" + phone + nl\n\nWhen we use { } to access the object then write any attribute name, the\nlanguage will check the class for any setter/getter methods that will be\ncalled automatically.\n\n    \n    \n    new Number { see one # Execute GetOne() see two # Execute GetTwo() see three # Execute GetThree() } class Number one two three func GetOne see \"Number : One\" + nl return 1 func GetTwo see \"Number : Two\" + nl return 2 func GetThree see \"Number : Three\" + nl return 3\n\n#### Syntax Flexibility\n\nRing comes with many styles for writing your source code. Also, You can change\nthe language keywords and operators and create your custom style!\n\n  * The First Style\n    \n        ? \"Welcome to Ring! \" new test { start() } class Test x=10 y=20 func start ? \"x+y=\" + (x+y) for t=1 to 10 ? \"t = \" + t if t=3 ? \"Three\" ok next\n\n  * The Second Style\n    \n        def main put \"Welcome to Ring! \" + nl new test { start() } end class Test x = 10 y = 20 def start put \"x+y=\" + (x+y) + nl for t=1 to 10 put \"t = \" + t + nl if t=3 put \"Three\" + nl end end end end\n\n  * The Third Style\n    \n        load \"stdlib.ring\" func main() { print(\"Welcome to Ring! \\n\") new test { start() } } class Test { x = 10 y = 20 func start { print(\"x+y=\" + (x+y) + \"\\n\") for t=1 to 10 { print(\"t = \" + t + \" \\n\") if t=3 { print(\"Three \\n\") } } } }\n\n  * Change Keywords\n    \n        ChangeRingKeyword See Print Print \"Hello, World!\" ChangeRingKeyword Print See See \"Hello, World!\" ChangeRingKeyword See Show Show \"Hello, World!\"\n\n#### Define Natural Statements based on Object-Oriented\n\nAfter the object access using { } if the class contains a method called\nBraceEnd() it will be executed!\n\n    \n    \n    TimeForFun = new journey # The first surprise! TimeForFun { Hello it is me # What a beautiful programming world! } # Our Class class journey hello=0 it=0 is=0 me=0 func GetHello See \"Hello\" + nl func braceEnd See \"Goodbye!\" + nl\n\nWe can execute code written in strings using the Eval() function\n\n    \n    \n    cCode = \"See 'Code that will be executed later!' \" Eval(cCode) # execute the code to print the message\n\nWe can create a list then execute code generated from that list\n\n    \n    \n    aWords = [\"hello\",\"it\",\"is\",\"me\"] for word in aWords cCode=word+\"=0\" eval(cCode) next\n\nWe can read text files using the Read(cFileName) function and we can write\nfiles using the Write(cFileName,cString) function.\n\n    \n    \n    see \"Enter File Name:\" give cFileName see read(cFileName) # Print the file content\n\nThe next example presents how to create a class that defines two instructions\nThe first instruction is : I want window The second instruction is : Window\ntitle = Expression Also keywords that can be ignored like the **the** keyword\n\n    \n    \n    new App { I want window The window title = \"hello world\" } class App # Attributes for the instruction I want window i want window nIwantwindow = 0 # Attributes for the instruction Window title # Here we don't define the window attribute again title nWindowTitle = 0 # Keywords to ignore, just give them any value the=0 func geti if nIwantwindow = 0 nIwantwindow++ ok func getwant if nIwantwindow = 1 nIwantwindow++ ok func getwindow if nIwantwindow = 2 nIwantwindow= 0 see \"Instruction : I want window\" + nl ok if nWindowTitle = 0 nWindowTitle++ ok func settitle cValue if nWindowTitle = 1 nWindowTitle=0 see \"Instruction : Window Title = \" + cValue + nl ok\n\nTo complete the previous example, use read() to get the content of a file that\ncontains\n\n    \n    \n    I want window The window title = \"hello world\"\n\nThen use eval() to execute the content of that file!. Also, you can update the\nmethods GetWindow() and SetTitle() to create Real windows using the GUI\nLibrary\n\n#### Define Declarative Languages using Nested Structures based on Object-\nOriented\n\nWe learned how to use Natural statements to execute our code and using the\nsame features we can use nested structures to execute our code.\n\nThe next example from the Web library, generate HTML document using the\nBootstrap library. No HTML code is written directly in this example, we\ncreated a similar language (just as example) Then using this declarative\nlanguage that uses nested structures, we generated the HTML Document.. The\nidea in this example is that the GetDiv() and GetH1() methods return an object\nthat we can access using {} and after each object access the method BraceEnd()\nwill be executed to send the generated HTML to the parent object until we\nreach to the root where BraceEnd() will print the output.\n\n    \n    \n    load \"weblib.ring\" import System.Web func Main BootStrapWebPage() { div { classname = :container div { classname = :jumbotron H1 { text(\"Bootstrap Page\") } } div { classname = :row for x = 1 to 3 div { classname = \"col-sm-4\" H3 { html(\"Welcome to the Ring programming language\") } P { html(\"Using a scripting language is very fun!\") } } next } } }\n\nThe classes that power the declarative interface looks like this\n\n    \n    \n    class Link from ObjsBase title link func braceend cOutput = nl+GetTabs() + \"<a href='\" + Link + \"'> \"+ Title + \" </a> \" + nl class Div from ObjsBase func braceend cOutput += nl+'<div' addattributes() AddStyle() getobjsdata() cOutput += nl+\"</div>\" + nl cOutput = TabMLString(cOutput)\n\nImplementation\n\n#### Implementation\n\n#### Transparent Implementation\n\nRing comes with transparent implementation. We can know what is happening in\neach compiler stage and what is going on during the run-time by the Virtual\nMachine Example : ring helloworld.ring -tokens -rules -ic -norun\n\n    \n    \n    see \"Hello, World!\"\n\nOutput\n\n    \n    \n    ================================================================== Tokens - Generated by the Scanner ================================================================== Keyword : SEE Literal : Hello, World! EndLine ================================================================== ================================================================== Grammar Rules Used by The Parser ================================================================== Rule : Program --> {Statement} Line 1 Rule : Factor --> Literal Rule : Range --> Factor Rule : Term --> Range Rule : Arithmetic --> Term Rule : BitShift --> Arithmetic Rule : BitAnd --> BitShift Rule : BitOrXOR --> BitAnd Rule : Compare --> BitOrXOR Rule : EqualOrNot --> Compare Rule : LogicNot -> EqualOrNot Rule : Expr --> LogicNot Rule : Statement --> 'See' Expr ================================================================== ================================================================== Byte Code - Before Execution by the VM ================================================================== PC OPCode Data 1 FuncExE 2 PushC Hello, World! 3 Print 4 ReturnNull ==================================================================\n\n#### Visual Implementation\n\nThe Ring programming language is designed using the PWCT visual programming\ntool\n\nPrevious Next\n\n#### Smart Garbage Collector\n\nAvoid memory problems :-\n\n  * Invalid Memory Access\n  * Memory leaks\n  * Uninitialized Memory Access\n  * Dangling pointer\n\nRules :-\n\n  * Global variables always stay in the memory, until you delete these variables using the assignment statement.\n  * Local variables always deleted after the end of the function.\n  * The programmer have full control on when to delete the variable from the memory using the Assignment statement.\n\nExample:\n\n    \n        aList = [1,2,3,4,5] aList = \"nice\"\n\nAfter the second line directly, The list [1,2,3,4,5] will be deleted from the\nmemory and we will have a string \"nice\"\n\n  * The programmer can call the function callgc() to force running the garbage collector.\n  * If we have a reference to a variable (when we pass objects and lists to functions), then deleting variables will be based on reference counting, if no references everything will be deleted, but if we have a reference, the data will stay in memory.\n\n#### No Global Interpreter (VM) Lock - No GIL\n\nWhen we use threads in Ring applications, We don't have global interpreter\n(VM) lock (No GIL)\n\nSo threads can work in parallel and execute Ring instructions at the same time\n\nThis is better for threads and concurrency (More Faster!)\n\n#### Fast Enough For Many Applications\n\nRing is designed to be a simple, small and flexible language in the first\nplace, but also it is fast enough for many applications.\n\nRing can do each of the next tasks in around one second. Tested using Victus\nLaptop [13th Gen Intel(R) Core(TM) i7-13700H, Windows 11, Ring 1.20]\n\n(1) Compiling 100,000 lines of code (2) Executing an empty loop that count\nfrom 1 to 100,000,000 (3) Creating list contains 7,000,000 items then summing\nall of the list items (4) Printing numbers from 1 to 40,000 using command\nprompt (5) Printing numbers from 1 to 500,000 using output redirection and\nRing Notepad (6) Adding 50,000 nodes to the TreeWidget in GUI applications (7)\nAdding 60,000 items to the ListWidget in GUI applications (8) Executing 3000\nsearch operations using linear search in a list contains 100,000 items, trying\nto find the last item (The worst case)\n\nAlso when we need more speed we can use C/C++ extensions!\n\nPrevious Next\n\nFeatures\n\n#### Features\n\nSyntax\n\n  * Compact Syntax\n  * Three Styles for writing the source code\n  * Syntax Flexibility support customization, translation and porting old code\n  * Declarative Programming\n  * Natural Language Programming\n  * Clear program structure (Statements then functions then packages & classes)\n  * using { } to access objects and use attributes/methods as variables/functions\n  * No explicit end for statements (No ; or ENTER is required)\n  * Use exit to go outside from more than one loop\n  * No keyword to end Functions, Classes and Packages\n\nPowerful Implementation\n\n  * Free Open Source (MIT License)\n  * Hybrid Implementation (Compiler+VM)\n  * The Compiler + The Virtual Machine + Standard Functions are less than 25,000 lines of C code\n  * The other 500,000 lines of code are related to libraries!\n  * Transparent Implementation provides optional printing for Tokens/Grammar/Byte-Code during execution\n  * Written in ANSI C (The code is generated)\n  * Developed using Visual Programming (PWCT)\n  * Smart Garbage Collector suitable for Games (Automatic Memory Management using Escape Analysis and Reference Counting)\n  * No Global Interpreter Lock (No GIL)\n  * Portable (MS-DOS, Windows, Linux, macOS, Android, WebAssembly, etc.)\n\nSimple\n\n  * Comments (One line & Multi-line)\n  * Multi-line literals\n  * Not Case-Sensitive\n  * The list index start from 1\n  * Rich control structures & Operators\n  * Range operator ex: 1:10\n  * Main Function (optional)\n  * Call Function before the definition\n  * Recursion\n  * Access (read/write) string letter by index\n  * For in get item by reference not value\n  * First Class Variables, Lists, Objects and Functions\n  * Store/Copy Lists/Objects by value (Deep Copy)\n  * Pass Lists/Objects by reference\n  * 8-bit clean, work on binary data directly\n\nDynamic\n\n  * Dynamic Typing\n  * Lexical Scoping (Global, Local & Object State)\n  * Default scope for variables inside functions (Local)\n  * Default scope for variables outside functions (global)\n  * Optional loading for modules in separate global scope\n  * Exception Handling\n  * Eval() to execute code during run-time\n\nObject-Oriented Programming (OOP)\n\n  * Encapsulation\n  * Setter/Getter (optional)\n  * private state (optional)\n  * Instantiation\n  * Polymorphism\n  * Composition\n  * Inheritance (Single Inheritance)\n  * Operator Overloading\n  * Packages\n  * Reflection and Meta-programming\n\nStandard Library\n\n  * I/O commands\n  * Math functions\n  * String functions\n  * List functions\n  * File processing functions\n  * System functions\n  * Database support (ODBC, MySQL, PostgreSQL and SQLite)\n  * Security Functions (OpenSSL)\n  * Internet Functions (LibCurl)\n  * Powerful GUI Framework (Qt)\n  * Web Development Library\n  * Many Game Programming Libraries\n\nWeb Development\n\n  * HTTP Get\n  * HTTP Post\n  * File upload\n  * Cookies\n  * URL Encode\n  * Templates\n  * HTML Special Characters\n  * HTML Generation using Functions\n  * HTML Generation using Classes\n  * CRUD Example (using MVC)\n  * Users Example (Register, Login and Check)\n  * Deploy web applications in the Cloud\n\nExtensions\n\n  * Extension using C/C++ (Simple API)\n  * Embedding in C/C++ projects\n  * Comes with binding generator to quickly wrap C/C++ Libraries\n  * Network Programming (SDLNet, Libuv, etc.)\n  * Create 2D Games (Allegro & LibSDL)\n  * Create 3D Games (OpenGL, FreeGLUT, RayLib, Qt3D, etc.)\n  * Create GUI Applications for Desktop, WebAssembly and Mobile platforms (Using the Qt Framework)\n\nMore\n\n  * Very Stable\n  * Good Performance\n  * Complete Documentation\n  * Many Libraries (Batteries Included)\n  * Many Samples (Easy to Learn)\n  * Many Applications\n  * Hundreds of YouTube Videos\n  * Powerful RAD tools (Code Editor, Form Designer, REPL, Debugger, Ring2EXE, Package Manager, etc.)\n\n### Beginning Ring Programming\n\n#### From Novice to Professional\n\nGain a gentle introduction to the world of Ring programming with clarity as a\nfirst concern using a lot of practical examples.  \n---  \n  \n# Beginning Ring Programming\n\n## From Novice to Professional\n\n###\n\nGain a gentle introduction to the world of Ring programming with clarity as a\nfirst concern using a lot of practical examples.\n\nEnjoy a beginner-friendly set of knowledge about Ring, and benefit from a one-\nstop collection of lessons learned from real-world, customer-facing\nprogramming projects.\n\n# Batteries Included\n\n## Ring comes with many high quality bindings for popular libraries\n\n### Batteries Included\n\n#### Ring comes with many high quality bindings for popular libraries\n\nBasic\n\n  * Applications developed in little hours\n  * Introduction\n  * Language Design\n  * Building From Source Code\n  * How to contribute?\n  * Using Ring Notepad\n  * Getting Started - First Style\n  * Getting Started - Second Style\n  * Getting Started - Third Style\n  * Variables\n  * Operators\n  * Control Structures - First Style\n  * Control Structures - Second Style\n  * Control Structures - Third Style\n  * Getting Input\n  * Functions - First Style\n  * Functions - Second Style\n  * Functions - Third Style\n  * Program Structure\n  * Lists\n  * Strings\n  * Date and Time\n  * Check Data Type and Conversion\n  * Mathematical Functions\n  * Files\n  * System Functions\n  * Eval() and Debugging\n  * Demo Programs\n  * Security and Internet Functions\n\nIntermediate\n\n  * ODBC Functions\n  * MYSQL Functions\n  * SQLite Functions\n  * PostgreSQL Functions\n  * Object Oriented Programming\n  * Functional Programming (FP)\n  * Reflection and Meta-programming\n  * Stdlib Functions\n  * Stdlib Classes\n  * Declarative Programming using Nested Structures\n  * Natural language programming\n  * Using the Natural Library\n  * Scope Rules for Variables and Attributes\n  * Scope Rules for Functions and Methods\n  * Syntax Flexibility\n  * Distributing Ring Applications\n  * Distributing Ring Applications using Ring2EXE\n  * The Ring Package Manager (RingPM)\n  * The Type Hints Library\n  * Web Development (CGI Library)\n  * Deploying Web Applications in the Cloud\n  * Using RingLibCurl\n  * Using RingZip\n  * Graphics and 2D Games programming using RingAllegro\n  * Using RingLibSDL\n  * Demo Project - Game Engine for 2D Games\n  * Building Games for Android\n  * Using RingRayLib\n\nAdvanced\n\n  * Using RingOpenGL and RingFreeGLUT for 3D Graphics\n  * Using RingOpenGL and RingAllegro for 3D Graphics\n  * The Gold Magic 800 Game\n  * Desktop and Mobile development using RingQt\n  * Building RingQt Applications for Mobile\n  * Building RingQt Applications for WebAssembly\n  * Objects Library for RingQt Application\n  * Using the Form Designer\n  * Multi-language Applications\n  * Using Qt3D\n  * Using Tilengine\n  * Using References\n  * Low Level Functions\n  * The Trace Library and the Interactive Debugger\n  * Tutorial: Ring Extensions in C/C++\n  * Extension using the C/C++ languages\n  * Embedding Ring Language in C/C++ Programs\n  * Code Generator for wrapping C/C++ Libraries\n  * Create your first extension using the Code Generator\n\nMore\n\n  * Performance Tips\n  * Command Line Options\n  * General Information\n  * Language Reference\n  * Frequently Asked Questions (FAQ)\n\nGitHub Resources Team\n\n", "frontpage": false}
