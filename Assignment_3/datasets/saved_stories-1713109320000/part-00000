{"aid": "40029929", "title": "Flang-new: How to force arrays to be allocated on the heap?", "url": "https://discourse.llvm.org/t/flang-new-how-to-force-arrays-to-be-allocated-on-the-heap-a-possible-bug/78302", "domain": "llvm.org", "votes": 2, "user": "zaikunzhang", "posted_at": "2024-04-14 09:39:09", "comments": 0, "source_title": "Flang-new: How to force arrays to be allocated on the heap? (a possible bug) - Subprojects / Flang - LLVM Discussion Forums", "source_text": "Flang-new: How to force arrays to be allocated on the heap? (a possible bug) -\nSubprojects / Flang - LLVM Discussion Forums\n\nSkip to main content\n\n#\n\nFlang-new: How to force arrays to be allocated on the heap? (a possible bug)\n\nSubprojectsFlang\n\nYou have selected 0 posts.\n\nselect all\n\ncancel selecting\n\nzaikunzhang\n\n2d\n\nAccording to information on GitHub 1, flang -mmlir -fdynamic-heap-array should\nforce dynamic arrays to be allocated on the heap and hence avoid\nstackoverflows when large dynamic arrays are present. The example mentioned on\nGitHub 1 works but the following does not.\n\n    \n    \n    ! array.f90 module outprod_mod contains function outprod(y, z) result(x) implicit none real, intent(in) :: y(:), z(:) real :: x(size(y), size(z)) integer :: i, j, n, m m = size(y) n = size(z) do i = 1, m do j = 1, n x(i, j) = y(i) * z(j) end do end do end function end module outprod_mod program prog use outprod_mod, only : outprod implicit none integer, parameter :: k = 10000 integer :: i real :: y(k) y = 1.0 do i = 1, k write (*, *) i, size(outprod(y(1:i), y(1:i))) end do end\n\nWith flang-new, it crashes with a segfault as follows.\n\n    \n    \n    $ uname -a && flang --version && flang -fno-stack-arrays -mmlir -fdynamic-heap-array -o array array.f90 && ./array Linux 6.5.0-26-generic #26~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Tue Mar 12 10:22:43 UTC 2 x86_64 x86_64 x86_64 GNU/Linux flang-new version 19.0.0git (git@github.com:llvm/llvm-project.git 37c175af955f0aeab67e8c553a0a47b2ed0fdba2) Target: x86_64-unknown-linux-gnu Thread model: posix ... ... 1445 2088025 1446 2090916 Segmentation fault (core dumped)\n\nQuestions:\n\n  * What are the correct flags to effectively force dynamic arrays to be allocated on the heap?\n  * -fdynamic-heap-array alone cannot be recognized by the compiler. It must be -mmlir -fdynamic-heap-array. Is this intended?\n\nNotes:\n\n  * ulimit -s unlimited seems to help, but we need a solution on flang\u2019s side.\n  * Compiled with Classic Flang 15.0.3 without any flags, the code runs fine.\n\nSee also flang-new: forcing arrays to be allocated on the heap and a possible\nbug \u00b7 Issue #88344 \u00b7 llvm/llvm-project \u00b7 GitHub 1 .\n\n  * #### created\n\n2d\n\n  * #### last reply\n\n8h\n\n  * 1\n\n#### reply\n\n  * 159\n\n#### views\n\n  * 1\n\n#### user\n\nzaikunzhang\n\n8h\n\nRelated GitHub issues:\n\ngithub.com/llvm/llvm-project\n\n#### [Flang] Should the MemoryAllocation pass be enabled by default?\n\nopened Jun 13, 2022\n\njonathonpenix\n\nquestion flang:ir\n\n503.bwaves fails on a segmentation fault when being built without specifying\nthe... `-mmlir -fdynamic-heap-array` flag. It seems like this is due to\nallocating arrays with sizes determined at runtime on the stack by default,\nresulting in an invalid access given large enough arrays. When additionally\npassing the `-mmlir -fdynamic-heap-array` flag during compilation to allocate\nthe arrays on the heap, 503.bwaves passes. (Additionally, increasing the stack\nsize to accommodate the large arrays and running 503.bwaves compiled without\nthe `-fdynamic-heap-array` flag also resulted in a pass for me.) Should the\ndefault behavior for allocating dynamic arrays be changed so that 503.bwaves\n(and presumably other programs) passes without needing to specify extra flags?\nFrom what I can tell, gfortran is allocating these arrays on the heap by\ndefault. Small reproducer: ```fortran PROGRAM prog IMPLICIT NONE call sr(14,\n14, 14, 14, 14) END SUBROUTINE sr(v, w, x, y, z) IMPLICIT NONE INTEGER,\nINTENT(IN) :: v,w,x,y,z REAL*8 a(v,w,x,y,z), b(v,w,x,y,z), c(v,w,x,y,z) REAL*8\narr(x, y, z) a(1, 1, 1, 1, 1) = 42 b(1, 1, 1, 1, 1) = 42 c(1, 1, 1, 1, 1) = 42\narr(1, 1, 1) = 42 END ```\n\ngithub.com/llvm/llvm-project\n\n#### flang-new: forcing arrays to be allocated on the heap and a possible bug\n\nopened Apr 11, 2024\n\nzaikunzhang\n\nflang\n\nThis is related to https://github.com/llvm/llvm-project/issues/56018.\nAccord...ing to https://github.com/llvm/llvm-project/issues/56018 , `flang\n-mmlir -fdynamic-heap-array` should force dynamic arrays to be allocated on\nthe heap and hence avoid stackoverflows when large dynamic arrays are present.\nThe example mentioned at https://github.com/llvm/llvm-project/issues/56018\nworks but the following does not. ```fortran ! array.f90 module outprod_mod\ncontains function outprod(y, z) result(x) implicit none real, intent(in) ::\ny(:), z(:) real :: x(size(y), size(z)) integer :: i, j, n, m m = size(y) n =\nsize(z) do i = 1, m do j = 1, n x(i, j) = y(i) * z(j) end do end do end\nfunction end module outprod_mod program prog use outprod_mod, only : outprod\nimplicit none integer, parameter :: k = 10000 integer :: i real :: y(k) y =\n1.0 do i = 1, k write (*, *) i, size(outprod(y(1:i), y(1:i))) end do end ```\nWith flang-new, it crashes with a segfault as follows. ```text $ uname -a &&\nflang --version && flang -fno-stack-arrays -mmlir -fdynamic-heap-array -o\narray array.f90 && ./array Linux 6.5.0-26-generic #26~22.04.1-Ubuntu SMP\nPREEMPT_DYNAMIC Tue Mar 12 10:22:43 UTC 2 x86_64 x86_64 x86_64 GNU/Linux\nflang-new version 19.0.0git (git@github.com:llvm/llvm-project.git\n37c175af955f0aeab67e8c553a0a47b2ed0fdba2) Target: x86_64-unknown-linux-gnu\nThread model: posix ... ... 1445 2088025 1446 2090916 Segmentation fault (core\ndumped) ``` Questions: - What are the correct flags to effectively force\ndynamic arrays to be allocated on the heap? - `-fdynamic-heap-array` alone\ncannot be recognized by the compiler. It must be `-mmlir -fdynamic-heap-\narray`. Is this intended? Notes: - `ulimit -s unlimited` seems to help, but we\nneed a solution on flang's side. - Compiled with Classic Flang 15.0.3 without\nany flags, the code runs fine. Thank you for taking a look.\n\n### Related Topics\n\nTopic| Replies| Views| Activity  \n---|---|---|---  \nissues with my DYNAMIC_STACKALLOC implLLVM Dev List Archives| 66| Jan 2009  \nDebug info for pointer-to-array type with dynamic bounds not workingLLDB| 351|\nNov 2022  \nThe right usage of llvm::ArrayRefLLVM Dev List Archives| 71| May 2017  \nDynamic allocation of a 3D array in LLVM APIs?LLVM Dev List Archives| 74| Apr\n2014  \nfreeing alloca\u2019d variables before function exitsLLVM Dev List Archives| 74|\nNov 2013\n\n", "frontpage": false}
