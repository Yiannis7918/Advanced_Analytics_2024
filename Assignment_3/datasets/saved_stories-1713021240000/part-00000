{"aid": "40021688", "title": "Google Chrome Extensions (Labs)", "url": "https://www.dre.vanderbilt.edu/~schmidt/android/android-4.0/external/chromium/chrome/common/extensions/docs/packaging.html", "domain": "vanderbilt.edu", "votes": 1, "user": "keepamovin", "posted_at": "2024-04-13 09:12:50", "comments": 0, "source_title": "Packaging - Google Chrome Extensions - Google Code", "source_text": "Packaging - Google Chrome Extensions - Google Code\n\nYou are viewing extension docs in chrome via the 'file:' scheme: are you\nexpecting to see local changes when you refresh? You'll need run chrome with\n--allow-file-access-from-files.\n\nparamName\n\n( optional enumerated Type array of paramType )\n\n    Undocumented.\n    Description of this parameter from the json schema.\n    This parameter was added in version . You must omit this parameter in earlier versions, and you may omit it in any version. If you require this parameter, the manifest key minimum_chrome_version can ensure that your extension won't be run in an earlier browser version.\n\n##### Parameters\n\nSkip to page content Skip to main navigation\n\n# Google Chrome Extensions (Labs)\n\n  * Home\n  * Docs\n  * FAQ\n  * Samples\n  * Group\n\n  * Getting Started\n  * Overview\n  * What's New?\n  * ## Developer's Guide\n\n    * Browser UI\n\n      * Browser Actions\n      * Context Menus\n      * Desktop Notifications\n      * Omnibox\n      * Options Pages\n      * Override Pages\n      * Page Actions\n    * Browser Interaction\n\n      * Bookmarks\n      * Cookies\n      * Events\n      * History\n      * Management\n      * Tabs\n      * Windows\n    * Implementation\n\n      * Accessibility\n      * Background Pages\n      * Content Scripts\n      * Cross-Origin XHR\n      * Idle\n      * Internationalization\n      * Message Passing\n      * NPAPI Plugins\n    * Finishing\n\n      * Hosting\n      * Other Deployment Options\n  * ## Packaged Apps\n\n  * ## Tutorials\n\n    * Debugging\n    * Google Analytics\n    * OAuth\n  * ## Reference\n\n    * Formats\n\n      * Manifest Files\n      * Match Patterns\n    * Permission Warnings\n    * chrome.* APIs\n    * Other APIs\n  * ## Samples\n\n  * ## More\n\n    * Chrome Web Store\n    * Hosted Apps\n    * Themes\n\n# Packaging\n\n## Contents\n\n  1. Creating a package\n\n    1. h3Name\n  2. Updating a package\n\n    1. h3Name\n  3. Packaging at the command line\n\n    1. h3Name\n  4. Package format and scripts\n\n    1. h3Name\n  5. API reference\n\n    1. Properties\n\n      1. propertyName\n    2. Methods\n\n      1. methodName\n    3. Events\n\n      1. eventName\n    4. Types\n\n      1. id\n\nFor information on how to use experimental APIs, see the chrome.experimental.*\nAPIs page.\n\nPackaging\n\ntrue\n\nThis page describes how to package your extension. As the Overview explains,\nextensions are packaged as signed ZIP files with the file extension \"crx\" \u2014\nfor example, myextension.crx.\n\nNote: You might not need to package your extension. If you publish your\nextension using the Chrome Developer Dashboard, then the only reason to create\nyour own .crx file would be to distribute a non-public version \u2014 for example,\nto alpha testers.\n\nWhen you package an extension, the extension is assigned a unique key pair.\nThe public key is used as the identifier for the extension. The private key is\nkept private and used to sign each version of the extension.\n\n## Creating a package\n\nTo package an extension:\n\n  1. Bring up the Extensions management page by going to this URL:\n\n> chrome://extensions\n\n  2. If Developer mode has a + by it, click the +.\n  3. Click the Pack extension button. A dialog appears.\n  4. In the Extension root directory field, specify the path to the extension's folder \u2014 for example, c:\\myext. (Ignore the other field; you don't specify a private key file the first time you package a particular extension.)\n  5. Click OK. The packager creates two files: a .crx file, which is the actual extension that can be installed, and a .pem file, which contains the private key.\n\nDo not lose the private key! Keep the .pem file secret and in a safe place.\nYou'll need it later if you want to do any of the following:\n\n  * Update the extension\n  * Upload the extension using the Chrome Developer Dashboard\n\nIf the extension is successfully packaged, you'll see a dialog like this that\ntells you where to find the .crx and .pem files:\n\n## Updating a package\n\nTo create an updated version of your extension:\n\n  1. Increase the version number in manifest.json.\n  2. Bring up the Extensions management page by going to this URL: chrome://extensions\n  3. Click the Pack extension button. A dialog appears.\n  4. In the Extension root directory field, specify the path to the extension's folder \u2014 for example, c:\\myext.\n  5. In the Private key file field, specify the location of the already generated .pem file for this extension \u2014 for example, c:\\myext.pem.\n  6. Click OK.\n\nIf the updated extension is successfully packaged, you'll see a dialog like\nthis:\n\n## Packaging at the command line\n\nAnother way to package extensions is by invoking chrome.exe at the command\nline. Use the --pack-extension flag to specify the location of the extension's\nfolder. Use --pack-extension-key to specify the location of the extension's\nprivate key file. For example:\n\n    \n    \n    chrome.exe --pack-extension=c:\\myext --pack-extension-key=c:\\myext.pem\n\nTo suppress the dialog, add --no-message-box to the command.\n\n## Package format and scripts\n\nFor more information on the format, as well as pointers to scripts you can use\nto create .crx files, see CRX package format.\n\n## API reference: chrome.apiname\n\n### Properties\n\n#### getLastError\n\nchrome.extensionlastError\n\n### Methods\n\n#### method name\n\nvoid chrome.module.methodName(, )\n\nUndocumented.\n\nA description from the json schema def of the function goes here.\n\n#### Parameters\n\n#### Returns\n\n#### Callback function\n\nThe callback parameter should specify a function that looks like this:\n\nIf you specify the callback parameter, it should specify a function that looks\nlike this:\n\n    \n    \n    function(Type param1, Type param2) {...};\n\nThis function was added in version . If you require this function, the\nmanifest key minimum_chrome_version can ensure that your extension won't be\nrun in an earlier browser version.\n\n### Events\n\n#### event name\n\nchrome.bookmarksonEvent.addListener(function(Type param1, Type param2) {...});\n\nUndocumented.\n\nA description from the json schema def of the event goes here.\n\n#### Parameters\n\n### Types\n\n#### type name\n\nExcept as otherwise noted, the content of this page is licensed under the\nCreative Commons Attribution 3.0 License, and code samples are licensed under\nthe BSD License.\n\n\u00a92011 Google\n\n", "frontpage": false}
