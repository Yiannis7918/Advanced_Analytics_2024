{"aid": "40025997", "title": "The Value in Knowing Fundamentals", "url": "https://median.blog/the-value-in-knowing-fundamentals/", "domain": "median.blog", "votes": 2, "user": "smitec", "posted_at": "2024-04-13 20:52:05", "comments": 0, "source_title": "The value in knowing fundamentals", "source_text": "The value in knowing fundamentals | median blog\n\n# median blog\n\n# The value in knowing fundamentals\n\n13 Apr, 2024\n\nOver the years I have seen a lot of \"this vs that\" arguments. React vs Vue,\nPostgres vs MySQL, Tensorflow vs Pytorch. These debates often lead to zealots\nwho refuse to budge on their position of superiority. More often than not, the\ndifferences between these options are minor. Having a good grasp of the\nfundamentals can help to remove the noise and marketing and allow strong\ndevelopers to work with whatever is in front of them.\n\nWhile these debates exist in many software communities, I see it most often in\nweb development. There seems to be a pattern of taking ideas and hiding them\nbehind complex sounding names. Take for example 'runes' in Svelte. Unless you\nread the source code or have a good grasp of the internals of modern front end\ntools, 'runes' has an almost mystical feeling. In this case on purpose.\n\nI am not opposed to branding, naming, or in the case of 'runes' having a bit\nof fun with software. We're not robots at the end of the day. Despite that\nI've seen a lot of developers take part in very heated debates over the\nsuperiority of one idea over another based on details only found at the\nhighest level. Many times, behind the scenes of whichever two ideas are on the\nline, the underlying fundamentals are very similar.\n\nI see a lot of new developers start their career via online resources,\nbootcamps and tutorials. To me, this is fantastic. Anything we can do to teach\nprogramming to more people is a win in my book. I see a gap however in this\npathway. In a race to be doing 'real' things as soon as possible it's common\nto skip a lot of the fundamentals. Sometimes with a promise to learn them\nlater, sometimes with a dismissal. I think this is a short sighted tactic.\n\nI worry that, taking frontend web development as an example, we are training a\nwhole slew of developers in a set of tools that is far too specific.\nDevelopers will be 'React' developers or 'Vue' developers and give little\nattention to anything outside that ecosystem.\n\nI've been around long enough to know that no framework, library or programming\nlanguage is in the zeitgeist forever. In knowing the fundamentals I can pick\nup a new language or framework relatively quickly. That's not to say I will\nknow all of the nuance within a week but I have seen younger developers look\nat a new JavaScript framework as if it was written in hieroglyphics.\n\nIf you want a long and valuable career in programming, learn the fundamentals.\nLearn the things you'll almost never have to write yourself like how to make\nobscure trees and implement search algorithms. Learn multiple programming\nlanguages, not to become an expert but to develop a radar for the aspects that\nare shared between them. Learning these things will help to push away the\nhype, marketing and zealotry and provide the clarity that behind the scenes\neven the most complex sounding paradigm can be worked through and understood.\n\nPowered by Bear \u0295\u2022\u1d25\u2022\u0294\n\n", "frontpage": false}
