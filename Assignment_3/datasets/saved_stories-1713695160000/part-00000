{"aid": "40103169", "title": "Two new (well, old and old) *RUNNABLE* ELIZA adaptations", "url": "https://sites.google.com/view/elizagen-org/news", "domain": "sites.google.com", "votes": 1, "user": "abrax3141", "posted_at": "2024-04-21 04:24:30", "comments": 0, "source_title": "ELIZAGEN - News", "source_text": "ELIZAGEN - News\n\nSearch this site\n\nELIZAGEN\n\n20240420: Brendan Bellina's Amazing and Hysterical (and Runnable!) HyperCard\nELIZA\n\nBrendan Bellina (bbellina@alumni.nd.edu, SilverWandSoftware) has created a\nwonderful and hysterically funny adaptation of Jeff Shrager's BASIC ELIZA in\nHyperCard -- late 20th-century programmable note card system from Apple.\nAmazingly, it runs on a platform called \"infinitemac.org\", \"a collection of\nclassic Macintosh and NeXT system releases and software, all easily accessible\nfrom the comfort of a (modern) web browser\". Here's a video demo'ing it.\nInstructions on how to run it yourself are in the video notes. (I highly\nrecommend trying it. The natural stupidity of ELIZA (esp. Shrager's version!)\ncombined with :yoda mode and the voices absolutely kills!)\n\n20240420: Steve Cherry's Apple II P-Lisp and ELIZA (c. ~1980) runnable online!\n\nBrendan Bellina brought to my attention this online executable version of\nSteve Cherry's P-Lisp (c. 1981) and his adaptation of Jeff Shrager's BASIC\nELIZA (from Creative Computing, c. 1977). This was reconstituted from old\nfloppies and made to run by Ron Garret, which is a fairly amazing feat! You\ncan try it here: https://archive.org/details/P-Lisp_v3.0.1 and this video\ndemos it: https://youtu.be/OcJP45A5YCg\n\n##\n\n20240318: Draft Paper Discovered in which JW Envisions ELIZA's Applications\n\nWith invaluable support of the MIT Archivists, especially Allison Schmitt, we\nhave discovered a truly amazing draft (more precisely, outline) of a paper,\nhand-signed by Joseph Weizenbaum himself (!), intended to accompany the\noriginal ELIZA CACM publication, but which never made it to final form. The\namazing thing about this proto-paper is that it lays out in great deatil the\nnext steps that Weizenbaum himself envisioned for ELIZA, including extensive\ndiscussion of experiments regarding mis-communications and (what we would now\ncall) conversational repairs, applications of ELIZA in education (which were,\nindeed, followed up by others at MIT, esp. by Paul Hayward and colleagues),\nand the mysterious closing sentence: \"Build a mathematical model.\" :-) There\nare many fascinating aspects of this draft/outline, and we encourage you to\nread it for yourself to really get into Joseph Weizenbaum's head.\n\n##\n\n20240306: Real Conversations with the Original ELIZA Discovered in the\nGarfinkel Archive\n\nAnne Warfield Rawls and Clemens Eisenmann curate the archives of Harold\nGarfinkel, the father of ethnomethodology. They recently provided Team ELIZA\nwith access to the archive where we discovered a whole series of printouts of\noriginal conversations between the original ELIZA and subjects in an\nexperiment conducted at Harvard. As far as we know these are the only examples\nof conversations between real people and ELIZA! More detail and a link to the\nconversations can be found on The Original ELIZA page.\n\n##\n\n20240224: ELIZA on an ASR33\n\nWe're working on a simulation of what is was like to use ELIZA in the mid\n1960s, by embedding Antony Hay's ELIZA in an ASR33 simulator. So far the\neffort is pretty simplistic, but has basic sanity. Check it out one our Try an\nELIZA page.\n\n##\n\n20240214: Ken Pitman (KMP)'s Lisp ELIZA from MIT-AI's ITS history project\n\nWe've added Kent Pitman's (aka. KMP, https://github.com/netsettler) MACLisp\nELIZA to the elizagen repo. This was discovered by Lars Brinkhoff, and can\nalso be found on his PDP-10 ITS historical sources repo.\n\nKMP has been a fixture of the Lisp community for decades. Among many other\nlisp-related activities, he worked on Macsyma, Maclisp, Emacs, and authored\nthe Common Lisp HyperSpec. He also chaired several of the Common Lisp\nstandards subcommittees. He has written several interesting essays on the\nhistory of lisp and lisp-adjacent artifacts and activities, available here:\nhttps://nhplace.com/kent/Papers/.\n\nIn the late 1970s, when he started at MIT, KMP took Joseph Weizenbaum's Intro\nto Programming (6.030), where he was introduced to ELIZA. Probably having seen\nBernie Cosell's BBN-Lisp ELIZA, KMP wrote a version of his own on ITS, a\nlocally-developed OS on PDP-10s, that were the main computers in the MIT-AI\nlab. ITS had a slightly different version of Lisp (MACLisp vs. BBNLisp), so\nCosell's code couldn't be run directly, also KMP wanted to hack the program a\nbit. He writes:\n\n\"While [this code has] definitely got my work in it, it's pretty clearly built\non someone else's work. Back then there was not a sense of publication so much\nas just making existing things better. And everything was a proto variant of\nfree software because there was no place one realistically expected one would\nsell anything. It was just hack upon hack in that environment. Both\nintellectual property law itself, and my naive understanding of it, was quite\ndifferent then.\"\n\nKMP provided some additional thoughts on his ELIZA:\n\n\"The thing about the DOCTOR program, while it was quite elaborate, was that it\nsort of missed the point of what Weizenbaum was trying to say. It's not that I\ndidn't understand him, but it took me a long time to really come to viscerally\nunderstand the seriousness of his point. He said that (paraphrasing, maybe\nbadly, from memory) long before we got to real AI, we would get to things that\nseemed smart but weren't, and we would overly trust systems that were not\nreally smart. He was, for example, very worried about computerized launch of\nnuclear missiles using what was then thought to be AI. But the point of the\noriginal ELIZA was not to BE elaborate, it was to be simple, and to show how\neven a tiny, tiny program could seem smart. It was hard not to think it could\nbe smarter if it were not so tiny, but that misses the point, which was about\nhow easily we were confused, not about how much more effectively we could be\nconfused if more energy were put in. So whether my DOCTOR or any other was\nmaking the right point was hard to say. My guess is not.\"\n\n##\n\n20231203: ELIZA and Ethnomethodology (specifically Garfinkel)\n\n  * Andrei Korbut, an ethnomethodologist from Belarus now based in Germany, has pointed us to a fascinating recent paper about how ELIZA (and a slightly later conversational program, LYRIC) was used in experiments on human-machine conversation by the most famous ethnomethodologist, Harold Garfinkel. We subsequently made contact with the curator of the Garfinkel archives, Anne Rawls (Bentley University), and the lead of the research team that wrote that paper, Clemens Eisenmann (University of Konstanz, Constance, Germany) who have given us access to the parts of the Garfinkel archive that they have thus far examined. The archive includes, for example, original transcripts from the papers mentioned in the above-mentioned paper, which will be fascinating to visitors of this site. There's lots there, that we'll report as we come across it.\n\n##\n\n20230703: Javascript ELIZA by Michael Wallace and George Dunlop added to repo\n\n  * Paul McQuesten (mcquesten@gmail.com) pointed out a Javascript ELIZA, originally written by Michael Wallace and enhanced by George Dunlop. I've added it to the repo, and at this writing, a live version is online here.\n\n##\n\n20230421: Eric Platt's c.1979 BASIC ELIZA added to the repo\n\n  * Eric Platt (https://ericplatt.com/) sent me a copy of a BASIC ELIZA-like program that he wrote around 1979, inspired by one he experienced on a Commodore Pet. He has a lovely blog post here (https://ericplatt.com/dr-challenger-lives/ )describing the rediscovery and resuscitation of his \"Dr. Challenger\". I've also added it to the repo.\n\n##\n\n20230210: Two New (well, old) ELIZAs Added to the Repo\n\nTeam ELIZA has discovered two new ELIZAs, which have been added to the github\nrepo:\n\n  * A 1978 Lisp ELIZA discovered by Jeff Shrager on this retro-mirror of MIT-AI's ITS system.\n\n  * An apparently nearly completely accurate Java implementation of the original ELIZA by Charles Hayden (repo'ed with permission).\n\n##\n\n20220705: ELIZA Code Discovery Featured on CoRecursive Podcast\n\nAdam Gordon Bell who creates the CoRecursive Podcast recently interviewed Jeff\nShrager (founder of ElizaGen.org) about the discovery of the ELIZA code. He\ndid a great job of turning what started out as two hours of making our work\nfascinating and mysterious!\n\n  * (See the fun and interesting errata over on the \"The Original ELIZA\" page on this site.)\n\n##\n\n20220627: ELIZA Game by Zachtronics\n\nI came across this interesting game based on ELIZA, by Zachtronics, a semi-\ndefunct boutique game company: \"Eliza is a visual novel about an AI counseling\nprogram, the people who develop it, and the people who use it.\"\n\n##\n\n20220529: An analysis of the FAP HASH function (Anthony Hay)\n\nAnthony Hay has done some further analysis on the FAP HASH function, which is\nused in ELIZA's memory.\n\n##\n\n20220519: 1975 LISP ELIZA (Contrib. Lori Levin, author unkown)\n\nLori Levin has contributed a 1975 Lisp ELIZA from The University of\nPennsylvania Moore School of Electrical Engineering. Interestingly, this ELIZA\nhas the script programmed into the code, as opposed to most earlier ELIZAs\nthat read a script. (Ed. note: Lori notes that she didn't write this code. We\naren't sure who did, but this is very likely the ELIZA that I remember seeing\nas a Penn undergrad, as I knew Lori then, but this was well after I'd written\nmy BASIC version, in 1973. -- Jeff)\n\n##\n\n20220519: ELIZA Scriptwriter's Manual (Computer History Museum)\n\nThe Computer History Museum has generously created a PDF of The 1968 ELIZA\nScriptwriter's Manual, by Paul R. Hayward. This document helps to fill out a\nlittle-known branch in the genealogy of ELIZA which, soon after it was\ninitially created (in 1965), teachers at MIT, esp. Dr. Hayward, sought to\napply it in education. The relevant CHM archive entry is here:\nhttps://www.computerhistory.org/collections/catalog/102683842. Interestingly,\nthe version of ELIZA described in this document is greatly extended from the\noriginal, including what appears to be a MAD-SLIP interpreter built into the\nELIZA scripting language.\n\n##\n\n20210329: As Close an Eliza as One Can Get (Anthony Hay)\n\nAnthony Hay <anthony.hay.1@gmail.com> writes:\n\nThis is an implementation in C++ of ELIZA that attempts to be as close to the\noriginal as possible. It was made to closely follow Joseph Weizenbaum\u2019s\ndescription of his program given in his January 1966 Communications of the ACM\npaper. It is controlled by a script identical to the one given in the appendix\nto that paper. When given the prompts that begin \u201cMen are all alike\u201d it gives\nback the identical responses and recreates the exact conversation from the\npaper.\n\nI was interested to read that Prof. Millican thinks Weizenbaum \u201ccheated\u201d in\norder to obtain the conversation shown in his paper. The response in question\nwas \u201cDOES THAT HAVE ANYTHING TO DO WITH THE FACT THAT YOUR...,\u201d which is the\nlast entry in the MEMORY section of the script, rather than the first. But\nWeizenbaum\u2019s paper says that \u201c...one of the transformations on the MEMORY list\nis randomly selected...,\u201d so I don\u2019t think it unreasonable to think that the\nlast entry could have been randomly selected on this occasion.\n\nhttps://github.com/anthay/ELIZA\n\n##\n\n20200809: Elizabeth an Eliza with an easy-to-understand script notation (Peter\nMillican)\n\nPeter Millican <peter.millican@hertford.ox.ac.uk> writes:\n\nI\u2019m a Philosophy professor at Oxford, who\u2019s spent most of my working life on\nthe boundary with Computer Science and trying to encourage students into that\nspace. Trying to get Humanities students interested through LISP programs is\nhopeless, of course, so when teaching Computing and Philosophy at Leeds, I\ndeveloped a chatbot designer system called Elizabeth which is programmable\nusing an easy-to-understand script notation. You can find the latest version\nat http://www.philocomp.net/ai/elizabeth.htm, and learning materials at\nhttp://www.philocomp.net/ai/elizlearn.htm. One of the built-in Illustrative\nScripts is transcribed from Weizenbaum\u2019s original paper of 1966. If you look\nat the second video on http://www.philocomp.net/videos/turing.htm, from 18:30,\nyou can see me going through the dialogue in an online talk (part of whose\npoint was to prepare the students for using Elizabeth in an exercise by seeing\nthe sorts of tricks that can be done). As far as I know, this is the only\nsystem that allows non-specialist users to work through the operation of\nELIZA, seeing a trace of all its internal processing, and I believe that it\nfaithfully copies the behaviour of the original program as published, with\njust one exception ...\n\nOne interesting point that I mention in my talk, but have never seen mentioned\nby anyone else, is that Weizenbaum\u2019s published dialogue doesn\u2019t actually fit\nwith his published program: one of the responses is out of order (though this\ncan easily be fixed by swapping two of them round, as I do in my script\ntranscription). I take this as evidence that Weizenbaum \u201ccheated\u201d to make his\ndialogue appear as impressive as possible, and then probably forgot or didn\u2019t\nbother to change the program accordingly. Have you ever seen a mention of this\npoint? Is it actually well-known?\n\nPeter Millican Gilbert Ryle Fellow and Professor of Philosophy Hertford\nCollege, University of Oxford Faculties of Computer Science and Philosophy\n\nA bit more about the problem that Peter discovered in the scripts (from a\nsubsequent email exchange):\n\nI talk about the \"cheat\" from around 24:25 to 26:00 in the video.\n\nIn the script file \"Weizenbaum.txt\" the matter is annotated like this:\n\n/ ***** No-keyword responses involving \"MY\" memories ***** / Order changed to\nconform with published dialogue: / 15. \"Bullies. DOES THAT HAVE ANYTHING TO DO\nWITH THE FACT THAT YOUR BOYFRIEND MADE YOU COME HERE\" N DOES THAT HAVE\nANYTHING TO DO WITH THE FACT THAT YOUR [M+1]? &{M+1\\\\} N LET'S DISCUSS FURTHER\nWHY YOUR [M+1] &{M+1\\\\} N EARLIER YOU SAID YOUR [M+1] &{M+1\\\\} N BUT YOUR\n[M+1]? &{M+1\\\\}\n\nHere \"N\" signifies a \"no-keyword\" response, while [M+1] picks up the first\nstored memory (ELIZA only stores \"my ...\" memories, so there's no need for\nmore sophisticated memory management here). \"&{M+1\\\\}\" then specifies an\naction to be performed when this response has been triggered - it deletes the\nfirst stored memory (which, of course, has just at that point been used).\n\nFor comparison, the relevant snippet from Weizenbaum's SLIP program in his\narticle is like this:\n\n(MEMORY MY\n\n(0 YOUR 0 = LETS DISCUSS FURTHER WHY YOUR 3) (0 YOUR 0 = EARLIER YOU SAID YOUR\n3) (0 YOUR 0 = BUT YOUR 3) (0 YOUR 0 = DOES THAT HAVE ANYTHING TO DO WITH THE\nFACT THAT YOUR 3))\n\nNotice that the \"DOES THAT HAVE ANYTHING TO DO...\" response is last of the\nfour in this group, whereas for the dialogue to work, it needs to be first.\n\nIn every other case, my script follows the relevant orderings from\nWeizenbaum's article, so this is very much a special case!\n\n##\n\n20190215: Eliza in gnuCOBOL (Arnold J. Trembley)\n\nThis amazing Eliza in gnuCOBOL was written by Arnold J. Trembley. It's a\nslightly indirect translation of Shrager's 1973/1977 BASIC version. The most\namazing part of this (to me) is that it was written in 2017!\n\nMr. Trembley writes:\n\nI also have a link on my website for an executable download for Eliza in\nGnuCOBOL that runs on Windows 7 and higher. I think it would probably run on\nWindows XP too.\n\nI probably first saw ELIZA in BASIC from Ahl's computer games for BASIC book,\nbut I also wrote a version in 1974 ANSI-standard COBOL for an IBM Series/1\nMinicomputer way back around 1984. But I never saved that source code, so I\nhad to start all over when I converted it into GnuCOBOL.\n\nGetting Eliza to work was a lot of fun.\n\n##\n\n20190121: Eliza on ITS on a DEC 10 Emulator (Lars Brinkhoff)\n\nA few days ago I had the pleasure of taking a trip in a real live time\nmachine.\n\nAbout a week ago I got an out-of-the-blue message from Lars Brinkhoff via the\nElizaGen issue tracker: \"I have a version of ELIZA ported to Maclisp, dated\n1977-09-05. Unfortunately, it's just a compiled binary file. Is this of any\ninterest to you?\"\n\nJust a binary wouldn't be too interesting, so my initial reaction was muted:\n\"Is there any way to either run it, or extract the embedded code?\"\n\nTurns out that Lars had significantly understated the situation: \"The binary\nfile is a compiled FASL, fast load file, so it's not easy to extract any code\nother than PDP-10 instructions. It might be possible, but a lot of work, to\nreconstruct Lisp code that compiles to approximately the same FASL code.\"\n\nHowever, went on: \"...we can run it in Maclisp running on a PDP-10 emulator. I\nhave an emulator online.\"\n\nEliza on MacLisp on a PDP-10 emulator? Isn't there a level missing here? On\nwhat OS?\n\nThe answer gave me pause: MIT's ITS. ITS is one of the most important\noperating systems in CS history. (Among many other interesting historical\nfacts, the original EMACS was developed on ITS!) I recommend reading about it\nhere: ITS on Wikipedia. When I was an undergrad and grad student, in the late\n'70s and early '80s, we used MIT-AI's ITS remotely through the early ARPANet.\nInterestingly, at one point (I don't know for how long) the ITS at MIT-AI had\nan Eliza hacked into its command line driver so that unless you prefixed your\ncommands with a \":\", the response was from Eliza!\n\nEliza on MacLisp on ITS on a Dec 10 emulator? Really?!\n\nYeah, really!!\n\nHere's the emulator: https://github.com/PDP-10/its\n\n(Lars notes: \"...there are more people involved than me. Foremost Eric Swenson\nwho worked on Maclisp and Macsyma back in the day. We [...] update the\nemulators to support more hardware, fixing bugs, figuring out how to build and\nrun programs, adding new software, Etc.\")\n\nIf you want to play with a great piece of software history, you can log into\nthis ITS emulator yourself; It's free and open. No password required!\n\nFrom Lars:\n\nTelnet to \"its.pdp10.se, port 10003\". Type Control-Z to log in. Then \":lisp\ngames; eliza (init)\" to start Maclisp and load ELIZA. It should look something\nlike this:\n\n==================\n\nYou:\n\ntelnet its.pdp10.se 10003\n\nTrying 88.99.191.74... Connected to pdp10.se. Escape character is '^]'.\n\nConnected to the KA-10 simulator MTY device, line 4\n\nYou:\n\ntype Control-Z\n\nTT ITS.1648. DDT.1546. TTY 25 2. Lusers, Fair Share = 0% THIS IS TT ITS, A\nHIGHTY [sic] VOLATILE SYSTEM FOR TESTING\n\nFor brief information, type ? For a list of colon commands, type :? and press\nEnter. For the full info system, type :INFO and Enter.\n\nThe management apologizes for the use of the slow TK10 terminal multiplexer.\nWe'll upgrade to the much faster Datapoint kludge once it becomes available.\n\nThen you type:\n\n:lisp games; eliza (init)\n\n(Please Log In) QUIT SPEAK UP!\n\nEt voila. you're typing back through 40+ years of computer history!\n\n(Use double ENTERs to terminate your sentence to Eliza.)\n\n==================\n\nTo test it, I pasted the \"standard\" example conversation from Wiezenbaum's\nEliza paper. Here's a screenshot from the paper:\n\nAnd here it is, running live on Lars's reborn ITS (the mess at the bottom is\nbecause I accidentally pasted the sentence twice, and had to backspace over\nit. The repeated chars are apparently how ITS displays backspacing):\n\nThere's a bit of a mystery about where exactly this version came form. Lars\nand I theorize that since BBN was right across from the AI lab, and it's known\nthat BBN were users of the ITS systems, this may well be Bernie Cosell's\noriginal code!\n\n##\n\n20181031: \"Hello, I'm Eliza\" (Stefan Holtgen and Marianna Baranovska)\n\n20181031: Stefan Holtgen and Marianna Baranovska have just published a volume\nentitled: \"Hello, I'm Eliza\", with Computer Archaeologie.\n\nHere is the abstract (rendered from the German by Google xlate):\n\nThe contributions to this volume are partly based on a conference held in\nOctober 2016 at the Institute of Musicology and Media Studies, and bring\ntogether authors from the fields of computer science, philosophy, media\nstudies and media dramaturgy. In the individual chapters, the origins of the\nfirst chatbot ELIZA, which Joseph Weizenbaum developed at MIT's AI Lab in\n1966, are reconstructed, Weizenbaum's programming language SLIP is presented\nand a first German-language translation of his publication to ELIZA is\npresented. As an extension of the topic, the authors ask what influence ELIZA\nhad on computer culture, AI research, cultural criticism of the computer and\nart.\n\nAnd here's the interesting cover. (Note that the code in the background is a\npart of Shrager's 1973/1977 BASIC Eliza)\n\n##\n\n20180529: B5500 Eliza from 1971 (Peter De Wachter)\n\n20180529: Peter De Wachter found a very interesting version of an Eliza clone\nfrom c.1971 (!!) Peter writes: \"The B5500 emulation project has imaged a bunch\nof old tapes and they found (among much other software) a 1971 Eliza\nimplementation by Charles Fricks and John Covert from Georgia Tech.\"\n\nThe full story is here:\n\nhttp://retro-b5500.blogspot.com/2018/05/the-cube-library-tapes.html\n\nThe Eliza source code is here:\n\nhttps://github.com/retro-software/B5500-software/blob/master/CUBE-\nLibrary-13/Files/ELIZA-Z100010.gtl\n\nhttps://github.com/retro-software/B5500-software/blob/master/CUBE-\nLibrary-13/Files/ELIZA-SCRIPT.dat\n\nWhat makes this so interesting is that the implementation language is \"Georgia\nTech Language\" (?), which seems to be an Algol extended with Lisp primitives.\nThe resulting code looks like this:\n\nP1: IF ATOM(CADR(NEXT)) THEN BEGIN\n\nIF CADR(NEXT)=CAR(R) THEN BEGIN\n\nNEXT:=CDR(NEXT);\n\nGO TO L1; END;\n\nGO TO L6; END;\n\nDL:=IF CAADR(NEXT)= \"*\" THEN CDADR(NEXT) ELSE CDADADR(NEXT);\n\nIF MEMBER(CAR(R),DL) THEN BEGIN\n\nNEXT:=CDR(NEXT);\n\nGO TO L1; END;\n\n(Ed. (Jeff S) notes: CDADADR !!)\n\n##\n\n20171211: BASIC Eliza via Speech Synthesis (Michael Wessel)\n\n20171211: My friend and colleague, Michael Wessel, who apparently has a soft\nspot for ancient speech synthesizers, recently noted this curious\ncoincidence/historical anecdote about a German version of my BASIC Eliza.\n(Michael and I worked together on the AURA project at SRI for about a year\naround 2013.)\n\nMichael writes:\n\n\"About 1985 I typed in a version of your BASIC Eliza from a public library\ncopy of the 'Creative Computing Computer Games' book, into my Amstrad CPC 464\nhome computer. The book had been translated into German, and so was Eliza! I\nwish the editors hadn't done so, as it makes much less sense!\n\nBack then I owned a speech synthesizer (the Amstrad SSA-1 for the CPC), and I\nhad extended your BASIC Eliza with speech capabilities. The audio/speech\nquality was as awful as some of the TRS 80 speech synths you can hear on\nYouTube.\n\nNow, 32 years later or so I am working on a little spare time hobby project -\na modern, understandable speech synthesizer for the Amstrad CPC, which is\ndesigned to be compatible with that original \"retro\" Amstrad SSA-1 speech\nsynthesizer. And indeed, the old Eliza that got extended with SSA-1 speech\noutput is working well with my modern speech synthesizer.\"\n\nHere's a youtube video of Michael's German-speaking Eliza.\n\nAnd here is another version for the CPC, also with speech output.\n\nMichael continues:\n\n\"With respect to the second video (the English one), the original author of\nthis Eliza version also mentions your Eliza as the source for the program, but\nhe says he extended it significantly, and then I added speech output, this\ntime using the 'native mode' of my speech synthesizer, which gives much better\nspeech quality than the emulated 'retro SSA-1' compatibility mode, as you can\nhear.\"\n\nAs I mentioned above, Michael and I worked closely together at SRI for about a\nyear. He concluded his note this way: \"It's really a funny and strange\ncoincidence that our ways have crossed; What are the chances that you get to\nwork with someone whose BASIC program you typed in from a public library book\n30 years ago? Sometimes, the world is small!\"\n\nI couldn't agree more!\n\nHere's the disk image of Michael's German BASIC Eliza:\n\nhttps://cpcrulez.fr/applications_list_util-elisa.htm\n\nTo run it:\n\n  * Download extract the DSK image\n\n  * Go to: http://cpcbox.com, which is a CPC Emulator in Javascript running in the Browser\n\n  * Select \"Choose configuration -> 464\"\n\n  * Select the Eliza DSK file for \"DRIVE A:\"\n\n  * When the CPC boots up, enter \"cat\"; You should see \"ELISA-NS.BAS\"\n\n  * Enter: RUN \"ELISA-NS (Without Speech (\"NS = no speech\") (The other version is with speech, but doesn't work on the emulator)\n\nHere are some PS2 Screenshots from emulator running in Firefox:\n\n##\n\nAggregated Older News\n\n20170728: Through the efforts of Dave Walden and Bernie Cosell, the tapes and\nlistings of Bernie's original Lisp version of Eliza/Doctor have been accepted\ninto the Computer History Museum archives as lot number: X8258.2017.\n\n20170307: Jeffrey Perrone pointed out this hysterical video of Eliza talking\nto Eliza on two side-by-side Google Home systems!\n\n20151122: John D. writes (email to Jeff Shrager of 2015-11-22): \"Back in 1979,\nRadio Shack released their own commercial version of Eliza for their TRS-80\nModel I, sold in their stores. It was written in machine language, not Basic,\non cassette tape. In fact, the tape had two versions: a regular one, and a\nspecial version that gave Eliza's response through the expensive Voice\nSynthesizer they were selling (a Votrax derivative).\"\n\n\"The interesting thing about Radio Shack's version is that it seemed a bit\nmore sophisticated than the original Weizenbaum version. It recognized more\nwords. (Including swear words--just so it could react with 'There's no need\nfor that language.'-- which is weird to see inside a mass-market product sold\nby a major corporation!) And when you said \"Goodbye\" it gave you a diagnosis:\neverything from \"You have no psychological problems besides a normal amount of\nparanoia\" to 'I must conclude you are dangerously psychotic and should be\nlocked up'!\"\n\n\"It was apparently written by Device Oriented Games in Dallas (near where\nRadio Shack was based).\"\n\nLinks to runnable code:\n\n  * Cassette program (Jeff S note: Examination of the cas files reveals that this version was clearly based on the Basic version.)\n\n  * An emulator that lets you just load the \"cas\" file directly\n\n  * The original instructions\n\nJohn also found this YouTube video of a real TRS-80 with the Voice\nSynthesizer, running Talking Eliza. The Votrax quality is terrible, but that\nmakes it all the more fun!\n\n20151013: Paco Willers has written a GO version of the classic BASIC Eliza. In\nthe process he did a detailed, nearly line-by-line, deconstruction of the\nShrager/North 1973/1977 BASIC code.\n\n20150910: Melody Ayres-Griffiths (melody@planetirata.com) found this\ncompletely wacko version written by Dave Babcock in Integer BASIC, which uses\ncomputed gotos! It looks to my eye like someone took the Shrager/North version\nand stuck it in a blender. :-) It would be easier to generate this from a\ncompiler, than to write it out straight!\n\n20150105: James Markevitch has updated his 1966 version with a slightly\ncleaned up transcript, and his amazing PERL BBN Lisp Interepreter! I've\nuploaded everything to the github site, and it is all also available for\ndownload as a tarball here.\n\nPage updated\n\nGoogle Sites\n\nReport abuse\n\nThis site uses cookies from Google to deliver its services and to analyze\ntraffic. Information about your use of this site is shared with Google. By\nusing this site, you agree to its use of cookies.\n\nLearn more\n\nGot it\n\n", "frontpage": false}
