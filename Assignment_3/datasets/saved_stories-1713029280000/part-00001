{"aid": "40022347", "title": "How to Send an SMS in Haskell (2017)", "url": "https://www.twilio.com/en-us/blog/setting-up-your-haskell-developer-environment-with-twilio-html", "domain": "twilio.com", "votes": 4, "user": "mooreds", "posted_at": "2024-04-13 11:26:04", "comments": 0, "source_title": "How to Send an SMS in Haskell", "source_text": "How to Send an SMS in Haskell | Twilio\n\n# How to Send an SMS in Haskell\n\nProducts\n\nMessaging\n\nStart for free\n\nTime to read: 6 minutes\n\nJuly 12, 2017\n\nWritten by\n\nLizzie Siegle\n\nTwilion\n\n## How to Send an SMS in Haskell\n\nFunctional programming languages are gaining in popularity so let\u2019s hop on\nthat Haskell bandwagon. With Haskell, you can write clean, concise, and\nexpressive code. Don\u2019t believe me just yet?\n\nThe Java and Haskell programs above make two lists: one of all even numbers up\nto 100, and one of the those same even numbers but without the first five\nnumbers. Which one looks nicer?\n\nNow let\u2019s dive into setting up your Haskell developer environment by\n\n  1. configuring two package managers\n  2. installing Haskell\n  3. making a \u201cHello, World\u201d program\n  4. sending our first SMS with Twilio using Haskell (get a Twilio phone number here)\n\n### IDEs for Haskell\n\nThere is no complete Haskell IDE (so if you want to make one, the market is\nwide open.) Many Haskellers use Atom because it has the language-haskell and\nide-haskell packages, whose syntax-highlighting of aspects like import\nstatements make it stand out. They also help with auto-indentation, auto-\ncompletion, and identifying types. My Haskell professor recommends Atom with\nEmacs which works in terminal and has good syntax highlighting and code-\ncompletion. For you Vim fans, never fear: you can set up Vim and Haskell like\nthis. You can also try Eclipse with this colorer plugin or Leksah which is\nwritten in Haskell, uses the cabal package format, and offers multi-window\nsupport. I however prefer Sublime Text 3 mainly because I\u2019m used to it for web\ndevelopment. It offers a SublimeHaskell package with smart completion, type\ninference, and error and warning highlighting, and is what was used to make\nthis post.\n\n### How to Install Haskell\n\nThe interactive Glasgow Haskell Compiler is all open source on GitHub. Install\nboth Haskell and GHC here from a Mac or visit here from a PC. To test it run\n$ghci on the command line. You should see something like this if all goes\nwell.\n\n### How to Find and Download Haskell Packages\n\nA package is a library of Haskell modules that the compiler recognizes. These\nmodules contain functions and types that can help you solve problems when\ncoding, letting you work with REST APIs (hey, like Twilio!) Where can you find\nneat Haskell packages to code with? Check out Stackage and Hackage for open-\nsource packages which you download using the stack and cabal package managers.\nThe main difference between the two is that Stackage only offers a subset of\nthe packages Hackage offers. Hackage packages could potentially have\ndependency issues, but most are completely fine out-of-the-box. Overall,\nHackage offers a greater spread and variety to choose from.\n\n### Manage Haskell Packages with Stack\n\nStack is my preferred package manager for Haskell. Stack is isolated; so there\nare no changes made outside of specific Stack directories when you stack\ninstall on the command line. When you build with stack, it makes reproducible\nbuilds (also known as package caching) so that stack build does the same thing\ntomorrow as it does today if none of the code changes. Stack also offers a\nnice, clean developer experience.\n\nOn a Mac machine, type the following on the command line to install:\n\n    \n    \n    curl -sSL https://get.haskellstack.org/ | sh\n\nIf you\u2019re using Windows, install Stack with this Windows 64-Bit Installer. For\nmore details on Stack, visit their install/update page.\n\nStack is very nice with setting up your initial project. This next section is\nrun in the terminal and shows how you would get started with a new stack\nproject. Replace anything starting with \u201cyour\u201c with a name you choose.\n\n    \n    \n    stack new your-hask-project #new directory w/ starter files cd your-hask-project #get into direc. stack setup #download compiler stack build #build project stack install your-hask-package #install an executable package ie Twilio stack exec your-hask-project #execute project command (start server, run proj, etc)\n\n### Manage Haskell Packages with Cabal\n\nThe other widely-used Haskell package manager is Cabal. It is included in the\nHaskell platform which sort of makes you think it would be easier to use...I\nWISH! Honestly? Many Haskellers I\u2019ve met are not big fans of cabal. My biggest\nproblem with Haskell has been issues with cabal dependencies (also known as\ncabal hell). What\u2019s the solution to that problem? Sandboxes, which allow\ndevelopers to isolate and build packages by making a private package\nenvironment for each package like in Python\u2019s Virtualenv.\n\nTo install cabal, run in the terminal\n\n    \n    \n    cabal init #creates Setup.hs, .cabal file for you, asks questions cabal sandbox init cabal install hask-package-you-want cabal build\n\n### Hello World In Haskell\n\nTo get Hello World, no packages are needed. On the command line, type ghci and\nafter clicking return, type\n\n    \n    \n    putStrLn \"Hello, World\"\n\nBut *gasp* that\u2019s so fast.\n\nHow about making \u201cHello, World\u201d from a Haskell file? Make a new directory to\nput your project in and call it sms. Let\u2019s make a file in it called first.hs\nand on the first line write\n\n    \n    \n    main = putStrLn \"Hello World\"\n\nSwitching back to the command line, type the following to compile your file.\n\n    \n    \n    ghc -o hello first.hs\n\nThen run the executable hello by typing on the command line:\n\n    \n    \n    ./hello\n\nVoila! You just completed Hello, World two ways in Haskell.\n\n### Send an SMS with Haskell\n\nFirst, get a Twilio phone number that can receive text messages. You can do\nthat here if you don\u2019t have one already.\n\nYou\u2019ll need your Twilio Account SID and Auth Token to send texts. Grab those\nfrom your console, and store them as environment variables. If you\u2019re on a\nWindows-based system, see this post to do that. In a unix-based system, you\nwould set them up by typing the following two lines in your shell and add them\nto your .bash_profile.\n\n    \n    \n    export TWILIO_ACCOUNT_SID=\"YOUR_ACCOUNT_SID\" export TWILIO_AUTH_TOKEN=\"YOUR_AUTH_TOKEN\"\n\nOn the command line in your sms directory run stack new sms. This will set up\nour project with files like sms.cabal, stack.yaml, Setup.hs, and Main.hs. In\nthe file sms.cabal, find the line which begins with build-depends of the\nexecutable and remove the line beginning withbuild-depends which is there. Put\nthe following in that space instead to use Twilio:\n\n    \n    \n    build-depends: base , twilio , transformers\n\nNext on the command line type stack init --solver so that stack can determine\na package set compatible with your sms.cabal file. Following that, in\nwhichever IDE you would like (see above thoughts on that), open up the\ndirectory you just made.\n\nNow open up Main.hs (located in the app folder) and erase whatever code is\nalready there. In its place type the following code. Because we\u2019re sending our\nfirst SMS, update the following with the phone numbers you wish to send a SMS\nto and your own Twilio phone number:\n\n    \n    \n    {-#LANGUAGE OverloadedStrings #-} module Main where import Control.Monad.IO.Class(liftIO) import System.Environment (getEnv) import Twilio import Twilio.Messages main:: IO() main = runTwilio' (getEnv \"TWILIO_ACCOUNT_SID\") (getEnv \"TWILIO_AUTH_TOKEN\") $ do let body = PostMessage \"NUMBER_TO_TEXT\" \"YOUR_TWILIO_NUMBER\" \"Hello, World!\" message <- post body liftIO $ print message\n\nOpen up a fun Hacker News article to read because this next step will take a\nlittle bit of time. On the command line, type\n\n    \n    \n    stack build\n\nOnce it\u2019s done, let\u2019s run the executable by typing on the command line\n\n    \n    \n    stack exec sms-exe\n\nSUCCESS! You should have just sent a SMS message in Haskell and now see this\nin your terminal:\n\nIf you get an error like\u201cgetEnv: does not exist (no environment variable),\u201d\nmake sure your environment variables are set correctly and check your\ncorresponding variable names. Then open up a terminal window and run\n\n    \n    \n    source ~/.bash_profile\n\n### Learn more about Haskell\n\nWant to learn more about Haskell in general? I recommend Learn You a Haskell\nand O\u2019Reilly\u2019s Real World Haskell. Stay tuned for more Haskell posts to learn\nmore about this functional language, and let me know what you think of any\nIDEs, cabal or stack, or Haskell in general online.\n\nEmail: lsiegle@twilio.com\n\nGitHub: elizabethsiegle\n\nTwitter: @lizziepika\n\n## Related Posts\n\n  * Passkeys 101: what they are and how they work\n\nKelley Robinson\n\n  * Authenticating Users with the Twilio Authy App and Verify in Next.js\n\nDesmond Obisi\n\n  * How to Make a Phone Call in Spring Boot with Kotlin\n\nAntonello Zanini\n\n## Related Resources\n\n#### Twilio Docs\n\n##### From APIs to SDKs to sample apps\n\nAPI reference documentation, SDKs, helper libraries, quickstarts, and\ntutorials for your language and platform.\n\n#### Resource Center\n\n##### The latest ebooks, industry reports, and webinars\n\nLearn from customer engagement experts to improve your own communication.\n\n#### Ahoy\n\n##### Twilio's developer community hub\n\nBest practices, code samples, and inspiration to build communications and\ndigital engagement experiences.\n\n## We can't wait to see what you build.\n\n### Products\n\n  * Twilio Engage\n  * Flex\n  * User Authentication & Identity\n  * Lookup\n  * Verify\n  * Voice\n  * Messaging\n  * All products\n\n### Solutions\n\n  * Customer Data Platform\n  * SMS Marketing\n  * Commerce Communications\n  * Contact Center\n  * All solutions\n\n### Docs\n\n  * Quickstarts\n  * Tutorials\n  * API Reference\n  * Helper Libraries\n  * API Status\n\n### Company\n\n  * About Twilio\n  * Why Twilio\n  * Customer Engagement Platform\n  * Trusted Communications\n  * Customers\n  * Get Help\n  * Contact Sales\n  * Press & Media\n  * Public Policy\n  * Investor Relations\n  * Events\n  * Jobs at Twilio\n\n  * Legal\n  * Privacy\n  * Twilio.org\n  * Press & Media\n  * Signal\n  * Investors\n  * Jobs\n\nCopyright \u00a9 2024 Twilio Inc. All Rights Reserved.\n\n", "frontpage": true}
