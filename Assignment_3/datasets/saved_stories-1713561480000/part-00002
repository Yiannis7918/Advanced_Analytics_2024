{"aid": "40087879", "title": "Automating a Soundtrack", "url": "https://factorio.com/blog/post/fff-407", "domain": "factorio.com", "votes": 1, "user": "ibobev", "posted_at": "2024-04-19 15:16:21", "comments": 0, "source_title": "Friday Facts #407 - Automating a soundtrack | Factorio", "source_text": "Friday Facts #407 - Automating a soundtrack | Factorio\n\nFactorio.com | Forums | Wiki | Mod Portal | API Docs\n\nLog in | Sign up\n\n\ud83c\uddfa\ud83c\udde6 We support the Ukrainian Red Cross.\n\nGame\n\nScreenshots Videos Content Artwork About us Buy Demo\n\nMerch\n\nBlog\n\nSupport\n\nHelp FAQ Presskit Contact\n\n## Friday Facts #407 - Automating a soundtrack\n\nPosted by Albert, Donion on 2024-04-19\n\nHello, Today we continue our musical journey.\n\n### MotivationAlbert\n\nLast week we presented a general approach to the Factorio Space Age music\n(FFF-406). We also mentioned that we have some new techniques to not only\ncover these 5 hours of music, but to also surpass them.\n\nThis automatic way of making music is something that I was experimenting with\na long time ago, before Factorio. I've played a lot with random melodies on\ntop of random bass sections, with random rhythmic bases, all programmed with\naction script (yes pretty old). The results were quite intense, but never good\nenough to consider them finished tracks.\n\nWhen the 5 hours soundtrack project for Factorio Space Age started, I\nimmediately thought of those old experiments. Now having Petr composing, and\nDonion programming, the thing looked different. I just dared to go this way.\nNow I'm convinced that this was a good decision.\n\n### Variable music tracksDonion\n\nThese tracks play out differently each time they are selected, they are a kind\nof procedurally generated music. But we don't want to go too crazy with the\nrandomization, a variable track is more like a set of variations of a single\ntrack (without the need to record them all). These tracks take the place of\nthe interludes which play between the main tracks (unless you go rooting\naround in the hidden settings). The goal is to provide some variety in the\nmusic after tens or hundreds of hours spent in game, regular music is still\nthe main focus and large majority of the soundtrack.\n\nVariable music tracks are defined in the prototypes, fully available to\nmodders. These are the components used to define a variable track:\n\n  * Samples\n\nThese are the smallest building blocks. They are individual pieces of music\nwhich get played according to other rules. Samples are played after each other\nso when one sample finishes the playback seamlessly continues with the next\nsample.\n\n  * Layers\n\nSamples are grouped into layers. Layers dictate how individual samples are\ncomposed together. It could be as simple as selecting samples randomly,\nshuffling all available samples so each plays exactly once, or it can be more\ncomplicated with samples being selected based on which sample is currently\nplaying in a different layer. Layer can also contain sublayers where samples\noverlap in a specific way. Further variations within a layer can be done using\na number of properties, defining delayed start, number of repetitions and\npauses between repetitions for shuffled layers, offsets of overlapping\nsublayers, etc. These properties come either from layers themselves or\naccording to the current state of the track.\n\nLayers and their samples are played aligned to the smallest time unit each\ntrack defines for itself, creating a sort of time grid.\n\nThe way how layers are composed is the main source of variation.\n\n  * Sections\n\nSections are collections of layers. There can be one section or multiple of\nthem in a track. Which section is used is determined by the track state.\nAdditionally, sections can overlap. When there is only one section it can\noverlap itself. Lastly, a section can contain an intermezzo which is played as\na normal piece of music, providing an option to compose a hybrid track: part\nvariable, part static.\n\n  * States\n\nStates and transitions between states are the high level way to define how a\nvariable track is composed. They select which section should play and whether\nit should overlap the previous one and they define a number of layer\nproperties which are applied to the current section's layers.\n\nTransitions between states can be based on elapsed time or they can be tied to\na specific layer finishing. Multiple possible next states can be defined with\ndifferent weights so some transitions will be more likely than others. Next\nstate candidates can have additional conditions defined, these conditions have\nto be met for the state to be considered for transition. For example a\ntransition can be set to only happen if a specific sample is playing in a\nspecific layer at the time of next state selection.\n\nNow that we know what variable tracks are made of, let's look at couple of\nexamples of how a track gets composed.\n\nPlease understand these examples are a tech demo, still in progress. Some\ndetails may change. The music itself is not representative of what it will be\nin the game on release, these samples are quite old and made for illustration\npurposes!\n\nThe first example is a track containing three sections. Each section has three\nlayers, a bass layer made out of two sublayers, a middle layer also made out\nof two sublayers, melody layer and an intermezzo. Transitions between states\nare based on the melody layer finishing.\n\n1/14\n\nTime grid for tempo alignment.\n\n2/14\n\nA layer can start with a specific sample. Sample number 1 in this case.\n\n3/14\n\nThe bass layer has two overlapping sub-layers, offset from each other.\n\n4/14\n\nSamples are selected randomly, however the same sample can't be repeated\nimmediately.\n\n5/14\n\nOther sub-layer breaks immediate repetition. Sample 4 plays between\nrepetitions of sample 3.\n\n6/14\n\nOverlap offsets can be variable. Either one or two time units for the bass\nlayer.\n\n7/14\n\nMore samples!\n\n8/14\n\nSecond layer starts playing with a delay.\n\n9/14\n\nIt also has two sub-layers.\n\n10/14\n\nOverlap offsets are fixed to one time unit.\n\n11/14\n\nMore samples!\n\n12/14\n\nEven more samples!\n\n13/14\n\nThe melody layer has a single sub-layer.\n\n14/14\n\nMelody layer's samples are shuffled, each is played once.\n\nThis is how an instance of this track might sound:\n\nRecorded in-game using WIP version.\n\nThe images are only an illustration and do not correspond to the recording.\nHere is an actual timeline:\n\n  1. 0:01: The track starts in the begin state, section 2 is selected randomly.\n  2. 0:01: Bass layer starts.\n  3. 0:12: Middle layer starts.\n  4. 0:17: Melody layer starts.\n  5. 0:44: Melody layer finishes its first repetition, queuing a pause before second repetition.\n  6. 0:51: Melody layer starts its second repetition.\n  7. 1:19: Melody layer finishes its second and final repetition, queuing a pause before finishing playing.\n  8. 1:23: Melody layer finishes playing, triggering a transition to the inter state, a section different than the previous one is selected randomly, section 0 in this case.\n  9. 1:23: Bass layer and middle layer continue playing, now with samples from section 0.\n  10. 1:23: Melody layer starts playing again.\n  11. 1:42: Melody layer finishes playing its first and only repetition. This time without pause after, triggering a transition to continue state immediately.\n  12. 1:42: Section which was selected in state begin is used again.\n  13. 1:42: The melody layer uses the same sample shuffling as in the begin state.\n  14. 2:09: Melody layer finishes playing its first and only repetition. Again without pause after, triggering a transition to finish state immediately.\n  15. 2:09: Section 1 is selected as the only one still unused.\n  16. 2:35: Melody layer finishes its first repetition, it continues with a second one without pause.\n  17. 3:03: Melody layer finishes its second and final repetition.\n\nThis second example shows a track with only one section, but it overlaps\nitself when transitioning between states at fixed time intervals. The section\nhas three layers. There is also a chance to play an intermezzo if a specific\nsample played in the first layer.\n\n1/6\n\nSample for the first layer is selected randomly.\n\n2/6\n\nSample for the second layer is selected based on the sample of the first\nlayer. There are three options.\n\n3/6\n\nSample for the third layer is selected based on the sample of the first layer\nas well. There are three options again.\n\n4/6\n\nAfter 40 seconds the state changes and the section overlaps itself, sample for\nthe first layer is randomized again.\n\n5/6\n\nSamples for layer two and three are selected based on the sample of first\nlayer again.\n\n6/6\n\nPlaying sample number 6 in the first layer had a 50% chance to trigger a\ntransition into an intermezzo instead of overlapping itself again for the next\nstate change.\n\nAnd this is how this one might sound:\n\nRecorded in-game using WIP version.\n\n### Technical challengesDonion\n\nAs it turns out, when it comes to music, timing and transitioning things\ncorrectly is important. I know, I was shocked too.\n\n#### Queuing samples\n\nSamples need to be played one after each other without any gaps in order to\nmaintain the track's overall tempo and to avoid audio artifacts, as someone\nfrom our forums recently found out the hard way. The music player updates\nsixty times per second, same as the rest of the game logic. Simply checking if\na current sample finished playing to start playing the next sample is not\nenough, as there could be up to 16.67ms (1s / 60) gap between them, destroying\nthe tempo. Taking the checks outside of the regular update logic into a\nseparate thread or using callbacks for when a sample finishes playing wouldn't\nwork either because of how audio data are mixed together by the SDL_Mixer\nlibrary (version 2.0.4) we're using.\n\nWith our current settings audio is mixed in chunks of 512 samples (these are\nthe audio signal samples, not the music samples) which with the sampling\nfrequency of 44.1kHz makes a mixing interval of roughly 11.6ms. Even if we\ndetected the exact moment when a sample finishes playing, we wouldn't be able\nto start playing the next sample right at that moment. There would be a gap up\nto 11.6ms long again. What we really need is a way to queue our music samples.\n\nThe SDL_Mixer library doesn't provide such functionality, I needed to build it\nmyself on top of SDL_Mixer with some modification to SDL_Mixer itself. This is\nnot the first time I needed to add a feature to the audio backend, so\nundeterred I had a queueing system working fairly quickly. Now the music\nplayer can queue samples in its leisurely 16.67ms windows and a separate\nfeeder thread take care of stitching the samples together correctly, while the\nSDL_Mixer doesn't even know it happened.\n\n#### Transitions between samples\n\nAs you can see in the pictures above, the same sample can be played with\ndifferent lengths. For instance in the first example in picture 5, sample\nnumber 3 (yellow) is first played for three units of the grid and then it is\nplayed for four units. Unless we want to have variants of the same sample\nsaved in many lengths (we don't), we often need to cut a sample short before\nplaying the next sample. When you do that, you can end up with unpleasant\naudio artifacts or clicks. A similar thing can happen when you're changing\nplayback position in a music or video player, if you want to try it yourself.\nWhat happens is that there is a big jump in the audio signal's level and it\nsounds like a click or pop. The signal becomes discontinuous if we want to use\nbig words.\n\nYou can hear the clipping artifacts in this recording which was taken using an\nolder version (you might need to turn your volume up). It is clear that\nsomething has to be done about this.\n\nThe way to solve this is to fade-out and/or fade-in samples over a short\nperiod of time, let's say 10ms as they come one after another. That way the\ntransition is nice and smooth (continuous). You might find some audio\nprocessing applications do this sort of thing automatically by default. Sounds\nstraightforward and SDL_Mixer provides a way to fade-in and fade-out samples,\nwhat's the problem? The built-in fading functionality of SDL_Mixer calculates\nthe same target volume for the entire chunk being mixed in the 11.6ms\ninterval. This means the entire fade will fit into one mixing interval, we end\nup with just one volume level so there is no fading at all. Not to mention\nthat it's impossible to time the fade-out accurately.\n\nLuckily SDL_Mixer provides support for attaching filters (effects) to samples.\nIn the filter we can do whatever we want with the audio data. Writing our own\nfader with sample level precision (again, those are the audio signal samples)\nas a filter is trivial. Add an option to delay the fade to the exact moment we\nneed it and voil\u00e0, no more annoying clicks.\n\n#### Aligning layers\n\nTiming is also important when it comes to all the layers and sub-layers\nplaying together. They need to be aligned (synchronized) into a time grid\ndefined by a smallest unit of time for a given track. The first example uses\n~286ms (12,600 samples) time unit.\n\nWhen the SDL's audio thread is mixing it needs to lock the audio device to\navoid race conditions with other threads (the rest of the game). Only one\nthread should change the active audio resources at any given time. For the\nsame reason, when we want to start playing a sample, the audio device is\nlocked.\n\nEven if some layer of a variable track doesn't start playing for some time\nafter the track itself is started we can't wait with starting the layer\nbecause we have no way of starting it at an exact time, there is no 'start\nplaying in x milliseconds' functionality and even if there was one, there\nwould still be the problem of mixing in chunks I mentioned already. So we need\nto start all layers at the same time to have them aligned, the inactive ones\nwill be playing silence.\n\nThe audio thread can jump in and lock the audio device at any time. If we have\nthe bad luck of it happening in the moment we started first two layers out of\ntotal five for example, the remaining three layers would be started ~11.6ms\nlater, out of alignment. SDL_Mixer doesn't provide explicit locking functions.\nSDL itself does provide them, however SDL_Mixer tries to acquire the lock for\nmost operations, so some little tweaks are needed anyway, but it's not a\ndifficult thing to add.\n\nSimilar problems need to be addressed when a layer is not playing anything in\nthe middle of a track. It can't be just stopped because we couldn't restart it\nat the precise moment we need it again. It is left playing silence, aligned to\nthe time grid.\n\n### Frequently asked questions from last weekDonion\n\n  * Which music plays when remotely viewing different surfaces and when switching surfaces?\n\nEach track is tied either to one planet or to space platforms. The surface you\nare currently looking at (either in regular mode when controlling your\ncharacter or in remote view) is used to select the appropriate music track.\nWhen switching between surfaces, again either with the character or with\nremote view, the music track is switched. The progress of the current track\nfor each surface is remembered so when you switch back to a surface that had\nmusic interrupted by a surface switch, the track will be resumed from the\nremembered place instead of restarting a new track. This way you have the\nimmediate feedback of switching surfaces including its music without\nconstantly stopping and restarting it.\n\nCurrently the switch between different surfaces' tracks happens immediately.\nHowever this might change and some kind of a transition, for example a short\nfade-in/fade-out, might be added, depending on testing and feedback.\n\n  * Could the music be made more dynamic and react to the game context?\n\nIn order to not go into technical details last week, we weren't entirely\naccurate about the music player not knowing anything about the game state.\nClearly it knows something if it can react to which surface is being viewed.\nHowever, this is the only variable from game state the music player takes into\naccount.\n\nThe engine having these limitations doesn't mean it would be impossible to\npass more information along into the music player, that's the easy part. But\nthe music itself would have to be composed with such system in mind from the\nbeginning, years ago. We would need to have all these conditions well defined\nin advance so Petr could compose in a way it would all work together. Those\nare the difficult parts. I'm not saying it's impossible to do, but we went a\ndifferent route.\n\nLong story short, if a more dynamic music hasn't happened by now, it most\nlikely won't happen.\n\n  * Can we have fine control over music?\n\nThere are no plans to add complex controls like custom playlists or per\nsurface settings. A simple mod can be created to achieve that if someone\nreally wants that feature.\n\nSimple controls are a different story, for 2.0 we have added options to bind a\nkey to skip the currently playing track, go back to the previously played\ntrack and to pause/resume the music.\n\n  * Will the music play all the time?\n\nNo, same as it is right now in 1.1, there will be randomized pauses between\ntracks. At most we would just tweak the pause duration to fit better with the\nlengths of Space Age tracks, this is subject to feedback from testing.\n\n  * Will the Space Age soundtrack be sold separately?\n\nYes, a digital version of the soundtrack will be available for purchase, same\nas the base game's soundtrack.\n\nAs always, instantiate a variant of your thoughts at the usual places.\n\nDiscuss on our forums Discuss on Reddit Subscribe by email\n\nTerms of Service|Privacy|Imprint|Presskit|Contact|RSS|Jobs\n\nCopyright \u00a9 2015 - 2024 Wube Software - all rights reserved.\n\n", "frontpage": false}
