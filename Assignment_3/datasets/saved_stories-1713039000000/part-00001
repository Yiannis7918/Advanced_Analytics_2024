{"aid": "40023256", "title": "Autocode", "url": "https://en.wikipedia.org/wiki/Autocode", "domain": "wikipedia.org", "votes": 1, "user": "bindidwodtj", "posted_at": "2024-04-13 14:09:23", "comments": 0, "source_title": "Autocode", "source_text": "Autocode - Wikipedia\n\nJump to content\n\nSearch\n\n# Autocode\n\n  * \u0627\u0644\u0639\u0631\u0628\u064a\u0629\n  * Catal\u00e0\n  * Deutsch\n  * Fran\u00e7ais\n  * \u65e5\u672c\u8a9e\n  * Norsk bokm\u00e5l\n  * O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430\n  * Polski\n\nEdit links\n\nFrom Wikipedia, the free encyclopedia\n\nEarly computer programming languages\n\nFor the assembly language used with the IBM 1400 series, see Autocoder.\n\nAutocode is the name of a family of \"simplified coding systems\", later called\nprogramming languages, devised in the 1950s and 1960s for a series of digital\ncomputers at the Universities of Manchester, Cambridge and London. Autocode\nwas a generic term; the autocodes for different machines were not necessarily\nclosely related as are, for example, the different versions of the single\nlanguage Fortran.\n\nToday the term is used to refer to the family of early languages descended\nfrom the Manchester Mark 1 autocoder systems, which were generally similar. In\nthe 1960s, the term autocoders was used more generically as to refer to any\nhigh-level programming language using a compiler.^[1] Examples of languages\nreferred to as autocodes are COBOL and Fortran.^[2]\n\n## Glennie's Autocode[edit]\n\nThe first autocode and its compiler were developed by Alick Glennie in 1952\nfor the Mark 1 computer at the University of Manchester and is considered by\nsome to be the first compiled programming language. His main goal was\nincreased comprehensibility in the programming of Mark 1 machines, which were\nknown for their particularly abstruse machine code. Although the resulting\nlanguage was much clearer than the machine code, it was still very machine\ndependent.^[3]\n\nBelow is an example of Glennie's Autocode function which calculates the\nformula: . The example omits necessary scaling instruction needed to place\nintegers into variables and assumes that results of multiplication fit into\nlower accumulator.\n\n    \n    \n    c@VA t@IC x@1\u20442C y@RC z@NC INTEGERS +5 \u2192c # Put 5 into c \u2192t # Load argument from lower accumulator # to variable t +t TESTA Z # Put |t| into lower accumulator -t ENTRY Z SUBROUTINE 6 \u2192z # Run square root subroutine on # lower accumulator value # and put the result into z +tt \u2192y \u2192x # Calculate t^3 and put it into x +tx \u2192y \u2192x +z+cx CLOSE WRITE 1 # Put z + (c * x) into # lower accumulator # and return\n\nUser's manual of Glennie's Autocode Compiler mentioned that \"the loss of\nefficiency is no more than 10%\".^[4]\n\nImpact of Glennie's Autocode on other Manchester users' programming habits was\nnegligible. It wasn't even mentioned in Brooker's 1958 paper called \"The\nAutocode Programs developed for the Manchester University Computers\".\n\n## Mark 1 Autocode[edit]\n\nThe second autocode for the Mark 1 was planned in 1954 and developed by R. A.\nBrooker in 1955 and was called the \"Mark 1 Autocode\". The language was nearly\nmachine-independent and had floating-point arithmetic, unlike the first one.\nOn the other hand it allowed only one operation per line, offered few mnemonic\nnames and had no way to define user subroutines.^[5]\n\nAn example code which loads array of size 11 of floating-point numbers from\nthe input would look like this\n\n    \n    \n    n1 = 1 1 vn1 = I reads input into v[n[1]] n1 = n1 + 1 j1,11 \u2265 n1 jumps to 1 if n[1] \u2264 11\n\nBrooker's Autocode removed two main difficulties of Mark 1's programmer:\nscaling and management of two-level storage. Unlike its predecessor it was\nheavily used.^[6]\n\n## Later Autocodes[edit]\n\nBrooker also developed an autocode for the Ferranti Mercury in the 1950s in\nconjunction with the University of Manchester. Mercury Autocode had a limited\nrepertoire of variables a-z and a'-z' and, in some ways resembled early\nversions of the later Dartmouth BASIC language. It pre-dated ALGOL, having no\nconcept of stacks and hence no recursion or dynamically-allocated arrays. In\norder to overcome the relatively small store size available on Mercury, large\nprograms were written as distinct \"chapters\", each of which constituted an\noverlay. Some skill was required to minimise time-consuming transfers of\ncontrol between chapters. This concept of overlays from drum under user\ncontrol became common until virtual memory became available in later machines.\nSlightly different dialects of Mercury Autocode were implemented for the\nFerranti Atlas (distinct from the later Atlas Autocode) and the ICT 1300 and\n1900 range.\n\nThe version for the EDSAC 2 was devised by David Hartley of University of\nCambridge Mathematical Laboratory in 1961. Known as EDSAC 2 Autocode, it was a\nstraight development from Mercury Autocode adapted for local circumstances,\nand was noted for its object code optimisation and source-language diagnostics\nwhich were advanced for the time. A version was developed for the successor\nTitan (the prototype Atlas 2 computer) as a temporary stop-gap while a more\nsubstantially advanced language known as CPL was being developed. CPL was\nnever completed but did give rise to BCPL (developed by M. Richards), which in\nturn led to B and ultimately C. A contemporary but separate thread of\ndevelopment, Atlas Autocode was developed for the University of Manchester\nAtlas 1 machine.\n\n## References[edit]\n\n  1. ^ London, Keith (1968). \"4, Programming\". Introduction to Computers (1st ed.). London: Faber and Faber Limited. p. 184. SBN 571085938. \"The 'high' level programming languages are often called autocodes and the processor program, a compiler.\"\n  2. ^ London, Keith (1968). \"4, Programming\". Introduction to Computers (1st ed.). London: Faber and Faber Limited. p. 186. SBN 571085938. \"Two high level programming languages which can be used here as examples to illustrate the structure and purpose of autocodes are COBOL (Common Business Oriented Language) and FORTRAN (Formular Translation).\"\n  3. ^ Knuth, p. 42-43\n  4. ^ Knuth, p. 48\n  5. ^ Knuth, p. 63-64\n  6. ^ Knuth, p. 65\n\n## Sources[edit]\n\n  * Campbell-Kelly, Martin (1980). \"Programming the Mark 1: Early Programming Activity at the University of Manchester\". Annals of the History of Computing. 2 (2). IEEE: 130\u2013167. doi:10.1109/MAHC.1980.10018. S2CID 10845153.\n  * Garcia Camarero, Ernesto (1961). AUTOCODE un sistema simplificado de codificacion para la computadora MERCURY (in Spanish). Universidad de Buenos Aires. p. 70.\n  * London, Keith (1968). Introduction to Computers. p. 261.\n  * Knuth, Donald E.; Pardo, Luis Trabb (1976). \"Early development of programming languages\". Stanford University, Computer Science Department.\n\n## Further reading[edit]\n\n  * The Autocodes: a User's Perspective\n  * Brooker, R. A. (1958-01-01). \"The Autocode Programs developed for the Manchester University Computers\". The Computer Journal. 1 (1): 15\u201321. doi:10.1093/comjnl/1.1.15. ISSN 0010-4620.\n\n    * Brooker, R. A. (1958-03-01). \"Further Autocode Facilities for the Manchester (Mercury) Computer\". The Computer Journal. 1 (3): 124\u2013127. doi:10.1093/comjnl/1.3.124. ISSN 0010-4620.\n    * Clarke, B. (1959-04-01). \"The Pegasus Autocode\". The Computer Journal. 1 (4): 192\u2013195. doi:10.1093/comjnl/1.4.192. ISSN 0010-4620.\n  * Barron, David William; et al. (1967). Titan Autocode programming manual. Cambridge, University Mathematical Laboratory.\n  * Barron, David William (1968) [1967]. \"1.5. Recursion in Functional Programming\". In Gill, Stanley (ed.). Recursive techniques in programming. Macdonald Computer Monographs (1 ed.). London: Macdonald & Co. (Publishers) Ltd. p. 8. SBN 356-02201-3. (viii+64 pages)\n\nRetrieved from\n\"https://en.wikipedia.org/w/index.php?title=Autocode&oldid=1185527720\"\n\nCategories:\n\n  * History of computing in the United Kingdom\n  * Procedural programming languages\n  * Programming languages created in 1952\n  * Science and technology in Greater Manchester\n  * University of Manchester\n  * University of Cambridge Computer Laboratory\n\nHidden categories:\n\n  * Articles with short description\n  * Short description is different from Wikidata\n  * Use dmy dates from March 2020\n  * CS1 Spanish-language sources (es)\n\n  * This page was last edited on 17 November 2023, at 09:08 (UTC).\n  * Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n  * Privacy policy\n  * About Wikipedia\n  * Disclaimers\n  * Contact Wikipedia\n  * Code of Conduct\n  * Developers\n  * Statistics\n  * Cookie statement\n  * Mobile view\n  * Edit preview settings\n\n", "frontpage": false}
