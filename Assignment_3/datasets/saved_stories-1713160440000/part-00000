{"aid": "40035584", "title": "x86 and x86_64 software optimization resources", "url": "https://agner.org/optimize/", "domain": "agner.org", "votes": 5, "user": "HaoZeke", "posted_at": "2024-04-14 23:51:30", "comments": 0, "source_title": "Software optimization resources. C++ and assembly. Windows, Linux, BSD, Mac OS X", "source_text": "Software optimization resources. C++ and assembly. Windows, Linux, BSD, Mac OS\nX\n\n| Home  \n---  \nCultural Selection Theory  \nEvolutionary biology  \nRandom number generators  \nSoftware optimization resources  \nDigital electronics  \nPublications  \nContact address  \n  \n# Software optimization resources\n\nSee also my blog\n\n## Contents\n\n  * Optimization manuals\n  * Vector class library\n  * Object file converter and disassembler\n  * Subroutine library\n  * ForwardCom: An open standard instruction set for high performance microprocessors\n  * Test programs for measuring clock cycles in C++ and assembly code\n  * Floating point exception tracking through NAN propagation\n  * CPUID manipulation program\n  * Links\n\n## Optimization manuals\n\nThis series of five manuals describes everything you need to know about\noptimizing code for x86 and x86-64 family microprocessors, including\noptimization advices for C++ and assembly language, details about the\nmicroarchitecture and instruction timings of most Intel, AMD and VIA\nprocessors, and details about different compilers and calling conventions.\n\nOperating systems covered: DOS, Windows, Linux, BSD, Mac OS X Intel based, 32\nand 64 bits.\n\nNote that these manuals are not for beginners.\n\n1\\. Optimizing software in C++: An optimization guide for Windows, Linux and\nMac platforms\n\n    \n\nThis is an optimization manual for advanced C++ programmers. Topics include:\nThe choice of platform and operating system. Choice of compiler and framework.\nFinding performance bottlenecks. The efficiency of different C++ constructs.\nMulti-core systems. Parallelization with vector operations. CPU dispatching.\nEfficient container class templates. Etc.\n\nFile name: optimizing_cpp.pdf, size: 1798079, last modified: 2024-Mar-15.\nDownload.\n\n2\\. Optimizing subroutines in assembly language: An optimization guide for x86\nplatforms\n\n    \n\nThis is an optimization manual for advanced assembly language programmers and\ncompiler makers. Topics include: C++ instrinsic functions, inline assembly and\nstand-alone assembly. Linking optimized assembly subroutines into high level\nlanguage programs. Making subroutine libraries compatible with multiple\ncompilers and operating systems. Optimizing for speed or size. Memory access.\nLoops. Vector programming (XMM, YMM, SIMD). CPU-specific optimization and CPU\ndispatching.\n\nFile name: optimizing_assembly.pdf, size: 1501160, last modified: 2023-Jul-01.\nDownload.\n\n3\\. The microarchitecture of Intel, AMD and VIA CPUs: An optimization guide\nfor assembly programmers and compiler makers\n\n    \n\nThis manual contains details about the internal working of various\nmicroprocessors from Intel, AMD and VIA. Topics include: Out-of-order\nexecution, register renaming, pipeline structure, execution unit organization\nand branch prediction algorithms for each type of microprocessor. Describes\nmany details that cannot be found in manuals from microprocessor vendors or\nanywhere else. The information is based on my own research and measurements\nrather than on official sources. This information will be useful to\nprogrammers who want to make CPU-specific optimizations as well as to compiler\nmakers and students of microarchitecture.\n\nFile name: microarchitecture.pdf, size: 2472395, last modified: 2023-Jul-01.\nDownload.\n\n4\\. Instruction tables: Lists of instruction latencies, throughputs and micro-\noperation breakdowns for Intel, AMD and VIA CPUs\n\n    \n\nContains detailed lists of instruction latencies, execution unit throughputs,\nmicro-operation breakdown and other details for all common application\ninstructions of most microprocessors from Intel, AMD and VIA. Intended as an\nappendix to the preceding manuals. Available as pdf file and as spreadsheet\n(ods format).\n\nFile name: instruction_tables.pdf, size: 2188084, last modified: 2022-Nov-04.\nDownload.\n\nFile name: instruction_tables.ods, size: 543329, last modified: 2022-Nov-04.\nDownload.\n\n5\\. Calling conventions for different C++ compilers and operating systems\n\n    \n\nThis document contains details about data representation, function calling\nconventions, register usage conventions, name mangling schemes, etc. for many\ndifferent C++ compilers and operating systems. Discusses compatibilities and\nincompatibilities between different C++ compilers. Includes information that\nis not covered by the official Application Binary Interface standards (ABI's).\nThe information provided here is based on my own research and therefore\ndescriptive rather than normative. Intended as a source of reference for\nprogrammers who want to make function libraries compatible with multiple\ncompilers or operating systems and for makers of compilers and other\ndevelopment tools who want their tools to be compatible with existing tools.\n\nFile name: calling_conventions.pdf, size: 1078737, last modified: 2023-Jul-01.\nDownload.\n\nAll five manuals\n\n    \n\nDownload all the above manuals together in one zip file.\n\nFile name: optimization_manuals.zip, size: 7393957, last modified:\n2024-Mar-15. Download.\n\n## C++ vector class library\n\nThis is a collection of C++ classes, functions and operators that makes it\neasier to use the the vector instructions (Single Instruction Multiple Data\ninstructions) of modern CPUs without using assembly language. Supports the\nSSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, FMA, XOP, and AVX512F/BW/DQ/VL\ninstruction sets. Includes standard mathematical functions. Can compile for\ndifferent instruction sets from the same source code. Description and\ninstructions. Message board. Source on Github. Nice little instruction video\nby WhatsaCreel.\n\nLatest release.\n\n## Object file converter\n\nThis utility can be used for converting object files between COFF/PE, OMF, ELF\nand Mach-O formats for all 32-bit and 64-bit x86 platforms. Can modify symbol\nnames in object files. Can build, modify and convert function libraries across\nplatforms. Can dump object files and executable files. Also includes a very\ngood disassembler supporting the SSE4, AVX, AVX2, AVX512, FMA3, FMA4, XOP and\nKnights Corner instruction sets. Source code included (GPL). Manual.\n\nFile name: objconv.zip, size: 1070394, last modified: 2023-Mar-29. Download.\n\n## Subroutine library\n\nThis is a library of optimized subroutines coded in assembly language. The\nfunctions in this library can be called from C, C++ and other compiled high-\nlevel languages. Supports many different compilers under Windows, Linux, BSD\nand Mac OS X operating systems, 32 and 64 bits. This library contains faster\nversions of common C/C++ memory and string functions, fast functions for\nstring search and string parsing, fast integer division and integer vector\ndivision, as well as several useful functions not found elsewhere.\n\nThe package contains library files in many different file formats, C++ header\nfile and assembly language source code. Gnu general public license applies.\nManual.\n\nFile name: asmlib.zip, size: 794549, last modified: 2023-May-03. Download.\n\n## ForwardCom: An open standard instruction set for high performance\nmicroprocessors\n\nThis is a proposal and discussion of how an ideal instruction set architecture\ncan be constructed. The proposed instruction set combines the best from the\nRISC and CISC principles to produce a flexible, consistent, modular,\northogonal, scalable and expansible instruction set for high performance\nmicroprocessors and large vector processors.\n\nThe ForwardCom instruction set has variable-length vector registers and a\nspecial addressing mode that allows the software to automatically adapt to\ndifferent microprocessors with different maximum vector lengths and make\nefficient loops through arrays regardless of whether the array size is\ndivisible by the vector length. Standardization of the corresponding ecosystem\nof ABI standards, function libraries, compilers, etc. makes it possible to\ncombine different programming languages in the same program.\n\nDevelopment tools and softcore are available.\n\nIntroduction: www.forwardcom.info. ForwardCom manual.\n\n## Test programs for measuring clock cycles and performance monitoring\n\nTest programs that I have used for my research. Can measure clock cycles and\nperformance monitor counters such as cache misses, branch mispredictions,\nresource stalls etc. in a small piece of code in C, C++ or assembly. Can also\nset up performance monitor counters for reading inside another program.\nSupports Windows and Linux, 32 and 64 bit mode, multiple threads.\n\nFor experts only. Useful for analyzing small pieces of code but not for\nprofiling a whole program.\n\nFile name: testp.zip, size: 943931, last modified: 2023-May-03. Download.\n\n## Floating point exception tracking and NAN propagation\n\nThis article discusses the problems with floating point exceptions in systems\nthat use out-of-order parallelism and SIMD parallelism. A solution based on\nNAN propagation is recommended.\n\nFile name: nan_propagation.pdf, size: 212063, last modified: 2020-Apr-27.\nDownload.\n\n## CPUID manipulation program for VIA\n\nThis is a program that can change the CPUID vendor string, family and model\nnumber on VIA Nano processors. See my blog for a discussion of the purpose of\nthis program.\n\nFile name: cpuidfake.zip, size: 67593, last modified: 2010-Aug-08. Download.\n\n## Useful software optimization links\n\nAgner's CPU blog www.agner.org/forum\n\nCPU-id tools and information www.cpuid.com\n\nGodbolt compiler explorer. This is a very useful online tool to test how\ndifferent compilers treat a piece of code. Supports the vector class library.\nwww.godbolt.org\n\nMasm Forum www.masmforum.com\n\nASM Community Messageboard www.asmcommunity.net/forums\n\nHutch's masm pages www.masm32.com\n\nlikwid performance measuring tools for Linux github.com/RRZE-HPC/likwid\n\nBit Twiddling Hacks graphics.stanford.edu/~seander/bithacks.html\n\nProgrammer's heaven assembler zone Programmers' Heaven\n\nVirtual sandpile x86 Processor information www.sandpile.org\n\nOnline computer books www.computer-books.us/assembler.php\n\nInstruction latency listings instlatx64.atw.hu/ and uops.info\n\nNASM assembler www.nasm.us/\n\nFASM assembler and messageboard flatassembler.net\n\nJWASM assembler www.japheth.de\n\nYeppp open source library of assembly language functions\nbitbucket.org/MDukhan/yeppp\n\nMAQAO (Modular Assembly Quality Analyzer and Optimizer), a tool for analyzing\nand optimizing binary codes. www.maqao.org\n\nNewsgroup: comp.lang.asm.x86\n\n### Intel resources\n\nReference manuals and other documents can be found at Intel's web site.\nIntel's web site is refurnished so often that any link I could provide here to\nspecific documents would be broken after a few months. I will therefore\nrecommend that you use the search facilities at www.intel.com and search for\n\"Software Developer's Manual\" and \"Optimization Reference Manual\".\n\n### AMD resources\n\nwww.amd.com/en/search/documentation/hub.html\n\n### Microsoft resources\n\nMASM manuals Microsoft Macro Assembler reference\n\n3543511\n\n| \u2191 Index  \n---\n\n", "frontpage": true}
