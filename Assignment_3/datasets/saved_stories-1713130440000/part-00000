{"aid": "40031848", "title": "Data Fetching Tool Using Redux-Saga", "url": "https://github.com/lotus-lab/snap-fetch", "domain": "github.com/lotus-lab", "votes": 1, "user": "Humed", "posted_at": "2024-04-14 15:33:12", "comments": 2, "source_title": "GitHub - lotus-lab/snap-fetch", "source_text": "GitHub - lotus-lab/snap-fetch\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nlotus-lab / snap-fetch Public\n\n  * Notifications\n  * Fork 0\n  * Star 1\n\n1 star 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# lotus-lab/snap-fetch\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nHumed-MuhammadDelete src directorya400a72 \u00b7\n\n## History\n\n17 Commits  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| \ud83d\ude80 Beta  \n  \n### immer.d.ts\n\n|\n\n### immer.d.ts\n\n| \ud83d\ude80 Beta 1.0  \n  \n### package.json\n\n|\n\n### package.json\n\n| !.0.41  \n  \n### readme.md\n\n|\n\n### readme.md\n\n| \ud83d\udc1b Bugfix  \n  \n### rollup.config.js\n\n|\n\n### rollup.config.js\n\n| \u2728 Adding builtin pagination  \n  \n### test.js\n\n|\n\n### test.js\n\n| \ud83d\ude80 Beta  \n  \n### tsconfig.json\n\n|\n\n### tsconfig.json\n\n| \u2728 Adding builtin pagination  \n  \n### yarn.lock\n\n|\n\n### yarn.lock\n\n| \u2728 Adding builtin pagination  \n  \n## Repository files navigation\n\n# SnapFetch Query Overview\n\n## WHAT WE'LL LEARN\n\n  * What Snap-Fetch is and what problems it solves\n  * What APIs are included in Snap-Fetch\n  * Basic usage\n\n## Snap-Fetch\n\nSnap-Fetch is a light weight data fetching tool built for React that allows\nyou to fetch data from an API, cache it, and store it in Redux using Redux\nToolkit and Redux Saga. It provides intuitive hooks for performing *8queries**\nand mutations, as well as a hook for configuring **global api options**.\n\n## Motivation\n\nWeb applications typically require data from a server in order to display it.\nThey also typically need to update that data, communicate those modifications\nto the server, and maintain the cached data on the client in sync with the\ndata on the server. This is made more hard by the requirement to include\nadditional behaviors utilized in today's applications:\n\n  * Tracking the loading state to show UI spinners.\n  * Avoiding multiple requests for the same data.\n  * Optimistic updates make the UI feel quicker.\n  * Managing cache lifetimes as the user interacts with the UI.\n\n## Installation\n\nYou can install Snap-Fetch using npm or yarn:\n\n    \n    \n    npm install snap-fetch\n\nor\n\n    \n    \n    yarn add snap-fetch\n\n## Add SnapFetch Sagas and Reducers To Your Redux Store\n\n### Add SnapFetch Reducers\n\n    \n    \n    import { name, reducer } from \"snap-fetch\"; export const rootReducer = combineReducers({ [name]: reducer, });\n\n### Run SnapFetch Sagas\n\n    \n    \n    /** * Create the store with dynamic reducers */ import { configureStore } from \"@reduxjs/toolkit\"; import createSagaMiddleware from \"redux-saga\"; import { rootReducer } from \"./reducers\"; import { rootSnapFetchSaga } from \"snap-fetch\"; export function configureAppStore() { const sagaMiddleware = createSagaMiddleware(); // Create the Redux store with middleware const store = configureStore({ reducer: rootReducer, middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: false, }).concat(sagaMiddleware), }); // Run the root saga sagaMiddleware.run(rootSnapFetchSaga); return { store }; }\n\n## What's included\n\n  1. useSetBaseConfiguration\n  2. useSnapFetchQuery\n  3. useSnapFetchMutation\n\n### useSetBaseConfiguration (Base Configuration)\n\nThe useSetBaseConfiguration hook is used to configure the base options for\nSnapFetch.\n\n### Usage\n\n    \n    \n    useSetBaseConfiguration(options);\n\n### Parameters\n\n  * options (object): The configuration options.\n\n#### Options\n\nThe options object accepts the following properties:\n\n  * baseUrl (string, required): The base URL for the API. (Required)\n  * disableCaching (boolean): If set to true, caching will be disabled, can be overridden by individual query options.\n  * customFetchFunction ((endpoint: string) => Promise(Response)): A custom fetch function to use for making API requests. If you don't want to use the built in fetcher.\n  * headers (Headers): Additional headers to be included in each request.\n  * Fetch API RequestInitiator...\n\n    \n    \n    // To root of you project like App.tsx main.tsx import { useSetBaseConfiguration } from \"snap-fetch\"; const baseUrl = \"https://jsonplaceholder.typicode.com\"; useSetBaseConfiguration({ baseUrl, // Required disableCaching: boolean, // if true caching will be disabled, // this is global, can be overridden by individual disableCaching properties // Below has no effect if you are using your own fetch function headers: new Headers({ Authorization: `Bearer ${token}`, }), });\n\n### useSnapFetchQuery (Query Hook)\n\nThis hook allows you to fetch data from the server using the sagas and store\nit in the redux store, it is configured to know if the same endpoint is called\nwith the same queryParams, it would only refetch data if the cache is empty or\nmutated by mutation, or if queryParams are changed...\n\nIt uses the endpoint + queryParams to cache the state, which allow it to avoid\nunnecessary fetch requests.\n\nit accepts two parameters\n\n  1. The endpoint - is the endpoint which will be used to fetch data by combining with the baseUrl\n  2. Request options - is as follows:\n\n    \n    \n    type RequestOptions = { effect?: \"takeLatest\" | \"takeLeading\" | \"takeEvery\", // saga effect, default is \"takeEvery\" method?: Method, disableCaching?: boolean, // will disable caching for the current endpoint request fetchFunction?: (endpoint: string) => Promise<Response>, // custom fetch function if you don't like the built-in. tags?: Tags, // Tags will be used to invalidate on mutation requests. filter?: { [key: string]: number | boolean | string | undefined | null }, // your filters except for pagination. pollingInterval?: number, // polling interval for polling requests skip?: boolean, // skip on mount request for the current endpoint single?: boolean, // to tell the snap-fetcher query you don't want to use pagination. };\n\n### Query Result\n\nThe useSnapFetchQuery hook returns a query result object with the following\nproperties: useSnapFetchQuery is a generic type function, the type is used to\ntell the type of the data returned from the api call.\n\n  * data (T | undefined): The fetched data.\n  * isLoading (boolean): A flag indicating if the query is in progress.\n  * isError (boolean): A flag indicating if an error occurred during the query.\n  * error (Error | undefined): The error object, if any.\n  * paginationOptions (object): The pagination options for the query.\n  * refetch (function): A function to manually trigger a refetch of the query.\n\n#### Pagination Options\n\nQueries have built in pagination support the result of useSnapFetchQuery will\nreturn a paginationOptions object with the following properties:\n\n    \n    \n    { lastPage: number; currentShowingItems: number | undefined; totalItems: number; changePageNo: (pageNo: number) => void; changeSize: (size: number) => void; pageNo: number; size: number; }\n\n  * Use the the changePageNo and changeSize to update the pagination.\n\n## Usage\n\nImport the necessary hooks from the snap-fetch package:\n\n    \n    \n    import { useSnapFetchQuery } from \"snap-fetch\";\n\n### 2\\. Querying Data\n\n    \n    \n    const MyComponent = () => { const { data, isLoading, error } = useSnapFetchQuery < Users > (\"users\", { tags: \"getUsers\", }); if (isLoading) { return <div>Loading...</div>; } if (error) { return <div>Error: {error.message}</div>; } return ( <div> {data.map((user) => ( <div key={user.id}>{user.name}</div> ))} </div> ); };\n\n### useSnapFetchMutation (Mutation Hook)\n\nThis hook allows you to manipulate the data and make mutation calls it will\nautomatically revalidate the cache if queries with the same endpoint are\navailable.\n\nIt accept two parameters:\n\n  1. The endpoint\n  2. Options:\n\n    \n    \n    type RequestOptions = { effect?: \"takeLatest\" | \"takeLeading\" | \"takeEvery\", // saga effect, default is \"takeLeading\" method?: Method, fetchFunction?: (endpoint: string) => Promise<Response>, // custom fetch function if you don't like the built-in. invalidateTags?: Tags, // Tags will be used to invalidate on mutation requests. body?: any, // Request body, will automatically remove the body if you accidentally use methods like \"GET\" or \"HEAD\" };\n\n### Mutation Result\n\n  * data (T | undefined): The returned data.\n  * isLoading (boolean): A flag indicating if the query is in progress.\n  * isError (boolean): A flag indicating if an error occurred during the query.\n  * error (Error | undefined): The error object, if any.\n  * mutate (function): A function to trigger a fetch request.\n\n### 3\\. Mutating Data\n\nTo perform a mutation and send data to the API, use the useSnapFetchMutation\nhook. Here's an example:\n\n    \n    \n    const MyComponent = () => { const { mutate, isLoading, error } = useSnapFetchMutation(\"createUser\", { invalidateTags: [\"getUsers\"], }); const handleSubmit = async (data) => { try { await mutate(data); console.log(\"User created successfully!\"); } catch (e) { console.error(\"Error creating user:\", e); } }; if (isLoading) { return <div>Loading...</div>; } if (error) { return <div>Error: {error.message}</div>; } return ( <div> <form onSubmit={handleSubmit}> {/* form fields */} <button type=\"submit\">Create User</button> </form> </div> ); };\n\nFor further information please see the full documentation.\n\n## About\n\nNo description, website, or topics provided.\n\n### Resources\n\nReadme\n\nActivity\n\nCustom properties\n\n### Stars\n\n1 star\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * JavaScript 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
