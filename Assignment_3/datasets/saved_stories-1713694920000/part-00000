{"aid": "40103158", "title": "Uncompetitive Programming (Part 1)", "url": "http://sujitkc-techbits.blogspot.com/2024/04/uncompetitive-programming-part-1.html", "domain": "sujitkc-techbits.blogspot.com", "votes": 3, "user": "hardmaru", "posted_at": "2024-04-21 04:20:59", "comments": 0, "source_title": "Uncompetitive Programming (part 1)", "source_text": "Tech Bits: Uncompetitive Programming (part 1)\n\n# Tech Bits\n\n## Bits of Learning\n\nLearning sometimes happens in big jumps, but mostly in little tiny steps. I\nshare my baby steps of learning here, mostly on topics around programming,\nprogramming languages, software engineering, and computing in general. But\noccasionally, even on other disciplines of engineering or even science. I\nmostly learn through examples and doing. And this place is a logbook of my\nexperiences in learning something. You may find several things interesting\nhere: little cute snippets of (hopefully useful) code, a bit of backing\ntheory, and a lot of gyan on how learning can be so much fun.\n\n## Tuesday, April 16, 2024\n\n### Uncompetitive Programming (part 1)\n\nI recently had an interesting discussion with one of my young relatives -- a\nsecond year engineering student in computer science -- who, like many of his\nage, is fascinated by the idea of competitive programming. Competitive\nprogramming (CP) involves solving algorithmic problems/puzzles by writing\nprograms. These problems typically involve some CS theory, particularly in\ndata structures and algorithms. There are many online sites which provide\npractice ground for CP aspirants. The pinnacle of this, to the best of my\nknowledge, is ICPC. One of our alums went on to the World finals. This\ncontributed in a big way to his getting recruited by Google, USA with a\nrecord-breaking salary. This achievement set off a CP culture in our institute\nwhich has been going strong since. Some of our brighter students gravitate\ntowards the CP culture, with dreams of becoming the next Google hire.\n\nCP emphasises on CS fundamentals. To rise in the CP community, one needs to be\ngood with algorithms, some basic mathematical thinking and in coding in at\nleast one programming language. As CP happens in time-bound environment, one\nneeds to develop quick thinking skills. Undoubtedly, CP aspirants are closely\nfollowed by top hirers. They have their fundamentals right, they are smart and\nfast, and they function well under extreme pressure -- exactly the qualities\ntop companies are looking for in their new employees, right?\n\nYet, I believe that CP is not for everyone. And by that, I don't mean that\npeople who can't handle the high pressure and expectation of CP shouldn't do\nit. That, of course, goes without saying. But what I mean is that, with all\nits good things, CP ends up testing the programmers for a limited set of\nskills, and misses out on many others which may be equally or more important\nthan the ones which are tested in CP.\n\nI would like to draw a parallel with academic assessments. Take IIT JEE. About\n30 years ago, when we were school students preparing for college entrances,\nIIT JEE used to be viewed as an ultimate test of academic brilliance. While,\nits focus was restricted to science and mathematics, it was perceived as a\nreasonably reliable metric of measuring natural intelligence. To crack JEE,\nyou needed to be someone. Conversely, if you have cracked JEE, you are\nsomeone.\n\nThings have changed since then. IIT JEE, like all assessments, has devolved\ninto a pattern now. Because of the coveted status of IITs, there are millions\nwho dream to crack JEE. And there are people who have made billion-dollar\nbusinesses out this aspiration. They have studied the JEE pattern and have\ndeveloped methods of preparing students so that they can do well in JEE, not\nbecause they are very intelligence, but because of hard practice that has\ndrilled the JEE pattern into their minds. Acing JEE is no more a surefire\nindicator that you are built differently. It's definitely about hard work and\na lot of practice. But, to a large extent, it may be an indicator of something\nnegative -- probably, you are more competitive than academically brilliant;\nand these are two entirely different things. Such high competition may now be\nroutinely excluding brilliant students with potential to become groundbreaking\nengineers from entering IITs because they are not able to handle the\npsychological pressure of such high competition. It's a tragedy of\nunprecedented scale!\n\nCP culture has a not-so-hard-to-see similarity with IIT JEE. With growing\ndemand, CP has been attracting students in whom the competitive part dominates\ntheir programmer part. By practice-solving hundreds of similar problems, many\nof these aspirants develop high degree of pattern matching skills, sharpen a\nbag of tricks to code something up quickly. They are often like overfitted ML\nmodels which will do really well in CP-like environments and will do well in\njust that kind of environment.\n\nA terrible side-effect of this phenomenon is that programming is now\nincreasingly being viewed as a quick-and-dirty problem-solving activity. And\nmany of our bright students don't even consider the possibility that\nprogramming is also a creative exercise that can't always be done in high-\npressure timebound manner, but through open-ended exploration. Time pressure\nand open-ended exploration directly conflict with each other; they are two\nextremes of a spectrum. People who have trained hard to get close to one of\nthese ends of the spectrum are very unlikely to develop well on the other. And\nwe need people at all points in this spectrum.\n\nIn real world, CP-style deadline driven algorithm design and coding is not\nalways realistic. Usually, for a task that matters, the solution is not likely\nto be very cut-n-dry. In such cases, merely a performant code that gives\ncorrect results is far from enough as an output. You have to be able to\nexplain clearly to others how you came up with the solutions and how the whole\ndamn thing works. Happily, you would typically have much more time than in CP\nto come up with such a solution.\n\nA CP-style programmer has certain skills tuned to perform well in the high\npressure setting of CP. There's a tendency of pattern matching (with familiar\nproblems) and to hack it to make it work 'somehow'. This mayn't be a good\nstyle in many settings where thinking slowly but thoroughly and clearly is\nmore important.\n\nWhile designing a solution, there may be many false starts. Writing things\ndown in the language of plain English, pictures and mathematics helps us think\nahead and correct our course early. Starting to code right away may give us a\nmistaken sense of early progress but may lead to difficult-to-correct mistakes\ndown the line, particularly when the problem is challenging.\n\nPart 2 of this article presents an example of solving a problem that appears\nin a competitive programming site.\n\nI hope that you will be able to see the differences w.r.t. to CP that I am\ntrying to bring out here.\n\nTo conclude this part of the article:\n\n  * Programming is like an art. It's as much about experience and aesthetics as about output.\n  * Ability to do thorough thinking is more important than thinking fast.\n  * Ability to communicate through written words and pictures is more important than hacking.\n  * Readability is (more often) a far more important quality of a code than squeezing every cycle out of your processor.\n\nThis is a logical point where it's OK to stop reading. But in case you plan to\ncontinue please proceed to part 2 in which I discuss with an example how an\nuncompetitive programmer would approach a CP problem! \ud83d\ude00\n\nPosted by\n\nSujit Kumar Chakrabarti at\n\nTuesday, April 16, 2024\n\nEmail ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest\n\n#### No comments:\n\nPost a Comment\n\nOlder Post Home\n\nSubscribe to: Post Comments (Atom)\n\n## Labels\n\n  * python (8)\n  * higher order function (5)\n  * recursion (5)\n  * OCaml (4)\n  * functional programming (4)\n  * C++ (3)\n  * algorithm (3)\n  * graph (3)\n  * automation (2)\n  * backup (2)\n  * function (2)\n  * latex (2)\n  * number system (2)\n  * object-oriented (2)\n  * programming (2)\n  * programming language (2)\n  * software engineering (2)\n  * software testing (2)\n  * sudoku (2)\n  * tail recursive (2)\n  * test case (2)\n  * test driven development (2)\n  * DAG (1)\n  * DFS (1)\n  * Google Code jam (1)\n  * IISc (1)\n  * IR (1)\n  * Internet (1)\n  * Java (1)\n  * Makefile (1)\n  * Monte Carlo simulation (1)\n  * Openboard (1)\n  * Pi (1)\n  * Queue (1)\n  * TikZ (1)\n  * Web (1)\n  * Xournal++ (1)\n  * agile methodology (1)\n  * application programming interface (1)\n  * argument (1)\n  * aspell (1)\n  * branch and bound (1)\n  * bug (1)\n  * build (1)\n  * build automation (1)\n  * chess (1)\n  * class (1)\n  * closure (1)\n  * complaint-cell (1)\n  * conference (1)\n  * counter (1)\n  * counting (1)\n  * data (1)\n  * depth first traversal (1)\n  * design pattern (1)\n  * difference (1)\n  * directed acyclic graph (1)\n  * eVoices (1)\n  * eight queen puzzle (1)\n  * exponential (1)\n  * filter (1)\n  * fix (1)\n  * formal verification (1)\n  * generator (1)\n  * hand-drawing (1)\n  * handwriting (1)\n  * hisaab (1)\n  * imperative programming (1)\n  * information retrieval (1)\n  * internal representation (1)\n  * iteration (1)\n  * journal (1)\n  * lambda expression (1)\n  * linux (1)\n  * logic programming (1)\n  * make (1)\n  * map (1)\n  * method (1)\n  * modularity (1)\n  * module (1)\n  * multigraph (1)\n  * object-oriented programming (1)\n  * parameter (1)\n  * parser (1)\n  * programming languages (1)\n  * programming paradigms (1)\n  * pruning (1)\n  * publication (1)\n  * puzzle (1)\n  * randomisation (1)\n  * recommender system (1)\n  * regression testing (1)\n  * research (1)\n  * reusability (1)\n  * review (1)\n  * screen resolution (1)\n  * script (1)\n  * set (1)\n  * shell (1)\n  * shell-script (1)\n  * spell-check (1)\n  * stack (1)\n  * stack overflow (1)\n  * synchronisation (1)\n  * tail call optimisation (1)\n  * tail recursion (1)\n  * transaction (1)\n  * translator (1)\n  * union (1)\n  * version (1)\n\n## About Me\n\nSujit Kumar Chakrabarti\n\nView my complete profile|\n\n## Blog Archive\n\n  * \u25bc 2024 (2)\n    * \u25bc April (2)\n      * Uncompetitive Programming (part 1)\n      * Uncompetitive Programming (part 2)\n\n  * \u25ba 2023 (1)\n    * \u25ba December (1)\n\n  * \u25ba 2021 (1)\n    * \u25ba March (1)\n\n  * \u25ba 2020 (2)\n    * \u25ba November (1)\n    * \u25ba February (1)\n\n  * \u25ba 2018 (4)\n    * \u25ba September (2)\n    * \u25ba July (1)\n    * \u25ba June (1)\n\n  * \u25ba 2017 (1)\n    * \u25ba May (1)\n\n  * \u25ba 2016 (4)\n    * \u25ba October (1)\n    * \u25ba September (3)\n\n  * \u25ba 2014 (2)\n    * \u25ba June (1)\n    * \u25ba March (1)\n\n  * \u25ba 2013 (7)\n    * \u25ba September (1)\n    * \u25ba May (1)\n    * \u25ba April (3)\n    * \u25ba March (2)\n\n  * \u25ba 2012 (3)\n    * \u25ba July (1)\n    * \u25ba June (2)\n\n  * \u25ba 2010 (1)\n    * \u25ba June (1)\n\n  * \u25ba 2009 (2)\n    * \u25ba December (2)\n\n  * \u25ba 2008 (2)\n    * \u25ba September (2)\n\n  * \u25ba 2007 (6)\n    * \u25ba November (1)\n    * \u25ba August (1)\n    * \u25ba June (1)\n    * \u25ba March (1)\n    * \u25ba February (2)\n\n  * \u25ba 2006 (21)\n    * \u25ba December (1)\n    * \u25ba August (3)\n    * \u25ba June (1)\n    * \u25ba May (1)\n    * \u25ba March (4)\n    * \u25ba February (11)\n\n  \n---|---  \n  \nSimple theme. Powered by Blogger.\n\nDiese Website verwendet Cookies von Google, um Dienste anzubieten und Zugriffe\nzu analysieren. Deine IP-Adresse und dein User-Agent werden zusammen mit\nMesswerten zur Leistung und Sicherheit f\u00fcr Google freigegeben. So k\u00f6nnen\nNutzungsstatistiken generiert, Missbrauchsf\u00e4lle erkannt und behoben und die\nQualit\u00e4t des Dienstes gew\u00e4hrleistet werden.Weitere InformationenOk\n\n", "frontpage": false}
