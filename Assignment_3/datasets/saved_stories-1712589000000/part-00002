{"aid": "39967723", "title": "Object-Oriented C: A Primer", "url": "https://www.aartaka.me/oop-c-primer", "domain": "aartaka.me", "votes": 2, "user": "thunderbong", "posted_at": "2024-04-08 09:09:18", "comments": 0, "source_title": "Object-Oriented C: A Primer", "source_text": "Object-Oriented C: A Primer\n\nNotice that I'll be moving my website to www.aartaka.me.eu.org soon. If you're\nreading this on aartaka.me, remember to switch.\n\n# Object-Oriented C: A Primer\n\nBeware of your inheritance hierarchy eating up your memory... unless you use\nOOP C. \"The Big Fish Eat the Little Fish\" by Pieter van der Heyden, 1558\n\n\u00b6 C is a marvelous language in how it can be small, efficient, pretty, and\nugly, all at the same time. But what it lacks (driving modern developers to\ndespair) is Object-Oriented Programming (OOP) facilities. Yes, there's C++,\nbut one doesn't talk about C++ in good social circles. Especially when it's\npossible to simulate classes, objects, and methods in C. Yes, it'll look\nslightly irregular, but bear with me.\n\n\u00b6 This post is structured around Object-Oriented Programming concepts.\nStarting from the simplest ones and slowly increasing the difficulty level. Be\nprepared: OOP is quite a fuzzy set of ideas. I'll exploit this fuzziness as\nmuch as possible\u2014to stay within what people call OOP while not parting with C\nand its blessed ways. As a spoiler: the resulting system will be a Generic-\nbased Single Inheritance one.\n\n\u00b6 Here's a problem domain we're going to model: animals. There are animals\n(yes, a classic OOP example). Many families and species of animals. I have a\nlovely cat named Kalyam, so I'm mostly interested in Feline.\n\nInheritance hierarchy of an arbitrary sample of animals I am familiar with\n\n\u00b6 I'm going to model just that part of biological hierarchy. Hopefully, we'll\nhave enough material to crash-test the approach I suggest.\n\n## Encapsulation\n\n\u00b6 This one is easy. In its simplest definition, encapsulation is putting\nthings into their buckets (called classes). Encapsulation might also mean\nhiding data inside classes, but see visibility section for that instead.\nEncapsulation might also mean belonging of behavior (methods) inside classes.\nBut that's debatable: some languages have a generic-oriented OOP where methods\nare freestanding entities. If anything, methods belong to their generic\nfunctions there. That's the approach I'll use. C (since C11) has generic\ndispatch, so why not use the feature that's already there?\n\n\u00b6 Putting the generics talk aside for a second, let's encapsulate some data,\nshall we?\n\n    \n    \n    struct animal { char *name; char *species; };\n\nAnimal structure definition listing useful data about it\n\n\u00b6 That's it, we've got our parent class ready. The data is contained within,\nso we've got encapsulation. What we don't yet have are animal classes, orders,\ngenera, species, etc. So let's create an extinct animal that can forgive me my\npoor biology knowledge:\n\n    \n    \n    struct animal oldie = {.name = \"Oldie\", .species = \"Miacid\"}; printf(\"This really old animal is %s of %s specie\\n\", oldie.name, oldie.species);\n\nAnimal use example\n\n\u00b6 In case you don't like this struct talk, you can always define a macro and a\ntype alias (capitalized, to please the Java crowd):\n\n    \n    \n    #define class struct typedef class animal Animal;\n\nOOP macro and type we are going to use later\n\n\u00b6 That's all there is to encapsulation, really.\n\n## Inheritance\n\n\u00b6 With encapsulation out of the way, enter inheritance. A way for classes to\ndepend on each other and share behaviors/data.\n\n\u00b6 A trick I learned (from the \"Good Taste\" series of posts) just a few days\nago: embedding structures inside each other. Putting one structure as the\nfirst member of another, you're making the outer structure castable to the\ninner one, sharing the behavior between the two:\n\n    \n    \n    typedef class carnivoire { Animal parent; } Carnivoire;\n\nCarnivoire class definition\n\n\u00b6 Now we can cast any animal to (Animal *) and invoke Animal methods:\n\n    \n    \n    Carnivoire sabre_tooth = {{.name = \"Diego\", .species = \"Dinictis\"}}; eats((Animal *)&sabre_tooth);\n\nExample of Carnivoire use\n\n\u00b6 No, wait our animals don't know how to eat yet! Let's teach them\u2014with\npolymorphism!\n\n## Polymorphism\n\n\u00b6 There's a default behavior to animals: they eat (duh). That's why the\ndiagram above includes the eats() method: any animal class eats something.\nHowever, there are all sorts of animals. Some eat plants. Some eat fungus.\nSome eat other animals (huh, a recursion?) Knowing that the creature is an\nanimal, it's hard to tell what they eat. Here's how we express it with code:\n\n    \n    \n    void animal_eats (Animal *self) { printf(\"%s eats ???\\n\", self->name); } #define eats(animal) _Generic((animal), default: animal_eats) ((animal))\n\nPolymorphic eats() method implemented as a macro\n\n\u00b6 For now, our eats() macro/generic only has one default method: animal_eat.\nBut you can already see how one can extend it with just another line of\ntype+method. Let's actually do that:\n\n    \n    \n    void carnivoire_eats (Carnivoire *self) { printf(\"%s eats meat (a shame\u2014it involves killing other animals)\\n\", self->parent.name); } #define eats(animal) _Generic((animal), Carnivoire *: carnivoire_eats, default: animal_eats) ((__VA_ARGS__))\n\nCarnivore eats() method\n\n\u00b6 Only one more line in the generic, and we have carnivoire-specific behavior!\nThat's what polymorphism's promise is: specifying behavior given a type.\n\n    \n    \n    eats(&sabre_tooth); // Diego eats meat...\n\nUsing carnivoire-specific eats() method\n\n## Visibility\n\n\u00b6 Most OOP systems have private/public/protected differentiation. I can easily\ncast it aside based on the fact that e.g. Python doesn't have visibility as a\nconcept. But I'll try to implement it anyway.\n\n\u00b6 The trick is treating structures as opaque data. I mean, the user of the\ncode doesn't have to know the data layout of the structure. They have to use\nit as a raw pointer, relying on extern-ed functions anyway. This is exploited\nby many codebases. They tend to hide the pointer to the \"private\" version of\nthe structure, nested inside the \"public\" one. WebKitGTK does this:\n\n    \n    \n    class WebKit2.WebViewBase : Gtk.Container implements Atk.ImplementorIface, Gtk.Buildable { priv: WebKitWebViewBasePrivate* }\n\nWebKit WebView private structure example\n\n\u00b6 Relying on this tradition, we can say that structures are private by\ndefault. What's public is their getters and setters. So why not define some\ngetters and setters for our structures?\n\n    \n    \n    char *animal_get_name (Animal *self) { return self->name; } void animal_set_name (Animal *self, char *name) { self->name = name; }\n\nExample getter/setter for animals\n\n\u00b6 This is pretty boring, so let's define a new class with private fields and\nmethods:\n\n    \n    \n    #define private typedef class feline { Carnivoire parent; private bool claws_out; } Feline; // Don't have to define name getter/setter: animal has it already. bool feline_get_claws_out (Feline *self) { return self->claws_out; } void feline_protract_claws (Feline *self) { self->claws_out = true; } void feline_retract_claws (Feline *self) { self->claws_out = false; }\n\nFeline (cat-like) class with special behavior for claws\n\n\u00b6 Notice that we don't have a setter for claws_out\u2014retract/protract methods\nhandle modification. An important OOP technique of hiding the actual data\nbehind the behavior.\n\n## Using the OOP system\n\n\u00b6 The code so far was pretty simplistic, and there wasn't much OOP. This\nsection and example will finally put the system to the test. Let's define cats\n(I've been waiting for this!) and their behaviors:\n\n    \n    \n    typedef class cat { Feline parent; } Cat; void cat_purr (Cat *self) { printf(\"%s purrs...\\n\", animal_get_name(self)); feline_retract_claws(self); } void cat_eats (Cat *self) { printf(\"%s eats mice\\n\", animal_get_name(self)); } #define eats(animal) _Generic((animal), Carnivoire *: carnivoire_eats, Cat *: cat_eats, default: animal_eats) ((animal))\n\nCats and their methods\n\n\u00b6 Testing this system yields:\n\n    \n    \n    // My little sweet boy Cat Kalyam = {{{{.name = \"Kalyam\", .species = \"Felis catus\"}}, .claws_out = true}}; printf(\"%s's claws are %stracted\\n\", animal_get_name(&Kalyam), (feline_get_claws_out(&Kalyam) ? \"pro\" : \"re\")); // Kalyam's claws are protracted eats(&Kalyam); // Kalyam eats mice cat_purr(&Kalyam); printf(\"%s's claws are %stracted\\n\", animal_get_name(&Kalyam), (feline_get_claws_out(&Kalyam) ? \"pro\" : \"re\")); // Kalyam's claws are retracted\n\nActually using the system\n\n\u00b6 These nested curly brackets are not looking right, begging for constructor\nmethods. But this post is too long already, so let's leave it for later.\nWhat's important: Encapsulation, Inheritance, Polymorphism, and Visibility are\nthere. C can do OOP. And it's not that hard really\u2014what this post covers is\nquite simple and easy to scale.\n\n\u00b6 You can look at the final code (compiles with GCC and Clang, even if with\nheaps of warnings) in oop-c-primer-original.c. And the cleaned-up (and\nslightly extended with bird-specific details if you wanted to see a more\ninvolved inheritance hierarchy) code in oop-c-primer-cleanup.c. I hope that\nyou're convinced OOP is possible in C, for better or worse. Thanks for\naccompanying me on this journey!\n\n## Acknowledgements\n\nI owe a thanks to\n\n  * Vasily Gerasimov for our discussions on what is or isn't OOP.\n  * Alex Alejandre for being attentive to my language and curious about the idea of the post.\n  * Post-Modern C style guile for making me even consider a possibility of OOP in C.\n\nThis website is Designed to Last, generated with the help of C preprocessor,\nand routed to with the help of afraid.org Free DNS. You can view page sources\nby appending .h to the page URL.\n\nCopyright 2022-2024 Artyom Bologov (aartaka). Any and all opinions listed here\nare my own and not representative of my employers; future, past and present.\n\n", "frontpage": false}
