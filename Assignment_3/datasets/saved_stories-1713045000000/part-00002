{"aid": "40023897", "title": "Classic PG: The Hardest Lessons for Startups to Learn (2016)", "url": "https://paulgraham.com/startuplessons.html", "domain": "paulgraham.com", "votes": 1, "user": "ColinWright", "posted_at": "2024-04-13 15:48:27", "comments": 0, "source_title": "The Hardest Lessons for Startups to Learn", "source_text": "The Hardest Lessons for Startups to Learn\n\n| April 2006(This essay is derived from a talk at the 2006 Startup School.)The\nstartups we've funded so far are pretty quick, but they seem quicker to learn\nsome lessons than others. I think it's because some things about startups are\nkind of counterintuitive.We've now invested in enough companies that I've\nlearned a trick for determining which points are the counterintuitive ones:\nthey're the ones I have to keep repeating.So I'm going to number these points,\nand maybe with future startups I'll be able to pull off a form of Huffman\ncoding. I'll make them all read this, and then instead of nagging them in\ndetail, I'll just be able to say: number four!1\\. Release Early.The thing I\nprobably repeat most is this recipe for a startup: get a version 1 out fast,\nthen improve it based on users' reactions.By \"release early\" I don't mean you\nshould release something full of bugs, but that you should release something\nminimal. Users hate bugs, but they don't seem to mind a minimal version 1, if\nthere's more coming soon.There are several reasons it pays to get version 1\ndone fast. One is that this is simply the right way to write software, whether\nfor a startup or not. I've been repeating that since 1993, and I haven't seen\nmuch since to contradict it. I've seen a lot of startups die because they were\ntoo slow to release stuff, and none because they were too quick. [1]One of the\nthings that will surprise you if you build something popular is that you won't\nknow your users. Reddit now has almost half a million unique visitors a month.\nWho are all those people? They have no idea. No web startup does. And since\nyou don't know your users, it's dangerous to guess what they'll like. Better\nto release something and let them tell you.Wufoo took this to heart and\nreleased their form-builder before the underlying database. You can't even\ndrive the thing yet, but 83,000 people came to sit in the driver's seat and\nhold the steering wheel. And Wufoo got valuable feedback from it: Linux users\ncomplained they used too much Flash, so they rewrote their software not to. If\nthey'd waited to release everything at once, they wouldn't have discovered\nthis problem till it was more deeply wired in.Even if you had no users, it\nwould still be important to release quickly, because for a startup the initial\nrelease acts as a shakedown cruise. If anything major is broken-- if the\nidea's no good, for example, or the founders hate one another-- the stress of\ngetting that first version out will expose it. And if you have such problems\nyou want to find them early.Perhaps the most important reason to release\nearly, though, is that it makes you work harder. When you're working on\nsomething that isn't released, problems are intriguing. In something that's\nout there, problems are alarming. There is a lot more urgency once you\nrelease. And I think that's precisely why people put it off. They know they'll\nhave to work a lot harder once they do. [2]2\\. Keep Pumping Out Features.Of\ncourse, \"release early\" has a second component, without which it would be bad\nadvice. If you're going to start with something that doesn't do much, you\nbetter improve it fast.What I find myself repeating is \"pump out features.\"\nAnd this rule isn't just for the initial stages. This is something all\nstartups should do for as long as they want to be considered startups.I don't\nmean, of course, that you should make your application ever more complex. By\n\"feature\" I mean one unit of hacking-- one quantum of making users' lives\nbetter.As with exercise, improvements beget improvements. If you run every\nday, you'll probably feel like running tomorrow. But if you skip running for a\ncouple weeks, it will be an effort to drag yourself out. So it is with\nhacking: the more ideas you implement, the more ideas you'll have. You should\nmake your system better at least in some small way every day or two.This is\nnot just a good way to get development done; it is also a form of marketing.\nUsers love a site that's constantly improving. In fact, users expect a site to\nimprove. Imagine if you visited a site that seemed very good, and then\nreturned two months later and not one thing had changed. Wouldn't it start to\nseem lame? [3]They'll like you even better when you improve in response to\ntheir comments, because customers are used to companies ignoring them. If\nyou're the rare exception-- a company that actually listens-- you'll generate\nfanatical loyalty. You won't need to advertise, because your users will do it\nfor you.This seems obvious too, so why do I have to keep repeating it? I think\nthe problem here is that people get used to how things are. Once a product\ngets past the stage where it has glaring flaws, you start to get used to it,\nand gradually whatever features it happens to have become its identity. For\nexample, I doubt many people at Yahoo (or Google for that matter) realized how\nmuch better web mail could be till Paul Buchheit showed them.I think the\nsolution is to assume that anything you've made is far short of what it could\nbe. Force yourself, as a sort of intellectual exercise, to keep thinking of\nimprovements. Ok, sure, what you have is perfect. But if you had to change\nsomething, what would it be?If your product seems finished, there are two\npossible explanations: (a) it is finished, or (b) you lack imagination.\nExperience suggests (b) is a thousand times more likely.3\\. Make Users\nHappy.Improving constantly is an instance of a more general rule: make users\nhappy. One thing all startups have in common is that they can't force anyone\nto do anything. They can't force anyone to use their software, and they can't\nforce anyone to do deals with them. A startup has to sing for its supper.\nThat's why the successful ones make great things. They have to, or die.When\nyou're running a startup you feel like a little bit of debris blown about by\npowerful winds. The most powerful wind is users. They can either catch you and\nloft you up into the sky, as they did with Google, or leave you flat on the\npavement, as they do with most startups. Users are a fickle wind, but more\npowerful than any other. If they take you up, no competitor can keep you\ndown.As a little piece of debris, the rational thing for you to do is not to\nlie flat, but to curl yourself into a shape the wind will catch.I like the\nwind metaphor because it reminds you how impersonal the stream of traffic is.\nThe vast majority of people who visit your site will be casual visitors. It's\nthem you have to design your site for. The people who really care will find\nwhat they want by themselves.The median visitor will arrive with their finger\npoised on the Back button. Think about your own experience: most links you\nfollow lead to something lame. Anyone who has used the web for more than a\ncouple weeks has been trained to click on Back after following a link. So your\nsite has to say \"Wait! Don't click on Back. This site isn't lame. Look at\nthis, for example.\"There are two things you have to do to make people pause.\nThe most important is to explain, as concisely as possible, what the hell your\nsite is about. How often have you visited a site that seemed to assume you\nalready knew what they did? For example, the corporate site that says the\ncompany makes\n\n> enterprise content management solutions for business that enable\n> organizations to unify people, content and processes to minimize business\n> risk, accelerate time-to-value and sustain lower total cost of ownership.\n\nAn established company may get away with such an opaque description, but no\nstartup can. A startup should be able to explain in one or two sentences\nexactly what it does. [4] And not just to users. You need this for everyone:\ninvestors, acquirers, partners, reporters, potential employees, and even\ncurrent employees. You probably shouldn't even start a company to do something\nthat can't be described compellingly in one or two sentences.The other thing I\nrepeat is to give people everything you've got, right away. If you have\nsomething impressive, try to put it on the front page, because that's the only\none most visitors will see. Though indeed there's a paradox here: the more you\npush the good stuff toward the front, the more likely visitors are to explore\nfurther. [5]In the best case these two suggestions get combined: you tell\nvisitors what your site is about by showing them. One of the standard pieces\nof advice in fiction writing is \"show, don't tell.\" Don't say that a\ncharacter's angry; have him grind his teeth, or break his pencil in half.\nNothing will explain what your site does so well as using it.The industry term\nhere is \"conversion.\" The job of your site is to convert casual visitors into\nusers-- whatever your definition of a user is. You can measure this in your\ngrowth rate. Either your site is catching on, or it isn't, and you must know\nwhich. If you have decent growth, you'll win in the end, no matter how obscure\nyou are now. And if you don't, you need to fix something.4\\. Fear the Right\nThings.Another thing I find myself saying a lot is \"don't worry.\" Actually,\nit's more often \"don't worry about this; worry about that instead.\" Startups\nare right to be paranoid, but they sometimes fear the wrong things.Most\nvisible disasters are not so alarming as they seem. Disasters are normal in a\nstartup: a founder quits, you discover a patent that covers what you're doing,\nyour servers keep crashing, you run into an insoluble technical problem, you\nhave to change your name, a deal falls through-- these are all par for the\ncourse. They won't kill you unless you let them.Nor will most competitors. A\nlot of startups worry \"what if Google builds something like us?\" Actually big\ncompanies are not the ones you have to worry about-- not even Google. The\npeople at Google are smart, but no smarter than you; they're not as motivated,\nbecause Google is not going to go out of business if this one product fails;\nand even at Google they have a lot of bureaucracy to slow them down.What you\nshould fear, as a startup, is not the established players, but other startups\nyou don't know exist yet. They're way more dangerous than Google because, like\nyou, they're cornered animals.Looking just at existing competitors can give\nyou a false sense of security. You should compete against what someone else\ncould be doing, not just what you can see people doing. A corollary is that\nyou shouldn't relax just because you have no visible competitors yet. No\nmatter what your idea, there's someone else out there working on the same\nthing.That's the downside of it being easier to start a startup: more people\nare doing it. But I disagree with Caterina Fake when she says that makes this\na bad time to start a startup. More people are starting startups, but not as\nmany more as could. Most college graduates still think they have to get a job.\nThe average person can't ignore something that's been beaten into their head\nsince they were three just because serving web pages recently got a lot\ncheaper.And in any case, competitors are not the biggest threat. Way more\nstartups hose themselves than get crushed by competitors. There are a lot of\nways to do it, but the three main ones are internal disputes, inertia, and\nignoring users. Each is, by itself, enough to kill you. But if I had to pick\nthe worst, it would be ignoring users. If you want a recipe for a startup\nthat's going to die, here it is: a couple of founders who have some great idea\nthey know everyone is going to love, and that's what they're going to build,\nno matter what.Almost everyone's initial plan is broken. If companies stuck to\ntheir initial plans, Microsoft would be selling programming languages, and\nApple would be selling printed circuit boards. In both cases their customers\ntold them what their business should be-- and they were smart enough to\nlisten.As Richard Feynman said, the imagination of nature is greater than the\nimagination of man. You'll find more interesting things by looking at the\nworld than you could ever produce just by thinking. This principle is very\npowerful. It's why the best abstract painting still falls short of Leonardo,\nfor example. And it applies to startups too. No idea for a product could ever\nbe so clever as the ones you can discover by smashing a beam of prototypes\ninto a beam of users.5\\. Commitment Is a Self-Fulfilling Prophecy.I now have\nenough experience with startups to be able to say what the most important\nquality is in a startup founder, and it's not what you might think. The most\nimportant quality in a startup founder is determination. Not intelligence--\ndetermination.This is a little depressing. I'd like to believe Viaweb\nsucceeded because we were smart, not merely determined. A lot of people in the\nstartup world want to believe that. Not just founders, but investors too. They\nlike the idea of inhabiting a world ruled by intelligence. And you can tell\nthey really believe this, because it affects their investment decisions.Time\nafter time VCs invest in startups founded by eminent professors. This may work\nin biotech, where a lot of startups simply commercialize existing research,\nbut in software you want to invest in students, not professors. Microsoft,\nYahoo, and Google were all founded by people who dropped out of school to do\nit. What students lack in experience they more than make up in dedication.Of\ncourse, if you want to get rich, it's not enough merely to be determined. You\nhave to be smart too, right? I'd like to think so, but I've had an experience\nthat convinced me otherwise: I spent several years living in New York.You can\nlose quite a lot in the brains department and it won't kill you. But lose even\na little bit in the commitment department, and that will kill you very\nrapidly.Running a startup is like walking on your hands: it's possible, but it\nrequires extraordinary effort. If an ordinary employee were asked to do the\nthings a startup founder has to, he'd be very indignant. Imagine if you were\nhired at some big company, and in addition to writing software ten times\nfaster than you'd ever had to before, they expected you to answer support\ncalls, administer the servers, design the web site, cold-call customers, find\nthe company office space, and go out and get everyone lunch.And to do all this\nnot in the calm, womb-like atmosphere of a big company, but against a backdrop\nof constant disasters. That's the part that really demands determination. In a\nstartup, there's always some disaster happening. So if you're the least bit\ninclined to find an excuse to quit, there's always one right there.But if you\nlack commitment, chances are it will have been hurting you long before you\nactually quit. Everyone who deals with startups knows how important commitment\nis, so if they sense you're ambivalent, they won't give you much attention. If\nyou lack commitment, you'll just find that for some mysterious reason good\nthings happen to your competitors but not to you. If you lack commitment, it\nwill seem to you that you're unlucky.Whereas if you're determined to stick\naround, people will pay attention to you, because odds are they'll have to\ndeal with you later. You're a local, not just a tourist, so everyone has to\ncome to terms with you.At Y Combinator we sometimes mistakenly fund teams who\nhave the attitude that they're going to give this startup thing a shot for\nthree months, and if something great happens, they'll stick with it--\n\"something great\" meaning either that someone wants to buy them or invest\nmillions of dollars in them. But if this is your attitude, \"something great\"\nis very unlikely to happen to you, because both acquirers and investors judge\nyou by your level of commitment.If an acquirer thinks you're going to stick\naround no matter what, they'll be more likely to buy you, because if they\ndon't and you stick around, you'll probably grow, your price will go up, and\nthey'll be left wishing they'd bought you earlier. Ditto for investors. What\nreally motivates investors, even big VCs, is not the hope of good returns, but\nthe fear of missing out. [6] So if you make it clear you're going to succeed\nno matter what, and the only reason you need them is to make it happen a\nlittle faster, you're much more likely to get money.You can't fake this. The\nonly way to convince everyone that you're ready to fight to the death is\nactually to be ready to.You have to be the right kind of determined, though. I\ncarefully chose the word determined rather than stubborn, because stubbornness\nis a disastrous quality in a startup. You have to be determined, but flexible,\nlike a running back. A successful running back doesn't just put his head down\nand try to run through people. He improvises: if someone appears in front of\nhim, he runs around them; if someone tries to grab him, he spins out of their\ngrip; he'll even run in the wrong direction briefly if that will help. The one\nthing he'll never do is stand still. [7]6\\. There Is Always Room.I was talking\nrecently to a startup founder about whether it might be good to add a social\ncomponent to their software. He said he didn't think so, because the whole\nsocial thing was tapped out. Really? So in a hundred years the only social\nnetworking sites will be the Facebook, MySpace, Flickr, and Del.icio.us? Not\nlikely.There is always room for new stuff. At every point in history, even the\ndarkest bits of the dark ages, people were discovering things that made\neveryone say \"why didn't anyone think of that before?\" We know this continued\nto be true up till 2004, when the Facebook was founded-- though strictly\nspeaking someone else did think of that.The reason we don't see the\nopportunities all around us is that we adjust to however things are, and\nassume that's how things have to be. For example, it would seem crazy to most\npeople to try to make a better search engine than Google. Surely that field,\nat least, is tapped out. Really? In a hundred years-- or even twenty-- are\npeople still going to search for information using something like the current\nGoogle? Even Google probably doesn't think that.In particular, I don't think\nthere's any limit to the number of startups. Sometimes you hear people saying\n\"All these guys starting startups now are going to be disappointed. How many\nlittle startups are Google and Yahoo going to buy, after all?\" That sounds\ncleverly skeptical, but I can prove it's mistaken. No one proposes that\nthere's some limit to the number of people who can be employed in an economy\nconsisting of big, slow-moving companies with a couple thousand people each.\nWhy should there be any limit to the number who could be employed by small,\nfast-moving companies with ten each? It seems to me the only limit would be\nthe number of people who want to work that hard.The limit on the number of\nstartups is not the number that can get acquired by Google and Yahoo-- though\nit seems even that should be unlimited, if the startups were actually worth\nbuying-- but the amount of wealth that can be created. And I don't think\nthere's any limit on that, except cosmological ones.So for all practical\npurposes, there is no limit to the number of startups. Startups make wealth,\nwhich means they make things people want, and if there's a limit on the number\nof things people want, we are nowhere near it. I still don't even have a\nflying car.7\\. Don't Get Your Hopes Up.This is another one I've been repeating\nsince long before Y Combinator. It was practically the corporate motto at\nViaweb.Startup founders are naturally optimistic. They wouldn't do it\notherwise. But you should treat your optimism the way you'd treat the core of\na nuclear reactor: as a source of power that's also very dangerous. You have\nto build a shield around it, or it will fry you.The shielding of a reactor is\nnot uniform; the reactor would be useless if it were. It's pierced in a few\nplaces to let pipes in. An optimism shield has to be pierced too. I think the\nplace to draw the line is between what you expect of yourself, and what you\nexpect of other people. It's ok to be optimistic about what you can do, but\nassume the worst about machines and other people.This is particularly\nnecessary in a startup, because you tend to be pushing the limits of whatever\nyou're doing. So things don't happen in the smooth, predictable way they do in\nthe rest of the world. Things change suddenly, and usually for the\nworse.Shielding your optimism is nowhere more important than with deals. If\nyour startup is doing a deal, just assume it's not going to happen. The VCs\nwho say they're going to invest in you aren't. The company that says they're\ngoing to buy you isn't. The big customer who wants to use your system in their\nwhole company won't. Then if things work out you can be pleasantly\nsurprised.The reason I warn startups not to get their hopes up is not to save\nthem from being disappointed when things fall through. It's for a more\npractical reason: to prevent them from leaning their company against something\nthat's going to fall over, taking them with it.For example, if someone says\nthey want to invest in you, there's a natural tendency to stop looking for\nother investors. That's why people proposing deals seem so positive: they want\nyou to stop looking. And you want to stop too, because doing deals is a pain.\nRaising money, in particular, is a huge time sink. So you have to consciously\nforce yourself to keep looking.Even if you ultimately do the first deal, it\nwill be to your advantage to have kept looking, because you'll get better\nterms. Deals are dynamic; unless you're negotiating with someone unusually\nhonest, there's not a single point where you shake hands and the deal's done.\nThere are usually a lot of subsidiary questions to be cleared up after the\nhandshake, and if the other side senses weakness-- if they sense you need this\ndeal-- they will be very tempted to screw you in the details.VCs and corp dev\nguys are professional negotiators. They're trained to take advantage of\nweakness. [8] So while they're often nice guys, they just can't help it. And\nas pros they do this more than you. So don't even try to bluff them. The only\nway a startup can have any leverage in a deal is genuinely not to need it. And\nif you don't believe in a deal, you'll be less likely to depend on it.So I\nwant to plant a hypnotic suggestion in your heads: when you hear someone say\nthe words \"we want to invest in you\" or \"we want to acquire you,\" I want the\nfollowing phrase to appear automatically in your head: don't get your hopes\nup. Just continue running your company as if this deal didn't exist. Nothing\nis more likely to make it close.The way to succeed in a startup is to focus on\nthe goal of getting lots of users, and keep walking swiftly toward it while\ninvestors and acquirers scurry alongside trying to wave money in your\nface.Speed, not MoneyThe way I've described it, starting a startup sounds\npretty stressful. It is. When I talk to the founders of the companies we've\nfunded, they all say the same thing: I knew it would be hard, but I didn't\nrealize it would be this hard.So why do it? It would be worth enduring a lot\nof pain and stress to do something grand or heroic, but just to make money? Is\nmaking money really that important?No, not really. It seems ridiculous to me\nwhen people take business too seriously. I regard making money as a boring\nerrand to be got out of the way as soon as possible. There is nothing grand or\nheroic about starting a startup per se.So why do I spend so much time thinking\nabout startups? I'll tell you why. Economically, a startup is best seen not as\na way to get rich, but as a way to work faster. You have to make a living, and\na startup is a way to get that done quickly, instead of letting it drag on\nthrough your whole life. [9]We take it for granted most of the time, but human\nlife is fairly miraculous. It is also palpably short. You're given this\nmarvellous thing, and then poof, it's taken away. You can see why people\ninvent gods to explain it. But even to people who don't believe in gods, life\ncommands respect. There are times in most of our lives when the days go by in\na blur, and almost everyone has a sense, when this happens, of wasting\nsomething precious. As Ben Franklin said, if you love life, don't waste time,\nbecause time is what life is made of.So no, there's nothing particularly grand\nabout making money. That's not what makes startups worth the trouble. What's\nimportant about startups is the speed. By compressing the dull but necessary\ntask of making a living into the smallest possible time, you show respect for\nlife, and there is something grand about that.Notes[1] Startups can die from\nreleasing something full of bugs, and not fixing them fast enough, but I don't\nknow of any that died from releasing something stable but minimal very early,\nthen promptly improving it.[2] I know this is why I haven't released Arc. The\nmoment I do, I'll have people nagging me for features.[3] A web site is\ndifferent from a book or movie or desktop application in this respect. Users\njudge a site not as a single snapshot, but as an animation with multiple\nframes. Of the two, I'd say the rate of improvement is more important to users\nthan where you currently are.[4] It should not always tell this to users,\nhowever. For example, MySpace is basically a replacement mall for mallrats.\nBut it was wiser for them, initially, to pretend that the site was about\nbands.[5] Similarly, don't make users register to try your site. Maybe what\nyou have is so valuable that visitors should gladly register to get at it. But\nthey've been trained to expect the opposite. Most of the things they've tried\non the web have sucked-- and probably especially those that made them\nregister.[6] VCs have rational reasons for behaving this way. They don't make\ntheir money (if they make money) off their median investments. In a typical\nfund, half the companies fail, most of the rest generate mediocre returns, and\none or two \"make the fund\" by succeeding spectacularly. So if they miss just a\nfew of the most promising opportunities, it could hose the whole fund.[7] The\nattitude of a running back doesn't translate to soccer. Though it looks great\nwhen a forward dribbles past multiple defenders, a player who persists in\ntrying such things will do worse in the long term than one who passes.[8] The\nreason Y Combinator never negotiates valuations is that we're not professional\nnegotiators, and don't want to turn into them.[9] There are two ways to do\nwork you love: (a) to make money, then work on what you love, or (b) to get a\njob where you get paid to work on stuff you love. In practice the first phases\nof both consist mostly of unedifying schleps, and in (b) the second phase is\nless secure.Thanks to Sam Altman, Trevor Blackwell, Beau Hartshorne, Jessica\nLivingston, and Robert Morris for reading drafts of this.  \n---  \nRomanian Translation| Russian Translation  \n---|---  \nFrench Translation| Japanese Translation\n\n", "frontpage": false}
