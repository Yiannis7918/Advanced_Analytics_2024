{"aid": "40023892", "title": "Old CSS, new CSS (2020)", "url": "https://eev.ee/blog/2020/02/01/old-css-new-css/", "domain": "eev.ee", "votes": 2, "user": "Tomte", "posted_at": "2024-04-13 15:48:06", "comments": 0, "source_title": "fuzzy notepad", "source_text": "Old CSS, new CSS / fuzzy notepad\n\n# fuzzy notepad\n\nSat Feb 01, 2020\n\n# Old CSS, new CSS\n\nI first got into web design/development in the late 90s, and only as I type\nthis sentence do I realize how long ago that was.\n\nAnd boy, it was horrendous. I mean, being able to make stuff and put it online\nwhere other people could see it was pretty slick, but we did not have very\nmuch to work with.\n\nI\u2019ve been taking for granted that most folks doing web stuff still remember\nthose days, or at least the decade that followed, but I think that assumption\nmight be a wee bit out of date. Some time ago I encountered a tweet marvelling\nat what we had to do without border-radius. I still remember waiting with\nbated breath for it to be unprefixed!\n\nBut then, I suspect I also know a number of folks who only tried web design in\nthe old days, and assume nothing about it has changed since.\n\nI\u2019m here to tell all of you to get off my lawn. Here\u2019s a history of CSS and\nweb design, as I remember it.\n\n(Please bear in mind that this post is a fine blend of memory and research, so\nI can\u2019t guarantee any of it is actually correct, especially the bits about\ncausality. You may want to try the W3C\u2019s history of CSS, which is considerably\nshorter, has a better chance of matching reality, and contains significantly\nless swearing.)\n\n(Also, this would benefit greatly from more diagrams, but it took long enough\njust to write.)\n\n## The very early days\n\nIn the beginning, there was no CSS.\n\nThis was very bad.\n\nMy favorite artifact of this era is the book that taught me HTML: O\u2019Reilly\u2019s\nHTML: The Definitive Guide, published in several editions in the mid to late\n90s. The book was indeed about HTML, with no mention of CSS at all. I don\u2019t\nhave it any more and can\u2019t readily find screenshots online, but here\u2019s a page\nfrom HTML & XHTML: The Definitive Guide, which seems to be a revision (I\u2019ll\nget to XHTML later) with much the same style. Here, then, is the cutting-edge\nweb design advice of 199X:\n\n\u201cClearly delineate headers and footers with horizontal rules.\u201d\n\nNo, that\u2019s not a border-top. That\u2019s an <hr>. The page title is almost\ncertainly centered with, well, <center>.\n\nThe page uses the default text color, background, and font. Partly because\nthis is a guidebook introducing concepts one at a time; partly because the\nbook was printed in black and white; and partly, I\u2019m sure, because it\nreflected the reality that coloring anything was a huge pain in the ass.\n\nLet\u2019s say you wanted all your <h1>s to be red, across your entire site. You\nhad to do this:\n\n    \n    \n    1\n\n|\n\n    \n    \n    <H1><FONT COLOR=red>...</FONT></H1>  \n  \n---|---  \n  \n...every single goddamn time. Hope you never decide to switch to blue!\n\nOh, and everyone wrote HTML tags in all caps. I don\u2019t remember why we all\nthought that was a good idea. Maybe this was before syntax highlighting in\ntext editors was very common (read: I was 12 and using Notepad), and uppercase\ntags were easier to distinguish from body text.\n\nKeeping your site consistent was thus something of a nightmare. One solution\nwas to simply not style anything, which a lot of folks did. This was nice, in\nsome ways, since browsers let you change those defaults, so you could read the\nWeb how you wanted.\n\nA clever alternate solution, which I remember showing up in a lot of Geocities\nsites, was to simply give every page a completely different visual style. Fuck\nit, right? Just do whatever you want on each new page.\n\nThat trend was quite possibly the height of web design.\n\nDamn, I miss those days. There were no big walled gardens, no Twitter or\nFacebook. If you had anything to say to anyone, you had to put together your\nown website. It was amazing. No one knew what they were doing; I\u2019d wager that\nthe vast majority of web designers at the time were clueless hobbyist tweens\n(like me) all copying from other clueless hobbyist tweens. Half the Web was\nfan portals about Animorphs, with inexplicable splash pages warning you that\ntheir site worked best if you had a 640\u00d7480 screen. (Any 12-year-old with\ninsufficient resolution should, presumably, buy a new monitor with their\nallowance.) Everyone who was cool and in the know used Internet Explorer 3,\nthe most advanced browser, but some losers still used Netscape Navigator so\nyou had to put a \u201cBest in IE\u201d animated GIF on your splash page too.\n\nThis was also the era of \u201cweb-safe colors\u201d \u2014 a palette of 216 colors, where\nevery channel was one of 00, 33, 66, 99, cc, or ff \u2014 which existed because\nsome people still had 256-color monitors! The things we take for granted now,\nlike 24-bit color.\n\nIn fact, a lot of stuff we take for granted now was still a strange and\nuntamed problem space. You want to have the same navigation on every page on\nyour website? Okay, no problem: copy/paste it onto each page. When you update\nit, be sure to update every page \u2014 but most likely you\u2019ll forget some, and\nyour whole site will become an archaeological dig into itself, with strata of\nincreasingly bitrotted pages.\n\nMuch easier was to use frames, meaning the browser window is split into a grid\nand a different page loads in each section... but then people would get\nconfused if they landed on an individual page without the frames, as was\ncommon when coming from a search engine like AltaVista. (I can\u2019t believe I\u2019m\nexplaining frames, but no one has used them since like 2001. You know iframes?\nThe \u201ci\u201d is for inline, to distinguish them from regular frames, which take up\nthe entire viewport.)\n\nPHP wasn\u2019t even called that yet, and nobody had heard of it. This weird \u201cPerl\u201d\nand \u201cCGI\u201d thing was really strange and hard to understand, and it didn\u2019t work\non your own computer, and the errors were hard to find and diagnose, and\nanyway Geocities didn\u2019t support it. If you were really lucky and smart, your\nweb host used Apache, and you could use its \u201cserver side include\u201d syntax to do\nsomething like this:\n\n    \n    \n    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\n\n|\n\n    \n    \n    <BODY> <TABLE WIDTH=100% BORDER=0 CELLSPACING=8 CELLPADDING=0> <TR> <TD COLSPAN=2> <!--#include virtual=\"/header.html\" --> </TD> </TR> <TR> <TD WIDTH=20%> <!--#include virtual=\"/navigation.html\" --> </TD> <TD> (actual page content goes here) </TD> </TR> </TABLE> </BODY>  \n  \n---|---  \n  \nMwah. Beautiful. Apache would see the special comments, paste in the contents\nof the referenced files, and you\u2019re off to the races. The downside was that\nwhen you wanted to work on your site, all the navigation was missing, because\nyou were doing it on your regular computer without Apache, and your web\nbrowser thought those were just regular HTML comments. It was impossible to\ninstall Apache, of course, because you had a computer, not a server.\n\nSadly, that\u2019s all gone now \u2014 paved over by homogenous timelines where anything\nthat wasn\u2019t made this week is old news and long forgotten. The web was\nsupposed to make information eternal, but instead, so much of it became\nephemeral. I miss when virtually everyone I knew had their own website. Having\na Twitter and an Instagram as your entire online presence is a poor\nsubstitute.\n\n...\n\nSo, let\u2019s look at the Space Jam website.\n\n## Case study: Space Jam\n\nSpace Jam, if you\u2019re not aware, is the greatest movie of all time. It\ndocuments Bugs Bunny\u2019s extremely short-lived basketball career, playing\nalongside a live action Michael Jordan to save the planet from aliens for some\nreason. It was followed by a series of very successful and critically\nacclaimed RPG spinoffs, which describe the fallout of the Space Jam and are\nextremely canon.\n\nAnd we are truly blessed, for 24 years after it came out, its website is STILL\nUP. We can explore the pinnacle of 1996 web design, right here, right now.\n\nFirst, notice that every page of this site is a static page. Not only that,\nbut it\u2019s a static page ending in .htm rather than .html, because people on\nWindows versions before 95 were still beholden to 8.3 filenames. Not sure why\nthat mattered in a URL, as if you were going to run Windows 3.11 on a Web\nserver, but there you go.\n\nThe CSS for the splash page looks like this:\n\n    \n    \n    1\n\n|\n\n    \n    \n    <body bgcolor=\"#000000\" background=\"img/bg_stars.gif\" text=\"#ff0000\" link=\"#ff4c4c\" vlink=\"#ff4c4c\" alink=\"#ff4c4c\">  \n  \n---|---  \n  \nHaha, just kidding! What the fuck is CSS? Space Jam predates it by a month. (I\ndo see a single line in the page source, but I\u2019m pretty sure that was added\nmuch later to style some legally obligatory policy links.)\n\nNotice the extremely precise positioning of these navigation links. This feat\nwas accomplished the same way everyone did everything in 1996: with tables.\n\nIn fact, tables have one functional advantage over CSS for layout, which was\nvery important in those days, and not only because CSS didn\u2019t exist yet. You\nsee, you can ctrl-click to select a table cell and even drag around to select\nall of them, which shows you how the cells are arranged and functions as a\nsuper retro layout debugger. This was great because the first meaningful web\ndebug tool, Firebug, wasn\u2019t released until 2006 \u2014 a whole decade later!\n\nThe markup for this table is overflowing with inexplicable blank lines, but\nwith those removed, it looks like this:\n\n    \n    \n    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\n\n|\n\n    \n    \n    <table width=500 border=0> <TR> <TD colspan=5 align=right valign=top> </td></tr> <tr> <td colspan=2 align=right valign=middle> <br> <br> <br> <a href=\"cmp/pressbox/pressboxframes.html\"><img src=\"img/p-pressbox.gif\" height=56 width=131 alt=\"Press Box Shuttle\" border=0></a> </td> <td align=center valign=middle> <a href=\"cmp/jamcentral/jamcentralframes.html\"><img src=\"img/p-jamcentral.gif\" height=67 width=55 alt=\"Jam Central\" border=0></a> </td> <td align=center valign=top> <a href=\"cmp/bball/bballframes.html\"><img src=\"img/p-bball.gif\" height=62 width=62 alt=\"Planet B-Ball\" border=0></a> </td> <td align=center valign=bottom> <br> <br> <a href=\"cmp/tunes/tunesframes.html\"><img src=\"img/p-lunartunes.gif\" height=77 width=95 alt=\"Lunar Tunes\" border=0></a> </td> </tr> <tr> <td align=middle valign=top> <br> <br> <a href=\"cmp/lineup/lineupframes.html\"><img src=\"img/p-lineup.gif\" height=52 width=63 alt=\"The Lineup\" border=0></a> </td> <td colspan=3 rowspan=2 align=right valign=middle> <img src=\"img/p-jamlogo.gif\" height=165 width=272 alt=\"Space Jam\" border=0> </td> <td align=right valign=bottom> <a href=\"cmp/jump/jumpframes.html\"><img src=\"img/p-jump.gif\" height=52 width=58 alt=\"Jump Station\" border=0></a> </td> </tr> ... </table>  \n  \n---|---  \n  \nThat\u2019s the first two rows, including the logo. You get the idea. Everything is\nlaid out with align and valign on table cells; rowspans and colspans are used\nfrequently; and there are some <br>s thrown in for good measure, to adjust\nvertical positioning by one line-height at a time.\n\nOther fantastic artifacts to be found on this page include this header, which\ncontains Apache SSI syntax! This must\u2019ve quietly broken when the site was\nmoved over the years; it\u2019s currently hosted on Amazon S3. You know, Amazon?\nThe bookstore?\n\n    \n    \n    1 2 3 4 5 6 7\n\n|\n\n    \n    \n    <table border=0 cellpadding=0 cellspacing=0 width=488 height=60> <tr> <td align=\"center\"><!--#include virtual=\"html.ng/site=spacejam&type=movie&home=no&size=234&page.allowcompete=no\"--></td> <td align=\"center\" width=\"20\"></td> <td align=\"center\"><!--#include virtual=\"html.ng/site=spacejam&type=movie&home=no&size=234\"--></td> </tr> </table>  \n  \n---|---  \n  \nOkay, let\u2019s check out jam central. I\u2019ve used my browser dev tools to reduce\nthe viewport to 640\u00d7480 for the authentic experience (although I\u2019d also have\nlost some vertical space to the title bar, taskbar, and five or six IE\ntoolbars).\n\nNote the frames: the logo in the top left leads back to the landing page,\ncleverly saving screen space on repeating all that navigation, and the top\nright is a fucking ad banner which has been blocked like seven different ways.\nAll three parts are separate pages.\n\nNote also the utterly unreadable red text on a textured background, one of the\ntruest hallmarks of 90s web design. \u201cWhy not put that block of text on an\neasier-to-read background?\u201d you might ask. You imbecile. How would I possibly\ndo that? Only the <body> has a background attribute! I could use a table, but\ntables only support solid background colors, and that would look so boring!\n\nBut wait, what is this new navigation widget? How are the links all misaligned\nlike that? Is this yet another table? Well, no, although filling a table with\nchunks of a sliced-up image wasn\u2019t uncommon. But this is an imagemap, a long-\nforgotten HTML feature. I\u2019ll just show you the source:\n\n    \n    \n    1 2 3 4 5 6 7 8\n\n|\n\n    \n    \n    <img src=\"img/m-central.jpg\" height=301 width=438 border=0 alt=\"navigation map\" usemap=\"#map\"><br> <map name=\"map\"> <area shape=\"rect\" coords=\"33,92,178,136\" href=\"prodnotesframes.html\" target=\"_top\"> <area shape=\"rect\" coords=\"244,111,416,152\" href=\"photosframes.html\" target=\"_top\"> <area shape=\"rect\" coords=\"104,138,229,181\" href=\"filmmakersframes.html\" target=\"_top\"> <area shape=\"rect\" coords=\"230,155,334,197\" href=\"trailerframes.html\" target=\"_top\"> </map>  \n  \n---|---  \n  \nI assume this is more or less self-explanatory. The usemap attribute attaches\nan image map, which is defined as a bunch of clickable areas, beautifully\nencoded as inscrutable lists of coordinates or something.\n\nAnd this stuff still works! This is in HTML! You could use it right now!\nProbably don\u2019t though!\n\n### The thumbnail grid\n\nLet\u2019s look at one more random page here. I\u2019d love to see some photos from the\nfilm. (Wait, photos? Did we not know what \u201cscreenshots\u201d were yet?)\n\nAnother frameset, but arranged differently this time.\n\n    \n    \n    1\n\n|\n\n    \n    \n    <body bgcolor=\"#7714bf\" background=\"img/bg-jamcentral.gif\" text=\"#ffffff\" link=\"#edb2fc\" vlink=\"#edb2fc\" alink=\"#edb2fc\">  \n  \n---|---  \n  \nThey did an important thing here: since they specified a background image\n(which is opaque), they also specified a background color. Without it, if the\nbackground image failed to load, the page would be white text on the default\nwhite background, which would be unreadable.\n\n(That\u2019s still an important thing to keep in mind. I feel like modern web\ndevelopment tends to assume everything will load, or sees loading as some sort\nof inconvenience to be worked around, but not everyone is working on a wired\nconnection in a San Francisco office twenty feet away from a backbone.)\n\nBut about the page itself. Thumbnail grids are a classic problem of web\ndesign, dating all the way back to... er... well, at least as far back as\nSpace Jam. The main issue is that you want to put things next to each other,\nwhereas HTML defaults to stacking everything in one big column. You could put\nall the thumbnails inline, in a single row of (wrapping) text, but that\nwouldn\u2019t be much of a grid \u2014 and you usually want each one to have some sort\nof caption.\n\nSpace Jam\u2019s approach was to use the only real tool anyone had in their toolbox\nat the time: a table. It\u2019s structured like this:\n\n    \n    \n    1 2 3 4 5\n\n|\n\n    \n    \n    <table cellpadding=10> <tr><td align=center><a href=\"...\"><img src=\"...\"></a></td>...</tr> <tr>...</tr> <tr>...</tr> <table>  \n  \n---|---  \n  \nA 3\u00d73 grid of thumbnails, left to the browser to arrange. (The last image, on\na row of its own, isn\u2019t actually part of the table.) This can\u2019t scale to fit\nyour screen, but everyone\u2019s screen was pretty tiny back then, so that was\nslightly less of a concern. They didn\u2019t add captions here, but since every\nthumbnail is wrapped in a table cell, they easily could have.\n\nThis was the state of the art in thumbnail grids in 1996. We\u2019ll be revisiting\nthis little UI puzzle a few times; you can see live examples (and view source\nfor sample markup) on a separate page.\n\nBut let\u2019s take a moment to appreciate the size of the \u201cfull-size, full-color,\ninternet-quality\u201d movie screenshots on my current monitor.\n\nHey, though, they\u2019re less than 16 KB! That\u2019ll only take nine seconds to\ndownload.\n\n(I\u2019m reminded of the problem of embedded video, which wasn\u2019t solved until\nHTML5\u2019s <video> tag some years later. Until then, you had to use a binary\nplugin, and all of them were terrible.)\n\n(Oh, by the way: images within links, by default, have a link-colored border\naround them. Image links are usually self-evident, so this was largely\nannoying, and until CSS you had to disable them for every single image with\n<img border=0>.)\n\n## The regular early days\n\nSo that\u2019s where we started, and it sucked. If you wanted any kind of\nconsistency on more than a handful of pages, your options were very limited,\nand they were pretty much limited to a whole lot of copying and pasting. The\nSpace Jam website opted to, for the most part, not bother at all \u2014 as did many\nothers.\n\nThen CSS came along, it was a fucking miracle. All that inline repetition went\naway. You want all your top-level headings to be a particular color? No\nproblem:\n\n    \n    \n    1 2 3\n\n|\n\n    \n    \n    H1 { color: #FF0000; }  \n  \n---|---  \n  \nBam! You\u2019re done. No matter how many <h1>s you have in your document, every\nsingle one of them will be eye-searing red, and you never have to think about\nit again. Even better, you can put that snippet in its own file and have that\nquestionable aesthetic choice applied to every page of your whole site with\nalmost no effort! The same applied to your gorgeous tiling background image,\nthe colors of your links, and the size of the font in your tables.\n\n(Just remember to wrap the contents of your <style> tags in HTML comments, or\nold browsers without CSS support will display them as text.)\n\nYou weren\u2019t limited to styling tags en masse, either. CSS introduced \u201cclasses\u201d\nand \u201cIDs\u201d to target only specifically flagged elements. A selector like\nP.important would only affect <P CLASS=\"important\">, and #header would only\naffect <H1 ID=\"header\">. (The difference is that IDs are intended to be unique\nin a document, whereas classes can be used any number of times.) With these\ntools, you could effectively invent your own tags, giving you a customized\nversion of HTML specific to your website!\n\nThis was a huge leap forward, but at the time, no one (probably?) was thinking\nof using CSS to actually arrange the page. When CSS 1 was made a\nrecommendation in December \u201896, it barely addressed layout at all. All it did\nwas divorce HTML\u2019s existing abilities from the tags they were attached to. We\nhad font colors and backgrounds because <FONT COLOR> and <BODY BACKGROUND>\nexisted. The only feature that even remotely affected where things were\npositioned was the float property, the equivalent to <IMG ALIGN>, which pulled\nan image to the side and let text flow around it, like in a magazine article.\nHardly whelming.\n\nThis wasn\u2019t too surprising. HTML hadn\u2019t had any real answers for layout\nbesides tables, and the table properties were too complicated to generalize in\nCSS and too entangled with the tag structure, so there was nothing for CSS 1\nto inherit. It merely reduced the repetition in what we were already doing\nwith e.g. <FONT> tags \u2014 making Web design less tedious, less error-prone, less\nfull of noise, and much more maintainable. A pretty good step forward, and\neveryone happily adopted it for that, but tables remained king for arranging\nyour page.\n\nThat was okay, though; all your blog really needed was a header and a sidebar,\nwhich tables could do just fine, and it wasn\u2019t like you were going to overhaul\nthat basic structure very often. Copy/pasting a few lines of <TABLE BORDER=0>\nand <TD WIDTH=20%> wasn\u2019t nearly as big a deal.\n\nFor some span of time \u2014 I want to say a couple years, but time passes more\nslowly when you\u2019re a kid \u2014 this was the state of the Web. Tables for layout,\nCSS for... well, style. Colors, sizes, bold, underline. There was even this\nsick trick you could do with links where they\u2019d only be underlined when the\nmouse was pointing at them. Tubular!\n\n(Fun fact: HTML email is still basically trapped in this era.)\n\n(And here\u2019s about where I come in, at the ripe old age of 11, with no clue\nwhat I was doing and mostly learning from other 11-year-olds who also had no\nclue what they were doing. But that was fine; a huge chunk of the Web was\n11-year-olds making their own websites, and it was beautiful. Why would you go\nto a business website when you can take a peek into the very specific hobbies\nof someone on the other side of the planet?)\n\n## The dark times\n\nA year and a half later, in mid \u201898, we were gifted CSS 2. (I love the\nbackground on this page, by the way.) This was a modest upgrade that addressed\na few deficiencies in various areas, but most interesting was the addition of\na couple positioning primitives: the position property, which let you place\nelements at precise coordinates, and the inline-block display mode, which let\nyou stick an element in a line of text like you could do with images.\n\nSuch tantalizing fruit, just out of reach! Using position seemed nice, but\npixel-perfect positioning was at serious odds with the fluid design of HTML,\nand it was difficult to make much of anything that didn\u2019t fall apart on other\nscreen sizes or have other serious drawbacks. This humble inline-block thing\nseemed interesting enough; after all, it solved the core problem of HTML\nlayout, which is putting things next to each other. But at least for the\nmoment, no browser implemented it, and it was largely ignored.\n\nI can\u2019t say for sure if it was the introduction of positioning or some other\nfactor, but something around this time inspired folks to try doing layout in\nCSS. Ideally, you would completely divorce the structure of your page from its\nappearance. A website even came along to take this principle to the extreme \u2014\nCSS Zen Garden is still around, and showcases the same HTML being radically\ntransformed into completely different designs by applying different\nstylesheets.\n\nTrouble was, early CSS support was buggy as hell. In retrospect, I suspect\nbrowser vendors merely plucked the behavior off of HTML tags and called it a\nday. I\u2019m delighted to say that RichInStyle still has an extensive list of\nearly browser CSS bugs up; here are some of my favorites:\n\n  * IE 3 would ignore all but the last <style> tag in a document.\n\n  * IE 3 ignored pseudo-classes, so a:hover would be treated as a.\n\n  * IE 3 and IE 4 treated auto margins as zero. Actually, I think this one might\u2019ve persisted all the way to IE 6. But that was okay, because IE 6 also incorrectly applied text-align: center to block elements.\n\n  * If you set a background image to an absolute URL, IE 3 would try to open the image in a local program, as though you\u2019d downloaded it.\n\n  * Netscape 4 understood an ID selector like #id, but ignored h1#id as invalid.\n\n  * Netscape 4 didn\u2019t inherit properties \u2014 including font and text color! \u2014 into table cells.\n\n  * Netscape 4 applied properties on <li> to the list marker, rather than the contents.\n\n  * If the same element has both float and clear (not unreasonable), Netscape 4 for Mac crashes.\n\nThis is what we had to work with. And folks wanted to use CSS to lay out an\nentire page? Ha.\n\nYet the idea grew in popularity. It even became a sort of elitist rallying\ncry, a best practice used to beat other folks over the head. Tables for layout\nare just plain bad, you\u2019d hear! They confuse screenreaders, they\u2019re\nsemantically incorrect, they interact poorly with CSS positioning! All of\nwhich is true, but it was a much tougher pill to swallow when the alternative\nwas\u2014\n\nWell, we\u2019ll get to that in a moment. First, some background on the Web\nlandscape circa 2000.\n\n### The end of the browser wars and subsequent stagnation\n\nThe short version is: this company Netscape had been selling its Navigator\nbrowser (to businesses; it was free for personal use), and then Microsoft\nentered the market with its completely free Internet Explorer browser, and\nthen Microsoft had the audacity to bundle IE with Windows. Can you imagine? An\noperating system that comes with a browser? This was a whole big thing,\nMicrosoft was sued over it, and they lost, and the consequence was basically\nnothing.\n\nBut it wouldn\u2019t have mattered either way, because they\u2019d still done it, and it\nhad worked. IE pretty much annihilated Netscape\u2019s market share. Both browsers\nwere buggy as hell, and differently buggy as hell, so a site built exclusively\nagainst one was likely to be a big mess when viewed in the other \u2014 this meant\nthat when Netscape\u2019s market share dropped, web designers paid less and less\nattention to it, and less of the Web worked in it, and its market share\ndropped further.\n\nSucks for you if you don\u2019t use Windows, I guess. Which is funny, because there\nwas an IE for Mac 5.5, and it was generally less buggy than IE 6.\n(Incidentally, Bill Gates wasn\u2019t so much a brilliant nerd as an aggressive and\nruthless businessman who made his fortune by deliberately striving to\nannihilate any competition standing in his way and making computing worse\noverall as a result, just saying.)\n\nBy the time Windows XP shipped in mid 2001, with Internet Explorer 6 built in,\nNetscape had gone from a juggernaut to a tiny niche player.\n\nAnd then, having completely and utterly dominated, Microsoft stopped. Internet\nExplorer had seen a release every year or so since its inception, but IE 6 was\nthe last release for more than five years. It was still buggy, but that was\nless noticeable when there was no competition, and it was good enough. Windows\nXP, likewise, was good enough to take over the desktop, and there wouldn\u2019t be\nanother Windows for just as long.\n\nThe W3C, the group who write the standards (not to be confused with W3Schools,\nwho are shady SEO leeches), also stopped. HTML had seen several revisions\nthroughout the mid 90s, and then froze as HTML 4. CSS had gotten an update in\nonly a year and a half, and then no more; the minor update CSS 2.1 wouldn\u2019t\nhit Candidate Recommendation status until early 2004, and took another seven\nyears to be finalized.\n\nWith IE 6\u2019s dominance, it was as if the entire Web was frozen in time.\nStandards didn\u2019t matter, because there was effectively only one browser, and\nwhatever it did became the de facto standard. As the Web grew in popularity,\nIE\u2019s stranglehold also made it difficult to use any platform other than\nWindows, since IE was Windows-only and it was a coin flip whether a website\nwould actually work with any other browser.\n\n(One begins to suspect that monopolies are bad. There oughta be a law!)\n\nIn the meantime, Netscape had put themselves in an even worse position by\ndeciding to do a massive rewrite of their browser engine, culminating in the\nvastly more standards-compliant Netscape 6 \u2014 at the cost of several years away\nfrom the market while IE was kicking their ass. It never broke 10% market\nshare, while IE\u2019s would peak at 96%. On the other hand, the new engine was\nopen sourced as the Mozilla Application Suite, which would be important in a\nfew years.\n\nBefore we get to that, some other things were also happening.\n\n### Quirks mode\n\nAll early CSS implementations were riddled with bugs, but one in particular is\nperhaps the most infamous CSS bug of all time: the box model bug.\n\nYou see, a box (the rectangular space taken up by an element) has several\nmeasurements: its own width and height, then surrounding whitespace called\npadding, then an optional border, then a margin separating it from neighboring\nboxes. CSS specifies that these properties are all additive. A box with these\nstyles:\n\n    \n    \n    1 2 3\n\n|\n\n    \n    \n    width: 100px; padding: 10px; border: 2px solid black;  \n  \n---|---  \n  \n...would thus be 124 pixels wide, from border to border.\n\nIE 4 and Netscape 4, on the other hand, took a different approach: they\ntreated width and height as measuring from border to border, and they\nsubtracted the border and padding to get the width of the element itself. The\nsame box in those browsers would be 100 pixels wide from border to border,\nwith 76 pixels remaining for the content.\n\nThis conflict with the spec was not ideal, and IE 6 set out to fix it.\nUnfortunately, simply making the change would mean completely breaking the\ndesign of a whole lot of websites that had previously worked in both IE and\nNetscape.\n\nSo the IE team came up with a very strange compromise: they declared the old\nbehavior (along with several other major bugs) as \u201cquirks mode\u201d and made it\nthe default. The new \u201cstrict mode\u201d or \u201cstandards mode\u201d had to be opted into,\nby placing a \u201cdoctype\u201d at the beginning of your document, before the <html>\ntag. It would look something like this:\n\n    \n    \n    1\n\n|\n\n    \n    \n    <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">  \n  \n---|---  \n  \nEveryone had to paste this damn mess of a line at the top of every single HTML\ndocument for years. (HTML5 would later simplify it to <!DOCTYPE html>.) In\nretrospect, it\u2019s a really strange way to opt into correct CSS behavior;\ndoctypes had been part of the HTML spec since way back when it was an RFC. I\u2019m\nguessing the idea was that, since nobody bothered actually including one, it\nwas a convenient way to allow opting in without requiring proprietary\nextensions just to avoid behavior that had been wrong in the first place. Good\nfor the IE team!\n\nThe funny thing is, quirks mode still exists and is still the default in all\nbrowsers, twenty years later! The exact quirks have varied over time, and in\nparticular neither Chrome nor Firefox use the IE box model even in quirks\nmode, but there are still quite a few other emulated bugs.\n\nHello! Eevee here, almost two years later. You may notice the preceding link\nis broken. Well, it seems Mozilla made the completely baffling decision to\nnuke all Mozilla-specific information from MDN on the grounds that it really\nbelongs in Firefox documentation, then failed to add it to the Firefox\ndocumentation. So some critical technical information that's also of deep\nhistorical interest, like exactly what quirks mode even does in Firefox, is\nnow lost, except for the unreadable archived copy. This also reduces the only\nmention of quirks mode on MDN to this lone article, which says very vaguely\nwhat it is but doesn't offer so much as a glimpse at what the differences\nactually are. What a fucking circus.\n\nModern browsers also have \u201calmost standards\u201d mode, which emulates only a\nsingle quirk, perhaps the second most infamous one: if a table cell contains\nonly a single image, the space under the baseline is removed. Under normal CSS\nrules, the image is sitting within a line of (otherwise empty) text, which\nrequires some space reserved underneath for descenders \u2014 the tails on letters\nlike y. Early browsers didn\u2019t handle this correctly, and some otherwise\nstrict-mode websites from circa 2000 rely on it \u2014 e.g., by cutting up a large\nimage and arranging the chunks in table cells, expecting them to display flush\nagainst each other \u2014 hence the intermediate mode to keep them limping along.\n\nBut getting back to the past: while this was certainly a win for standards\n(and thus interop), it created a new problem. Since IE 6 dominated, and\ndoctypes were optional, there was little compelling reason to bother with\nstrict mode. Other browsers ended up emulating it, and the non-standard\nbehavior became its own de facto standard. Web designers who cared about this\nsort of thing (and to our credit, there were a lot of us) made a rallying cry\nout of enabling strict mode, since it was the absolute barest minimum step\ntowards ensuring compatibility with other browsers.\n\n### The rise and fall of XHTML\n\nMeanwhile, the W3C had lost interest in HTML in favor of developing XHTML, an\nattempt to redesign HTML with the syntax of XML rather than SGML.\n\n(What on Earth is SGML, you ask? I don\u2019t know. Nobody knows. It\u2019s the grammar\nHTML was built on, and that\u2019s the only reason anyone has heard of it.)\n\nTo their credit, there were some good reasons to do this at the time. HTML was\ngenerally hand-written (as it still is now), and anything hand-written is\nlikely to have the occasional bugs. Browsers weren\u2019t in the habit of rejecting\nbuggy HTML outright, so they had various error-correction techniques \u2014 and, as\nwith everything else, different browsers handled errors differently. Slightly\nmalformed HTML might appear to work fine in IE 6 (where \u201cwork fine\u201d means\n\u201cdoes what you hoped for\u201d), but turn into a horrible mess in anything else.\n\nThe W3C\u2019s solution was XML, because their solution to fucking everything in\nthe early 2000s was XML. If you\u2019re not aware, XML takes a much more explicit\nand aggressive approach to error handling \u2014 if your document contains a parse\nerror, the entire document is invalid. That means if you bank on XHTML and\nmake a single typo somewhere, nothing at all renders. Just an error.\n\nThis sucked. It sounds okay on the face of things, but consider: generic XML\nis usually assembled dynamically with libraries that treat a document as a\ntree you manipulate, then turn it all into text when you\u2019re done. That\u2019s great\nfor the common use of XML as data serialization, where your data is already a\ntree and much of the XML structure is simple and repetitive and easy to\nsquirrel away in functions.\n\nHTML is not like that. An HTML document has little reliable repeating\nstructure; even this blog post, constructed mostly from <p> tags, also\ncontains surprise <em>s within body text and the occasional <h2> between\nparagraphs. That\u2019s not fun to express as a tree. And this is a big deal,\nbecause server-side rendering was becoming popular around the same time, and\ngenerated HTML was \u2014 still is! \u2014 put together with templates that treat it as\na text stream.\n\nIf HTML were only written as complete static documents, then XHTML might have\nworked out \u2014 you write a document, you see it in your browser, you know it\nworks, no problem. But generating it dynamically and risking that particular\nedge cases might replace your entire site with an unintelligible browser\nerror? That sucks.\n\nIt certainly didn\u2019t help that we were just starting to hear about this\nnewfangled Unicode thing around this time, and it was still not always clear\nhow exactly to make that work, and one bad UTF-8 sequence is enough for an\nentire XML document to be considered malformed!\n\nAnd so, after some dabbling, XHTML was largely forgotten. Its legacy lives on\nin two ways:\n\n  * It got us all to stop using uppercase tag names! So long <BODY>, hello <body>. XML is case-sensitive, you see, and all the XHTML tags were defined in lowercase, so uppercase tags simply would not work. (Fun fact: to this day, JavaScript APIs report HTML tag names in uppercase.) The increased popularity of syntax highlighting probably also had something to do with this; we weren\u2019t all still using Notepad as we had been in 1997.\n\n  * A bunch of folks still think self-closing tags are necessary. You see, HTML has two kinds of tags: containers like <p>...</p> and markers like <br>. Since a <br> can\u2019t possibly contain anything, there\u2019s no such thing as </br>. XML, as a generic grammar, doesn\u2019t have this distinction; every tag must be closed, but as a shortcut, you can write <br/> to mean <br></br>.\n\nXHTML has been dead for years, but for some reason, I still see folks write\n<br/> in regular HTML documents. Outside of XML, that slash doesn\u2019t do\nanything; HTML5 has defined it for compatibility reasons, but it\u2019s silently\nignored. It\u2019s even actively harmful, since it might lead you to believe that\n<script/> is an empty <script> tag \u2014 but in HTML, it definitely is not!\n\nI do miss one thing about XHTML. You could combine it with XSLT, the XML\ntemplating meta-language, to do in-browser templating (i.e., slot page-\nspecific contents into your overall site layout) with no scripting required.\nIt\u2019s the only way that\u2019s ever been possible, and it was cool as all hell when\nit worked, but the drawbacks were too severe when it didn\u2019t. Also, XSLT is\ntotally fucking incomprehensible.\n\n### The beginning of CSS layout\n\nBack to CSS!\n\nYou\u2019re an aspiring web designer. For whatever reason, you want to try using\nthis CSS thing to lay out your whole page, even though it was clearly intended\njust for colors and stuff. What do you do?\n\nAs I mentioned before, your core problem is putting things next to each other.\nPutting things on top of each other is a non-problem \u2014 that\u2019s the normal\nbehavior of HTML. The whole reason everyone uses tables is that you can slop\nstuff into table cells and have it laid out side-by-side, in columns.\n\nWell, tables seem to be out. CSS 2 had added some element display modes that\ncorresponded to the parts of a table, but to use them, you\u2019d have to have the\nsame three levels of nesting as real tables: the table itself, then a row,\nthen a cell. That doesn\u2019t seem like a huge step up, and anyway, IE won\u2019t\nsupport them until the distant future.\n\nThere\u2019s that position thing, but it seems to make things overlap more often\nthan not. Hmm.\n\nWhat does that leave?\n\nOnly one tool, really: float.\n\nI said that float was intended for magazine-style \u201cpull\u201d images, which is\ntrue, but CSS had defined it fairly generically. In principle, it could be\napplied to any element. If you wanted a sidebar, you could tell it to float to\nthe left and be 20% the width of the page, and you\u2019d get something like this:\n\n    \n    \n    1 2 3 4\n\n|\n\n    \n    \n    +---------+ | sidebar | Hello, and welcome to my website! | | +---------+  \n  \n---|---  \n  \nAlas! Floating has the secondary behavior that text wraps around it. If your\npage text was ever longer than your sidebar, it would wrap around underneath\nthe sidebar, and the illusion would shatter. But hey, no problem. CSS\nspecified that floats don\u2019t wrap around each other, so all you needed to do\nwas float the body as well!\n\n    \n    \n    1 2 3 4 5 6 7\n\n|\n\n    \n    \n    +---------+ +-----------------------------------+ | sidebar | | Hello, and welcome to my website! | | | | | +---------+ | Here's a longer paragraph to show | | that my galaxy brain CSS float | | nonsense prevents text wrap. | +-----------------------------------+  \n  \n---|---  \n  \nThis approach worked, but its limitations were much more obvious than those of\ntables. If you added a footer, for example, then it would try to fit to the\nright of the body text \u2014 remember, all of that is \u201cpull\u201d floats, so as far as\nthe browser is concerned, the \u201ccursor\u201d is still at the top. So now you need to\nuse clear, which bumps an element down below all floats, to fix that. And if\nyou made the sidebar 20% wide and the body 80% wide, then any margin between\nthem would add to that 100%, making the page wider than the viewport, so now\nyou have an ugly horizontal scrollbar, so you have to do some goofy math to\nfix that as well. If you have borders or backgrounds on either part, then it\nwas a little conspicuous that they were different heights, so now you have to\ndo some truly grotesque stuff to fix that. And the more conscientious authors\nnoticed that screenreaders would read the entire sidebar before getting to the\nbody text, which is a pretty rude thing to subject blind visitors to, so they\ncame up with yet more elaborate setups to have a three-column layout with the\nmiddle column appearing first in the HTML.\n\nThe result was a design that looked nice and worked well and scaled correctly,\nbut backed by a weird mess of CSS. None of what you were writing actually\ncorresponded to what you wanted \u2014 these are major parts of your design, not\none-off pull quotes! It was difficult to understand the relationship between\nthe layout-related CSS and what appeared on the screen, and that would get\nmuch worse before it got better.\n\n### Thumbnail grid 2\n\nArmed with a new toy, we can improve that thumbnail grid. The original table-\nbased layout was, even if you don\u2019t care about tag semantics, incredibly\ntedious. Now we can do better!\n\n    \n    \n    1 2 3 4 5 6\n\n|\n\n    \n    \n    <ul class=\"thumbnail-grid\"> <li><img src=\"...\"><br>caption</li> <li><img src=\"...\"><br>caption</li> <li><img src=\"...\"><br>caption</li> ... </ul>  \n  \n---|---  \n  \nThis is the dream of CSS: your HTML contains the page data in some sensible\nform, and then CSS describes how it actually looks.\n\nUnfortunately, with float as the only tool available to us, the results are a\nbit rough. This new version does adapt better to various screen sizes, but it\nrequires some hacks: the cells have to be a fixed height, centering the whole\ngrid is fairly complicated, and the grid effect falls apart entirely with\nwider elements. It\u2019s becoming clear that what we wanted is something more like\na table, but with a flexible number of columns. This is just faking it.\n\nYou also need this weird \u201cclearfix\u201d thing, an incantation that would become\ninfamous during this era. Remember that a float doesn\u2019t move the \u201ccursor\u201d \u2014 a\nfake idea I\u2019m using, but close enough. That means that this <ul>, which is\nfull only of floated elements, has no height at all. It ends exactly where it\nbegins, with all the floated thumbnails spilling out below it. Worse, because\nany subsequent elements don\u2019t have any floated siblings, they\u2019ll ignore the\nthumbnails entirely and render normally from just below the empty \u201cgrid\u201d \u2014\nproducing an overlapping mess!\n\nThe solution is to add a dummy element at the end of the list which takes up\nno space, but has the CSS clear: both \u2014 bumping it down below all floats. That\neffectively pushes the bottom of the <ul> under all the individual thumbnails,\nso it fits snugly around them.\n\nBrowsers would later support the ::before and ::after \u201cgenerated content\u201d\npseudo-elements, which let us avoid the dummy element entirely. Stylesheets\nfrom the mid-00s were often littered with stuff like this:\n\n    \n    \n    1 2 3 4 5\n\n|\n\n    \n    \n    .thumbnail-grid::after { content: ''; display: block; clear: both; }  \n  \n---|---  \n  \nStill, it was better than tables.\n\n### DHTML\n\nAs a quick aside into the world of JavaScript, the newfangled position\nproperty did give us the ability to do some layout things dynamically. I\nheartily oppose such heresy, not least because no one has ever actually done\nit right, but it was nice for some toys.\n\nThus began the era of \u201cdynamic HTML\u201d \u2014 i.e., HTML affected by JavaScript, a\nterm that has fallen entirely out of favor because we can\u2019t even make a\nfucking static blog without JavaScript any more. In the early days it was much\nmore innocuous, with teenagers putting sparkles that trailed behind your mouse\ncursor or little analog clocks that ticked by in real time.\n\nThe most popular source of these things was Dynamic Drive, a site that\nmiraculously still exists and probably has a bunch of toys not updated since\nthe early 00s.\n\nBut if you don\u2019t like digging, here\u2019s an example: every year (except this year\nwhen I forgot oops), I like to add confetti and other nonsense to my blog on\nmy birthday. I\u2019m very lazy so I started this tradition by using this script I\nfound somewhere, originally intended for snowflakes. It works by placing a\nbunch of images on the page, giving them position: absolute, and meticulously\naltering their coordinates over and over.\n\nContrast this with the version I wrote from scratch a couple years ago, which\nhas only a tiny bit of JS to set up the images, then lets the browser animate\nthem with CSS. It\u2019s slightly less featureful, but lets the browser do all the\nwork, possibly even with hardware acceleration. How far we\u2019ve come.\n\n## Web 2.0\n\nDark times can\u2019t last forever. A combination of factors dragged us towards the\nlight.\n\nOne of the biggest was Firefox \u2014 or, if you were cool, originally Phoenix and\nthen Firebird \u2014 which hit 1.0 in Nov \u201804 and went on to take a serious bite\nout of IE. That rewritten Netscape 6 browser core, the heart of the Mozilla\nSuite, had been extracted into a standalone browser. It was quick, it was\nsimple, it was much more standard-compliant, and absolutely none of that\nmattered.\n\nNo, Firefox really got a foothold because it had tabs. IE 6 did not have tabs;\nif you wanted to open a second webpage, you opened another window. It fucking\nsucked, man. Firefox was a miracle.\n\nFirefox wasn\u2019t the first tabbed browser, of course; the full Mozilla Suite\u2019s\nbrowser had them, and the obscure (but scrappy!) Opera had had them for ages.\nBut it was Firefox that took off, for various reasons, not least of which was\nthat it didn\u2019t have a giant fucking ad bar at the top like Opera did.\n\nDesigners did push for Firefox on standards grounds, of course; it\u2019s just that\nthat angle primarily appealed to other designers, not so much to their\nparents. One of the most popular and spectacular demonstrations was the Acid2\ntest, intended to test a variety of features of then-modern Web standards. It\nhad the advantage of producing a cute smiley face when rendered correctly, and\na fucking nightmare hellscape in IE 6. Early Firefox wasn\u2019t perfect, but it\nwas certainly much closer, and you could see it make progress until it fully\npassed with the release of Firefox 3.\n\nIt also helped that Firefox had a faster JavaScript engine, even before JIT\ncaught on. Much, much faster. Like, as I recall, IE 6 implemented\ngetElementById by iterating over the entire document, even though IDs are\nunique. Glance at some old jQuery release announcements; they usually have\nsome performance charts, and everything else absolutely dwarfs IE 6 through 8.\n\nOh, and there was that whole thing where IE 6 was a giant walking security\nhole, especially with its native support for arbitrary binary components that\nonly needed a \u201cyes\u201d click on an arcane dialog to get full and unrestricted\naccess to your system. Probably didn\u2019t help its reputation.\n\nAnyway, with something other than IE taking over serious market share, even\nthe most ornery designers couldn\u2019t just target IE 6 and call it a day any\nmore. Now there was a reason to use strict mode, a reason to care about\ncompatibility and standards \u2014 which Firefox was making a constant effort to\nfollow better, while IE 6 remained stagnant.\n\n(I\u2019d argue that this effect opened the door for OS X to make some inroads, and\nalso for the iPhone to exist at all. I\u2019m not kidding! Think about it; if the\niPhone browser hadn\u2019t actually worked with anything because everyone was still\ntargeting IE 6, it\u2019d basically have been a more expensive Palm. Remember, at\nfirst Apple didn\u2019t even want native apps; it bet on the Web.)\n\n(Speaking of which, Safari was released in Jan \u201803, based on a fork of the\nKHTML engine used in KDE\u2019s Konqueror browser. I think I was using KDE at the\ntime, so this was very exciting, but no one else really cared about OS X and\nits 2% market share.)\n\nAnother major factor appeared on April Fools\u2019 Day, 2004, when Google announced\nGmail. Ha, ha! A funny joke. Webmail that isn\u2019t terrible? That\u2019s a good one,\nGoogle.\n\nOh. Oh, fuck. Oh they\u2019re not kidding. How the fuck does this even work\n\nThe answer, as every web dev now knows, is XMLHttpRequest \u2014 named for the fact\nthat nobody has ever once used it to request XML. Apparently it was invented\nby Microsoft for use with Exchange, then cloned early on by Mozilla, but I\u2019m\njust reading this from Wikipedia and you can do that yourself.\n\nThe important thing is, it lets you make an HTTP request from JavaScript. You\ncould now update only part a page with new data, completely in the background,\nwithout reloading. Nobody had heard of this thing before, so when Google\ndropped an entire email client based on it, it was like fucking magic.\n\nArguably the whole thing was a mistake and has led to a hell future where\nstatic pages load three paragraphs of text in the background using XHR for no\ngoddamn reason, but that\u2019s a different post.\n\nAlong similar lines, August 2006 saw the release of jQuery, a similar miracle.\nNot only did it paper over the differences between IE\u2019s \u201cJScript\u201d APIs and the\nstandard approaches taken by everyone else (which had been done before by\nother libraries), but it made it very easy to work with whole groups of\nelements at a time, something that had historically been a huge pain in the\nass. Now you could fairly easily apply CSS all over the place from JavaScript!\nWhich is a bad idea! But everything was so bad that we did it anyway!\n\nHold on, I hear you cry. These things are about JavaScript! Isn\u2019t this a post\nabout CSS?\n\nYou\u2019re absolutely right! I mention the rise of JavaScript because I think it\nled directly to the modern state of CSS, thanks to an increase in one big\nfactor:\n\n### Ambition\n\nFirefox showed us that we could have browsers that actually, like, improve \u2014\nevery new improvement on Acid2 was exciting. Gmail showed us that the Web\ncould do more than show plain text with snowflakes in front.\n\nAnd folks started itching to get fancy.\n\nThe problem was, browsers hadn\u2019t really gotten any better yet. Firefox was\nfaster in some respects, and it adhered more closely to the CSS spec, but it\ndidn\u2019t fundamentally do anything that browsers weren\u2019t supposed to be able to\ndo already. Only the tooling had improved, and that mostly affected\nJavaScript. CSS was a static language, so you couldn\u2019t write a library to make\nit better. Generating CSS with JavaScript was a possibility, but boy oh boy is\nthat ever a bad idea.\n\nAnother problem was that CSS 2 was only really good at styling rectangles.\nThat was fine in the 90s, when every OS had the aesthetic of rectangles\ncontaining more rectangles. But now we were in the days of Windows XP and OS\nX, where everything was shiny and glossy and made of curvy plastic. It was a\nlittle embarrassing to have rounded corners and neatly shaded swooshes in your\nfile browser and nowhere on the Web.\n\nThus began a new reign of darkness.\n\n### The era of CSS hacks\n\nDesigners wanted a lot of things that CSS just could not offer.\n\n  * Round corners were a big one. Square corners had fallen out of vogue, and now everyone wanted buttons with round corners, since they were The Future. (Native buttons also went out of vogue, for some reason.) Alas, CSS had no way to do this. Your options were:\n\n    1. Make a fixed-size background image of a rounded rectangle and put it on a fixed-size button. Maybe drop the text altogether and just make the whole thing an image. Eugh.\n\n    2. Make a generic background image and scale it to fit. More clever, but the corners might end up not round.\n\n    3. Make the rounded rectangle, cut out the corner and edges, and put them in a 3\u00d73 table with the button label in the middle. Even better, use JavaScript to do this on the fly.\n\n    4. Fuck it, make your entire website one big Flash app lol\n\nAnother problem was that IE 6 didn\u2019t understand PNGs with 8-bit alpha; it\ncould only correctly display PNGs with 1-bit alpha, i.e. every pixel is either\nfully opaque or fully transparent, like GIFs. You had to settle for jagged\nedges, bake a solid background color into the image, or apply various fixes\nthat centered around this fucking garbage nonsense:\n\n    \n        1\n\n|\n\n    \n        filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='bite-my-ass.png');  \n  \n---|---  \n  * Along similar lines: gradients and drop shadows! You can\u2019t have fancy plastic buttons without those. But here you were basically stuck with making images again.\n\n  * Translucency was a bit of a mess. Most browsers supported the CSS 3 opacity property since very early on... except IE, which needed another wacky Microsoft-specific filter thing. And if you wanted only the background translucent, you\u2019d need a translucent PNG, which... well, you know.\n\n  * Since the beginning, jQuery shipped with built-in animated effects like fadeIn, and they started popping up all over the place. It was kind of like the Web equivalent of how every Linux user in the mid-00s (and I include myself in this) used that fucking Compiz cube effect.\n\nObviously you need JavaScript to trigger an element\u2019s disappearance in most\ninteresting cases, but using it to control the actual animation was a bit\nheavy-handed and put a strain on browsers. Tabbed browsing compounded this,\nsince browsers were largely single-threaded, and for various reasons, every\nopen page ran in the same thread.\n\n  * Oh! Alternating background colors on table rows. This has since gone out of style, but I think that\u2019s a shame, because man did it make tables easier to read. But CSS had no answer for this, so you had to either give every other row a class like <tr class=\"odd\"> (hope the table\u2019s generated with code!) or do some jQuery nonsense.\n\n  * CSS 2 introduced the > child selector, so you could write stuff like ul.foo > li to style special lists without messing up nested lists, and IE 6! Didn\u2019t! Fucking! Support! It!\n\nAll those are merely aesthetic concerns, though. If you were interested in\nlayout, well, the rise of Firefox had made your life at once much easier and\nmuch harder.\n\nRemember inline-block? Firefox 2 actually supported it! It was buggy and\nhidden behind a vendor prefix, but it more or less worked, which let designers\nstart playing with it. And then Firefox 3 supported it more or less fully,\nwhich felt miraculous. Version 3 of our thumbnail grid is as simple as a width\nand inline-block:\n\n    \n    \n    1 2 3 4 5 6\n\n|\n\n    \n    \n    .thumbnails li { display: inline-block; width: 250px; margin: 0.5em; vertical-align: top; }  \n  \n---|---  \n  \nThe general idea of inline-block is that the inside acts like a block, but the\nblock itself is placed in regular flowing text, like an image. Each thumbnail\nis thus contained in a box, but the boxes all lie next to each other, and\nbecause of their equal widths, they flow into a grid. And since it\u2019s\nfunctionally a line of text, you don\u2019t have to work around any weird impact on\nthe rest of the page like you had to do with floats.\n\nSure, this had some drawbacks. You couldn\u2019t do anything with the leftover\nspace, for example, so there was a risk of a big empty void on the right with\npathological screen sizes. You still had the problem of breaking the grid with\na wide cell. But at least it\u2019s not floats.\n\nOne teeny problem: IE 6. It did technically support inline-block, but only on\nelements that were naturally inline \u2014 ones like <b> and <i>, not <li>. So, not\nones you\u2019d actually want (or think) to use inline-block on. Sigh.\n\nLucky for us, at some point an absolute genius discovered hasLayout, an\ninternal optimization in IE that marks whether an element... uh... has...\nlayout. Look, I don\u2019t know. Basically it changes the rendering path for an\nelement \u2014 making it differently buggy, like quirks mode on a per-element\nbasis! The upshot is that the above works in IE 6 if you add a couple lines:\n\n    \n    \n    1 2 3 4 5 6 7 8\n\n|\n\n    \n    \n    .thumbnails li { display: inline-block; width: 250px; margin: 0.5em; vertical-align: top; *zoom: 1; *display: inline; }  \n  \n---|---  \n  \nThe leading asterisks make the property invalid, so browsers should ignore the\nwhole line... but for some reason I cannot begin to fathom, IE 6 ignores the\nasterisks and accepts the rest of the rule. (Almost any punctuation worked,\nincluding a hyphen or \u2014 my personal favorite \u2014 an underscore.) The zoom\nproperty is a Microsoft extension that scales stuff, with the side effect that\nit grants the mystical property of \u201clayout\u201d to the element as well. And\ndisplay: inline should make each element spill its contents into one big line\nof text, but IE treats an inline element that has \u201clayout\u201d roughly like an\ninline-block.\n\nAnd here we saw the true potential of CSS messes. Browser-specific rules, with\ndeliberate bad syntax that one browser would ignore, to replicate an effect\nthat still isn\u2019t clearly described by what you\u2019re writing. Entire tutorials\nwritten to explain how to accomplish something simple, like a grid, but have\nit actually work on most people\u2019s browsers. You\u2019d also see * html, html > /**/\nbody, and all kinds of other nonsense. Here\u2019s a full list! And remember that\n\u201cclearfix\u201d hack from before? The full version, compatible with every browser,\nis a bit worse:\n\n    \n    \n    1 2 3 4 5 6 7 8 9 10 11 12 13\n\n|\n\n    \n    \n    .clearfix:after { visibility: hidden; display: block; font-size: 0; content: \" \"; clear: both; height: 0; } .clearfix { display: inline-block; } /* start commented backslash hack \\*/ * html .clearfix { height: 1%; } .clearfix { display: block; } /* close commented backslash hack */  \n  \n---|---  \n  \nIs it any wonder folks started groaning about CSS?\n\nThis was an era of blind copy/pasting in the frustrated hopes of making the\ndamn thing work. Case in point: someone (I dug the original source up once but\ncan\u2019t find it now) had the bone-headed idea of always setting body { font-\nsize: 62.5% } due to a combination of \u201crelative units are good\u201d and wanting to\noverride the seemingly massive default browser font size of 16px (which, it\nturns out, is correct) and dealing with IE bugs. He walked it back a short\ntime later, but the damage had been done, and now thousands of websites start\noff that way as a \u201cbest practice\u201d. Which means if you want to change your\nbrowser\u2019s default font size in either direction, you\u2019re screwed \u2014 scale it\ndown and a bunch of the Web becomes microscopic, scale it up and everything\nwill still be much smaller than you\u2019ve asked for, scale it up more to\ncompensate and everything that actually respects your decision will be\nginormous. At least we have better page zoom now, I guess.\n\nOh, and do remember: Stack Overflow didn\u2019t exist yet. This stuff was passed\naround purely by word of mouth. If you were lucky, you knew about some of the\nwebsites about websites, like quirks mode and Eric Meyer\u2019s website.\n\nIn fact, check out Meyer\u2019s css/edge site for some wild examples of stuff folks\nwere doing, even with just CSS 1, as far back as 2002. I still think\ncomplexspiral is pure genius, even though you could do it nowadays with\nopacity and just one image. The approach in raggedfloat wouldn\u2019t get native\nsupport in CSS until a few years ago, with shape-outside! He also brought us\nCSS reset, eliminating differences between browsers\u2019 default styles.\n\n(I cannot understate how much of a CSS pioneer Eric Meyer is. When his young\ndaughter Rebecca died six years ago, she was uniquely immortalized with her\nown CSS color name, rebeccapurple. That\u2019s how highly the Web community thinks\nof him. Also I have to go cry a bit over that story now.)\n\n## The future arrives, gradually\n\nDesigners and developers were pushing the bounds of what browsers were capable\nof. Browsers were handling it all somewhat poorly. All the fixes and\nworkarounds and libraries were arcane, brittle, error-prone, and/or heavy.\n\nClearly, browsers needed some new functionality. But just slopping something\nin wouldn\u2019t help; Microsoft had done plenty of that, and it had mostly made a\nmess.\n\nSeveral struggling attempts began. With the W3C\u2019s head still squarely up its\nown ass \u2014 even explicitly rejecting proposed enhancements to HTML, in favor of\nsnorting XML \u2014 some folks from (active) browser vendors Apple, Mozilla, and\nOpera decided to make their own clubhouse. WHATWG came into existence in June\n2004, and they began work on HTML5. (It would end up defining error-handling\nvery explicitly, which completely obviated the need for XHTML and eliminated a\nnumber of security concerns when working with arbitrary HTML. Also it gave us\nsome new goodies, like native audio, video, and form controls for dates and\ncolors and other stuff that had been clumsily handled by JavaScript-powered\ncustom controls. And, um, still often are.)\n\nThen there was CSS 3. I\u2019m not sure when it started to exist. It emerged\nslowly, struggling, like a chick hatching from an egg and taking its damn\nsweet fucking time to actually get implemented anywhere.\n\nI\u2019m having to do a lot of educated guessing here, but I think it began with\nborder-radius. Specifically, with -moz-border-radius. I don\u2019t know when it was\nfirst introduced, but the Mozilla bug tracker has mentions of it as far back\nas 1999.\n\nSee, Firefox\u2019s own UI is rendered with CSS. If Mozilla wanted to do something\nthat couldn\u2019t be done with CSS, they added a property of their own, prefixed\nwith -moz- to indicate it was their own invention. And when there\u2019s no real\nharm in doing so, they leave the property accessible to websites as well.\n\nMy guess, then, is that the push for CSS 3 really began when Firefox took off\nand designers discovered -moz-border-radius. Suddenly, built-in rounded\ncorners were available! No more fucking around in Photoshop; you only needed\nto write a single line! Practically overnight, everything everywhere had its\ncorners filed down.\n\nAnd from there, things snowballed. Common problems were addressed one at a\ntime by new CSS features, which were clustered together into a new CSS\nversion: CSS 3. The big ones were solutions to the design problems mentioned\nbefore:\n\n  * Rounded corners, provided by border-radius.\n  * Gradients, provided by linear-gradient() and friends.\n  * Multiple backgrounds, which weren\u2019t exactly a pressing concern, but which turned out to make some other stuff easier.\n  * Translucency, provided by opacity and colors with an alpha channel.\n  * Box shadows.\n  * Text shadows, which had been in CSS 2 but dropped in 2.1 and never implemented anyway.\n  * Border images, so you could do even fancier things than mere rounded borders.\n  * Transitions and animations, now doable with ease without needing jQuery (or any JS at all).\n  * :nth-child(), which solved the alternating rows problem with pure CSS.\n  * Transformations. Wait, what? This kinda leaked in from SVG, which browsers were also being expected to implement, and which is built heavily around transforms. The code was already there, so, hey, now we can rotate stuff with CSS! Couldn\u2019t do that before. Cool.\n  * Web fonts, which had been in CSS for some time but only ever implemented in IE and only with some goofy DRM-laden font format. Now we weren\u2019t limited to the four bad fonts that ship with Windows and that no one else has!\n\nThese were pretty great! They didn\u2019t solve any layout problems, but they did\naddress aesthetic issues that designers had been clumsily working around by\nusing loads of images and/or JavaScript. That meant less stuff to download and\nmore text used instead of images, both of which were pretty good for the Web.\n\nThe grand irony is that all the stuff you could do with these features went\nout of style almost immediately, and now we\u2019re back to flat rectangles again.\n\n### Browser prefixing hell\n\nAlas! All was still not right with the world.\n\nSeveral of these new gizmos were, I believe, initially developed by browser\nvendors and prefixed. Some later ones were designed by the CSS committee but\nimplemented by browsers while the design was still in flux, and thus also\nprefixed.\n\nSo began prefix hell, which continues to this day.\n\nMozilla had -moz-border-radius, so when Safari implemented it, it was named\n-webkit-border-radius (\u201cWebKit\u201d being the name of Apple\u2019s KHTML fork). Then\nthe CSS 3 spec standardized it and called it just border-radius. That meant\nthat if you wanted to use rounded borders, you actually needed to give three\nrules:\n\n    \n    \n    1 2 3 4 5\n\n|\n\n    \n    \n    element { -moz-border-radius: 1em; -webkit-border-radius: 1em; border-radius: 1em; }  \n  \n---|---  \n  \nThe first two made the effect actually work in current browsers, and the last\none was future-proofing: when browsers implemented the real rule and dropped\nthe prefixed ones, it would take over.\n\nYou had to do this every fucking time, since CSS isn\u2019t a programming language\nand has no macros or functions or the like. Sometimes Opera and IE would have\ntheir own implementations with -o- and -ms- prefixes, bringing the total to\nfive copies. It got much worse with gradients; the syntax went through a\nnumber of major incompatible revisions, so you couldn\u2019t even rely on\ncopy/pasting and changing the property name!\n\nAnd plenty of folks, well, fucked it up. I can\u2019t blame them too much; I mean,\nthis sucks. But enough pages used only the prefixed forms, and not the final\nform, that browsers had to keep supporting the prefixed form for longer than\nthey would\u2019ve liked to avoid breaking stuff. And if the prefixed form still\nworks and it\u2019s what you\u2019re used to writing, then maybe you still won\u2019t bother\nwith the unprefixed one.\n\nWorse, some people would only use the form that worked in their pet choice of\nbrowser. This got especially bad with the rise of mobile web browsers. The\nbuilt-in browsers on iOS and Android are Safari (WebKit) and Chrome\n(originally WebKit, now a fork), so you only \u201cneeded\u201d to use the -webkit-\nproperties. Which made things difficult for Mozilla when it released Firefox\nfor Android.\n\nHey, remember that whole debacle with IE 6? Here we are again! It was bad\nenough that Mozilla eventually decided to implement a number of -webkit-\nproperties, which remain supported even in desktop Firefox to this day. The\nsituation is goofy enough that Firefox now supports some effects only via\nthese properties, like -webkit-text-stroke, which isn\u2019t being standardized.\n\nEven better, Chrome\u2019s current forked engine is called Blink, so technically it\nshouldn\u2019t be using -webkit- properties either. And yet, here we are. At least\nit\u2019s not as bad as the user agent string mess.\n\nBrowser vendors have pretty much abandoned prefixing, now; instead they hide\nexperimental features behind flags (so they\u2019ll only work on the developer\u2019s\nmachine), and new features are theoretically designed to be smaller and easier\nto stabilize.\n\nThis mess was probably a huge motivating factor for the development of Sass\nand LESS, two languages that produce CSS. Or... two CSS preprocessors, maybe.\nThey have very similar goals: both add variables, functions, and some form of\nmacros to CSS, allowing you to eliminate a lot of the repetition and browser\nhacks and other nonsense from your stylesheets. Hell, this blog still uses\nSCSS, though its use has gradually decreased over time.\n\n### Flexbox\n\nBut then, like an angel descending from heaven... flexbox.\n\nFlexbox has been around for a long time \u2014 allegedly it had partial support in\nFirefox 2, back in 2006! It went through several incompatible revisions and\ntook ages to stabilize. Then IE took ages to implement it, and you don\u2019t\nreally want to rely on layout tools that only work for half your audience.\nIt\u2019s only relatively recently (2015? Later?) that flexbox has had sufficiently\nbroad support to use safely. And I could swear I still run into folks whose\ncurrent Safari doesn\u2019t recognize it at all without prefixing, even though\nSafari supposedly dropped the prefixes five years ago...\n\nAnyway, flexbox is a CSS implementation of a pretty common GUI layout tool:\nyou have a parent with some children, and the parent has some amount of space\navailable, and it gets divided automatically between the children. You know,\nit puts things next to each other.\n\nThe general idea is that the browser computes how much space the parent has\navailable and the \u201cinitial size\u201d of each child, figures out how much extra\nspace there is, and distributes it according to the flexibleness of each\nchild. Think of a toolbar: you might want each button to have a fixed size (a\nflex of 0), but want to add spacers that share any leftover space equally, so\nyou\u2019d give them a flex of 1.\n\nOnce that\u2019s done, you have a number of quality-of-life options at your\ndisposal, too: you can distribute the extra space between the children\ninstead, you can tell the children to stretch to the same height or align them\nin various ways, and you can even have them wrap into multiple rows if they\nwon\u2019t all fit!\n\nWith this, we can take yet another crack at that thumbnail grid:\n\n    \n    \n    1 2 3 4 5 6 7\n\n|\n\n    \n    \n    .thumbnail-grid { display: flex; flex-wrap: wrap; } .thumbnail-grid li { flex: 1 0 250px; }  \n  \n---|---  \n  \nThis is miraculous. I forgot all about inline-block overnight and mostly\nsalivated over this until it was universally supported. It even expresses very\nclearly what I want.\n\n...almost. It still has the problem that too-wide cells will break the grid,\nsince it\u2019s still a horizontal row wrapped onto several independent lines. It\u2019s\npretty damn cool, though, and solves a number of other layout problems. Surely\nthis is good enough. Unless...?\n\nI\u2019d say mass adoption of flexbox marked the beginning of the modern era of\nCSS. But there was one lingering problem...\n\n### The slow, agonizing death of IE\n\nIE 6 took a long, long, long time to go away. It didn\u2019t drop below 10% market\nshare (still a huge chunk) until early 2010 or so.\n\nFirefox hit 1.0 at the end of 2004. IE 7 wasn\u2019t released until two years\nlater, it offered only modest improvements, it suffered from compatibility\nproblems with stuff built for IE 6, and the IE 6 holdouts (many of whom were\nnot Computer People) generally saw no reason to upgrade. Vista shipped with IE\n7, but Vista was kind of a flop \u2014 I don\u2019t believe it ever came close to\novertaking XP, not in its entire lifetime.\n\nOther factors included corporate IT policies, which often take the form of\n\u201cnever upgrade anything ever\u201d \u2014 and often for good reason, as I heard endless\ntales of internal apps that only worked in IE 6 for all manner of horrifying\nreasons. Then there was the entirety of South Korea, which was legally\nrequired to use IE 6 because they\u2019d enshrined in law some security\nrequirements that could only be implemented with an IE 6 ActiveX control.\n\nSo if you maintained a website that was used \u2014 or worse, required \u2014 by people\nwho worked for businesses or lived in other countries, you were pretty much\nstuck supporting IE 6. Folks making little personal tools and websites\nabandoned IE 6 compatibility early on and plastered their sites with\nincreasingly obnoxious banners taunting anyone who dared show up using it...\nbut if you were someone\u2019s boss, why would you tell them it\u2019s okay to drop 20%\nof your potential audience? Just work harder!\n\nThe tension grew over the years, as CSS became more capable and IE 6 remained\nan anchor. It still didn\u2019t even understand PNG alpha without workarounds, and\nmeanwhile we were starting to get more critical features like native video in\nHTML5. The workarounds grew messier, and the list of features you basically\njust couldn\u2019t use grew longer. (I\u2019d show you what my blog looks like in IE 6,\nbut I don\u2019t think it can even connect \u2014 the TLS stuff it supports is so\nancient and broken that it\u2019s been disabled on most servers!)\n\nShoutouts, by the way, to some folks on the YouTube team, who in July 2009\nadded a warning banner imploring IE 6 users to switch to anything else \u2014\nwithout asking anyone for approval. \u201cWithin one month... over 10 percent of\nglobal IE6 traffic had dropped off.\u201d Not all heroes wear capes.\n\nI\u2019d mark the beginning of the end as the day YouTube actually dropped IE 6\nsupport \u2014 March 13, 2010, almost nine years after its release. I don\u2019t know\nhow much of a direct impact YouTube has on corporate users or the South Korean\ngovernment, but a massive web company dropping an entire browser sends a\npretty strong message.\n\nThere were other versions of IE, of course, and many of them were messy\nheadaches in their own right. But each subsequent one became less of a pain,\nand nowadays you don\u2019t even have to think too much about testing in IE (now\nEdge). Just in time for Microsoft to scrap their own rendering engine and turn\ntheir browser into a Chrome clone.\n\n## Now\n\nCSS is pretty great now. You don\u2019t need weird fucking hacks just to put things\nnext to each other. Browser dev tools are built in, now, and are fucking\namazing \u2014 Firefox has started specifically warning you when some CSS\nproperties won\u2019t take effect because of the values of others! Obscure implicit\nside effects like \u201cstacking contexts\u201d (whatever those are) can now be set\nexplicitly, with properties like isolation: isolate.\n\nIn fact, let me just list everything that I can think of that you can do in\nCSS now. This isn\u2019t a guide to all possible uses of styling, but if your CSS\nknowledge hasn\u2019t been updated since 2008, I hope this whets your appetite. And\nthis stuff is just CSS! So many things that used to be impossible or painful\nor require clumsy plugins are now natively supported \u2014 audio, video, custom\ndrawing, 3D rendering... not to mention the vast ergonomic improvements to\nJavaScript.\n\n### Layout\n\nA grid container can do pretty much anything tables can do, and more,\nincluding automatically determining how many columns will fit. It\u2019s fucking\namazing. More on that below.\n\nA flexbox container lays out its children in a row or column, allowing each\nchild to declare its \u201cdefault\u201d size and what proportion of leftover space it\nwants to consume. Flexboxes can wrap, rearrange children without changing\nsource order, and align children in a number of ways.\n\nColumns will pour text into, well, multiple columns.\n\nThe box-sizing property lets you opt into the IE box model on a per-element\nbasis, for when you need an entire element to take up a fixed amount of space\nand need padding/borders to subtract from that.\n\ndisplay: contents dumps an element\u2019s contents out into its parent, as if it\nweren\u2019t there at all. display: flow-root is basically an automatic clearfix,\nonly a decade too late.\n\nwidth can now be set to min-content, max-content, or the fit-content()\nfunction for more flexible behavior.\n\nwhite-space: pre-wrap preserves whitespace, but breaks lines where necessary\nto avoid overflow. Also useful is pre-line, which collapses sequences of\nspaces down to a single space, but preserves literal newlines.\n\ntext-overflow cuts off overflowing text with an ellipsis (or custom character)\nwhen it would overflow, rather than simply truncating it. Also specced is the\nability to fade out the text, but this is as yet unimplemented.\n\nshape-outside alters the shape used when wrapping text around a float. It can\neven use the alpha channel of an image as the shape.\n\nresize gives an arbitrary element a resize handle (as long as it has\noverflow).\n\nwriting-mode sets the direction that text flows. If your design needs to work\nfor multiple writing modes, a number of CSS properties that mention\nleft/right/top/bottom have alternatives that describe directions in terms of\nthe writing mode: inset-block and inset-inline for position, block-size and\ninline-size for width/height, border-block and border-inline for borders, and\nsimilar for padding and margins.\n\n### Aesthetics\n\nTransitions smoothly interpolate a value whenever it changes, whether due to\nan effect like :hover or e.g. a class being added from JavaScript. Animations\nare similar, but play a predefined animation automatically. Both can use a\nnumber of different easing functions.\n\nborder-radius rounds off the corners of a box. The corners can all be\ndifferent sizes, and can be circular or elliptical. The curve also applies to\nthe border, background, and any box shadows.\n\nBox shadows can be used for the obvious effect of casting a drop shadow. You\ncan also use multiple shadows and inset shadows for a variety of clever\neffects.\n\ntext-shadow does what it says on the tin, though you can also stack several of\nthem for a rough approximation of a text outline.\n\ntransform lets you apply an arbitrary matrix transformation to an element \u2014\nthat is, you can scale, rotate, skew, translate, and/or do perspective\ntransform, all without affecting layout.\n\nfilter (distinct from the IE 6 one) offers a handful of specific visual\nfilters you can apply to an element. Most of them affect color, but there\u2019s\nalso a blur() and a drop-shadow() (which, unlike box-shadow, applies to an\nelement\u2019s appearance rather than its containing box).\n\nlinear-gradient(), radial-gradient(), the new and less-supported conic-\ngradient(), and their repeating-* variants all produce gradient images and can\nbe used anywhere in CSS that an image is expected, most commonly as a\nbackground-image.\n\nscrollbar-color changes the scrollbar color, with the downside of reducing the\nscrollbar to a very simple thumb-and-track in current browsers.\n\nbackground-size: cover and contain will scale a background image\nproportionally, either big enough to completely cover the element (even if\ncropped) or small enough to exactly fit inside it (even if it doesn\u2019t cover\nthe entire background).\n\nobject-fit is a similar idea but for non-background media, like <img>s. The\nrelated object-position is like background-position.\n\nMultiple backgrounds are possible, which is especially useful with gradients \u2014\nyou can stack multiple gradients, other background images, and a solid color\non the bottom.\n\ntext-decoration is fancier than it used to be; you can now set the color of\nthe line and use several different kinds of lines, including dashed, dotted,\nand wavy.\n\nCSS counters can be used to number arbitrary elements in an arbitrary way,\nexposing the counting ability of <ol> to any set of elements you want.\n\nThe ::marker pseudo-element allows you to style a list item\u2019s marker box, or\neven replace it outright with a custom counter. Browser support is spotty, but\nimproving. Similarly, the @counter-style at-rule implements an entirely new\ncounter style (like 1 2 3, i ii iii, A B C, etc.) which you can then use\nanywhere, though only Firefox supports it so far.\n\nimage-set() provides a list of candidate images and lets the browser choose\nthe most appropriate one based on the pixel density of the user\u2019s screen.\n\n@font-face defines a font that can be downloaded, though you can avoid\nfiguring out how to use it correctly by using Google Fonts.\n\npointer-events: none makes an element ignore the mouse entirely; it can\u2019t be\nhovered, and clicks will go straight through it to the element below.\n\nimage-rendering can force an image to be resized nearest-neighbor rather than\ninterpolated, though browser support is still spotty and you may need to also\ninclude some vendor-specific properties.\n\nclip-path crops an element to an arbitrary shape. There\u2019s also mask for\narbitrary alpha masking, but browser support is spotty and hoo boy is this one\ncomplicated.\n\n### Syntax and misc\n\n@supports lets you explicitly write different CSS depending on what the\nbrowser supports, though it\u2019s nowhere near as useful nowadays as it would\u2019ve\nbeen in 2004.\n\nA > B selects immediate children. A ~ B selects siblings. A + B selects\nimmediate (element) siblings. Square brackets can do a bunch of stuff to\nselect based on attributes; most obvious is input[type=checkbox], though you\ncan also do interesting things with matching parts of <a href>.\n\nThere are a whole bunch of pseudo-classes now. Many of them are for form\nelements: :enabled and :disabled; :checked and :indeterminate (also apply to\nradio and <option>); :required and :optional; :read-write and :read-only; :in-\nrange/:out-of-range and :valid/:invalid (for use with HTML5 client-side form\nvalidation); :focus and :focus-within; and :default (which selects the default\nform button and any pre-selected checkboxes, radio buttons, and <option>s).\n\nFor targeting specific elements within a set of siblings, we have: :first-\nchild, :last-child, and :only-child; :first-of-type, :last-of-type, and :only-\nof-type (where \u201ctype\u201d means tag name); and :nth-child(), :nth-last-child(),\n:nth-of-type(), and :nth-last-of-type() (to select every second, third, etc.\nelement).\n\n:not() inverts a selector. :empty selects elements with no children and no\ntext. :target selects the element jumped to with a URL fragment (e.g. if the\naddress bar shows index.html#foo, this selects the element whose ID is foo).\n\n::before and ::after should have two colons now, to indicate that they create\npseudo-elements rather than merely scoping the selector they\u2019re attached to.\n::selection customizes how selected text appears; ::placeholder customizes how\nplaceholder text (in text fields) appears.\n\nMedia queries do just a whole bunch of stuff so your page can adapt based on\nhow it\u2019s being viewed. The prefers-color-scheme media query tells you if the\nuser\u2019s system is set to a light or dark theme, so you can adjust accordingly\nwithout having to ask.\n\nYou can write translucent colors as #rrggbbaa or #rgba, as well as using the\nrgba() and hsla() functions.\n\nAngles can be described as fractions of a full circle with the turn unit. Of\ncourse, deg and rad (and grad) are also available.\n\nCSS variables (officially, \u201ccustom properties\u201d) let you specify arbitrary\nnamed values that can be used anywhere a value would appear. You can use this\nto reduce the amount of CSS fiddling needs doing in JavaScript (e.g., recolor\na complex part of a page by setting a CSS variable instead of manually\nadjusting a number of properties), or have a generic component that reacts to\nvariables set by an ancestor.\n\ncalc() computes an arbitrary expression and updates automatically (though it\u2019s\nsomewhat obviated by box-sizing).\n\nThe vw, vh, vmin, and vmax units let you specify lengths as a fraction of the\nviewport\u2019s width or height, or whichever of the two is bigger/smaller.\n\nPhew! I\u2019m sure I\u2019m forgetting plenty and folks will have even longer lists of\ninteresting tidbits in the comments. Thanks for saving me some effort! Now I\ncan stop browsing MDN and do this final fun part.\n\n### State of the art thumbnail grid\n\nAt long last, we arrive at the final and objectively correct way to construct\na thumbnail grid: using CSS grid. You can tell this is the right thing to use\nbecause it has \u201cgrid\u201d in the name. Modern CSS features are pretty great about\nletting you say the thing you want and having it happen, rather than trying to\ncoax it into happening implicitly via voodoo.\n\nAnd it is oh so simple:\n\n    \n    \n    1 2 3 4\n\n|\n\n    \n    \n    .thumbnail-grid { display: grid; grid: auto-flow / repeat(auto-fit, minmax(250px, 1fr)); }  \n  \n---|---  \n  \nDone! That gives you a grid. You have myriad other twiddles to play with, just\nas with flexbox, but that\u2019s the basic idea. You don\u2019t even need to style the\nelements themselves; most of the layout work is done in the container.\n\nThe grid shorthand property looks a little intimidating, but only because it\u2019s\nso flexible. It\u2019s saying: fill the grid one row at a time, generating as many\nrows as necessary; make as many 250px columns as will fit, and share any\nleftover space between them equally.\n\nCSS grids are also handy for laying out <dl>s, something that\u2019s historically\nbeen a massive pain to make work \u2014 a <dl> contains any number of <dt>s\nfollowed by any number of <dd>s (including zero), and the only way to style\nthis until grid was to float the <dt>s, which meant they had to have a fixed\nwidth. Now you can just tell the <dt>s to go in the first column and <dd>s to\ngo in the second, and grid will take care of the rest.\n\nAnd laying out your page? That whole sidebar thing? Check out how easy that\nis:\n\n    \n    \n    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n\n|\n\n    \n    \n    body { display: grid; grid-template: \"header header header\" \"left-sidebar main-content right-sidebar\" \"footer footer footer\" / 1fr 6fr 1fr ; } body > header { grid-area: header; } #left-sidebar { grid-area: left-sidebar; } /* ... etc ... */  \n  \n---|---  \n  \nDone. Easy. It doesn\u2019t matter what order the parts appear in the markup,\neither.\n\n### On the other hand\n\nThe web is still a little bit of a disaster. A lot of folks don\u2019t even know\nthat flexbox and grid are supported almost universally now; but given how long\nit took to get from early spec work to broad implementation, I can\u2019t really\nblame them. I saw a brand new little site just yesterday that consisted mostly\nof a huge list of \u201cthumbnails\u201d of various widths, and it used floats! Not even\ninline-block! I don\u2019t know how we managed to teach everyone about all the\nhacks required to make that work, but somehow haven\u2019t gotten the word out\nabout flexbox.\n\nBut far worse than that: I still regularly encounter sites that do their\nentire page layout with JavaScript. If you use uMatrix, your first experience\nis with a pile of text overlapping a pile of other text. Surely this is a step\nbackwards? What are you possibly doing that your header and sidebar can only\nbe laid out correctly by executing code? It\u2019s not like the page loads with no\nCSS \u2014 nothing in plain HTML will overlap by default! You have to tell it to do\nthat!\n\nAnd then there\u2019s the mobile web, which despite everyone\u2019s good intentions, has\nkind of turned out to be a failure. The idea was that you could use CSS media\nqueries to fit your normal site on a phone screen, but instead, most major\nsites have entirely separate mobile versions. Which means that either the\nmobile site is missing a bunch of important features and I\u2019ll have to\nawkwardly navigate that on my phone anyway, or the desktop site is full of\ncrap that nobody actually needs.\n\n(Meanwhile, Google\u2019s own Android versions of Docs/Sheets/etc. have, like, 5%\nof the features of the Web versions? Not sure what to make of that.)\n\nHmm. Strongly considering writing something that goes more into detail about\nimprovements to CSS since the Firefox 3 era, similar to the one I wrote for\nJavaScript. But this post is long enough.\n\n## Some futures that never were\n\nI don\u2019t know what\u2019s coming next in CSS, especially now that flexbox and grid\nhave solved all our problems. I\u2019m vaguely aware of some work being done on\nmore extensive math support, and possibly some functions for altering colors\nlike in Sass. There\u2019s a painting API that lets you generate backgrounds on the\nfly with JavaScript using the canvas API, which is... quite something.\nApparently it\u2019s now in spec that you can use attr() (which evaluates to the\nvalue of an HTML attribute) as the value for any property, which seems cool\nand might even let you implement HTML tables entirely in CSS, but you could do\nthe same thing with variables. I mean, um, custom properties. I\u2019m more excited\nabout :is(), which matches any of a list of selectors, and subgrid, which lets\nyou add some nesting to a grid but keep grandchildren still aligned to it.\n\nMuch easier is to list some things that were the future, but fizzled out.\n\n  * display: run-in has been part of CSS since version 2 (way back in \u201898), but it\u2019s basically unsupported. The idea is that a \u201crun-in\u201d box is inserted, inline, into the next block, so this:\n    \n        1 2 3\n\n|\n\n    \n        <h2 style=\"display: run-in;\">Title</h2> <p>Paragraph</p> <p>Paragraph</p>  \n  \n---|---  \n  \ndisplays like this:\n\n> Title Paragraph\n>\n> Paragraph\n\nAnd, ah, hm, I\u2019m starting to see why it\u2019s unsupported. It used to exist in\nWebKit, but was apparently so unworkable as to be removed six years ago.\n\n  * \u201cAlternate stylesheets\u201d were popular in the early 00s, at least on a few of my friends\u2019 websites. The idea was that you could list more than one stylesheet for your site (presumably for different themes), and the browser would give the user a list of them. Alas, that list was always squirrelled away in a menu with no obvious indication of when it was actually populated, so in the end, everyone who wanted multiple themes just implemented an in-page theme switcher themselves.\n\nThis feature is still supported, but apparently Chrome never bothered\nimplementing it, so it\u2019s effectively dead.\n\n  * More generally, the original CSS spec clearly expects users to be able to write their own CSS for a website \u2014 right in paragraph 2 it says\n\n> ...the reader may have a personal style sheet to adjust for human or\n> technological handicaps.\n\nHey, that sounds cool. But it never materialized as a browser feature. Firefox\nhas userContent.css and some URL selectors for writing per-site rules, but\nthat\u2019s relatively obscure.\n\nStill, there\u2019s clearly demand for the concept, as evidenced by the popularity\nof the Stylish extension \u2014 which does just this. (Too bad it was bought by\nsome chucklefucks who started using it to suck up browser data to sell to\nadvertisers. Use Stylus instead.)\n\n  * A common problem (well, for me) is that of styling the label for a checkbox, depending on its state. Styling the checkbox itself is easy enough with the :checked pseudo-selector. But if you arrange a checkbox and its label in the obvious way:\n    \n        1\n\n|\n\n    \n        <label><input type=\"checkbox\"> Description of what this does</label>  \n  \n---|---  \n  \n...then CSS has no way to target either the <label> element or the text node.\njQuery\u2019s (originally custom) selector engine offered a custom :has() pseudo-\nclass, which could be used to express this:\n\n    \n        1 2 3 4\n\n|\n\n    \n        /* checkbox label turns bold when checked */ label:has(input:checked) { font-weight: bold; }  \n  \n---|---  \n  \nEarly CSS 3 selector discussions seemingly wanted to avoid this, I guess for\nperformance reasons? The somewhat novel alternative was to write out the\nentire selector, but be able to alter which part of it the rules affected with\na \u201csubject\u201d indicator. At first this was a pseudo-class:\n\n    \n        1 2 3\n\n|\n\n    \n        label:subject input:checked { font-weight: bold; }  \n  \n---|---  \n  \nThen later, they introduced a ! prefix instead:\n\n    \n        1 2 3\n\n|\n\n    \n        !label input:checked { font-weight: bold; }  \n  \n---|---  \n  \nThankfully, this was decided to be a bad idea, so the current specced way to\ndo this is... :has()! Unfortunately, it\u2019s only allowed when querying from\nJavaScript, not in a live stylesheet, and nothing implements it anyway. 20\nyears and I\u2019m still waiting for a way to style checkbox labels.\n\n  * <style scoped> was an attribute that would\u2019ve made a <style> element\u2019s CSS rules only apply to other elements within its immediate parent, meaning you could drop in arbitrary (possibly user-written) CSS without any risk of affecting the rest of the page. Alas, this was quietly dropped some time ago, with shadow DOM suggested as a wildly inappropriate replacement.\n\n  * I seem to recall that when I first heard about Web components, they were templates you could use to reduce duplication in pure HTML? But I can\u2019t find any trace of that concept now, and the current implementations require JavaScript to define them, so there\u2019s nothing declarative linking a new tag to its implementation. Which makes them completely unusable for anything that doesn\u2019t have a compelling reason to rely on JS. Alas.\n\n  * <blink> and <marquee>. RIP. Though both can be easily replicated with CSS animations.\n\n## That's it\n\nYou\u2019re still here? It\u2019s over. Go home.\n\nAnd maybe push back against Blink monoculture and use Firefox, including on\nyour phone, unless for some reason you use an iPhone, which forbids other\nbrowser engines, which is far worse than anything Microsoft ever did, but we\njust kinda accept it for some reason.\n\n  * Posted by Eevee in blog\n  * Sat Feb 01, 2020\n  * #tech\n\nIf you like when I write words, you can fund future wordsmithing (and other\nendeavors) by throwing a couple bucks at my Patreon!\n\n(illus. by Rumwik)\n\n# Comments\n\n  * ## blog\n\ndetailed, thoughtful prose about why computers are the worst\n\n  * ## dev\n\nupdates on what i'm doing lately\n\n  * ## release\n\nthings i've released into the wild, and maybe my thoughts on them\n\n  * ## everything\n\nwhy limit yourself when you can have it all\n\n  * ## archives\n\nturn the clock back to \u00e6ons past\n\n  * ## email\n\ndo people still use this\n\n  * ## twitter\n\nfirehose of bad jokes\n\n  * ## mastodon\n\ntrickle of bad jokes\n\n  * ## patreon\n\nhelp pay my salary\n\n  * ## square\n\njust give me money?\n\n  * ## paypal\n\njust give me money, again?\n\n  * ## github\n\nlots of abandoned code\n\n  * ## art tumblr\n\njust art\n\n  * ## itch.io\n\nindie games\n\n  * ## twitch\n\noccasional old game streams\n\n  * ## youtube\n\nmostly cat videos\n\n# Recent stuff\n\n  * Monday Night Itch #1: Mystery Trap Adventure\n  * Goodbye, Pearl\n  * Recommended GZDoom settings\n  * Gamedev from scratch 1: Scaffolding\n  * Eevee gained 3367 experience points\n  * Cherry Kisses, on Steam\n  * Gamedev from scratch 0: Groundwork\n  * Lexy\u2019s Labyrinth\n\n# Tags\n\nbirthday cats cheezball rising culture doom dywypi eulogy food gadgets game\nnight gamedev gender git identity infosec isaac's descent law linux making\nthings mario maker math media meta nsfw patreon perl personal photos php plt\npokemon popular project euler puzzles pyramid python raidne reference runed\nawakening rust sanpera spline squiggle status styx systems tech tools\ntypography ui unicode veekun web yelling\n\n\u00a9 2011\u20132018 Eevee a.k.a. Evelyn Woods \u00b7 \u00b7 Backgrounds from Subtle Patterns\n\nPowered by Pelican \u00b7 Source code\n\n", "frontpage": false}
