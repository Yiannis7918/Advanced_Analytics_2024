{"aid": "40022242", "title": "Diff Unifided Format", "url": "https://en.wikipedia.org/wiki/Diff", "domain": "wikipedia.org", "votes": 1, "user": "brianzelip", "posted_at": "2024-04-13 11:11:42", "comments": 0, "source_title": "diff", "source_text": "diff - Wikipedia\n\nJump to content\n\nSearch\n\n# diff\n\n  * \u0627\u0644\u0639\u0631\u0628\u064a\u0629\n  * Az\u0259rbaycanca\n  * \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f\n  * \u010ce\u0161tina\n  * Dansk\n  * Deutsch\n  * \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\n  * Espa\u00f1ol\n  * \u0641\u0627\u0631\u0633\u06cc\n  * Fran\u00e7ais\n  * \ud55c\uad6d\uc5b4\n  * \u0939\u093f\u0928\u094d\u0926\u0940\n  * Italiano\n  * \u05e2\u05d1\u05e8\u05d9\u05ea\n  * Magyar\n  * \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02\n  * Nederlands\n  * \u65e5\u672c\u8a9e\n  * Polski\n  * Portugu\u00eas\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * Suomi\n  * Svenska\n  * T\u00fcrk\u00e7e\n  * \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n  * \u4e2d\u6587\n\nEdit links\n\nFrom Wikipedia, the free encyclopedia\n\nStandard UNIX utility for file comparison\n\nThis article is about the utility program. For the general topic of file\ncomparison, see File comparison. For diffs in Wikipedia, see Help:Diff. For\nother uses, see DIFF.\n\ndiffOriginal author(s)| Douglas McIlroy (AT&T Bell Laboratories)  \n---|---  \nDeveloper(s)| Various open-source and commercial developers  \nInitial release| June 1974; 49 years ago (1974-06)  \nWritten in| C  \nOperating system| Unix, Unix-like, V, Plan 9, Inferno  \nPlatform| Cross-platform  \nType| Command  \nLicense| Plan 9: MIT License  \n  \nIn computing, the utility diff is a data comparison tool that computes and\ndisplays the differences between the contents of files. Unlike edit distance\nnotions used for other purposes, diff is line-oriented rather than character-\noriented, but it is like Levenshtein distance in that it tries to determine\nthe smallest set of deletions and insertions to create one file from the\nother. The utility displays the changes in one of several standard formats,\nsuch that both humans or computers can parse the changes, and use them for\npatching.\n\nTypically, diff is used to show the changes between two versions of the same\nfile. Modern implementations also support binary files.^[1] The output is\ncalled a \"diff\", or a patch, since the output can be applied with the Unix\nprogram patch. The output of similar file comparison utilities is also called\na \"diff\"; like the use of the word \"grep\" for describing the act of searching,\nthe word diff became a generic term for calculating data difference and the\nresults thereof.^[2] The POSIX standard specifies the behavior of the \"diff\"\nand \"patch\" utilities and their file formats.^[3]\n\n## History[edit]\n\ndiff was developed in the early 1970s on the Unix operating system, which was\nemerging from Bell Labs in Murray Hill, New Jersey. It was part of the 5th\nEdition of Unix released in 1974,^[4] and was written by Douglas McIlroy, and\nJames Hunt. This research was published in a 1976 paper co-written with James\nW. Hunt, who developed an initial prototype of diff.^[5] The algorithm this\npaper described became known as the Hunt\u2013Szymanski algorithm.\n\nMcIlroy's work was preceded and influenced by Steve Johnson's comparison\nprogram on GECOS and Mike Lesk's proof program. Proof also originated on Unix\nand, like diff, produced line-by-line changes and even used angle-brackets\n(\">\" and \"<\") for presenting line insertions and deletions in the program's\noutput. The heuristics used in these early applications were, however, deemed\nunreliable. The potential usefulness of a diff tool provoked McIlroy into\nresearching and designing a more robust tool that could be used in a variety\nof tasks, but perform well in the processing and size limitations of the\nPDP-11's hardware. His approach to the problem resulted from collaboration\nwith individuals at Bell Labs including Alfred Aho, Elliot Pinson, Jeffrey\nUllman, and Harold S. Stone.\n\nIn the context of Unix, the use of the ed line editor provided diff with the\nnatural ability to create machine-usable \"edit scripts\". These edit scripts,\nwhen saved to a file, can, along with the original file, be reconstituted by\ned into the modified file in its entirety. This greatly reduced the secondary\nstorage necessary to maintain multiple versions of a file. McIlroy considered\nwriting a post-processor for diff where a variety of output formats could be\ndesigned and implemented, but he found it more frugal and simpler to have diff\nbe responsible for generating the syntax and reverse-order input accepted by\nthe ed command.\n\nIn 1984, Larry Wall created a separate utility, patch, releasing its source\ncode on the mod.sources and net.sources newsgroups.^[6]^[7]^[8] This program\nmodifies files using output from diff and has the ability to match context.\n\nX/Open Portability Guide issue 2 of 1987 includes diff. Context mode was added\nin POSIX.1-2001 (issue 6). Unified mode was added in POSIX.1-2008 (issue\n7).^[9]\n\nIn diff's early years, common uses included comparing changes in the source of\nsoftware code and markup for technical documents, verifying program debugging\noutput, comparing filesystem listings and analyzing computer assembly code.\nThe output targeted for ed was motivated to provide compression for a sequence\nof modifications made to a file.^[citation needed] The Source Code Control\nSystem (SCCS) and its ability to archive revisions emerged in the late 1970s\nas a consequence of storing edit scripts from diff.\n\n## Algorithm[edit]\n\nThe operation of diff is based on solving the longest common subsequence\nproblem.^[5]\n\nIn this problem, given two sequences of items:\n\n    \n    \n    a b c d f g h j q z\n    \n    \n    a b c d e f g i j k r x y z\n\nand we want to find a longest sequence of items that is present in both\noriginal sequences in the same order. That is, we want to find a new sequence\nwhich can be obtained from the first original sequence by deleting some items,\nand from the second original sequence by deleting other items. We also want\nthis sequence to be as long as possible. In this case it is\n\n    \n    \n    a b c d f g j z\n\nFrom a longest common subsequence it is only a small step to get diff-like\noutput: if an item is absent in the subsequence but present in the first\noriginal sequence, it must have been deleted (as indicated by the '-' marks,\nbelow). If it is absent in the subsequence but present in the second original\nsequence, it must have been inserted (as indicated by the '+' marks).\n\n    \n    \n    e h i q k r x y + - + - + + + +\n\n## Usage[edit]\n\nThe diff command is invoked from the command line, passing it the names of two\nfiles: diff original new. The output of the command represents the changes\nrequired to transform the original file into the new file.\n\nIf original and new are directories, then diff will be run on each file that\nexists in both directories. An option, -r, will recursively descend any\nmatching subdirectories to compare files between directories.\n\nAny of the examples in the article use the following two files, original and\nnew:\n\noriginal:\n\n    \n    \n    This part of the document has stayed the same from version to version. It shouldn't be shown if it doesn't change. Otherwise, that would not be helping to compress the size of the changes. This paragraph contains text that is outdated. It will be deleted in the near future. It is important to spell check this dokument. On the other hand, a misspelled word isn't the end of the world. Nothing in the rest of this paragraph needs to be changed. Things can be added after it.\n\n| new:\n\n    \n    \n    This is an important notice! It should therefore be located at the beginning of this document! This part of the document has stayed the same from version to version. It shouldn't be shown if it doesn't change. Otherwise, that would not be helping to compress the size of the changes. It is important to spell check this document. On the other hand, a misspelled word isn't the end of the world. Nothing in the rest of this paragraph needs to be changed. Things can be added after it. This paragraph contains important new additions to this document.\n\n| The command diff original new produces the following normal diff output:\n\n    \n    \n    0a1,6 > This is an important > notice! It should > therefore be located at > the beginning of this > document! > 11,15d16 < This paragraph contains < text that is outdated. < It will be deleted in the < near future. < 17c18 < check this dokument. On --- > check this document. On 24a26,29 > > This paragraph contains > important new additions > to this document.\n\nNote: Here, the diff output is shown with colors to make it easier to read.\nThe diff utility does not produce colored output; its output is plain text.\nHowever, many tools can show the output with colors by using syntax\nhighlighting.  \n---|---|---  \n  \nIn this traditional output format, a stands for added, d for deleted and c for\nchanged. Line numbers of the original file appear before a/d/c and those of\nthe new file appear after. The less-than and greater-than signs (at the\nbeginning of lines that are added, deleted or changed) indicate which file the\nlines appear in. Addition lines are added to the original file to appear in\nthe new file. Deletion lines are deleted from the original file to be missing\nin the new file.\n\nBy default, lines common to both files are not shown. Lines that have moved\nare shown as added at their new location and as deleted from their old\nlocation.^[10] However, some diff tools highlight moved lines.\n\n## Output variations[edit]\n\n### Edit script[edit]\n\nAn ed script can still be generated by modern versions of diff with the -e\noption. The resulting edit script for this example is as follows:\n\n    \n    \n    24a This paragraph contains important new additions to this document. . 17c check this document. On . 11,15d 0a This is an important notice! It should therefore be located at the beginning of this document! .\n\nIn order to transform the content of file original into the content of file\nnew using ed, we should append two lines to this diff file, one line\ncontaining a w (write) command, and one containing a q (quit) command (e.g. by\nprintf \"w\\nq\\n\" >> mydiff). Here we gave the diff file the name mydiff and the\ntransformation will then happen when we run ed -s original < mydiff.\n\n### Context format[edit]\n\nThe Berkeley distribution of Unix made a point of adding the context format\n(-c) and the ability to recurse on filesystem directory structures (-r),\nadding those features in 2.8 BSD, released in July 1981. The context format of\ndiff introduced at Berkeley helped with distributing patches for source code\nthat may have been changed minimally.\n\nIn the context format, any changed lines are shown alongside unchanged lines\nbefore and after. The inclusion of any number of unchanged lines provides a\ncontext to the patch. The context consists of lines that have not changed\nbetween the two files and serve as a reference to locate the lines' place in a\nmodified file and find the intended location for a change to be applied\nregardless of whether the line numbers still correspond. The context format\nintroduces greater readability for humans and reliability when applying the\npatch, and an output which is accepted as input to the patch program. This\nintelligent behavior isn't possible with the traditional diff output.\n\nThe number of unchanged lines shown above and below a change hunk can be\ndefined by the user, even zero, but three lines is typically the default. If\nthe context of unchanged lines in a hunk overlap with an adjacent hunk, then\ndiff will avoid duplicating the unchanged lines and merge the hunks into a\nsingle hunk.\n\nA \"!\" represents a change between lines that correspond in the two files,\nwhereas a \"+\" represents the addition of a line, and a \"-\" the removal of a\nline. A blank space represents an unchanged line. At the beginning of the\npatch is the file information, including the full path and a time stamp\ndelimited by a tab character. At the beginning of each hunk are the line\nnumbers that apply for the corresponding change in the files. A number range\nappearing between sets of three asterisks applies to the original file, while\nsets of three dashes apply to the new file. The hunk ranges specify the\nstarting and ending line numbers in the respective file.\n\nThe command diff -c original new produces the following output:\n\n    \n    \n    *** /path/to/original timestamp --- /path/to/new timestamp *************** *** 1,3 **** --- 1,9 ---- + This is an important + notice! It should + therefore be located at + the beginning of this + document! + This part of the document has stayed the same from version to *************** *** 8,20 **** compress the size of the changes. - This paragraph contains - text that is outdated. - It will be deleted in the - near future. It is important to spell ! check this dokument. On the other hand, a misspelled word isn't the end of the world. --- 14,21 ---- compress the size of the changes. It is important to spell ! check this document. On the other hand, a misspelled word isn't the end of the world. *************** *** 22,24 **** --- 23,29 ---- this paragraph needs to be changed. Things can be added after it. + + This paragraph contains + important new additions + to this document.\n\nNote: Here, the diff output is shown with colors to make it easier to read.\nThe diff utility does not produce colored output; its output is plain text.\nHowever, many tools can show the output with colors by using syntax\nhighlighting.\n\n### Unified format[edit]\n\nThe unified format (or unidiff)^[11]^[12] inherits the technical improvements\nmade by the context format, but produces a smaller diff with old and new text\npresented immediately adjacent. Unified format is usually invoked using the\n\"-u\" command-line option. This output is often used as input to the patch\nprogram. Many projects specifically request that \"diffs\" be submitted in the\nunified format, making unified diff format the most common format for exchange\nbetween software developers.\n\nUnified context diffs were originally developed by Wayne Davison in August\n1990 (in unidiff which appeared in Volume 14 of comp.sources.misc). Richard\nStallman added unified diff support to the GNU Project's diff utility one\nmonth later, and the feature debuted in GNU diff 1.15, released in January\n1991. GNU diff has since generalized the context format to allow arbitrary\nformatting of diffs.\n\nThe format starts with the same two-line header as the context format, except\nthat the original file is preceded by \"---\" and the new file is preceded by\n\"+++\". Following this are one or more change hunks that contain the line\ndifferences in the file. The unchanged, contextual lines are preceded by a\nspace character, addition lines are preceded by a plus sign, and deletion\nlines are preceded by a minus sign.\n\nA hunk begins with range information and is immediately followed with the line\nadditions, line deletions, and any number of the contextual lines. The range\ninformation is surrounded by double at signs, and combines onto a single line\nwhat appears on two lines in the context format (above). The format of the\nrange information line is as follows:\n\n    \n    \n    @@ -l,s +l,s @@ optional section heading\n\nThe hunk range information contains two hunk ranges. The range for the hunk of\nthe original file is preceded by a minus symbol, and the range for the new\nfile is preceded by a plus symbol. Each hunk range is of the format l,s where\nl is the starting line number and s is the number of lines the change hunk\napplies to for each respective file. In many versions of GNU diff, each range\ncan omit the comma and trailing value s, in which case s defaults to 1. Note\nthat the only really interesting value is the l line number of the first\nrange; all the other values can be computed from the diff.\n\nThe hunk range for the original should be the sum of all contextual and\ndeletion (including changed) hunk lines. The hunk range for the new file\nshould be a sum of all contextual and addition (including changed) hunk lines.\nIf hunk size information does not correspond with the number of lines in the\nhunk, then the diff could be considered invalid and be rejected.\n\nOptionally, the hunk range can be followed by the heading of the section or\nfunction that the hunk is part of. This is mainly useful to make the diff\neasier to read. When creating a diff with GNU diff, the heading is identified\nby regular expression matching.^[13]\n\nIf a line is modified, it is represented as a deletion and addition. Since the\nhunks of the original and new file appear in the same hunk, such changes would\nappear adjacent to one another.^[14] An occurrence of this in the example\nbelow is:\n\n    \n    \n    -check this dokument. On +check this document. On\n\nThe command diff -u original new produces the following output:\n\n    \n    \n    --- /path/to/original timestamp +++ /path/to/new timestamp @@ -1,3 +1,9 @@ +This is an important +notice! It should +therefore be located at +the beginning of this +document! + This part of the document has stayed the same from version to @@ -8,13 +14,8 @@ compress the size of the changes. -This paragraph contains -text that is outdated. -It will be deleted in the -near future. - It is important to spell -check this dokument. On +check this document. On the other hand, a misspelled word isn't the end of the world. @@ -22,3 +23,7 @@ this paragraph needs to be changed. Things can be added after it. + +This paragraph contains +important new additions +to this document.\n\nNote: Here, the diff output is shown with colors to make it easier to read.\nThe diff utility does not produce colored output; its output is plain text.\nHowever, many tools can show the output with colors by using syntax\nhighlighting.\n\nNote that to successfully separate the file names from the timestamps, the\ndelimiter between them is a tab character. This is invisible on screen and can\nbe lost when diffs are copy/pasted from console/terminal screens.\n\n### Extensions[edit]\n\nThere are some modifications and extensions to the diff formats that are used\nand understood by certain programs and in certain contexts. For example, some\nrevision control systems\u2014such as Subversion\u2014specify a version number, \"working\ncopy\", or any other comment instead of or in addition to a timestamp in the\ndiff's header section.\n\nSome tools allow diffs for several different files to be merged into one,\nusing a header for each modified file that may look something like this:\n\n    \n    \n    Index: path/to/file.cpp\n\nThe special case of files that do not end in a newline is not handled. Neither\nthe unidiff utility nor the POSIX diff standard define a way to handle this\ntype of files. (Indeed, such files are not \"text\" files by strict POSIX\ndefinitions.^[15]) GNU diff and git produce \"\\ No newline at end of file\" (or\na translated version) as a diagnostic, but this behavior is not portable.^[16]\nGNU patch does not seem to handle this case, while git-apply does.^[17]\n\nThe patch program does not necessarily recognize implementation-specific diff\noutput. GNU patch is, however, known to recognize git patches and act a little\ndifferently.^[18]\n\n## Implementations and related programs[edit]\n\nChanges since 1975 include improvements to the core algorithm, the addition of\nuseful features to the command, and the design of new output formats. The\nbasic algorithm is described in the papers An O(ND) Difference Algorithm and\nits Variations by Eugene W. Myers^[19] and in A File Comparison Program by\nWebb Miller and Myers.^[20] The algorithm was independently discovered and\ndescribed in Algorithms for Approximate String Matching, by Esko Ukkonen.^[21]\nThe first editions of the diff program were designed for line comparisons of\ntext files expecting the newline character to delimit lines. By the 1980s,\nsupport for binary files resulted in a shift in the application's design and\nimplementation.\n\nGNU diff and diff3 are included in the diffutils package with other diff and\npatch related utilities.^[22]\n\n### Formatters and front-ends[edit]\n\nPostprocessors sdiff and diffmk render side-by-side diff listings and applied\nchange marks to printed documents, respectively. Both were developed elsewhere\nin Bell Labs in or before 1981.^[citation needed]^[discuss]\n\nDiff3 compares one file against two other files by reconciling two diffs. It\nwas originally conceived by Paul Jensen to reconcile changes made by two\npeople editing a common source. It is also used by revision control systems,\ne.g. RCS, for merging.^[23]\n\nEmacs has Ediff for showing the changes a patch would provide in a user\ninterface that combines interactive editing and merging capabilities for patch\nfiles.\n\nVim provides vimdiff to compare from two to eight files, with differences\nhighlighted in color.^[24] While historically invoking the diff program,\nmodern vim uses git's fork of xdiff library (LibXDiff) code, providing\nimproved speed and functionality.^[25]\n\nGNU Wdiff^[26] is a front end to diff that shows the words or phrases that\nchanged in a text document of written language even in the presence of word-\nwrapping or different column widths.\n\ncolordiff is a Perl wrapper for 'diff' and produces the same output but with\ncolorization for added and deleted bits.^[27] diff-so-fancy and diff-highlight\nare newer analogues.^[28] \"delta\" is a Rust rewrite that highlights changes\nand the underlying code at the same time.^[29]\n\nPatchutils contains tools that combine, rearrange, compare and fix context\ndiffs and unified diffs.^[30]\n\n### Algorithmic derivatives[edit]\n\nUtilities that compare source files by their syntactic structure have been\nbuilt mostly as research tools for some programming languages;^[31]^[32]^[33]\nsome are available as commercial tools.^[34]^[35] In addition, free tools that\nperform syntax-aware diff include:\n\n  * C++: zograscope, AST-based.^[36]\n  * HTML: Daisydiff,^[37] html-differ.\n  * XML: xmldiffpatch by Microsoft and xmldiffmerge for IBM.^[38]^[39]\n  * JavaScript: astii (AST-based).\n  * Multi-language: Pretty Diff (format code and then diff)^[40]\n\nspiff is a variant of diff that ignores differences in floating point\ncalculations with roundoff errors and whitespace, both of which are generally\nirrelevant to source code comparison. Bellcore wrote the original\nversion.^[41]^[42] An HPUX port is the most current public release. spiff does\nnot support binary files. spiff outputs to the standard output in standard\ndiff format and accepts inputs in the C, Bourne shell, Fortran, Modula-2 and\nLisp programming languages.^[43]^[44]^[41]^[45]^[42]\n\nLibXDiff is an LGPL library that provides an interface to many algorithms from\n1998. An improved Myers algorithm with Rabin fingerprint was originally\nimplemented (as of the final release of 2008),^[46] but git and libgit2's fork\nhas since expanded the repository with many of its own. One algorithm called\n\"histogram\" is generally regarded as much better than the original Myers\nalgorithm, both in speed and quality.^[47]^[48] This is the modern version of\nLibXDiff used by Vim.^[25]\n\n## See also[edit]\n\n  * Comparison of file comparison tools\n  * Delta encoding\n  * Difference operator\n  * Edit distance\n\n    * Levenshtein distance\n  * History of software configuration management\n  * Longest common subsequence problem\n  * Microsoft File Compare\n  * Microsoft WinDiff\n  * Revision control\n  * Software configuration management\n\n### Other free file comparison tools[edit]\n\n  * cmp\n  * comm\n  * tkdiff\n  * WinMerge (Microsoft Windows)\n  * meld\n  * Pretty Diff\n\n## References[edit]\n\n  1. ^ MacKenzie et al. \"Binary Files and Forcing Text Comparison\" in Comparing and Merging Files with GNU Diff and Patch. Downloaded 28 April 2007. [1] Archived 2017-12-19 at the Wayback Machine\n  2. ^ Eric S. Raymond (ed.), \"diff\" Archived 2014-01-31 at the Wayback Machine, The Jargon File, version 4.4.7\n  3. ^ IEEE Computer Society; The Open Group (26 September 2008). Standard for Information Technology\u2014Portable Operating System Interface (POSIX) Base Specifications, Issue 7. pp. 2599\u20132607. IEEE Std. 1003.1-2001 specifies traditional, \"ed script\", and context diff output formats; IEEE Std. 1003.1-2008 added the (by then more common) unified format.\n  4. ^ https://minnie.tuhs.org/cgi-bin/utree.pl?file=V5/usr/source/s1/diff1.c\n  5. ^ Jump up to: ^a ^b James W. Hunt; M. Douglas McIlroy (June 1976). \"An Algorithm for Differential File Comparison\" (PDF). Computing Science Technical Report, Bell Laboratories. 41. Archived (PDF) from the original on 2014-12-26. Retrieved 2015-05-06.\n  6. ^ Larry Wall (November 9, 1984). \"A patch applier--YOU WANT THIS!!!\". Newsgroup: net.sources. Usenet: 1457@sdcrdcf.UUCP. Archived from the original on February 19, 2022. Retrieved May 11, 2015.\n  7. ^ Larry Wall (November 29, 1984). \"patch version 1.2--YOU WANT THIS\". Newsgroup: net.sources. Usenet: 1508@sdcrdcf.UUCP. Archived from the original on March 21, 2020. Retrieved May 11, 2015.\n  8. ^ Larry Wall (May 8, 1985). \"patch version 1.3\". Newsgroup: net.sources. Usenet: 813@genrad.UUCP. Archived from the original on February 19, 2022. Retrieved May 11, 2015.\n  9. ^ diff \u2013 Shell and Utilities Reference, The Single UNIX Specification, Version 4 from The Open Group\n  10. ^ David MacKenzie; Paul Eggert; Richard Stallman (1997). Comparing and Merging Files with GNU Diff and Patch. Bristol: Network Theory. ISBN 978-0-9541617-5-0. Archived from the original on 2015-03-31. Retrieved 2015-03-17.\n  11. ^ \"Detailed Description of Unified Format\". GNU Diffutils (version 3.7, 7 January 2018). Archived from the original on 18 January 2020. Retrieved 29 January 2020.\n  12. ^ van Rossum, Guido. \"Unified Diff Format\". All Things Pythonic. Archived from the original on 2019-12-25. Retrieved 2020-01-29.\n  13. ^ 2.2.3 Showing Which Sections Differences Are in, GNU diffutils manual\n  14. ^ Unified Diff Format by Guido van Rossum, June 14, 2006\n  15. ^ http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_403 Archived 2013-04-29 at the Wayback Machine Section 3.206\n  16. ^ \"Incomplete Lines (Comparing and Merging Files)\". www.gnu.org.\n  17. ^ \"git: apply.c\". Git. 8 May 2023.\n  18. ^ \"patch.c\\src - patch.git - GNU patch\". git.savannah.gnu.org. \"In git-style diffs, the \"before\" state of each patch refers to the initial state before modifying any files,..\"\n  19. ^ E. Myers (1986). \"An O(ND) Difference Algorithm and Its Variations\". Algorithmica. 1 (2): 251\u2013266. CiteSeerX 10.1.1.4.6927. doi:10.1007/BF01840446. S2CID 6996809.\n  20. ^ Webb Miller; Eugene W. Myers (1985). \"A File Comparison Program\". Software: Practice and Experience. 15 (11): 1025\u20131040. CiteSeerX 10.1.1.189.70. doi:10.1002/spe.4380151102. S2CID 15489614.\n  21. ^ Esko Ukkonen (1985). \"Algorithms for Approximate String Matching\". Information and Control. 64 (1\u20133): 100\u2013118. doi:10.1016/S0019-9958(85)80046-2.\n  22. ^ GNU Diff utilities Archived 2015-03-16 at the Wayback Machine. Made available by the Free Software Foundation. Free Documentation. Free source code.\n  23. ^ \"merge (GNU RCS 5.10.0)\". gnu.org. Archived from the original on 18 September 2019. Retrieved 22 January 2021.\n  24. ^ Moolenaar, Bram. \"Vim documentation: diff\". vimdoc.sourceforge.net. Archived from the original on 16 February 2020. Retrieved 1 May 2020. \"The easiest way to start editing in diff mode is with the \"vimdiff\" command. This starts Vim as usual, and additionally sets up for viewing the differences between the arguments. vimdiff file1 file2 [file3] [file4] [...file8] This is equivalent to: vim -d file1 file2 [file3] [file4] [...file8]\"\n  25. ^ Jump up to: ^a ^b Brabandt, Christian (1 December 2018). \"The power of diff\". Vimways. Archived from the original on 2 December 2018. Retrieved 1 May 2020.\n  26. ^ \"gnu.org\". www.gnu.org. Archived from the original on 2020-08-11. Retrieved 2020-09-12.\n  27. ^ \"colordiff\". www.colordiff.org. Archived from the original on 2018-06-14. Retrieved 2018-06-14.\n  28. ^ \"diff-so-fancy\". So Fancy. 6 May 2023.\n  29. ^ Davison, Dan (8 May 2023). \"dandavison/delta\". GitHub.\n  30. ^ Waugh, Tim (12 June 2020). \"twaugh/patchutils\". GitHub. Archived from the original on 1 October 2020. Retrieved 28 June 2020.\n  31. ^ Horwitz, Susan (June 1990). \"Identifying the semantic and textual differences between two versions of a program\". ACM SIGPLAN Notices. 25 (6): 234\u2013245. CiteSeerX 10.1.1.49.3377. doi:10.1145/93548.93574. Archived from the original on 2010-06-12. Retrieved 2017-11-01.\n  32. ^ Yang, Wuu (July 1991). \"Identifying syntactic differences between two programs\". Software: Practice and Experience. 21 (7): 739\u2013755. CiteSeerX 10.1.1.13.9377. doi:10.1002/spe.4380210706. S2CID 10853673.\n  33. ^ Grass. Cdiff: A syntax directed Diff for C++ programs. Proceedings USENIX C++ Conf., pp. 181-193, 1992\n  34. ^ Compare++, http://www.coodesoft.com/ Archived 2011-11-29 at the Wayback Machine\n  35. ^ SmartDifferencer, http://www.semanticdesigns.com/Products/SmartDifferencer Archived 2009-10-14 at the Wayback Machine\n  36. ^ \"xaizek/zograscope\". GitHub. 26 May 2020. Archived from the original on 21 December 2020. Retrieved 27 June 2020.\n  37. ^ DaisyDiff, https://code.google.com/p/daisydiff/ Archived 2015-03-19 at the Wayback Machine\n  38. ^ xmldiffpatch, http://msdn.microsoft.com/en-us/library/aa302294.aspx Archived 2009-10-27 at the Wayback Machine\n  39. ^ xmldiffmerge, http://www.alphaworks.ibm.com/tech/xmldiffmerge Archived 2009-09-24 at the Wayback Machine\n  40. ^ Cheney, Austin. Pretty Diff - Documentation. http://prettydiff.com/documentation.php Archived 2012-07-31 at the Wayback Machine\n  41. ^ Jump up to: ^a ^b dontcallmedotcom. \"spiff\". GitHub. Archived from the original on 2015-03-26. Retrieved 2013-06-16.\n  42. ^ Jump up to: ^a ^b Nachbar, Daniel W (1999-12-01). \"HP-UX Porting and Archiving\". UK. Archived from the original on 2012-09-05. Retrieved 2013-06-13.\n  43. ^ \"SPIFF 1\". 1988-02-02. Archived from the original on 2016-10-02. Retrieved 2013-06-16.\n  44. ^ Nachbar, Daniel W (1988-02-02). \"Man page\". UK. Archived from the original on 2012-09-10. Retrieved 2013-06-16.\n  45. ^ Davide (2009-09-28). \"stackoverflow\". Archived from the original on 2022-02-19. Retrieved 2013-06-16.\n  46. ^ Libenzi, Davide. \"LibXDiff\". SourceForge FreshMeat. Archived from the original on 2020-07-01. Retrieved 2020-06-28.\n  47. ^ Nugroho, Yusuf Sulistyo; Hata, Hideaki; Matsumoto, Kenichi (January 2020). \"How different are different diff algorithms in Git?: Use --histogram for code changes\". Empirical Software Engineering: 790\u2013823. arXiv:1902.02467. doi:10.1007/s10664-019-09772-z. S2CID 59608676.\n  48. ^ \"algorithm - What's the difference between 'git diff --patience' and 'git diff --histogram'?\". Stack Overflow. Archived from the original on 2022-02-19. Retrieved 2020-06-28. \"This does indeed show that histogram diff slightly beats Myers, while patience is much slower than the others.\"\n\n## Further reading[edit]\n\n  * Paul Heckel (April 1978). \"A technique for isolating differences between files\". Communications of the ACM. 21 (4): 264\u2013268. doi:10.1145/359460.359467. S2CID 207683976.A technique for isolating differences between files\n  * A generic implementation of the Myers SES/LCS algorithm with the Hirschberg linear space refinement (C source code)\n\n## External links[edit]\n\nThe Wikibook Guide to Unix has a page on the topic of: Commands\n\n  * diff: compare two files \u2013 Shell and Utilities Reference, The Single UNIX Specification, Version 4 from The Open Group\n  * diff(1) \u2013 Plan 9 Programmer's Manual, Volume 1\n  * diff(1) \u2013 Inferno General commands Manual\n  * File comparison at Curlie\n  * JavaScript Implementation\n\n  * v\n  * t\n  * e\n\nUnix command-line interface programs and shell builtins  \n---  \nFile system|\n\n  * cat\n  * chattr\n  * chmod\n  * chown\n  * chgrp\n  * cksum\n  * cmp\n  * cp\n  * dd\n  * du\n  * df\n  * file\n  * fuser\n  * ln\n  * ls\n  * mkdir\n  * mv\n  * pax\n  * pwd\n  * rm\n  * rmdir\n  * split\n  * tee\n  * touch\n  * type\n  * umask\n\n  \nProcesses|\n\n  * at\n  * bg\n  * crontab\n  * fg\n  * kill\n  * nice\n  * ps\n  * time\n\n  \nUser environment|\n\n  * env\n  * exit\n  * logname\n  * mesg\n  * talk\n  * tput\n  * uname\n  * who\n  * write\n\n  \nText processing|\n\n  * awk\n  * basename\n  * comm\n  * csplit\n  * cut\n  * diff\n  * dirname\n  * ed\n  * ex\n  * fold\n  * head\n  * iconv\n  * join\n  * m4\n  * more\n  * nl\n  * paste\n  * patch\n  * printf\n  * read\n  * sed\n  * sort\n  * strings\n  * tail\n  * tr\n  * troff\n  * uniq\n  * vi\n  * wc\n  * xargs\n\n  \nShell builtins|\n\n  * alias\n  * cd\n  * echo\n  * test\n  * unset\n  * wait\n\n  \nSearching|\n\n  * find\n  * grep\n\n  \nDocumentation|\n\n  * man\n\n  \nSoftware development|\n\n  * ar\n  * ctags\n  * lex\n  * make\n  * nm\n  * strip\n  * yacc\n\n  \nMiscellaneous|\n\n  * bc\n  * cal\n  * expr\n  * lp\n  * od\n  * sleep\n  * true and false\n\n  \n  \n  * Categories\n    * Standard Unix programs\n    * Unix SUS2008 utilities\n  * List\n\n  \n  \n  * v\n  * t\n  * e\n\nPlan 9 command-line interface programs and shell builtins  \n---  \nFile system|\n\n  * chmod\n  * chgrp\n  * cmp\n  * cp\n  * dd\n  * du\n  * file\n  * gzip\n  * ls\n  * mkdir\n  * pwd\n  * rm\n  * split\n  * tee\n  * touch\n\n  \nProcesses|\n\n  * kill\n  * ps\n\n  \nUser environment|\n\n  * passwd\n  * who\n\n  \nText processing|\n\n  * awk\n  * basename\n  * comm\n  * diff\n  * ed\n  * eqn\n  * join\n  * sed\n  * sort\n  * spell\n  * strings\n  * tail\n  * tr\n  * troff\n  * uniq\n  * wc\n\n  \nShell builtins|\n\n  * echo\n  * test\n\n  \nNetworking|\n\n  * ip/ipconfig\n  * ip/ping\n  * netstat\n\n  \nSearching|\n\n  * grep\n\n  \nSoftware development|\n\n  * ar\n  * hoc\n  * lex\n  * nm\n  * strip\n  * yacc\n\n  \nMiscellaneous|\n\n  * bc\n  * cal\n  * fortune\n  * sleep\n\n  \n  \n  * Category\n\n  \n  \n  * v\n  * t\n  * e\n\nVersion control software  \n---  \nYears, where available, indicate the date of first stable release. Systems\nwith names in italics are no longer maintained or have planned end-of-life\ndates.  \nLocal only| | Free/open-source| \n\n  * RCS (1982)\n  * SCCS (1973)\n\n  \n---|---  \nProprietary|\n\n  * The Librarian (1969)\n  * Panvalet (1970s)\n  * PVCS (1985)\n  * QVCS (1991)\n\n  \nClient\u2013server| | Free/open-source| \n\n  * CVS (1986, 1990 in C)\n  * CVSNT (1998)\n  * QVCS Enterprise (1998)\n  * Subversion (2000)\n\n  \n---|---  \nProprietary|\n\n  * AccuRev SCM (2002)\n  * Azure DevOps\n    * Server (via TFVC) (2005)\n    * Services (via TFVC) (2014)\n  * ClearCase (1992)\n  * CMVC (1994)\n  * Dimensions CM (1980s)\n  * DSEE (1984)\n  * Integrity (2001)\n  * Perforce Helix (1995)\n  * SCLM (1980s?)\n  * Software Change Manager (1970s)\n  * StarTeam (1995)\n  * Surround SCM (2002)\n  * Synergy (1990)\n  * Team Concert (2008)\n  * Vault (2003)\n  * Visual SourceSafe (1994)\n\n  \nDistributed| | Free/open-source| \n\n  * BitKeeper (2000)\n  * Breezy (2017)\n  * Code Co-op (1997)\n  * Darcs (2002)\n  * DCVS (2002)\n  * Fossil (2007)\n  * Git (2005)\n  * GNU arch (2001)\n  * GNU Bazaar (2005)\n  * Mercurial (2005)\n  * Monotone (2003)\n\n  \n---|---  \nProprietary|\n\n  * Azure DevOps\n    * Server (via Git) (2013)\n    * Services (via Git) (2014)\n  * TeamWare (1992)\n  * Plastic SCM (2006)\n\n  \nConcepts|\n\n  * Baseline\n  * Branch\n    * Trunk\n  * Changeset\n  * Commit\n    * Gated\n  * Delta compression\n    * Interleaved\n  * File comparison\n  * Fork\n  * Merge\n  * Monorepo\n  * Repository\n  * Tag\n\n  \n  \n  * Category\n  * Comparison\n  * List\n\n  \n  \nRetrieved from\n\"https://en.wikipedia.org/w/index.php?title=Diff&oldid=1216179124\"\n\nCategories:\n\n  * 1974 software\n  * Free file comparison tools\n  * Formal languages\n  * Pattern matching\n  * Data differencing\n  * Standard Unix programs\n  * Unix SUS2008 utilities\n  * Plan 9 commands\n  * Inferno (operating system) commands\n\nHidden categories:\n\n  * Webarchive template wayback links\n  * Articles with short description\n  * Short description matches Wikidata\n  * All articles with unsourced statements\n  * Articles with unsourced statements from May 2023\n  * Articles with unsourced statements from February 2015\n  * Articles prone to spam from May 2012\n  * Articles with Curlie links\n\n  * This page was last edited on 29 March 2024, at 15:41 (UTC).\n  * Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n  * Privacy policy\n  * About Wikipedia\n  * Disclaimers\n  * Contact Wikipedia\n  * Code of Conduct\n  * Developers\n  * Statistics\n  * Cookie statement\n  * Mobile view\n  * Edit preview settings\n\n", "frontpage": false}
