{"aid": "40026460", "title": "Why Vim syntax highlighting breaks sometimes (2022)", "url": "https://devnonsense.com/posts/vim-syntax-highlighting/", "domain": "devnonsense.com", "votes": 1, "user": "gautamsomani", "posted_at": "2024-04-13 21:47:02", "comments": 0, "source_title": "why vim syntax highlighting breaks sometimes", "source_text": "why vim syntax highlighting breaks sometimes\n\n# why vim syntax highlighting breaks sometimes\n\n2022-06-12 #vim #aretext\n\nVim was my preferred text editor for nearly eighteen years, until I switched\nto aretext in 2021. I appreciated vim\u2019s efficiency and ubiquity, the way I\ncould rely on it regardless of what project I was working on or what machine I\nhad ssh\u2019d into. Like any software, however, vim reflects the time in which it\nwas written. In many cases, vim optimizes for speed above all else, an\napproach that made sense given the limitations of late \u201990s computers. Nowhere\nis this trade-off more apparent than in vim\u2019s implementation of syntax\nhighlighting.\n\nVim syntax highlighting first appeared in version 5, which was released in\n1998. Syntax highlighting quirks have confused vim users ever since. A quick\nInternet search yields many bug reports, such as this rather plaintive Reddit\npost from 2015 (\"[Vim] breaks the syntax highlighting. All the time. It\u2019s\nunbearable...\"). The Vim Tips Wiki has a full page titled simply \u201cFix syntax\nhighlighting\u201d.\n\nWith its typical candor, the vim user guide explains how syntax highlighting\ncan go awry:\n\n> Vim doesn\u2019t read the whole file to parse the text. It starts parsing\n> wherever you are viewing the file. That saves a lot of time, but sometimes\n> the colors are wrong. A simple fix is hitting CTRL-L. Or scroll back a bit\n> and then forward again.\n\nIt is easy to confuse vim\u2019s syntax highlighter, as shown in the screencast\nbelow:\n\n00:00-00:00\n\nWhen the user jumps to the last line, vim starts reparsing after the /* token,\nso it fails to recognize the end of the comment. In this case, the simple\nheuristic of reparsing around the current view produces an incorrect result.\n\nVim provides several knobs to control the \u201csync point\u201d from which the syntax\nhighlighter begins parsing. One can set the sync point to the beginning of the\ndocument using :syntax sync fromstart or from a fixed number of lines before\nthe edited line using :syntax sync minlines={N}. This is often prohibitively\nslow for large documents, especially since the parser needs to rerun after\nevery edit. Alternatively, the options ccomment and javaComment use heuristics\nspecifically for C-style and Java-style comments, but this doesn\u2019t solve the\ngeneral case.\n\nIt is also possible to set the sync point based on a regular expression. We\ncan see an example in the default Python syntax highlighting rules:\n\n    \n    \n    \" Sync at the beginning of class, function, or method definition. syn sync match pythonSync grouphere NONE \"^\\%(def\\|class\\)\\s\\+\\h\\w*\\s*[(:]\"\n\nSuch rules are easy to get wrong, either by missing edge cases or slowing down\nthe editor. This isn\u2019t theoretical: I\u2019ve seen incorrect highlights from\nseveral of vim\u2019s built-in syntax languages, including mainstream ones like\nJSON and Python.\n\nAnother anomaly can occur when highlighting a large document. After a timeout\ncontrolled by the redrawtime setting, vim will stop highlighting. The result\nis disorienting:\n\nUsers have reported a few workarounds: increasing redrawtime, configuring a\ndifferent regular expression engine using set re=1... or maybe it\u2019s set re=0\naccording to someone else? Both of vim\u2019s regular expression engines\n(backtracking and NFA-based) have worst-case exponential time complexity, so\nyour mileage may vary.\n\nSo where do we go from here? The neovim developers are attempting to replace\nvim\u2019s syntax highlighter with tree-sitter, a widely used incremental parsing\nlibrary. Tree-sitter maintains a full parse tree for the document, using some\nclever algorithms from Tim Wagner\u2019s PhD dissertation^1 to update the tree as\nthe document changes. When experimental support for tree-sitter was announced\nin neovim 0.5 last summer, the small part of the Internet that cares about\nthis stuff nearly lost its mind. I haven\u2019t tried it myself, though.\n\nAretext, the minimalist vim clone I have been working on, has its own approach\nfor fast and accurate incremental syntax highlighting. More on that in a\nfuture post.\n\n  1. Wagner, T. A. (1997). Practical algorithms for incremental software development environments. University of California, Berkeley. \u21a9\ufe0e\n\n", "frontpage": false}
