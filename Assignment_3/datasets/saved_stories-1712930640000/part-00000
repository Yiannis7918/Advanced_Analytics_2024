{"aid": "40010370", "title": "My MiniZinc Page", "url": "http://www.hakank.org/minizinc/index.html", "domain": "hakank.org", "votes": 1, "user": "Tomte", "posted_at": "2024-04-12 08:01:50", "comments": 0, "source_title": "My MiniZinc page", "source_text": "My MiniZinc page\n\n# My MiniZinc page\n\n(The original of this file is http://www.hakank.org/minizinc/index.html.)\n\nThis page was created by Hakan Kjellerstrand (hakank@gmail.com).\n\nAlso, see my My Zinc page which includes information about and models for G12\nZinc.\n\n## MiniZinc constraint programming system\n\nMiniZinc is a very interesting constraint programming system/modeling language\nwith a high level syntax. From the MiniZinc page:\n\n> MiniZinc is a medium-level constraint modelling language. It is high-level\n> enough to express most constraint problems easily, but low-level enough that\n> it can be mapped onto existing solvers easily and consistently. It is a\n> subset of the higher-level language Zinc. We hope it will be adopted as a\n> standard by the Constraint Programming community.\n>\n> FlatZinc is a low-level solver input language that is the target language\n> for MiniZinc. It is designed to be easy to translate into the form required\n> by a solver.\n\nSome important links:\n\n  * Main page\n  * MiniZinc Handbook, including a Tutorial, User Manual, and Reference Manual\n  * Download page Source from git clone http://www.minizinc.org/repos/libminizinc\n  * Forum\n  * MiniZinc IDE\n  * MiniZinc Project GitHub page (GitHub)\n  * Coursera courses using MiniZinc as the modeling language by Jimmy Ho Man Lee and Peter Stuckey: Basic Modeling for Discrete Optimization, Solving Algorithms for Discrete Optimization, and Advanced Modeling for Discrete Optimization\n\nSolvers In order to solve a problem stated in the MiniZinc modeling language,\na FlatZinc solver must be used. Here is a listing of some FlatZinc solvers.\n\n  * The MiniZinc distribution contains the following solvers:\n\n    * Gecode\n    * CBC (MIP)\n    * Chuffed\n  * Gecode/FlatZinc. Requires that Gecode is installed.\n  * The ECLiPSe Constraint Programming System library(minizinc) (and library(flatzinc) provides 3 different solvers which corresponds to ECLiPSe's \"normal\" solvers: * fzn_ic, see library(ic) * fzn_fd, see library(fd) * fzn_eplex, see library(eplex), which in turn can use different solvers, e.g. the commercial Cplex, XPress-MP, or the open source COIN solvers symclp, clpcbc.\n  * SICStus Prolog (from version 4.0.5 and onward): Zinc interface - library(zinc)\n  * JaCoP (Java Constraint Programming solver): Fz2jacop\n  * Google or-tools\n  * SCIP (Solving Constraint Integer Programs)\n  * fzntini. A SAT solver based on Tinisat.\n  * fzn2smt: Using SMT/SAT.\n  * Neng-Fa Zhou's BProlog solver, newer version for MiniZinc Challenge 2012: flatzinc2012.pl\n  * Picat, section \"MiniZinc Challenge\" (this was the version we submitted to MiniZinc Challenge 2013)\n  * Mistral 2.0\n  * Numberjack\n  * MiniCSP clause learning CSP solver (based on MiniSAT)\n  * fz_izplus (note: the web page is in Japanese)\n  * MinisatID: SAT/Lazy solver\n  * Opturion CPX Optimizer: CP/SAT solver\n  * Chuffed by Geoff Chu\n  * OscaR/CBLS Backend for MiniZinc by Gustav Bj\u00f6rdal and Jean-No\u00ebl Monette\n\n## Utilities\n\n#### Emacs mode\n\nminizinc.el is a simple MiniZinc (major) mode for Emacs, heavily based on the\nProlog model prolog.el (written by Masanobu UMEDA); to be honest I mostly\nreplaced \"Prolog\" with \"MiniZinc\" and some other adjustments. The file still\nhave the interactive mode etc but that will (of course) not work for MiniZinc\nsince it don't work like Prolog. I mostly use it for syntax highlightning and\ncommenting.\n\n## My MiniZinc models\n\nThe following is a list of (some of) my models: simple puzzles and not so\nsimple puzzles, standard operation research / integer programming examples,\nand some global constraints (that are not in the MiniZinc globals.mzn). Some\nare just examples of modelling in MiniZinc.\n\nAlmost all models are commented with sources or inspirations, and quite a few\nhave the main constraints generalized as a predicate.\n\nAll files (models, datafiles, etc) are (or will be) available at the Github\nrepository: github.com/hakank/hakank/tree/master/minizinc.\n\n#### Contents\n\nThe models are collected in the following categories:\n\n  * Puzzles/recreational mathematics, small, and large\n  * Operations research, linear programming, integer programming\n  * Non linear / float variable problems\n  * Combinatorial problems\n  * Global constraints (decompositions)\n  * Martin Gardner's Puzzles and Problems\n  * Martin Chlond's Integer Programming Puzzles\n  * Models based on Martin Chlond's Puzzle articles in Informs Transations on Education\n  * Other models\n\n### Puzzles, small, and large\n\n  * 1d_rubiks_cube.mzn: 1D Rubik's cube (including GAP code for solving the problem using group theory)\n  * 1d_rubiks_cube2.mzn: 1D Rubik's cube (including GAP code for solving the problem using group theory). This version use only permutations arrays.\n  * 225_divisor.mzn: Smallest number divisible by 225 that consists of all 1s and 0s\n  * 3_coins.mzn: 3 coins (THT), in exactly 3 flips make HHH or TTT\n  * 3_jugs.mzn: 3 jugs problem (as shortest path problem)\n  * 3_jugs2.mzn: 3 jugs problem (using shortest_path_model.mzn)\n  * 3_jugs2_all.mzn: 3 jugs problem (using shortest_path_model.mzn), searches for all solutions (which happens to be unique)\n  * 18_hole_golf.mzn: A golf (i.e. shortest program) version of random 18-hole golf generation. Length: 76 chars.\n  * 18_hole_golf2.mzn: A golf (i.e. shortest program) version of random 18-hole golf generation. Length: 61 chars.\n  * 30_bottles.mzn: Bottle and wine problems (Vaderlind)\n  * a_card_trick_1.mzn: A card placement problem by Donald Preece (via Peter Cameron's blog post A card trick, 1)\n  * a_puzzle.mzn: The \"8809 = 6 ...\" puzzle (See God Play Dice: A puzzle)\n  * a_round_of_golf.mzn: A round of golf puzzle (Dell Logic Puzzles)\n  * aaa_bbb_ccc.mzn: AAA+BBB+CCC=BAAC (Mind Your Decisions problem)\n  * abc_endview.mzn: ABC End View grid puzzle (a.k.a. \"Easy as ABC\", \"Last Man Standing\")\n  * added_corner.mzn: Added corner puzzle\n  * ages2.mzn: Ages problem from CTK Insights When Two Wrongs Make One Right\n  * alphametic2mzn.pl: Alphametic 2 Mzn. A Perl program converting alphametic puzzles to a MiniZinc model, including optimizing a variable. Examples:\n\n    * perl alphametic2mzn.pl \"SEND+MORE+MONEY\"\n    * perl alphametic2mzn.pl \"SEND+MOST+MONEY\" MOST max (maximizing the MOST variable)\n  * allocating_developments.mzn: Allocating developments\n  * anniversaries.mzn: Anniversaries (Logic4Fun)\n  * another_kind_of_magic_square.mzn: Another kind of magic square (from \"Fun with Numb3ers\": Another kind of magic square)\n  * arch_friends.mzn: Arch friends puzzle (Dell Logic Puzzles)\n  * archery_puzzle.mzn: Archery puzzle (Sam Loyd)\n  * are_you_the_one.mzn: Are you the one? problem\n  * arithmetic_ring.mzn: Arithmetic ring problem\n  * arrow.mzn: Simple grid problem (from the Swedish blog post Pilen [translated \"Arrow\"])\n  * artificial_intelligence.mzn: Alphametic problem (from Erwin Kalvelagen Alphametics (3))\n  * atom_smasher.mzn: Digital Atom Smasher. Alphametic problem: sqrt(ATOM) = A + TO + M\n  * autoref.mzn: Auto referential puzzle\n  * averbach_1.2.mzn: Example 1.2 in Averbach & Chein \"Problem Solving Through Recreational Mathematics\"\n  * averbach_1.3.mzn: Example 1.3 in Averbach & Chein \"Problem Solving Through Recreational Mathematics\"\n  * averbach_1.4.mzn: Example 1.4 in Averbach & Chein \"Problem Solving Through Recreational Mathematics\"\n  * averbach_1.5.mzn: Example 1.5 in Averbach & Chein \"Problem Solving Through Recreational Mathematics\"\n  * babysitting.mzn: Babysitting puzzle (Dell Logic Puzzles)\n  * bales_of_hay.mzn: Bales of hay puzzle\n  * bananas.mzn: Bananas problem.\n  * bank_card.mzn: Bank card puzzle\n  * barrels.mzn: Barrels problem (From September Magic Contest 2014)\n  * before_and_after.mzn: Before and After (Logic4Fun)\n  * bertand_russell_puzzle.mzn: Bertrand Russell puzzle\n  * binary_puzzle.mzn: Binary puzzle\n  * binary_sudoku.mzn: Binary Sudoku\n  * binero.mzn: Binero grid puzzle (from Scampi) (cf binoxxo.mzn)\n  * binoxxo.mzn: Binoxxo grid puzzle (cf binero.mzn)\n  * birthdays_2010.mzn: A simple birthday puzzle of my own, based on a coincidence of my and my brother's birth years.\n  * blueberry_muffins.mzn: Blueberry muffins problem (Brown Buffalo Logic Puzzles)\n  * bobsledders_puzzle.mzn: Bobsledders puzzle\n  * breaking_news.mzn: Breaking news puzzle (Dell Logic Puzzles)\n  * bridge_and_torch_problem.mzn: Bridge and torch problem, crossing a bridge with a torch (a.k.a. The Midnight Train, and Dangerous crossing). Data files:\n\n    * bridge_and_torch_problem1.dzn: original data, with 4 persons\n    * bridge_and_torch_problem2.dzn: 5 persons\n    * bridge_and_torch_problem3.dzn: 6 persons, max 2 persons may cross at the same time\n    * bridge_and_torch_problem3_3.dzn: 6 persons, max 3 persons may cross at the same time\n    * bridge_and_torch_problem4.dzn: 10 persons\n    * bridge_and_torch_problem5.dzn: 5 persons\n    * bridge_and_torch_problem6.dzn: 4 persons\n    * bridge_and_torch_problem7.dzn: 3 persons\n    * bridge_and_torch_problem8.dzn: 4 persons (from Choco's U2planning problem)\n    * bridge_and_torch_problem9.dzn: 4 persons (from Martin Erwig: \"Escape from Zurg: An Exercise in Logic Programming\")\n  * broken_weights.mzn: Broken weights problem\n  * buckets.mzn: Buckets problem (minimizing differences of masses in four buckets)\n  * building_blocks.mzn: Building blocks (Dell Logic Puzzles)\n  * bus.mzn: Bus puzzle (from rec.puzzles FAQ)\n  * calculs_d_enfer.mzn: Calculs d'enfer puzzle (from the NCL manual)\n  * calculs_d_enfer2.mzn: Calculs d'enfer puzzle (from the NCL manual), alternative model\n  * candies.mzn: Candies problem (from HackerRank)\n  * candles.mzn: Odometer problem from Cat Talk\n  * cashier_change.mzn: Cashier change problem (coin problem)\n  * calvin_puzzle.mzn: Calvin puzzle\n  * chandelier_balancing.mzn: Chandelier balancing (PuzzlOR)\n  * changepoint_detection.mzn: Changepoint detection, mix float and integer\n  * changepoint_detection_int.mzn: Changepoint detection, all integers\n  * climbing_stairs.mzn: Climbing stairs\n  * coins_grid.mzn: Coins Grid (Tony Hurlimann)\n  * combination_locks.mzn: Combination locks (PuzzlOR)\n  * coins3.mzn: Minimum mumber of coins that allows one to pay exactly any amount smaller than one Euro\n  * coins3b.mzn: Minimum mumber of coins that allows one to pay exactly any amount smaller (here we also decide about the denominations of the coins)\n  * coins_problem.mzn: Minimum mumber of coins that allows one to pay exactly any amount smaller than one Euro (alternative solution based on OPL code)\n  * coins_41_58.mzn: Minimize number of coins - with the same amount of the different denominations - that sums to 41.58 GBP\n  * col_sum_puzzle.mzn: Find out values in a matrix, given column and row sums and some hints.\n  * congress.mzn: Congress puzzle (from XPress Mosel)\n  * controversy_about_the_weekday.mzn: Controversy about the weekday\n  * cookie_bake_off.mzn: Cookie bake off (PuzzlOr)\n  * countdown.mzn: CountDown Game\n  * cube_sum.mzn: Sum a number with the minimum number of different cubes\n  * crossfigure.mzn: Crossfigure problem (CSPLib problem 21)\n  * crossword.mzn: Crossword solving (standard constraint programming example)\n  * crossword2.mzn: Crossword solving (standard constraint programming example), more general approach\n  * crossword_bratko.mzn: Crossword solving (example from Bratko \"Prolog Programming for Artificial Intelligence\", 4th edition)\n  * MiniZinc crossword page: This is a collection of 72 problem instances (from Gecode's crossword model). The model, general approach and benchmark is described in the blog post Crossword construction in MiniZinc using table constraints - a small benchmark on \"72 Gecode problems\"\n  * crystal_maze.mzn: Crystal maze problem\n  * crypt_reversed.mzn: Crypt reversed puzzle: x + reversed(x) = z where all different(x) and all_different(z) (Requires MiniZinc 2.0)\n  * crypta.mzn: crypta, alphametic problem (standard Prolog benchmark)\n  * crypto.mzn: crypto, alphametic problem (standard Prolog benchmark), constraint programming model\n  * crypto_ip.mzn: crypto, alphametic problem (standard Prolog benchmark), integer programming model\n  * cur_num.mzn: Curious Number (Dudeney)\n  * defending_castle.mzn: Defending the Castle (Cut the knot)\n  * dennys_menu.mzn: Denny's Menu problem (How many combinations of $2,$4,$6,$8 will give $10?)\n  * devils_word.mzn: Devil's Word problem (see the Devil's word page)\n  * digital_roots.mzn: Digital roots\n  * digits_of_the_square.mzn: Digits of the square problem\n  * dimes.mzn: Dimes puzzle (rec.puzzles FAQ)\n  * dinner.mzn: A dinner problem\n  * dividing_the_spoils.mzn: Dividing the spoils (Sam Loyd)\n  * divisible_by_7.mzn: Divisible by 7 (Sam Loyd)\n  * divisible_by_1_to_1.mzn: Find a number divisible by 1 through 9 (for a \"truncated\" number)\n  * divisible_by_9_through_1.mzn: divisible by 9 through 1 for a \"truncated\" number\n  * divisors_ending_in_0_to_9.mzn: Divisors ending in 0 to 9\n  * domino.mzn: Solitaire Domino (placing of Domino tiles) domino2.mzn: Solitaire Domino (placing of Domino tiles), faster version. Data:\n\n    * domino0.dzn: Gecode's example 0\n    * domino1.dzn: Gecode's example 1\n    * domino2.dzn: Gecode's example 2\n    * domino3.dzn: Gecode's example 3\n    * domino4.dzn: Gecode's example 4\n    * domino5.dzn: Gecode's example 5\n    * domino_ecl.dzn: ECLiPSe's example (from domino.ecl)\n    * domino_sicstus_a.dzn: SICStus' example (from dominoes.ecl, instance \"a\")\n    * domino_sicstus_51.dzn: SICStus' example (from dominoes.ecl, instance 51)\n    * domino_sicstus_71.dzn: SICStus' example (from dominoes.ecl, instance 71)\n    * domino_sicstus_72.dzn: SICStus' example (from dominoes.ecl, instance 72)\n    * domino_sicstus_81.dzn: SICStus' example (from dominoes.ecl, instance 81)\n    * domino_sicstus_82.dzn: SICStus' example (from dominoes.ecl, instance 82)\n    * domino_sicstus_91.dzn: SICStus' example (from dominoes.ecl, instance 91)\n    * domino_sicstus_101.dzn: SICStus' example (from dominoes.ecl, instance 101)\n    * domino_sicstus_111.dzn: SICStus' example (from dominoes.ecl, instance 111)\n    * domino_sicstus_121.dzn: SICStus' example (from dominoes.ecl, instance 121)\n    * domino_sicstus_181.dzn: SICStus' example (from dominoes.ecl, instance 181)\n    * domino_sicstus_182.dzn: SICStus' example (from dominoes.ecl, instance 182)\n    * domino_sicstus_201.dzn: SICStus' example (from dominoes.ecl, instance 201)\n    * domino_sicstus_221.dzn: SICStus' example (from dominoes.ecl, instance 221)\n    * domino_sicstus_251.dzn: SICStus' example (from dominoes.ecl, instance 251)\n    * domino_vaderlind_1.dzn: Problem 1 from Paul Vaderlind's Swedish puzzle book \"Vaderlinds specialblandning: Sudoku, Kakuro och andra rutiga tankelekar\" (tr. ~ \"Vaderlind's special brew: Sudoku, Kakuro, and other squared thought games\")\n    * domino_vaderlind_2.dzn: Problem 2 from Paul Vaderlind's Swedish puzzle book \"Vaderlinds specialblandning: Sudoku, Kakuro och andra rutiga tankelekar\"\n    * domino_vaderlind_3.dzn: Problem 3 from Paul Vaderlind's Swedish puzzle book \"Vaderlinds specialblandning: Sudoku, Kakuro och andra rutiga tankelekar\"\n    * domino_simonis.dzn: Problem from Helmut Simonis' \"Dominoes as a Constraint Problem\", page 1\n    * domino_glaeser.dzn: Problem from \"Thinking Mathematically\", p. 172\n  * donald.mzn: Alphametic puzzle: DONALD + GERALD = ROBERT\n  * donald2.mzn: Alphametic puzzle: DONALD + GERALD = ROBERT (using carries)\n  * drinking_game.mzn: Drinking game (Marriott & Stuckey)\n  * drive_ya_nuts.mzn: Drive Ya Nuts puzzle (rotated \"nuts\")\n  * dudeney_numbers.mzn: Dudeney numbers (inspired by Pierre Schaus' Google CP/Python code in Dedeney numbers)\n  * einav_puzzle.mzn: Solving the A programming puzzle from Einav\n  * eliza_pseudonym7.mzn: Eliza Pseudonym of Puzzlania 7\n  * einstein_hurlimann.mzn: Einstein puzzle (variant of Zebra puzzle)\n  * einstein_opl.mzn: Einstein puzzle (variant of Zebra puzzle, from an OPL model)\n  * enclosed_tiles.mzn: Enclosed tiles (from Stack Overflow How do I write a program to find the tiles that are completely enclosed?)\n  * Enigma problems (originally from New Scientist Magazine). Also see Jim Randell's blog Enigmatic Code - Programming Enigma Puzzles for many problems and solutions.\n\n    * enigma_95_for_love_and_money.mzn: Enigma For love and money (#95)\n    * enigma_248_add_or_multiply.mzn: Enigma Add or multiply (#248)\n    * dice_with_a_difference_enigma_290.mzn: Dice with a difference (#290)\n    * enigma_843.mzn: Enigma How many are whole? (#843)\n    * enigma_counting_pennies.mzn: Enigma Counting pennies (from 2005)\n    * enigma_circular_chain.mzn: Enigma circular chain puzzle (#985)\n    * enigma_441_the_colored_painting.mzn: The colored paintinge (#445)\n    * enigma_1000.mzn: Enigma ENIGMA / M = TIMES puzzle (#1000)\n    * enigma_1001.mzn: Enigma What the hex? puzzle (#1001)\n    * chain_of_primes.mzn: Chain of primes (#1216)\n    * a_league_of_their_own_enigma_1217.mzn: A league of their own (#1217)\n    * age_changing.mzn: Age changing (Enigma 1224)\n    * enigma_1266_unhelpful_square.mzn: Enigma Unhelpful square (#1266)\n    * enigma_1293.mzn: Enigma Reverse Fahrenheitpuzzle (#1293)\n    * enigma_eight_times.mzn: Enigma Eight times puzzle (#1317)\n    * enigma_eight_times2.mzn: Enigma Eight times puzzle (#1317), alternative model\n    * enigma_five_fives.mzn: Enigma Five fives puzzle (#1358)\n    * enigma_planets.mzn: Enigma planets puzzle (#1396)\n    * enigma_birthday_magic.mzn: Enigma birthday puzzle (#1448)\n    * enigma_portuguese_squares.mzn: Enigma portuguese squares puzzle (#1476)\n    * enigma_eighteen.mzn: Enigma Eighteen puzzle (#1496)\n    * relative_sizes.mzn: Relative sizes puzzle (Enigma 1515)\n    * just_forgotten.mzn: Just forgotten puzzle (Enigma 1517)\n    * enigma_1530.mzn: Enigma Tom Daley (#1530)\n    * enigma_1535.mzn: Enigma Back to front (#1535)\n    * enigma_1553.mzn: Enigma Squares from squares (#1553)\n    * enigma_1555.mzn: Enigma Not a square (#1555)\n    * enigma_1557.mzn: Enigma Reverse Division (#1557)\n    * enigma_1568.mzn: Enigma Odd puzzle (#1568)\n    * enigma_1570.mzn: Enigma Set of cubes (#1570)\n    * enigma_1573.mzn: Enigma Sat, Sun, Mon, Tue (#1573)\n    * enigma_1574.mzn: Enigma Doubly square dates (#1574)\n    * enigma_1575.mzn: Enigma All our days (#1575)\n    * enigma_1576.mzn: The holly and the ivy and the... (#1576)\n    * enigma_1577.mzn: Enigma Happy New Year (#1577)\n    * enigma_1615.mzn: Enigma #1615\n    * enigma_1631.mzn: Enigma #1631: Joe's pyramid\n  * equation.mzn: Solve the problem 11x11=4; 22x22=16; 33x33=? (four interpretations)\n  * ett_ett_ett_ett_ett__fem.mzn: Alphametic puzzle ETT + ETT + ETT + ETT + ETT = FEM\n  * Project Euler problems:\n\n    * euler_1.mzn: Project Euler problem #1\n    * euler_2.mzn: Project Euler problem #2\n    * euler5.mzn: Project Euler problem #5, euler5b.mzn using functions (requires MiniZinc 2)\n    * euler_6.mzn: Project Euler problem #6\n    * euler_9.mzn: Project Euler problem #9\n    * euler_18.mzn: Project Euler problem #18\n    * euler_30.mzn: Project Euler problem #30\n    * euler31.mzn: Project Euler problem #31\n    * euler_39.mzn: Project Euler problem #39\n    * euler_52.mzn: Project Euler problem #52\n  * exodus.mzn: Exodus problem (Dell Logic Puzzle)\n  * family_riddle.mzn: Family riddle\n  * family_riddle2.mzn: Family riddle (variant)\n  * fair_xmas_duty_2014.mzn: Fair Xmas duty 2014 (Swedish holidays)\n  * farmer_and_cows.mzn: Farmer and cows problem\n  * farmer_and_cows_mip.mzn: Farmer and cows problem (MIP approach)\n  * fancy.mzn: Mr Greenguest puzzle (Fancy dress puzzle)\n  * farm_puzzle0.mzn: Farm puzzle, simple model\n  * farm_puzzle.mzn: Farm puzzle, more general model\n  * fill_a_pix.mzn: Fill-a-pix puzzle. Data files:\n\n    * fill_a_pix1.dzn\n    * fill_a_pix2.dzn\n    * fill_a_pix3.dzn\n  * final_student.mzn: Final Student problem (Chris Smith)\n  * find_missing_number.mzn: Find the missing number in a (random ordered) sequence of digits. Some data files:\n\n    * find_missing_number_50_11.dzn\n    * find_missing_number_50_12.dzn\n    * find_missing_number_50_12_random.dzn\n    * find_missing_number_50_13.dzn\n    * find_missing_number_50_14.dzn\n    * find_missing_number_50_15.dzn\n    * find_missing_number_50_19.dzn\n    * find_missing_number_50_1.dzn\n    * find_missing_number_50_21.dzn\n    * find_missing_number_50_22.dzn\n    * find_missing_number_50_23.dzn\n    * find_missing_number_50_24.dzn\n    * find_missing_number_50_27.dzn\n    * find_missing_number_50_2.dzn\n    * find_missing_number_50_31.dzn\n    * find_missing_number_50_32.dzn\n    * find_missing_number_50_36.dzn\n    * find_missing_number_50_37.dzn\n    * find_missing_number_50_38.dzn\n    * find_missing_number_50_39.dzn\n    * find_missing_number_50_3.dzn\n    * find_missing_number_50_42.dzn\n    * find_missing_number_50_43.dzn\n    * find_missing_number_50_44.dzn\n    * find_missing_number_50_45.dzn\n    * find_missing_number_50_46.dzn\n    * find_missing_number_50_49.dzn\n    * find_missing_number_50_4.dzn\n    * find_missing_number_50_50.dzn\n    * find_missing_number_50_5.dzn\n    * find_missing_number_50_6.dzn\n    * find_missing_number_50_9.dzn\n    * find_missing_number_100_54.dzn\n    * find_missing_number_250_101.dzn\n    * find_missing_number_250_123.dzn\n    * find_missing_number_250_169.dzn\n    * find_missing_number_250_192.dzn\n    * find_missing_number_250_196.dzn\n    * find_missing_number_250_205.dzn\n    * find_missing_number_250_235.dzn\n    * find_missing_number_250_34.dzn\n    * find_missing_number_250_56.dzn\n    * find_missing_number_250_62.dzn\n    * find_missing_number_250_83.dzn\n    * find_missing_number_500_463.dzn\n    * find_missing_number_500_83.dzn\n    * find_missing_number_1000_380.dzn\n  * find_missing_number2.mzn: Find the missing number in a (random ordered) sequence of digits. This variant has a little more \"intelligence\" than find_missing_number.mzn. Some data files:\n\n    * find_missing_number2_20_2.dzn\n    * find_missing_number2_20_1.dzn\n    * find_missing_number2_50_44.dzn\n    * find_missing_number2_50_33.dzn\n    * find_missing_number2_50_28.dzn\n    * find_missing_number2_50_21.dzn\n    * find_missing_number2_50_1.dzn\n    * find_missing_number2_50_18.dzn\n    * find_missing_number2_100_72.dzn\n    * find_missing_number2_100_69.dzn\n    * find_missing_number2_100_13.dzn\n    * find_missing_number2_150_85.dzn\n    * find_missing_number2_150_80.dzn\n    * find_missing_number2_150_76.dzn\n    * find_missing_number2_20_14.dzn\n    * find_missing_number2_200_155.dzn\n    * find_missing_number2_200_110.dzn\n    * find_missing_number2_250_78.dzn\n    * find_missing_number2_250_74.dzn\n    * find_missing_number2_250_4.dzn\n    * find_missing_number2_250_221.dzn\n    * find_missing_number2_250_194.dzn\n    * find_missing_number2_250_191.dzn\n    * find_missing_number2_250_18.dzn\n    * find_missing_number2_250_168.dzn\n    * find_missing_number2_250_101.dzn\n    * find_missing_number2_500_67.dzn\n    * find_missing_number2_500_55.dzn\n    * find_missing_number2_500_37.dzn\n    * find_missing_number2_500_368.dzn\n    * find_missing_number2_500_259.dzn\n    * find_missing_number2_500_166.dzn\n    * find_missing_number2_500_130.dzn\n    * find_missing_number2_1000_278.dzn\n  * fill_in_the_squares.mzn: Fill in the squares (Brainjammer problem)\n  * five_brigades.mzn: Five brigades (Dudeney)\n  * five_elements.mzn: Five elements problem (Charles W. Trigg)\n  * five_floors.mzn: Five floors problem (Dinesman)\n  * five_statements.mzn: Five statements problem (logic problem)\n  * five_translators.mzn: Five translators (set version)\n  * five_translators2.mzn: Five translators, matrix 0/1 version\n  * five_words_that_share_no_letter.mzn: Five words that share no letter. Data files: five_letter_words.dzn, five_letter_words_anagrams.dzn\n  * four_islands.mzn: Four islands puzzle (Dell Logic Puzzles)\n  * four_rectangles.mzn: Four rectangles puzzle (Mind Your Decisions problem)\n  * four_same_friends.mzn: Four same friends problem\n  * four_trees.mzn: Four trees problem (Logic4Fun)\n  * fractions.mzn: Fractions, alphametic problem (standard Prolog benchmark)\n  * franklin_8x8_magic_square.mzn: Benjamin Franklin's 8x8 Magic Square\n  * funny_dice.mzn: Funny dice problem (Sunday Times teaser 2739)\n  * futoshiki.mzn: Futoshiki puzzle\n  * general_store.mzn: General store problem (Sam Loyd)\n  * giant_cat_army_riddle.mzn: Giant Cat Army riddle\n  * golf_puzzle.mzn: Golf puzzle (Sam Loyd)\n  * good_burger_puzzlor.mzn: Good Burger (PuzzlOR)\n  * greatest_combination.mzn: Greatest combination problem (from StackOverflow Solving Prolog puzzle)\n  * grid_puzzle.mzn: Grid puzzle (from StackOverflow Riddle in Prolog)\n  * grime_puzzle.mzn: See Travels in a Mathematical World Blog A puzzle from James Grime about abcdef)\n  * grocery2.mzn: Grocery problem, alternative version\n  * guards_and_apples.mzn: Guards and apple problem\n  * guards_and_apples2.mzn: Guards and apple problem (variant)\n  * hanging_weights.mzn: Hanging weights puzzle\n  * hardy_1729.mzn: Hardy's 1729 problem\n  * harry_potter_seven_potions.mzn: Harry Potter's seven potions problem\n  * hidato.mzn: Hidato puzzle\n  * hidato_exists.mzn: Hidato puzzle, same as above but it use exists which is less efficient\n  * hidato_table.mzn: Hidato puzzle, using a table constraint.\n  * hidato_table2.mzn Hidato puzzle, can also solve non-rectangular problems.\n  * houses.mzn (from Algebra 1, Glencoe/McGraw-Hill, 1998 via kanren)\n  * huey_dewey_louie.mzn: Huey, Dewey, Louie, logical problem from Marriott & Stuckey \"Programming in Constraints\"\n  * heterosquare.mzn: Heterosquare problem\n  * how_old_am_i.mzn: How old am I (from Choco)\n  * hundred_doors_unoptimized.mzn: 100 doors problem, unoptimized (array version) (Rosetta code)\n  * hundred_doors_unoptimized2.mzn: 100 doors problem, unoptimized (array version, alternative model) (Rosetta code)\n  * hundred_doors_optimized.mzn: 100 doors problem, optimized (set version) (Rosetta code)\n  * hundred_doors_optimized_array.mzn: 100 doors problem, optimized (array version) (Rosetta code)\n  * hundred_fowls.mzn: Hundred Fowls puzzle\n  * high_iq_problem.mzn: \"High IQ problem\"\n  * its_a_tie.mzn: \"It's a tie\" problem (Dell Logic Puzzles)\n  * jellybeans.mzn: Jellybeans\n  * jobs_puzzle.mzn: Jobs puzzle (an automated reasoning problem, TPTP #19)\n  * kakuro.mzn: Kakuro puzzle\n  * kakuro2.mzn: Kakuro puzzle, alternative representation of the hints.\n  * kakuro3.mzn: Kakuro puzzle, simple version (inspired by BProlog's model)\n  * kaprekars_constant.mzn: Kaprekar's Constant\n  * kaprekars_constant2.mzn: Kaprekar's Constant (calculate the fixpoint for different lengths)\n  * kenken2.mzn: KenKen puzzle\n  * killer_sudoku.mzn: Killer Sudoku puzzle\n  * killer_sudoku2.mzn: Killer Sudoku puzzle, alternative representation of the hints\n  * kordemskys_palindrome_problem.mzn: Kordemsky's Palindrome problem\n  * krypto.mzn: Krypto puzzle (combine given numbers to an objective using the four basic arithmetic operations)\n  * labeled_dice.mzn: Labeled dice, from Jim Orlin \"Colored letters, labeled dice: a logic puzzle\"\n  * language_round_table.mzn: Languages spoken at a round table (from Stack overflow: A prolog program that reflects people sitting at a round table)\n  * latin_square_card_puzzle.mzn: Latin square card puzzle\n  * least_diff.mzn: Least diff problem: What is the smallest difference between two numbers X - Y if you must use all the digits (0..9) exactly once?\n  * least_diff1.mzn: Least diff problem: simpler version.\n  * lecture_series.mzn: Lecture series puzzle (Dell Logic Puzzles)\n  * letter_square.mzn: Letter square problem (Vaderlind). Data files:\n\n    * letter_square1.dzn\n    * letter_square59.dzn\n    * letter_square60.dzn\n    * letter_square89.dzn\n  * library_books.mzn: Library books (Logic4Fun)\n  * lights_out.mzn: Lights out puzzle\n  * lights_out_all.mzn: Variant of Lights out puzzle (flip all cells in row and column)\n  * limerick_primes.mzn: Limerick Primes (see John D. Cook: Limerick Primes). A more declarative version: limerick_primes2.mzn\n  * linear_combinations.mzn: Restore origin list from pair differences. For experiments use the MiniZinc-Python program linear_combinations.py\n  * loading_pair_of_dice.mzn: Loading a pair of dice (by cheating)\n  * locker.mzn: Locker puzzle.\n  * local_art_theft.mzn: Local Art Theft problem.\n  * local_art_theft1.mzn: Local Art Theft problem. A much more verbose model.\n  * logic_puzzle_aop.mzn: Logic puzzle (from The Art of Prolog)\n  * longest_subset_of_five_positions.mzn: Longest subset of five positions\n  * lost_at_sea.mzn: Lost at Sea (PuzzlOR)\n  * lucky_number.mzn: Lucky numbers (see God Plays Dice What is the origin of Kirillov's lucky number problem)\n  * m_queens_on_n_board.mzn: M queens on a N x N board\n  * M12.mzn: Solving the M12 puzzlea\n  * M12b.mzn: Solving the M12 puzzle. A variant using just permutations.\n  * magic.mzn: Magic square, integer programming (GLPK)\n  * magic3.mzn: Magic sequence, 3 x 3 (this formulations is from a standard Prolog benchark)\n  * magic4.mzn: Magic sequence, 4 x 4 (this formulations is from a standard Prolog benchark)\n  * magic_modulo_number.mzn: Magic modulo number (from Scampi)\n  * magic_sequence.mzn: Magic sequence (CSPLib)\n  * magic_sequence2.mzn: Magic sequence (CSPLib), alternative model\n  * magic_sequence3.mzn: Magic sequence (CSPLib), alternative model\n  * magic_sequence4.mzn: Magic sequence (CSPLib), alternative model\n  * magic_series.mzn: Magic series\n  * magic_square.mzn: Magic squares\n  * magic_square_function.mzn: Magic squares using some extra function (requires MiniZinc 2.0)\n  * magic_square_associate.mzn: Associative Magic squares\n  * magic_square_frenicle_form.mzn: Magic squares with symmetry breaking (Fr\u00c3\u00a9nicle standard form)\n  * magic_square_primes.mzn: Magic squares with only prime numbers\n  * magic_square_water_retention.mzn: Magic squares water retention problem\n  * mamas_age.mzn: Mama's age (Dudeney)\n  * manasa_and_stones.mzn: Manasa and Stones problem\n  * marathon.mzn: Marathon puzzle (XPress example), MIP model\n  * marathon2.mzn: Marathon puzzle (XPress example), CP model\n  * max_number_of_occurences.mzn: Max number of occurrences (StackOverflow)\n  * message_sending.mzn: Message sending puzzle (cf all_paths_graph.mzn)\n  * minesweeper.mzn: Minesweeper puzzle\n  * minesweeper_inverse.mzn: Minesweeper \"inverse\" problem (given the bombs, calculate the number of neighbours)\n  * minesweeper_model.mzn: Minesweeper puzzle, general model to be used with the following problems:\n\n    * minesweeper_0.mzn\n    * minesweeper_1.mzn\n    * minesweeper_2.mzn\n    * minesweeper_3.mzn\n    * minesweeper_4.mzn\n    * minesweeper_5.mzn\n    * minesweeper_6.mzn\n    * minesweeper_7.mzn\n    * minesweeper_8.mzn\n    * minesweeper_9.mzn\n    * minesweeper_basic3.mzn\n    * minesweeper_basic4.mzn\n    * minesweeper_basic4x4.mzn\n    * minesweeper_config_page2.mzn\n    * minesweeper_config_page3.mzn\n    * minesweeper_german_Lakshtanov.mzn\n    * minesweeper_splitter.mzn\n    * minesweeper_wire.mzn\n  * miss_manners.mzn: Miss Manners' seating problem (standard benchmark for rule engines). Data:\n\n    * miss_manners_16.dzn: 16 quests\n    * miss_manners_64.dzn: 64 quests\n    * miss_manners_128.dzn: 128 quests\n  * mislabeled_boxes.mzn: Mislabeled boxes (theorem proving problem, TPTP #12)\n  * missing_digit.mzn: Missing digit probblem\n  * money_change.mzn: Simple money change problem\n  * monks_and_doors.mzn: Eight monks and four doors\n  * monorail.mzn: Monorail puzzle (Grand Tour). Data:\n\n    * monorail1.dzn: 4x4 problem (with 3 hints)\n    * monorail2.dzn: 6x6 problem (with 7 hints)\n    * monorail3.dzn: 6x11 problem (with 16 hints)\n    * monorail4.dzn: 6x14 problem (with 18 hints)\n    * monorail5.dzn: 8x21 problem (with 52 hints)\n    * monorail6.dzn: 6x6 problem (with 7 hints)\n  * move_one_coin.mzn: Move one coin puzzle (Scam Nation)\n  * movement_puzzle.mzn: Movement puzzle (1d array)\n  * moving_coins.mzn: Moving coins in a triangle (generalized model)\n  * mr_smith.mzn: Mr Smith problem (IF Prolog)\n  * muddle_management.mzn: Muddle management (Logic4Fun)\n  * multipl.mzn: Unknown multiplication (standard Prolog benchmark)\n  * multiplicative_sequence.mzn: Multiplicative sequence\n  * murder.mzn: Murder puzzle\n  * music_men.mzn: Music men puzzle\n  * n_puzzle.mzn: N-puzzle, e.g. 8-puzzle, 15-puzzle\n  * narcissistic_numbers.mzn: Narcissistic numbers\n  * norwegian_mathematical_olympiad_problem.mzn: Norwegian Mathematical Olympiad Problem\n  * number_lock.mzn: Number lock problem (Presh Talwalkar, MindYourDecisions)\n  * number_lock2.mzn: Number lock problem (Presh Talwalkar, MindYourDecisions), another version\n  * number_of_regions.mzn: Number of regions (Vaderlind, Guy, Larson: \"The Inquisitive Problem Solver\", problem 21)\n  * number_puzzle.mzn: A number puzzle (of some kind)\n  * numbrix.mzn: Numbrix (cf Hidato), MIP model\n  * numeric_keypad.mzn: Numeric keypad problem\n  * nonogram.mzn: Nonogram, a.k.a. Painting by numbers. Also, see \"nonogram_regular.mzn\" and \"nonogram_create_automaton.mzn\" below.\n  * nonogram_regular.mzn: Nongoram, a.k.a. Painting by numbers. This version uses the regular constraints and is much faster than nonogram.mzn. Note that the data models must be in a specific format (listing the finite states for the regular constraint, converted (for example) by the Perl program make_nonogram_automata.pl. Below is a list of data instances with the proper format. The data files used with nonogram_regular.mzn is the \"*_aut.dzn\" version. Also, see \"nonogram_create_automaton.mzn\" below.\n\n    * Bear: nonogram_bear_aut.dzn nonogram_bear.dzn\n    * Car: nonogram_car_aut.dzn nonogram_car.dzn\n    * Castle: nonogram_castle_aut.dzn nonogram_castle.dzn\n    * Crocodile: nonogram_crocodile_aut.dzn nonogram_crocodile.dzn\n    * Difficult: nonogram_difficult_aut.dzn nonogram_difficult.dzn\n    * Dragonfly: nonogram_dragonfly_aut.dzn nonogram_dragonfly.dzn\n    * Griddler: nonogram_griddler_aut.dzn nonogram_griddler.dzn\n    * Hard: nonogram_hard_aut.dzn nonogram_hard.dzn\n    * Hen: nonogram_hen_aut.dzn nonogram_hen.dzn\n    * House: nonogram_house_aut.dzn nonogram_house.dzn\n    * Lambda: nonogram_lambda_aut.dzn nonogram_lambda.dzn\n    * n2: nonogram_n2_aut.dzn nonogram_n2.dzn\n    * n3: nonogram_n3_aut.dzn nonogram_n3.dzn\n    * n4: nonogram_n4_aut.dzn nonogram_n4.dzn\n    * n5: nonogram_n5_aut.dzn nonogram_n5.dzn\n    * n6: nonogram_n6_aut.dzn nonogram_n6.dzn\n    * Nonunique: nonogram_nonunique_aut.dzn nonogram_nonunique.dzn\n    * Optima: nonogram_optima_aut.dzn nonogram_optima.dzn\n    * P199: nonogram_p199_aut.dzn nonogram_p199.dzn\n    * P200: nonogram_p200_aut.dzn nonogram_p200.dzn\n    * ps: nonogram_ps_aut.dzn nonogram_ps.dzn\n    * Simple: nonogram_simple_aut.dzn nonogram_simple.dzn\n    * Simple2: nonogram_simple2_aut.dzn nonogram_simple2.dzn\n    * Soccer player: nonogram_soccer_player_aut.dzn nonogram_soccer_player.dzn\n    * Problem from Stack Overflow: Solving Nonograms (Picross): nonogram_stack_overflow.dzn\n    * t1: nonogram_t1_aut.dzn nonogram_t1.dzn\n    * t2 (with \"zero clue\") nonogram_t2.dzn\n    * t3: nonogram_t3_aut.dzn nonogram_t3.dzn\n    * gondola: nonogram_gondola.dzn\n  * nonogram_create_automaton.mzn: Nonogram solver. This version uses the regular constraints and is much faster than nonogram.mzn. In contract to nonogram_regular.mzn it creates the automata from the Nonogram patterns (clues), so no preprocessing step is needed. The data file used is the files shown above for \"nonogram_regular.mzn\" with no \"_aut\" in its name.\n  * nonogram_create_automaton2.mzn: Nonogram solver. A version of nonogram_create_automaton.mzn that calculates the states as par variables (not decision variables). Note: It is the recommended model, especially for solvers that have an optimized version of the regular constraint. Data files: besides the data files above, there is now a dedicated page for Nonogram problems: MiniZinc: Nonogram problem instances in .dzn format (from JaCoP's distribution) .\n  * nonogram_gchq.mzn: Nonogram GCHQ problem with fixed black cells. From Can you solve the British spy agency\u00e2\u20acTMs ridiculously difficult Christmas puzzle?\n  * nonogram_regexp.mzn: Nonogram solver using the regular(x,pattern) global constraint where pattern is a regular expression (regexp). See above for some problem instances. Note: This require that MiniZinc has been complied with Gecode for the support of regexps.\n  * number_generation.mzn: Number generation (cf Devil's word)\n  * number_square.mzn: Recreational mathematics (Pascal Van Hentenryck: \"The OPL Optimization Programming Language\")\n  * numberlink.mzn: Numberlink grid puzzle Instances:\n\n    * numberlink1.dzn\n    * numberlink2.dzn\n    * numberlink3.dzn\n    * numberlink4.dzn\n    * numberlink5.dzn\n    * numberlink6.dzn\n    * numberlink7.dzn\n  * OandX.mzn: Three Dimensional Nought and Crosses (Tic-Tac-Toe) (Williams)\n  * odd_even_sequences.mzn: Odd/even sequence (from Presh Talwalkar How many odd-even sequences are there?)\n  * office_blocked.mzn: Office blocked (Logic4Fun)\n  * office_blocked2.mzn: Office blocked, alternative approach (Logic4Fun)\n  * olympic.mzn: Olympic problem (standard Prolog benchmark)\n  * one_off_digit.mzn: One off digit problem (Richard Wiseman)\n  * pair_divides_the_sum.mzn: Pair divides the sum problem\n  * pandigital_numbers.mzn: Pandigital numbers (any base <= 10)\n  * party_mixing.mzn: Party mixing (mixing people at different tables),\n  * party_mixing2.mzn: simpler version (skipping the matrix)\n  * peaceableArmyOfQueens.mzn: Peaceable Army of Queens\n  * perfect_square_sequence.mzn: Perfect square sequence\n  * permutation_symmetry.mzn: Permutation symmetry\n  * philosophical_railway.mzn: Philosophical railway\n  * photo_hkj.mzn: Photo problem\n  * photo_hkj2_model.mzn: Photo problem model\n  * photo_hkj2_data1.mzn: Data for photo problem\n  * photo_hkj2_data2.mzn: Data for photo problem\n  * photo_stackoverflow.mzn: Another photo problem\n  * photo_stackoverflow2.mzn: Another photo problem, version 2\n  * photo_stackoverflow3.mzn: Another photo problem, version 3\n  * place_number.mzn: Placing Number Puzzle\n  * place_number2.mzn: Placing Number Puzzle, alternative approach. Also includes a 12-number problem.\n  * place_number3.mzn: Placing Number Puzzle, a more general approach than place_number.mzn and place_number2.mzn\n  * planet_colonization_puzzlor.mzn: Planet Colonization (PuzzlOR problem)\n  * primes_in_a_circle.mzn: Primes in a circle\n  * puzzle1.mzn: Yet another column/row sum problem\n  * pyramid_of_numbers.mzn: Pyramid of numbers (Rosetta code)\n  * queens3.mzn: n-queens problem\n  * queens4.mzn: n-queens problem, using alldifferent\n  * queens_and_knights.mzn: Queens and Knights\n  * queens_diversity.mzn: n-queens diversity problem\n  * queens_ip.mzn: n-queens problem, integer programming model (GLPK)\n  * queens_viz.mzn: n-queens problem, using CP-Viz\n  * raven_puzzle.mzn: \"Polyglot puzzle\" (from Raven, Swedish)\n  * reindeer_ordering.mzn: Reindeer ordering (Decision Management Community problem)\n  * remarkable_sequence.mzn: Remarkable sequence (from an Alma-0 model), i.e Langford problem n=9, k=3.\n  * reveal_the_mapping.mzn: Reveal the mapping (from David Bolton: Programming Contest 46 - Reveal the Mapping)\n  * reverse_multiples.mzn: Reverse multiples\n  * rock_star_dressing_problem.mzn: Rock star dressing problem\n  * rogo.mzn: Rogo grid puzzle, rogo2.mzn (faster version with symmetry breaking) Problem instances:\n\n    * rogo_mike_trick.dzn: The example from Mike Trick (Operations Research, Sudoko, Rogo, and Puzzles)\n    * rogo_20110106.dzn: Daily paper problem from 20110106\n    * rogo_20110107.dzn: Daily paper problem from 20110107\n  * rogo3.mzn: Rogo grid puzzle, a yet faster version using table constraint for the connections and some other improvements. Note that this version also use the \"Best\" points (which has been added to the problem files). Data files:\n\nrogo_mike_trick.dzn: The example from Mike Trick (Operations Research, Sudoko,\nRogo, and Puzzles)\n\n    * rogo_20110106.dzn: Problem from 20110106\n    * rogo_20110107.dzn\n    * rogo_20110709.dzn\n    * rogo_20110709.dzn\n    * rogo_20110710.dzn\n    * rogo_20110711.dzn\n    * rogo_20110712.dzn\n    * rogo_20110713.dzn\n    * rogo_intro1.dzn: Intro problem 1\n    * rogo_intro2.dzn: Intro problem 2\n    * rogo_intro3.dzn: Intro problem 3\n    * rogo_intro4.dzn: Intro problem 4\n    * rogo_intro5.dzn: Intro problem 5\n    * rogo_intro6.dzn: Intro problem 6\n    * rogo_intro7.dzn: Intro problem 7\n    * rogo_intro8.dzn: Intro problem 8\n  * rook_path.mzn: Rook path (on a square matrix)\n  * rotating_discs.mzn: Rotating discs (from Jean-Luis Lauriere's ALICE paper, page 84f)\n  * rotation.mzn: Nokia's \"rotation puzzle\"\n  * rotation2.mzn: Nokia's \"rotation puzzle\", using just permutation arrays.\n  * rubiks_cube.mzn: Rubik's cube, find the optimal number of moves. Using only the 6 permutations representing the moves, and their inverses.\n  * safe_cracking.mzn: Safe cracking\n  * samurai_puzzle.mzn: Samura\u00c3 \u0304 grid puzzle\n  * seating_plan.mzn: Seating plan (Daniel L. Dudley, The Nut Cracker suit #1)\n  * secret_santa.mzn: Secret Santa problem\n  * secret_santa2.mzn: Another Secret Santa problem\n  * self_referential_quiz.mzn: Self-referential quiz\n  * self_referential_sentence.mzn: Self-referential sentence\n  * send_more_money.mzn: Alphametic puzzle: SEND + MORE = MONEY\n  * send_more_money2.mzn: Alphametic puzzle: SEND + MORE = MONEY, alternative model\n  * send_more_money_any_base.mzn: Alphametic puzzle: SEND + MORE = MONEY, in any base\n  * send_more_money_ip.mzn: Alphametic puzzle: SEND + MORE = MONEY, integer programming model (GLPK)\n  * send_most_money.mzn: Alphametic puzzle: SEND + MOST = MONEY (maximize MONEY)\n  * sequence_2_3.mzn: Simple permutation puzzle\n  * sequence_puzzle.mzn: Sequence puzzle (from StackOverflow: What's a more efficient implementation of this puzzle?)\n  * seseman.mzn: Seseman Convent problem (see Seseman Convent problem)\n  * seseman2.mzn: Seseman Convent problem, generalized model\n  * set_puzzle.mzn: Solving SET Puzzles\n  * skyscraper.mzn: Skyscraper puzzle\n  * special_6_digit_number.mzn: Special 6 digit number problem (Mind Your Decisions)\n  * spy_girls.mzn: Spy girls problem\n  * smullyan_knights_knaves.mzn: Raymond Smullyan's Knights and Knaves problems\n  * smullyan_knights_knaves_normals.mzn: Raymond Smullyan's Knights, Knaves, and Normals problems\n  * smullyan_knights_knaves_normals_bahava.mzn: Raymond Smullyan's Knights, Knaves, and Normals at the Island of Bahava problems\n  * smullyan_lion_and_unicorn.mzn: Raymond Smullyan's Lion and Unicorn problems\n  * smullyan_portia.mzn: Raymond Smullyan's Portia problems\n  * soccer_puzzle.mzn: Soccer puzzle\n  * sokoban.mzn: Sokoban problem\n  * solitaire_battleship.mzn: Solitaire Battleship\n  * spinning_disks.mzn: The spinning disks problem from Skeptic's Play\n  * state_name_puzzle.mzn: State name puzzle (from Rosetta Code: )\n  * strata.mzn: Strata grid puzzle\n  * strimko.mzn: Strimko puzzle (Latin squares with \"streams\") Some data files:\n\n    * strimko_002.dzn\n    * strimko_067.dzn\n    * strimko_068.dzn\n    * strimko_070.dzn\n  * strimko2.mzn: Strimko puzzle (Latin squares with \"streams\"). This variant uses an easier instance representation than strimko.mzn Some data files:\n\n    * strimko2_002.dzn\n    * strimko2_067.dzn\n    * strimko2_068.dzn\n    * strimko2_069.dzn\n    * strimko2_070.dzn\n  * students_and_languages.mzn: Students and Languages problem (Antoni Niederlinski)\n  * subsets_100.mzn: Subsets 100 (rec.puzzles FAQ)\n  * successive_number_problem.mzn: Successive number problem (from God Plays Dice: A cute number theory puzzle)\n  * sudoku_alldifferent.mzn: Sudoku, using the global constraint alldifferent. In the directory sudoku problems2 are all the 91 Sudoku problems (of different dimensions: 9x9, 16x16, and 25x25) from Gecode's Sudoku model sudoku.cpp.\n  * sudoku_gcc.mzn: Sudoku, using the global cardinality constraint. sudoku_gcc_model.mzn, this is a general Sudoku to be included from a Sudoku problem instance. In the directory sudoku problems are all the 91 Sudoku problems (of different dimensions: 9x9, 16x16, and 25x25) from Gecode's Sudoku model sudoku.cpp.\n  * sudoku_ip.mzn: Sudoku, integer programming (GLPK)\n  * sudoku_multi.mzn: Multi-Sudoku (two connected Sudokus)\n  * sudoku_multi2.mzn: Multi-Sudoku (two connected Sudokus), a slightly different approach of connecting the two grids\n  * sudoku_pi_2008.mzn: Pi Day Sudoku 2008\n  * sudoku_pi.mzn: Pi Day Sudoku 2009\n  * sudoku_pi_2010.mzn: Pi Day Sudoku 2010\n  * sudoku_pi_2011.mzn: Pi Day Sudoku 2011\n  * sudoku_pi_day_2015.mzn: Pi Day Sudoku 2015\n  * sudoku_25x25_250.mzn: Sudoku 25 x 25 problen (very hardcoded, from a Prolog benchmark)\n  * sultans_children.mzn: Sultan's children problem\n  * sum_first_and_last.mzn: Sum first and last (grid puzzle) Requires MiniZinc 2.0\n  * sum_to_100.mzn: Five numbers should sum to 100, and all numbers must be divisible by 2 or 5\n  * sumbrero.mzn: Sumbrero puzzle\n  * super_number.mzn: Super number puzzle (the first i digits of a 10 digit number is divisible by i)\n  * survo_puzzle.mzn: Survo puzzle\n  * table_of_numbers.mzn: Table of numbers problem (from Fun With Num3ers Table of numbers with 5 rows and 5 columns)\n  * takuzu.mzn: Takuzu grid puzzle\n  * talisman_square.mzn: Talisman Square\n  * tantalizer_487_number_system.mzn: Tantalizer 487: Number System\n  * ten_statements.mzn: From Richard Wiseman It's the Friday Puzzle! (2012-07-20)\n  * tents_puzzle.mzn: Tents puzzle\n  * the_athletics_committee.mzn: The athletics committee problem (Peter Winkler)\n  * the_bomb.mzn: The bomb, logical puzzle (Janko \"Die Bombe\")\n  * the_family_puzzle.mzn: The family puzzle (from Drools Puzzle Round 2: The Family Puzzle)\n  * the_interns.mzn: The Interns problem (theorem proving problem, TPTP #18)\n  * three_in_a_row_puzzle.mzn: 3-in-a-row puzzle\n  * tennis_problem.mzn: Tennis problem (Jean-Loius Lauri\u00c3 \u0308re)\n  * tennis_tournament.mzn: Tennis tournament scheduling\n  * thick_as_thieves.mzn: Thick as thieves (Logic4Fun)\n  * thirteen_link_chain_puzzle.mzn: The 13-Link Chain Puzzle (just additions) (inpired by NY Times 'Wordplay' The 13-Link Chain Puzzle), Second approach (still just additions): thirteen_link_chain_puzzle2.mzn, Third approach: thirteen_link_chain_puzzle3.mzn (both additions and subtractions which is closer to the stated problem)\n  * three_consecutive_numbers.mzn: Three consecutive numbers (Mind Your Decisions problem)\n  * three_consecutive_numbers2.mzn: Three consecutive numbers, variant (Mind Your Decisions problem)\n  * three_digit.mzn: Three digit problem\n  * tickTackToe.mzn: Tick Tack Toe (Tic Tac Toe)\n  * tictactoe_avoidance.mzn: Tic-tac-toe avoidance (on a NxN board, place NxN-N 'X's without making three-in-a-row in any direction. Inspired by Richard Wiseman's It's the Friday Puzzle 20131115)\n  * timeslots_for_songs.: Timeslot problem (from Stack Overflow: What category of combinatorial problems appear on the logic games section of the LSAT?)\n  * timpkin.mzn: Mrs Timpkin's age problem (Dudeney)\n  * tomography.mzn: Discrete Tomography (one color model)\n  * tomography_n_colors.mzn: Discrete Tomography (n color model)\n  * torn_number.mzn: Torn number puzzle (Dudeney)\n  * triangles.mzn: Triangles problem\n  * tricky_multiple_question.mzn: Tricky multiple question\n  * tunapalooza.mzn: Tunapalooza puzzle (Dell Logic Puzzles)\n  * twelve_statements.mzn: Twelve statements puzzle\n  * twin_letters.mzn: Twin letters\n  * uzbekian_puzzle.mzn: Uzbekian puzzle\n  * virtual_chess_tournament.mzn: Virtual Chess Tournament problem (from OpenRules Blog (Jacob Feldman) Fisher vs. Kasparov vs. Karpov\n  * war_or_peace.mzn: War or peace problem (Alma-0)\n  * water_buckets1.mzn: Water bucket problem (generalized)\n  * who_killed_agatha.mzn: Who killed agatha? (The Dreadsbury Mansion Murder Mystery, a automated reasoning problem, TPTP #1)\n  * wijuko.mzn: Wijuko grid puzzle\n  * wiseman_problem_20131129.mzn: Problem from Richard Wiseman 20131129\n  * wolf_goat_cabbage_lp.mzn: Wolf, goat, cabbage problem (a.k.a. river crossing problem) using a LP model. Shows all (2) solutions.\n  * word_golf.mzn: Word golf (word chain)\n  * word_golf_n3.mzn: 3 letter words for Word golf\n  * word_golf_n4.mzn: 4 letter words for Word golf\n  * word_square.mzn: Word square: square matrix cross words (fill the whole square with unique words). (Data files: word_len3.mzn, word_len4.mzn, word_len5.mzn)\n  * wwr.mzn: alphametic problem: WRONG + WRONG = RIGHT\n  * xkcd.mzn: xkcd's knapsack problem (see the xkcd strip for the problem)\n  * xkcd_among_diff_0.mzn: xkcd's knapsack problem using the global constraint among_diff_0 (inspired by Helmut Simonis presentation Acquiring Global Constraint Models on CP2011)\n  * zebra_inverse.mzn: Zebra puzzle, using global constraint inverse instead of all_different\n  * zebra_icecream.mzn: \"Zebra like\" logic puzzle Icecream\n  * zebra_ip.mzn: Zebra puzzle, integer programming model (GLPK)\n  * zoo_buses_and_kids.mzn: Zoo, buses, and kids (DM Community)\n\n### Operations research, linear programming, integer programming, scheduling\n\n  * assignment.mzn: Assignment problem (Winston)\n  * assignment2.mzn: Assignment problem (Winston's swimming team example)\n  * assignment2_2.mzn: Assignment problem (Winston's swimming team example, expanded)\n  * assignment3.mzn: Assigment problem (Winston, celebreties on an island)\n  * assignment4.mzn: Yet another assigment problem\n  * assignment5.mzn: Yet another assigment problem\n  * assignment6.mzn: Assigment problem (GLPK:s example assign.mod)\n  * assignment_model.mzn: Assigment problem (model)\n  * best_host.mzn: Best host problem (from PuzzlOR)\n  * blending_problem.mzn: Blending problem\n  * bridges_to_somewhere.mzn: Bridges to Somewhere (from PuzzlOR)\n  * building_a_house.mzn: Simple scheduling problem: building a house (from OPL)\n  * building_a_house2.mzn: Simple scheduling problem: building a house (from Mozart/Oz)\n  * building_a_house_model.mzn: Simple scheduling problem: building a house, generalized model of the two examples above. Data files:\n\n    * building_a_house_opl.dzn: The scheduling problem from OPL\n    * building_a_house_mozart_oz.dzn: The scheduling problem from Mozart/Oz\n  * bus_scheduling.mzn: Bus scheduling (Taha)\n  * bus_scheduling_csplib.mzn: Bus driver scheduling (CSPLib problem 22). Data files:\n\n    * bus_scheduling_csplib_c1.dzn\n    * bus_scheduling_csplib_c1a.dzn\n    * bus_scheduling_csplib_c2.dzn\n    * bus_scheduling_csplib_r1.dzn\n    * bus_scheduling_csplib_r1a.dzn\n    * bus_scheduling_csplib_r2.dzn\n    * bus_scheduling_csplib_r3.dzn\n    * bus_scheduling_csplib_r4.dzn\n    * bus_scheduling_csplib_r5.dzn\n    * bus_scheduling_csplib_r5a.dzn\n    * bus_scheduling_csplib_t1.dzn\n    * bus_scheduling_csplib_t2.dzn\n  * capital_budget2.mzn: Capital Budget (Winston)\n  * chessset.mzn: Chess set problem (XPress)\n  * classify_department_employees.mzn: Classify Department Employees (Decision Management Community problem)\n  * choose_your_crew.mzn: Choose your crew (from PuzzlOR)\n  * coloring_ip.mzn: Map coloring, integer programming (inspired by the GLPK model color.mod)\n  * company_competition.mzn: (Christmas) Company Competition Problem: Mixing teams\n  * constraint.mzn: Optimizing a constraint (Williams)\n  * contiguity_mip.mzn: Contiguity constraint (MIP, using floats)\n  * contiguity_mip2.mzn: Contiguity constraint (using random 0/1)\n  * contractor_costs.mzn: Contractor costs (Sam Loyd)\n  * crew.mzn: Crew scheduling (Gecode)\n  * crew_overlapping_flights.mzn: Crew scheduling with overlapping flights (StackOverflow)\n  * crossbar.mzn: Crossbar problem (Prolog benchmark problem)\n  * critical_path1.mzn: Critical Path (Winston)\n  * cutting_stock_winston.mzn: Cutting stock problem (Winston)\n  * diet1.mzn: Diet problem (standard OR example)\n  * eyedrop_optimize.mzn: Optimize the time (hour) a number of different eye drops should be taken on a day (disperse each type as much as possible)\n  * eyedrop_optimize2.mzn: Optimize the time (hour) a number of different eye drops should be taken on a day (disperse each type as much as possible). This version don't use temporary varibles which makes it (much) faster for some solvers.\n  * fixed_charge.mzn: Fixed charged problem (OPL)\n  * facility_location_problem.mzn: Facility location problem\n  * football.mzn: Buying soccer players (lp_solve mailing list)\n  * freight_transfer.mzn: Freight Transfer (John Hooker)\n  * furniture.mzn: Furniture problem (best combination of offers to buy furnitures)\n  * furniture_moving.mzn: Optimizing furniture moving (Marriott and Stuckey)\n  * gap.mzn: Generalized Assignment Problem (GLPK, AMPL)\n  * giapetto.mzn: Simple optimization problem of maximizing profit\n  * hitchcock_transporation_problem.mzn: Hitchcock-Koopmans transportation problem\n  * home_improvement.mzn: Home improvement (from PuzzlOR)\n  * ice_cream.mzn: Ice cream production given monthly demand.\n  * integer_programming1.mzn: Simple integer programming problem\n  * investment_problem.mzn: Investment problem (constraint programming version)\n  * investment_problem_mip.mzn: Investment problem (MIP version)\n  * jobshop.mzn: Job-Shop Scheduling Problem, general approach. jobshop2.mzn outputs more informations. Data files\n\n    * jobshop_abz6.dzn: Instance ABZ6\n    * jobshop_mt06.dzn: Instance MT06\n    * jobshop_mt10.dzn: Instance MT10\n    * jobshop_newspaper.dzn (Classic Newspaper problem from French. Cf newspaper.mzn and newspaper0.mzn)\n    * More instances: jobshop_data (converted from Google or-tools' SVN repo)\n  * jssp.mzn: Job-Shop Scheduling Problem (GLPK) (this is the MT06 problem instance)\n  * knapsack_investments.mzn: Knapsack (investment) problem (Lundgren, R\u00f6nnqvist, V\u00e4rbrand: Optimeringsl\u00e4ra)\n  * kraftwerk_ticket_problem.mzn: Kraftwerk ticket problem\n  * lager.mzn: Stock model (Swedish)\n  * least_square_optimeringslara_286.mzn: Least sqauare (Lundgren, R\u00f6nnqvist, V\u00e4rbrand: Optimeringsl\u00e4ra)\n  * lightmeal.mzn: Lightmeal problem (Colmerauer)\n  * lightmeal2.mzn: Lightmeal problem (Colmerauer), integer programming version (and more general than lightmeal.mzn)\n  * make_a_good_burger.mzn: Make a Good Burger problem\n  * matchmaker.mzn: Matchmaker problem (from PuzzlOr)\n  * max_activity.mzn: Scheduling activities for kids (from StackOverflow Need help for defining appropriate constraints)\n  * max_activity2.mzn: Scheduling activities for kids, added 0 scores (from StackOverflow Need help for defining appropriate constraints)\n  * max_cut.mzn: Maximum cut problem (GLPK)\n  * max_flow_taha.mzn: Maximum flow problem (Taha)\n  * max_flow_winston1.mznMaximum flow problem (Winston)\n  * maxflow.mzn: Maximum flow problem (GLPK)\n  * mceverywhere.mzn: McEverywhere problem (PuzzlOR)\n  * mfasp.mzn: Minimum Feedback Arc Set Problem (GLPK)\n  * mfvsp.mzn: Minimum Feedback Vertex Set Problem (GLPK)\n  * misp.mzn: Maximum Independent Set Problem (GLPK) (cf maximal_independent_sets.mzn)\n  * movie_stars.mzn: Movie Stars (from PuzzlOR)\n  * mvcp.mzn: Minimum Vertex Cover Problem (GLPK)\n  * nadel.mzn: B.A. Nadel's construction problem\n  * newspaper0.mzn: Scheduling newspapers reading (French '82, Duncan '90), this is a simplified version of newspaper.mzn since it's quite overloaded with presentations stuff.\n  * newspaper.mzn: Scheduling newspapers reading (French '82, Duncan '90)\n  * number_of_days.mzn: Number of days problem (knapsack)\n  * nurse_rostering_with_availability.mzn: Scheduling (here nurse rostering) with an availability matrix (from Reconciling Scheduled shifts with availabilities)\n  * online_dating_service.mzn: Online Dating Service (Decision Management Community problem)\n  * or_matching.mzn: Matching of OR'ers (problem from the Nigel Lewis' Cupids with Computers)\n  * or_matching2.mzn: Matching of OR'ers (see above), MIP model.\n  * or_seating.mzn: Seating placement of OR'ers (inspired by Nigel Lewis' Cupids with Computers)\n  * organize_day.mzn: Scheduling, organizing a day (ECLiPSe)\n  * patient_no_21.mzn: Patient No. 21 (From PuzzlOR)\n  * pert.mzn: PERT problem (van Hentenryck)\n  * popsicle_stand.mzn: Popsicle stand problem (PuzzlOR)\n  * post_office_problem.mzn: Post office problem (Winston)\n  * post_office_problem2.mzn: Post office problem, generalized model (Winston)\n  * post_office_problem3.mzn: Post office problem, even more generalized model (Winston)\n  * product_configuration.mzn: Product configuration (John Hooker)\n  * relief_mission.mzn: Relief mission (from PuzzlOR)\n  * rostering.mzn: Rostering problem (Regin)\n  * schedule1.mzn: Scheduling using cumulative constraint (Sicstus)\n  * schedule2.mzn: Scheduling problem, yet another (from Shasha \"Puzzles for Programmers and Pros\", page 131f)\n  * scheduling_bratko.mzn: Scheduling problem from Ivan Bratko \"Prolog - programming for Artificial Intelligence\", example 1\n  * scheduling_bratko2.mzn: Scheduling problem from Ivan Bratko \"Prolog - programming for Artificial Intelligence\", example 2\n  * scheduling_chip.mzn: Scheduling problem from Nicolas Beldiceanu & Evelyne Contejean \"Introducing Global Constraints in CHIP\", page 3\n  * scheduling_with_assignments.mzn: Scheduling with assignments of the workers (and a lot of different outputs such as assignment matrices, schedules, and timelines for jobs as well as for the workers in a Gantt-like manner). It also supports precedences, enforcing non-idleness for the workers (flag allow_idle=false, see #10, Graham's bicycle assembly problem), and also enforce that the tasks must be done by \"nearby\" workers (collect_workers=true, see #14, perfect square placement). Data files:\n\n    * scheduling_with_assignments1.dzn: From Marriot & Stuckey \"Programming with Constraints\", page 112f (furniture moving)\n    * scheduling_with_assignments2.dzn: From Ivar Bratko: \"Prolog - - Programming for Artificial Intelligence\", 3rd edition, page 329ff. Includes precedences.\n    * scheduling_with_assignments3.dzn: Problem from Global constraints catalog (cumulative)\n    * scheduling_with_assignments4.dzn: From SICStus' documentation\n    * scheduling_with_assignments5.dzn: A harder test.\n    * scheduling_with_assignments6.dzn: From the OPL scheduling model (sched_intro.mod, building a house). Includes precedences.\n    * scheduling_with_assignments7.dzn: Another hard test.\n    * scheduling_with_assignments8.dzn: Much harder test.\n    * scheduling_with_assignments8b.dzn: Variant of scheduling_with_assignments8.dzn with precedences (is solved much faster).\n    * scheduling_with_assignments9.dzn: From Andreas Schutt, Thibaut Feydy, Peter J. Stuckey, Mark G. Wallace: \"Explaining the cumulative propagator\", page 2 (with precedences)\n    * scheduling_with_assignments10.dzn: Bicycle assembly problem (from R.L. Graham \"Combinatorial Scheduling Theory\")\n    * scheduling_with_assignments10b.dzn: Bicycle assembly problem (from R.L. Graham \"Combinatorial Scheduling Theory\"), variant: we don't allow idleness of the workers\n    * scheduling_with_assignments10c.dzn: Bicycle assembly problem (from R.L. Graham \"Combinatorial Scheduling Theory\"), variant: we don't allow idleness of the workers and increase to 3 teams\n    * scheduling_with_assignments10d.dzn: Bicycle assembly problem (from R.L. Graham \"Combinatorial Scheduling Theory\"), variant: we don't allow idleness of the workers and decrease the duration times with one units each\n    * scheduling_with_assignments11.dzn: Another problem from R.L. Graham \"Combinatorial Scheduling Theory\"\n    * scheduling_with_assignments12.dzn: Scheduling a dinner party (from Robert A. McGuigan: \"Scheduling Problems and Bin Packing\")\n    * scheduling_with_assignments13.dzn: Service of a plane (from Joseph Malkevitch: \"Is it on Time?\")\n    * scheduling_with_assignments14.dzn: A small perfect square placement problem, 14x14 (using collect_workers=true)\n    * scheduling_with_assignments14b.dzn: Harder perfect square placement problem, 112x112 (using collect_workers=true)\n    * scheduling_with_assignments15.dzn: Yet another problem from R.L. Graham \"Combinatorial Scheduling Theory\"\n    * scheduling_with_assignments16.dzn: Bin packing as a scheduling problem.\n    * scheduling_with_assignments16b.dzn: Bin packing as a scheduling problem (larger example).\n    * scheduling_with_assignments16c.dzn: Bin packing as a scheduling problem (simpler variant of scheduling_with_assignments16b.dzn).\n    * scheduling_with_assignments16d.dzn: Bin packing as a scheduling problem\n    * scheduling_with_assignments16e.dzn: Bin packing as a scheduling problem (minimize the number of disks for backup files); smaller variant where the sizes has been divided by 10: scheduling_with_assignments16e2.dzn\n    * scheduling_with_assignments16f.dzn: Bin packing as a scheduling problem (from R.L. Graham \"Combinatorial Scheduling Theory\")\n    * scheduling_with_assignments16g.dzn: Bin packing as a scheduling problem (printing business cards, from Stack Overflow)\n    * scheduling_with_assignments17.dzn: Simple scheduling example\n    * scheduling_with_assignments18.dzn: Scheduling of ship loading (from CHIP)\n    * scheduling_with_assignments19.dzn: Rectangle placement problem\n    * scheduling_with_assignments20.dzn: Grilling hamburgers problem\n    * scheduling_with_assignments21.dzn: Small example from \"Handbook of Scheduling\" (8 jobs and 3 workers)\n  * scheduling_with_multiple_workers.mzn: Scheduling with parallel machines.\n  * scheduling_speakers.mzn: Scheduling speakers (Rina Dechter)\n  * scheduling_speakers_optimize.mzn: Scheduling speakers with optimization objective (from Stack Overflow Optimizing working scheduling MiniZinc code - constraint programming)\n  * scheduling_speakers_optimize2.mzn: Scheduling speakers with optimization objective, faster model (from Stack Overflow Optimizing working scheduling MiniZinc code - constraint programming)\n  * scheduling_speakers_optimize3.mzn: Scheduling speakers with optimization objective, faster model with dual matrix (from Stack Overflow Optimizing working scheduling MiniZinc code - constraint programming)\n  * shopping_basket.mzn: Optimize a shopping basket with delivery costs. (Problem from StackOverflow How to use constraint programming for optimizing shopping baskets?)\n  * shopping_basket2.mzn: Optimize a shopping basked with delivery costs. Different representation where to buy the items. (Problem from StackOverflow How to use constraint programming for optimizing shopping baskets?)\n  * shopping_basket5.mzn: Optimize a shopping basket with delivery costs. A variant of shopping_basket2.mzn with a larger example (29 items and 37 shops) and other improvements. (Problem from StackOverflow How to use constraint programming for optimizing shopping baskets?)\n  * shopping_basket6.mzn: Optimize a shopping basket with delivery costs. A much faster variant of shopping_basket5.mzn. (Problem from StackOverflow How to use constraint programming for optimizing shopping baskets?)\n  * shopping_with_delivery_costs.mzn: Shopping with delivery costs.\n  * ski_assignment_problem.mzn: Ski assignment problem\n  * smallest_winning_electoral.mzn: Least amount of land that will make you President (2012 USA election) (From David Curran What is the least amount of land that will make you President? and Matthew Yglesias (Slate) The Geographically Smallest Winning Electoral College Map)\n  * smallest_winning_electoral2.mzn: Becoming President with 22% of the Votes (From David Curran Becoming President with 22% of the Votes\n  * social_golfers1.mzn: Social golfers (OPL)\n  * sportsScheduling.mzn: Sport scheduling\n  * spp.mzn: Shortest path problem, integer programming (GLPK)\n  * stable_marriage.mzn: Stable marriage\n  * stuckey_assignment.mzn: Assignment problem (Marriott and Stuckey)\n  * stuckey_seesaw.mzn: Balancing on a seesaw (Marriot and Stuckey)\n  * survivor.mzn: Survivor problem (from PuzzlOr)\n  * talent.mzn: Talent example (OPL)\n  * teambuilding.mzn: Teambuilding (OPL)\n  * timetable.mzn: Timetable of courses (from Alma-0)\n  * transportation.mzn: Transportation problem (ECLiPSe)\n  * transportation2.mzn: Transportation problem, generalized model\n  * tsp.mzn: Travelling Salesman Problem, integer programming (GLPK)\n  * transshipment.mzn: Transshipment problem (Winston)\n  * urban_planning.mzn: Urban planning (from PuzzlOr August 2013 Urban Planning)\n  * weights.mzn: Combine barbell/dumbbell weight plates. Data files (for my current home gym):\n\n    * weights_barbell.dzn: Barbell\n    * weights_dumbbell.dzn: Dumbbell (a pair)\n    * weights_dumbbell_one.dzn: Dumbbell (just one)\n  * work_shift_problem.mzn: Work shift scheduling problem (from SAS/OR 9.22 User's Guide)\n\n### Non linear and/or float variables problems\n\nThus includes some MIP problems. Note: Not all CP solvers can handle float\nvariables. As of writing (2014-05-20) these solvers are the one I've tested\nand that can manage some/many/most of these models:\n\n  * G12/mip (not all non linear constraints\n  * ECLiPSe/ic, ECLiPSe/eplex\n  * Gecode\n  * JaCoP\n\n  * 1RM.mzn: Weight training: Calculations of 1RM and comparing reps x weights.\n  * ages.mzn: Ages problem from Tony Hurlimann\n  * aprice.mzn: Agricultural pricing (Willams: \"Model building in MP\")\n  * arbitrage_loops.mzn: Arbitrage loops (currencies) Data files:\n\n    * arbitrage_loops1.dzn\n    * arbitrage_loops2.dzn\n    * arbitrage_loops3.dzn\n    * arbitrage_loops4.dzn\n    * arbitrage_loops5.dzn\n  * birthday_paradox.mzn: Birthday paradox (birthday problem)\n  * blending.mzn: Blending problem (OPL)\n  * box.mzn: Design a box\n  * building_design.mzn: Building design\n  * catenary.mzn: Catenary (shape of hanging chain)\n  * celsius_fahrenheit.mzn: Conversion from/to degree Celsius to/from degree Fahrenheit\n  * circle_intersection.mzn: Circle intersection (ECLiPSe)\n  * circling_squares.mzn: Circling the Squares (Dudeney)\n  * cookie_bake_off2.mzn: Cookie bake off (PuzzlOr)\n  * curve_fitting1.mzn: Curve fitting 1 (Williams)\n  * curve_fitting2.mzn: Curve fitting 2 (Williams)\n  * curve_fitting3.mzn: Curve fitting 3, least squares (Williams)\n  * cyclohexane.mzn: Cyclohexane problem (Dudeney)\n  * dea.mzn: Data Envelopment Analysis (DEA) model (GLPK example)\n  * decent.mzn: Decentralization (Williams)\n  * diet2.mzn: Diet problem, larger (GLPK example)\n  * dirichlet.mzn: Dirichlet problem (triangle problem)\n  * dynamical_optimization1.mzn: Dynamical optimization\n  * eq10.mzn: Problem with 10 equation (standard constraint programming problem)\n  * fixed_charged_transportation_problem.mzn: Fixed charged transportation problem\n  * food.mzn: Food manufacture problem (GLPK, AMPL)\n  * food2.mzn: Food manufacture problem, with extra constraints (GLPK, AMPL)\n  * game_theory_taha.mzn: Game theory, zero sum game (Taha, Operations Research)\n  * games.mzn: Simple game theory example (Vanderbei \"Linear Programming - Foundations - and Extensions\", page 147ff)\n  * golden_search.mzn: Golden search\n  * golden_spiral.mzn: Golden spiral (logarithmic spiral, Gecode)\n  * grocery_float.mzn: Grocery problem (7/11 problem) using floats.\n  * laplace.mzn: Laplace problem (from CLP(R))\n  * markov_chains.mzn: Markov chain of market shares (from \"Statistisk Dataanalys\")\n  * markov_chains_taha.mzn: Markov chains (fertlizer example from Taha \"Operations Research\")\n  * mortgage.mzn: Mortgage (standard constraint programming problem)\n  * multiplication_addition.mzn: When multiplication is the same as addition.\n  * nonlin2.mzn: Non linear problem (Taha)\n  * nonlin_cylider.mzn: Creating a cylinder (from the ECLiPSe book)\n  * numerica_p19.mzn: From Numerica book, page 19\n  * numerica_p20.mzn: From Numerica book, page 20 (finding intersection)\n  * numerica_p21.mzn: From Numerica book, page 21 (array version of intersection problem)\n  * numerica_p23.mzn: From Numerica book, page 23 (a robot kinematic application)\n  * numerica_p24.mzn: From Numerica book, page 24 (neurophysiology)\n  * option_trading.mzn: Option trading\n  * p_median.mzn: P-median problem (OPL)\n  * plan.mzn: Planning model (GLPK)\n  * polygon.mzn: Polygon (OPL)\n  * portfolio_optimization.mzn: Portfolio optimization (SAS)\n  * prod0.mzn: Optimization problem (AMPL)\n  * rosenbrock.mzn: Rosenbrock function\n  * spreadsheet.mzn: Simple spreadsheet problem\n  * stigler.mzn: Original Stigler's 1939 diet problem (GLPK)\n  * stuckey_finite_element.mzn: Finite element (Marriott, Stuckey: Programming in Constraint, 191ff)\n  * the_birthday.mzn: Birthday game theory problem\n  * transp.mzn: Transportation problem (GLPK)\n  * transp1.mzn: Transportation problem (OPL)\n  * two_circles.mzn: Two Circles problem\n  * volsay.mzn: Volsay problem (OPL)\n  * volsay2.mzn: Volsay problem, with arrays (OPL)\n  * volsay3.mzn: Volsay problem, with components (OPL)\n  * voltage_divider.mzn: Voltage divider problem problem from Marriott & Stuckey \"Programming in Constraints\"\n  * wilkinson.mzn: Wilkinson problem\n\n### Combinatorial problems\n\n  * 3sum.mzn: 3SUM problem (general approach)\n  * all_interval.mzn: All interval problem (series), (CSPLib problem 7)\n  * all_interval1.mzn: All interval problem, different approach\n  * all_interval2.mzn: All interval problem, different approach\n  * all_interval3.mzn: All interval problem, different approach\n  * all_interval4.mzn: All interval problem, different approach\n  * all_interval5.mzn: All interval problem, different approach\n  * all_interval6.mzn: All interval problem, different approach\n  * all_paths_graph.mzn: (All) paths from a graph presentation (cf message_sending.mzn)\n  * appointment_scheduling.mzn: Appointment scheduling, matrix approach (see Stack Overflow Q: Appointment scheduling algorithm (N people with N free-busy slots, constraint-satisfaction) ).\n  * appointment_scheduling_set.mzn: A set based approach to the appoiintment scheduling problem (see above). appointment_scheduling_set2.mzn is a version which use data files:\n\n    * appointment_scheduling_10.dzn: N = 10\n    * appointment_scheduling_100.dzn: N = 100\n    * appointment_scheduling_1000.dzn: N = 1000 (1.5Mb)\n    * appointment_scheduling_2000.dzn: N = 2000 (7Mb)\n\n(Perl one-liner to generate data files ($n is N, $c is the limit for including\na person in the time slot): $ perl -e '$n = 10; $c = 0.6; print\n\"n=$n;\\ns=[\\n\"; for (1..$n) { print \"{\"; for (1..$n) { if (rand(1)>=$c) {\nprint \"$_,\" } } print \"},\\n\"}; print \"];\\n\"' )\n\n  * average_avoiding.mzn: Average avoiding (from StackOverflow Arrange an array such that the average of 2 numbers does not lie between them)\n  * balanced_brackets.mzn: Generate balanced brackets\n  * balanced_matrix.mzn: Balanced matrix\n  * bin_packing_me.mzn: Bin packing (2010-10-12: this was called bin_packing.mzn but renamed due to name clash with a file with the same name in the MiniZinc distribution)\n  * bin_packing2.mzn: Bin packing (different from the one above)\n  * bpp.mzn: Bin packing (GLPK example, but not using the \"z heuristic\")\n  * bracket_partitioning.mzn: Bracket partitioning, optimize the number of brackets (problem from StackOverflow: Set partitioning with constraints java)\n  * car.mzn: Car sequencing problem (OPL)\n  * car.mzn: Car painting problem (from SAS/OR User's Guide)\n  * carpool_fairness.mzn: Carpool fairness Problem instances:\n\ncarpool_fairness1.dzn carpool_fairness2.dzn carpool_fairness3.dzn\ncarpool_fairness4.dzn carpool_fairness5.dzn\n\n  * checker_puzzle.mzn: Checker puzzle (from MathOverflow Placing checkers with some restrictions)\n  * choosing_teams.mzn: Choosing teams (inspired by Enumerating the ways of choosing teams in a group of players)\n  * choosing_teams2.mzn: Choosing teams (inspired by Enumerating the ways of choosing teams in a group of players), different - and somewhat faster - approach than choosing_teams.mzn\n  * color_simple.mzn: Simple coloring of a map (Murty)\n  * combinatorial_auction.mzn: Simple combinatorial auction problem (compare with the set covering/set partition problem in set_covering4b.mzn)\n  * conference.mzn: Conference problem (from \"Constraint Programming with Alice\")\n  * config.mzn: Configuration problem (from OPL)\n  * cookie_monster_problem.mzn: Cookie Monster Problem (from Richard Green The Cookie Monster Problem at Google+)\n  * costas_array.mzn: Costas array (based on Barry O'Sullivan's model)\n  * decision_tree_binary.mzn: Binary decision tree\n  * debruijn_binary.mzn: de Bruijn sequence (graph)\n  * debruijn2d.mzn: 2D de Bruijn torus/arrays/matrices\n  * debruijn2d_2.mzn: 2D de Bruijn torus/arrays/matrices, improved version\n  * debruijn2d_3.mzn: 2D de Bruijn torus/arrays/matrices, can handle non-square matrices and sub-matrices\n  * debruijn_no_repetition.mzn: de Bruijn sequence with no repeating values (a.k.a Kautz sequences)\n  * dominating_set.mzn: Dominating set problem\n  * exact_cover_dlx.mzn: Implements the exact set cover example in Wikipedia's and Knuth's_Algorithm_X\n  * exact_cover_dlx_matrix.mzn: Implements the exact set cover example in Wikipedia's and Knuth's_Algorithm_X. This version use a matrix representation instead of sets.\n  * examination_scheduling.mzn: Examination scheduling (from Noppon Choosri: \"Using grid puzzle to solve constraint-based scheduling problem\")\n  * fair_split_into_3_groups.mzn: Fair split into 3 groups (from Stack Overflow What is an algorithm to split a group of items into 3 separate groups fairly?)\n  * finding_celebrities.mzn: Finding celebrities at a party (indicence matrix).\n  * finding_celebrities2.mzn: Finding celebrities at a party, using only set constraints.\n  * fix_points.mzn: Number of fix points in an array\n  * generalized_knapsack_problem.mzn: Generalized knapsack problem\n  * graceful_labeling.mzn: Graceful labeling problem\n  * graph_degree_sequence.mzn: Degree sequence for graphs, both matrix and edge representation\n  * graph_partition.mzn: Graph partitioning (example from Pascal Van Hentenryck, Laurent Michel: \"Constraint-based local search\", page 6f)\n  * gray_code.mzn: Gray code\n  * hamming_distance.mzn: Hamming distance\n  * hitting_set.mzn: Hitting set\n  * itemset_mining.mzn: Itemset mining (both Closed and Maximal Frequent Itemset Mining)\n  * maximal_independent_sets.mzn: Maximal independent sets (cf misp.mzn)\n  * K4P2GracefulGraph.mzn: K4P2 Graceful Graph\n  * K4P2GracefulGraph2.mzn: K4P2 Graceful Graph (more general model)\n  * k_consecutive_integers.mzn: k consecutive integers (Stack Overflow: k consecutive integers constraint)\n  * kidney_exchange.mzn: Simple kidney exchange model (inspired by Pascal Van Hentenryck's introduction to the Coursera Course \"Discrete Optimization\")\n  * kidney_exchange2.mzn: Kidney exchange model Faster version: kidney_exchange_model.mzn: Data files:\n\n    * kidney_exchange_pascal.dzn\n    * kidney_exchange_roth.dzn\n    * kidney_exchange_10_0.4_fz.dzn\n    * kidney_exchange_20_0.1_fz.dzn\n    * kidney_exchange_20_0.3_fz.dzn\n    * kidney_exchange_20_0.4_fz_1.dzn\n    * kidney_exchange_20_0.4_fz.dzn\n    * kidney_exchange_20_0.6_fz.dzn\n    * kidney_exchange_40_0.05.dzn\n    * kidney_exchange_40_0.1.dzn\n    * kidney_exchange_40_0.6_fz.dzn\n    * kidney_exchange_100_0.05.dzn\n    * kidney_exchange_100_0.1_2.dzn\n    * kidney_exchange_100_0.1.dzn\n    * kidney_exchange_100_0.3_fz_1.dzn\n    * kidney_exchange_100_0.3_fz.dzn\n    * kidney_exchange_500_0.1.dzn\n    * kidney_exchange_1000_0.05_1.dzn\n    * kidney_exchange_1000_0.1_1.dzn\n    * kidney_exchange_2000_0.1.dzn\n  * kiselman_semigroup_problem.mzn: Kiselman's Semigroup problem.\n  * knapsack_problem.mzn: Knapsack problem\n  * knapsack1.mzn: Knapsack problem\n  * knapsack2.mzn: Another knapsack problem\n  * knapsack_rosetta_code_01.mzn: Knapsack problem, 0/1 (Rosetta code)\n  * knapsack_rosetta_code_unbounded.mzn: Knapsack problem (float), Unbounded (Rosetta code)\n  * knapsack_rosetta_code_unbounded_int.mzn: Knapsack problem Unbounded, integer version of knapsack_rosetta_code_unbounded.mzn (Rosetta code)\n  * knapsack_rosetta_code_bounded.mzn: Knapsack problem, bounded (Rosetta code)\n  * lams_problem.mzn: Lam's problem (CSPLib problem 25)\n  * langford2.mzn: Langford's number problem (k=2) (CSPLib problem 24)\n  * langford_generalized.mzn: Langford's number problem, (k >= 2) (CSPLib problem 24)\n  * latin_square.mzn: Latin squares\n  * lehmer_code_from_permutation.mzn: Lehmer code from permutation\n  * lectures.mzn: Lectures, schedule problem from Biggs \"Discrete Mathematics\"\n  * lichtenstein_coloring.mzn: Coloring problem: Lichtenstein's communes and exclaves\n  * logical_design.mzn: Logical design (Williams)\n  * map.mzn: Simple coloring of a map\n  * map2.mzn: Simple coloring of a map (using symmetry breaking with precedence/1)\n  * map_stuckey.mzn: Another coloring of a map (Marriott and Stuckey)\n  * map_coloring_with_costs.mzn: Map coloring (of South America) where each color has a cost\n  * maximal_nonsegment_sum.mzn: Maximal subsegment sum\n  * maximal_nonsegment_sum_regular.mzn: Maximal subsegment sum (using regular constraint)\n  * minimal_subset_of_columns.mzn: Finding minimal subset of columns that make rows in a matrix unique (Stack Overflow)\n  * maximum_density_still_life.mzn: Maximum density still life\n  * maximum_subarray.mzn: Maximum subarray (Rosetta code)\n  * minsum.mzn: Minsum problem\n  * movie_scheduling.mzn: Movie scheduling (Steven Skiena)\n  * modulo_partition.mzn: Function partitioning\n  * nontransitive_dice.mzn: Nontransitive dice\n  * one_to_many.mzn: One to Many problem (StackOverflow)\n  * ordering_a_list_of_lists.mzn: Ordering a list of lists (from Stack Overflow Ordering a list of lists subject to constraints)\n  * ormat_game.mzn: Ormat game (from bit-player The Ormat game). Data files with all the overlays of appropriate size. There are n! overlay matrices for problems of size n x n. (These files has been generated by ormat_game_generate.mzn and some post-processing.)\n\n    * ormat_game_n3.dzn: For n = 3\n    * ormat_game_n4.dzn: For n = 4\n    * ormat_game_n5.dzn: For n = 5\n    * ormat_game_n6.dzn: For n = 6\n    * ormat_game_n7.dzn: For n = 7\n\normat_game_nodel.mzn: Ormat game model, which is included in the follling\nproblem instances from the bit-player article.\n\n    * ormat_game_problem1.mzn: Problem 1 (3x3)\n    * ormat_game_problem2.mzn: Problem 2 (3x3)\n    * ormat_game_problem3.mzn: Problem 3 (3x3)\n    * ormat_game_problem4.mzn: Problem 4 (4x4)\n    * ormat_game_problem5.mzn: Problem 5 (5x5)\n    * ormat_game_problem6.mzn: Problem 6 (6x6)\n\normat_game_mip_nodel.mzn: Ormat game model, MIP version (quite fast for the\noptimization problem with a MIP solver). These following problem instances\nincludes this MIP model.\n\n    * ormat_game_mip_problem1.mzn: Problem 1 (3x3)\n    * ormat_game_mip_problem2.mzn: Problem 2 (3x3)\n    * ormat_game_mip_problem3.mzn: Problem 3 (3x3)\n    * ormat_game_mip_problem4.mzn: Problem 4 (4x4)\n    * ormat_game_mip_problem5.mzn: Problem 5 (5x5)\n    * ormat_game_mip_problem6.mzn: Problem 6 (6x6)\n  * parallel_resistors.mzn: Parallel resistors problem problem from Marriott & Stuckey \"Programming in Constraints\"\n  * partial_latin_square.mzn: Partial Latin squares\n  * partitions.mzn: Integer partitions\n  * partition_into_subset_of_equal_values.mzn: Subset partitions (problem from the Stack Exchange Q: Partitioning set into subsets with respect to equality of sum among subsets).\n  * partition_into_subset_of_equal_values2.mzn, a version with some larger problem instances.\n  * partition_into_subset_of_equal_values3.mzn, pre-calculate the sum in the subsets (somewhat faster)\n  * perfect_shuffle.mzn: Perfect shuffle\n  * pigeon_hole.mzn: Pigeon hole problem (CLP-FD)\n  * picking_teams.mzn: Picking teams (where the objective is to minimize the differences in total strength of each team). picking_teams2.mzn: This version takes a data file as input. picking_teams_rand.dzn: A data file with random strengths (for n = 300). picking_teams_generate.pl: Perl program for generating a data file with a strength array.\n  * pigeon_hole2.mzn: Another pigeon hole problem\n  * portfolio_optimization2.mzn: Portfolio optimization (from Xpress-Mosel)\n  * powerset_param.mzn: Power set as a fixed calculation (not decision variables)\n  * power_set.mzn: Power set\n  * power_set2.mzn: Power set as a predicate (alternative version)\n  * power_set3.mzn: Power set as a predicate (alternative versions)\n  * quasiGroup3Idempotent.mzn: Quasigroup existence problem 3(CSPLib)\n  * quasiGroup3NonIdempotent.mzn: Quasigroup existence problem 3 (CSPLib)\n  * quasiGroup4Idempotent.mzn: Quasigroup existence problem 4(CSPLib)\n  * quasiGroup4NonIdempotent.mzn: Quasigroup existence problem 4(CSPLib)\n  * quasiGroup5Idempotent.mzn: Quasigroup existence problem 5(CSPLib)\n  * quasiGroup5NonIdempotent.mzn: Quasigroup existence problem 5(CSPLib)\n  * quasiGroup6.mzn: Quasigroup existence problem 6 (CSPLib)\n  * quasiGroup7.mzn: Quasigroup existence problem 7 (CSPLib)\n  * quasigroup_completion.mzn: Quasigroup completion problem\n  * quasigroup_completion_model.mzn: Quasigroup completion problem, model used by the following instances:\n\n    * quasigroup_completion_gomes_shmoys_p3.mzn\n    * quasigroup_completion_gomes_shmoys_p7.mzn\n    * quasigroup_completion_martin_lynce.mzn\n    * quasigroup_completion_gcc.mzn\n    * quasigroup_completion_gomes_demo1.mzn\n    * quasigroup_completion_gomes_demo2.mzn\n    * quasigroup_completion_gomes_demo3.mzn\n    * quasigroup_completion_gomes_demo4.mzn\n    * quasigroup_completion_gomes_demo5.mzn\n  * ramsey_partition.mzn: Ramsey partition problem\n  * random_function.mzn: Random generator function, defines random_int and random_float which returns arrays of \"random\" ints/floats. Requires MiniZinc v2.*\n  * random_function_test.mzn: Tests random_int and random_float defined in random_function.mzn. Requires MiniZinc v2.*\n  * random_generator.mzn: Random generator, generates a var int array of random integers given a seed\n  * random_generator2.mzn: Random generator II, generates an int array of random integers given a seed (i.e. it can be used directly in the array declaration)\n  * random_set.mzn: Random generator III, generates a random set of int (either as var set of int or via array/set comprehension)\n  * rehearsal.mzn: Rehearsal problem (Barbara M. Smith)\n\n    * rehearsal_smith.dzn: Data from Barbara M. Smith's paper\n    * rehearsal_choco.dzn: Data from Choco (sample.scheduling.Rehearsal)\n  * restaurant_scheduling.mzn: Restaurant scheduling (PuzzlOR)\n  * runs.mzn: Number of runs in an array (sequence)\n  * sat.mzn: Satisfiability Problem, integer programming (GLPK)\n  * satisfy.mzn: Satisfiability Problem (Alma-0)\n  * seating_arrangements.mzn: Seating arrangements problem. Problem from Texas Action Group: Seating arrangements: Problem Problem instances from Texas Action Group Seating arrangements: Solutions (the solutions are in Answer Set Programming)\n\n    * seating_arrangements_1.dzn\n    * seating_arrangements_2.dzn\n    * seating_arrangements_3.dzn\n  * seating_row.mzn: Seating placement, row (e.g. \"movie theater seating\") (a \"minimal code\" version: seating_row1.mzn)\n  * seating_table.mzn: Seating placement, table (circular)\n  * scanner_problem.mzn: Scanner problem\n  * scp41.mzn: Set covering problem (orlib #41)\n  * set_covering.mzn: Set covering, placing of firestations (Winston)\n  * set_covering2.mzn: Set covering, number of security telephons on a campus (Taha)\n  * set_covering3_model.mzn: Set covering model\n  * set_covering3.mzn: Set covering, senators making a committe (Murty)\n  * set_covering4.mzn: Set covering problem (Lundgren, R\u00f6nnqvist, V\u00e4rbrand \"Optimeringsl\u00e4ra\")\n  * set_covering4b.mzn: Set covering problem, generalized version of set_covering4.mzn\n  * set_covering5.mzn: Set covering, work scheduling (Lundgren, R\u00f6nnqvist, V\u00e4rbrand \"Optimeringsl\u00e4ra\")\n  * set_covering6.mzn: Set covering, problem from Nathan Brixius' blog post Don't be a hero when trying to solve set covering problems (2010-06-19)\n  * set_covering_deployment.mzn: Set covering deployment\n  * set_covering_opl.mzn: Set covering (OPL)\n  * set_covering_skiena.mzn: Set covering (Skiena)\n  * set_packing.mzn: Set packing\n  * set_partition.mzn: Set partitioning\n  * set_partition_stackoverflow.mzn: Set partition problem (from StackOverflow fast and simple constraint programming involving vectors (arrays))\n  * shortest_path1.mzn: Shortest path problem, selling/buying a car (Winston)\n  * shortest_path2.mzn: Shortest path problem (Winston)\n  * shortest_path_graph.mzn: Shortest path problem (3 jugs problem as a graph, a bit experimental)\n  * shortest_path_model.mzn: Model for shortest path\n  * shortest_path_model_all.mzn: Model for shortest path, for showing all solutions (assuming an added constraint in the calling model)\n  * sicherman_dice.mzn: Sicherman dice problem\n  * smuggler_knapsack.mzn: Smuggler's knapsack (Marriott and Stuckey: \"Programming with Constraints\")\n  * sonet_problem.mzn: SONET problem\n  * steiner.mzn: Steiner triplet problem\n  * subset_plus_2.mzn: Subset problem: How many subsets S={1..10} union S+2 == {1..12} (from God plays dice Bitwise set trickery)\n  * subset_sum.mzn: Subset sum (Murty)\n  * superpermutations.mzn: Superpermutation problem Instances:\n\n    * superpermutation_n3.dzn: N=3\n    * superpermutation_n4.dzn: N=4\n    * superpermutation_n5.dzn: N=5\n  * temporal_reasoning.mzn: Temporal reasoning (Apt)\n  * tourist_site_competition.mzn: Tourist site competition (Pierre Flener)\n  * traffic_lights.mzn: Traffic lights problem (CSPLib problem 16)\n  * traffic_lights_table.mzn: Traffic lights problem (CSPLib problem 16), same as traffic_lights.mzn except that is use the global constraint tabl\n  * transpose.mzn: (Square) matrix operations, transpose, scalar addition, scalar multiplication\n  * tsp_circuit.mzn: Travelling salesperson problem, using circuit predicate\n  * tsptw.mzn: Travelling salesperson problem with time windows\n  * two_dimensional_channels.mzn: Two-dimensional constrained channels (all interiour cells must have m 1 neighbours in a NxN 0/1 matrix)\n  * uniform_dice.mzn: Uniform dice\n  * uniform_dice2.mzn: Uniform dice (Mind Your Decisions)\n  * wedding_optimal_chart.mzn: Finding an optimal seating chart for a wedding (see Improbable Research: Finding an optimal seating chart for a wedding)\n  * young_tableaux.mzn Young tableaux\n  * young_tableaux_stack_overflow.mzn Young tableaux, model adapted to answer the Stack Overflow question Young tableaux in C\n\n### Global constraints (mostly decompositions)\n\nHere are some implementations of the global constraints (mostly as\ndecompositions) which are not already implemented in the MiniZinc globals.mzn,\ndescribed in the great collection Global Constraint Catalog. Here are also\nsome decompositions not in the catalogue or test of built-in constraints.\n\nName clashes: If there exists a file in default directory with the same name\nas one of the global constraints defined in \"global.mzn\", there will be a name\nclash. If that happens, just rename the file in the default directory to\nsomething else, e.g. constraint_me.mzn.\n\n  * all_differ_from_at_least_k_pos.mzn: all_differ_from_at_least_k_pos, all rows in a matrix has values that differs in at least k positions\n  * all_equal_me.mzn: all_equal\n  * all_min_dist.mzn: all_min_dist, all values must have a minimum distance to each other\n  * alldifferent_consecutive_values.mzn: alldifferent_consecutive_values\n  * alldifferent_cst.mzn: alldifferent_cst, and alldifferent_cst using multiplication instead of addition\n  * alldifferent_except_0_me.mzn: alldifferent except 0 (This predicate is now included in the MiniZinc distribution)\n  * alldifferent_explain.mzn: alldifferent with \"explanations\" (with a set of duplicated values)\n  * alldifferent_interval.mzn: alldifferent_modulo, all values modulo k shall be different\n  * alldifferent_modulo.mzn: alldifferent_modulo, all values modulo k shall be different\n  * alldifferent_on_intersection.mzn: alldifferent_on_intersection\n  * alldifferent_pairs.mzn: defines all_different_pairs, increasing_pairs, decreasing_pairs, and the function pairs\n  * alldifferent_partition.mzn: alldifferent_partition\n  * alldifferent_same_value.mzn: alldifferent_same_value\n  * alldifferent_soft.mzn: alldifferent_soft (alldifferent_soft_ctr and alldifferent_soft_var)\n  * allperm.mzn: allperm, ensures that the first rows in a matrix is lexically less than all permutation of all other rows\n  * among_diff_0.mzn: among_diff_0, number of values different from 0\n  * among_interval.mzn: among_interval, number of values in a certain interval\n  * among_low_up.mzn: among_low_up, the number values in an array matched another array shoule be constrained to low and up\n  * among_modulo.mzn: among_modulo, the number values in an array where a value modulo quotient = remainder\n  * among_seq.mzn: among_seq\n  * and.mzn: and, generalized and (array)\n  * arith.mzn: arith, enforces that all values in an array is RELOP (equal, not equal, less than, etc) some VALUE\n  * arith_or.mzn: arith_or\n  * arith_sliding.mzn: arith_sliding, all sliding sums from 1..j must satisfy RELOP VALUE\n  * assign_and_counts.mzn: assign_and_counts\n  * assign_and_nvalue.mzn: assign_and_nvalues\n  * atleast_nvalue.mzn: atleast_nvalue, at least NVAL values are different in an array\n  * atmost1_me.mzn: atmost1\n  * atmost_nvalue.mzn: atmost_nvalue, at most NVAL values are different in an array\n  * balance.mzn: balance, difference between the least and largest number of occurrences in an array\n  * balance_interval.mzn: balance_interval, difference between the least and largest number of occurrences in intervals in an array\n  * balance_modulo.mzn: balance_modulo, difference between the least and largest number of occurrences of the equivalience classes modulo an integer\n  * balance_partition.mzn: balance_partition, difference between the least and largest number of occurrences in partitions\n  * between_min_max.mzn: between_min_max, a specific number is between the minimum and maximum value of an array\n  * binary_tree.mzn: Binary tree\n  * bipartite.mzn: Bipartite graph\n  * cardinality_atleast: cardinality_atleast\n  * cardinality_atmost: cardinality_atmost\n  * cardinality_atmost_partition: cardinality_atmost_partition\n  * change.mzn: circular change, number of changes in an array\n  * change_pair.mzn: change_pair\n  * change_partition.mzn: change_partition\n  * circular.mzn: circular: ensure that an array of length m with domain 1..n are circular ordered (and can start on any value of 1..n).\n  * circular_except_0.mzn: circular: ensure that an array of length m with domain 1..5 are circular ordered (and can start on any value of 1..5), and supports dummy values (= 0).\n  * circular_change.mzn: circular change, number of changes in an array (as change but with wrapping around the corner)\n  * circuit_test.mzn: circuit\n  * circuit_path.mzn: Extracting the path from a circuit\n  * clique.mzn: clique\n  * common.mzn: common, also used_by\n  * common_interval.mzn: common_interval\n  * common_modulo.mzn: common_modulo\n  * common_partition.mzn: common_partition\n  * cond_lex_cost.mzn: cond_lex_cost\n  * cond_lex_less.mzn: cond_lex_less, cond_lex_lesseq, cond_lex_greater, cond_lex_greatereq\n  * consecutive_values.mzn: consecutive_values\n  * contains_array.mzn: contains (\"in\" for arrays)\n  * contiguity_regular.mzn: global_contiguity (using regular constraint)\n  * contiguity_regular_regexp.mzn: global_contiguity (using regular constraint with regular expressions)\n  * count_ctr.mzn: count, more general than count in MiniZinc's globals.mzn\n  * counts.mzn: counts\n  * correspondence.mzn: correspondence\n  * cumulative_test.mzn: Test of cumulative (defined in globals.mzn)\n  * cumulative_test_mats_carsson.mzn: Another test of cumulative (small example from one of Mats Carlsson's lecture)\n  * cycle_test2.mzn: Cycle constraint (counts the number of cycles in an array)\n  * cycle_test3.mzn: Cycle constraint (requires MiniZinc 2.0)\n  * decreasing_me.mzn: decreasing\n  * derangement.mzn: derangement\n  * differs_from_at_least_k_pos.mzn: differs_from_at_least_k_pos\n  * diffn_me.mzn: diffn, (with three different representations of the orthotopes)\n  * discrepancy.mzn: discrepancy\n  * discjuntive.mzn: disjunctive\n  * distance_between.mzn: distance_between\n  * distance_change.mzn: distance_change\n  * domain.mzn: domain\n  * domain_constraint.mzn: domain_constraint\n  * element_greatereq.mzn: element_greatereq\n  * element_lesseq.mzn: element_lesseq\n  * element_matrix.mzn: element_matrix\n  * element_product.mzn: element_product\n  * element_sparse.mzn: element_sparse\n  * elementn.mzn: elementn\n  * elements.mzn: elements\n  * elements_alldifferent.mzn: elements_alldifferent\n  * equivalent.mzn: equivalent\n  * gcd_lcm.mzn: Decomposition of gcd(a,b,GCD) and lcm(a,b,LCM) (not very efficient if all variables are decision variables)\n  * geost_test.mzn: Test of built-in geost constraint (requires MiniZinc 2.0)\n  * global_cardinality_no_loop.mzn: global_cardinality_no_loop\n  * global_cardinality_with_costs.mzn: global_cardinality_with_costs\n  * global_cardinality_table.mzn: global_cardinality, using a table with the occurrences\n  * global_contiguity.mzn: global_contiguity\n  * global_contiguity2.mzn: global_contiguity (different approach)\n  * imply.mzn: imply\n  * inflexions.mzn: inflexions, number of peaks in a sequence\n  * in_interval.mzn: in_interval\n  * in_relation.mzn: in_relation\n  * in_same_partition.mzn: in_same_partition\n  * in_set.mzn: in_set (cf the built in \"in\")\n  * increasing_except_0.mzn: increasing_except_0\n  * indexed_sum.mzn: indexed_sum\n  * int_value_precede.mzn: int_value_precede\n  * inter_distance.mzn: inter-distance (from Quimper)\n  * inverse_within_range.mzn: inverse within range\n  * ith_pos_different_from_0.mzn: ith pos different from 0\n  * k_alldifferent.mzn: k alldifferent (all rows satisfy the alldifferent constraint)\n  * k_same.mzn: k_same\n  * k_same_modulo.mzn: k_same_modulo\n  * lex2_me.mzn: lex2\n  * lex_alldifferent.mzn: lex_alldifferent\n  * lex_between.mzn: lex_between\n  * lex_chain_less.mzn: lex_chain_less\n  * lex_different.mzn: lex_different\n  * lex_greater_me.mzn: lex_greater\n  * longest_change.mzn: longest change, size of the longest sub sequence which satisfy a comparison operator (such as !=, <, > etc)\n  * max_index.mzn: max_index, (also the extension max_index_val)\n  * max_m_in_row.mzn: Max m in row (ensure that there are max m consecutive values in an array) [Note: This is a simpler variant of stretch_path, see below.]\n  * max_n.mzn: max_n\n  * max_nvalue.mzn: max_nvalue\n  * max_size_set_of_consecutive_var.mzn: max_size_set_of_consecutive_var\n  * maximum_modulo.mzn: maximum_modulo\n  * min_index.mzn: min_index, (also the extension min_index_val)\n  * min_max_sets.mzn: Minimum and maximum of a set\n  * min_n.mzn: min_n\n  * min_nvalue.mzn: min_nvalue\n  * minimum_except_0.mzn: minimum_except_0\n  * minimum_greater_than.mzn: minimum_greater_than\n  * minimum_modulo.mzn: minimum_modulo\n  * minimum_weight_alldifferent.mzn: minimum_weight_alldifferent\n  * nchange.mzn: nchange, (also a generalized version nchange_cmp with choice of operators)\n  * nclass.mzn: nclass\n  * n_partitioning.mzn: n_partitioning\n  * n_change.mzn: n_change\n  * my_nvalue.mzn: nvalue, also: atleast_nvalue and atmost_nvalue (note: nvalue is defined in globals.mzn, hence the name my_nvalue)\n  * next_greater_element.mzn: next_greater_element\n  * next_element.mzn: next_element\n  * not_all_equal.mzn: not_all_equal\n  * not_in.mzn: not_in\n  * npair.mzn: npair\n  * nvalue_on_intersection.mzn: nvalue_on_intersection\n  * nvalues.mzn: nvalues\n  * nvalues_except_0.mzn: nvalues_except_0\n  * open_alldifferent.mzn: open_alldifferent\n  * open_among.mzn: open_among\n  * open_atleast.mzn: open_atleast\n  * open_atmost.mzn: open_atmost\n  * open_global_cardinality.mzn: open_global_cardinality\n  * open_global_cardinality_low_up.mzn: open_global_cardinality_low_up\n  * orth_link_ori_siz_end.mzn: orth_link_ori_siz_end\n  * orth_on_the_ground.mzn: orth_on_the_ground\n  * path_from_to.mzn: path_from_to, find a path from FROM to TO in a graph (incidence matrix)\n  * period.mzn: period (a sequence must have a period of a specific length)\n  * permutation3.mzn: permutation3(a,p,b) and permutation3(a,b): ensure that array b is a permutation of array a (via a permutation p)\n  * my_precedence.mzn: precedence (the first time we use j is before the first time we use k, for j < k). Also includes the variant precedence_all with the extra constraint that all values in lb(a)..ub(a) must be in a.\n  * product_ctr.mzn: product_ctr\n  * range_ctr.mzn: range_ctr\n  * roots_test.mzn: Test of roots (defined in globals.mzn)\n  * same.mzn: same\n  * same_and_global_cardinality.mzn: same_and_global_cardinality\n  * same_and_global_cardinality_low_up.mzn: same_and_global_cardinality_low_up\n  * same_interval.mzn: same_interval\n  * same_modulo.mzn: same_modulo\n  * same_modulo.mzn: Scalar product\n  * separate_zeros.mzn: Copy an array but place all zeros (or some specific value) first (or last)\n  * shift.mzn: shift\n  * sliding_sum_me.mzn: sliding_sum\n  * sliding_time_window.mzn: sliding_time_window\n  * sliding_time_window_from_start.mzn: sliding_time_window_from_start\n  * smooth.mzn: smooth\n  * soft_all_equal_ctr.mzn: soft_all_equal_ctr\n  * soft_same_var.mzn: soft_same_var\n  * sort_permutation.mzn: sort_permutation\n  * sortedness.mzn: sortedness (Note: MiniZinc 2 has a sort/1 function)\n  * stretch_circuit.mzn: stretch_circuit\n  * stretch_path.mzn: stretch_path\n  * strictly_decreasing.mzn: strictly_decreasing. Also strictly_increasing and decreasing\n  * subsequence.mzn: subsequence\n  * subsequence_sum.mzn: subsequence sum\n  * sum_ctr.mzn: sum ctr\n  * sum_free.mzn: sum free, also: product_free\n  * sum_of_weights_of_distinct_values.mzn: sum_of_weights_of_distinct_values\n  * sum_set.mzn: sum set\n  * symmetric.mzn: symmetric\n  * symmetric_alldifferent.mzn: symmetric_alldifferent\n  * to_num.mzn: Channeling a number and an array of digits (for some base, default 10). Requires MiniZinc 2 (to_num is a function).\n  * twin.mzn: twin\n  * weighted_sum.mzn: weighted_sum (as scalar_product in the catalogue)\n\n### Martin Gardner's Puzzles and Problems\n\nHere are some models based on Martin Gardner's problem and puzzles (or\npresented/popularized by him), or related to Martin Garder festivities such as\nGathering 4 Gardner, Celebration Of Mind etc.\n\n  * clock_triplets.mzn: Clock Triplets\n  * color.mzn: Map coloring, Martin Gardner's coloring problem (BProlog)\n  * consecutive_digits.mzn: Consecutive digits\n  * curious_set_of_integers.mzn: Curious set of integers\n  * divisible_by_unit_digits.mzn: Divisible by unit digits\n  * ein_ein_ein_ein_vier.mzn: EIN+EIN+EIN+EIN=VIER\n  * g4g_matrix.mzn: Bernardo Recam\u00c3\u00a1n's 10x10 matrix puzzle (from CelebrationOfMind Google Hangout 20131021)\n  * gardner_dinner.mzn: Dinner problem\n  * gardner_prime_puzzle.mzn: Martin Gardner's prime puzzle\n  * gardner_sum_square.mzn: Martin Gardner's Sum Square problem (from Scampi)\n  * gather_homage_martin.mzn: GATHER+HOMAGE=MARTIN (from CelebrationOfMind Google Hangout 20131021)\n  * magic_squares_and_cards.mzn: Magic squares and cards\n  * monkey_coconuts.mzn: The Monkey and Coconuts problem\n  * nine_digit_arrangement.mzn: Nine digit arrangement\n  * nine_to_one_equals_100.mzn: Nine to one equals 100\n  * persistent_numbers.mzn: Persistent numbers\n  * pool_ball_triangles.mzn: Pool-ball triangles\n  * prime_looking.mzn: Prime-looking number (from Scampi/OscaR)\n  * prime_multiplication.mzn: Prime multiplication\n  * rookwise_chain.mzn: Rookwise Chain\n  * square_root_of_wonderful.mzn: Square Root of Wonderful\n  * two_cube_calendar.mzn: Two cube calendar\n  * gardner_two_plus_two.mzn: TWO+TWO=FOUR problem\n  * vingt_cinq_cinq_trente.mzn: VINGT+ CINQ + CINQ = TRENTE\n\n### Martin Chlond's Integer Programming Puzzles\n\nBelow are MiniZinc models of almost all puzzles from Martin Chlond's wonderful\ncollections at Integer Programming Puzzles [Note: the web page is gone but can\nbe found via Wayback machine:\nhttps://web.archive.org/web/*/http://www.chlond.demon.co.uk/academic/puzzles.html].\n\nThe collection is separated in four sections where the problems is presented *\nInteger Programming Puzzles section 1 * Integer Programming Puzzles section 2\n* Integer Programming Puzzles section 3 * Integer Programming Puzzles section\n4\n\nThe models below are presented first with a link to my MiniZinc model, and\nthen to Martin Chlond's solution (in XPress Mosel, or for later solutions\nAMPL).\n\nProblems from Integer Programming Puzzles section 1 Models: Twelve draughts\npuzzle Description : Twelve draughts puzzle Source : Boris Kordemsky - The\nMoscow Puzzles (P36)\n\nCoin puzzle Description : Coin puzzle Source : Mathematical Puzzles of Sam\nLoyd (P111)\n\nEgg basket puzzle Description : Egg basket puzzle Source : Boris Kordemsky -\nThe Moscow Puzzles (P136)\n\nEvens puzzle (slightly different approach: Evens puzzle 2 ) Description :\nEvens puzzle Source : Boris Kordemsky - The Moscow Puzzles (P8)\n\nFifty puzzle Description : Fifty puzzle Source : The Puzzles of Sam Loyd (P\n54)\n\nHoney division puzzle Description : Honey division puzzle Source : H E Dudeney\n- Amusements in Mathematics\n\nWine cask puzzle Description : Wine cask puzzle Source : M Kraitchik -\nMathematical Recreations (p 31)\n\nKnight domination puzzle - all squares threatened Description : Knight\ndomination puzzle - all squares threatened Source : M Kraitchik - Mathematical\nRecreations (P256)\n\nMango puzzle Description : Mango puzzle Source : M Kraitchik - Mathematical\nRecreations (P32)\n\nRemainder puzzle (alternative model: Remainder puzzle 2) Description :\nRemainder puzzle Source : Boris Kordemsky - The Moscow Puzzles (P136) 5 X 5\npuzzle (alternative model: 5 X 5 puzzle v 2) Description : 5 X 5 puzzle Source\n: Unknown\n\nLights on puzzle Description : Lights on puzzle Source : Unknown\n\nProblems from Integer Programming Puzzles section 2 Models: Clarke's\ntobacconist Description : Clarke's tobacconist Source : Clarke, L.H., (1954),\nFun with Figures, William Heinemann Ltd.\n\nTommy's Birthday Coins Description : Tommy's Birthday Coins Source : Clarke,\nL.H., (1954), Fun with Figures, William Heinemann Ltd.\n\nLewis Carroll coin puzzle Description : Lewis Carroll coin puzzle Source :\nWakeling, E., (1995), Rediscovered Lewis Carroll Puzzles, Dover.\n\nDudeney's tea mixing problem Description : Dudeney's tea mixing problem Source\n: Dudeney, H.E., (1917), Amusements in Mathematics, Thomas Nelson and Sons.\n\nJive turkeys Description : Jive turkeys Source : rec.puzzles\n\nPublic School Problem Description : Public School Problem Source : Clarke,\nL.H., (1954), Fun with Figures, William Heinemann Ltd.\n\nDudeney's bishop placement problem I Description : Dudeney's bishop placement\nproblem I Source : Dudeney, H.E., (1917), Amusements in Mathematics, Thomas\nNelson and Sons.\n\nDudeney's bishop placement problem II Description : Dudeney's bishop placement\nproblem II Source : Dudeney, H.E., (1917), Amusements in Mathematics, Thomas\nNelson and Sons.\n\nKraitchik's queen placement problem Description : Kraitchik's queen placement\nproblem Source : Kraitchik, M., (1942), Mathematical Recreations, W.W. Norton\nand Company, Inc.\n\nSchuh's queen placement problem Description : Schuh's queen placement problem\nSource : Schuh, F., (1943), Wonderlijke Problemen; Leerzam Tijdverdrijf Door\nPuzzle en Speel, W.J. Thieme & Cie, Zutphen.\n\nDudeney's queen placement problem Description : Dudeney's queen placement\nproblem Source : Dudeney, H.E., (1917), Amusements in Mathematics, Thomas\nNelson and Sons.\n\nJoshua and his rats Description : Joshua and his rats Source : Sole, T.,\n(1988), The Ticket to Heaven, Penguin Books\n\nProblems from Integer Programming Puzzles section 3 Models: The Abbott's\nPuzzle Description : The Abbott's Puzzle Source : Dudeney, H.E., (1917),\nAmusements in Mathematics, Thomas Nelson and Sons.\n\nThe Abbott's Window Description : The Abbott's Window Source : Dudeney, H.E.,\n(1917), Amusements in Mathematics, Thomas Nelson and Sons.\n\nThe First Trial Description : The First Trial Source : Smullyan, R., (1991),\nThe Lady or The Tiger, Oxford University Press\n\nThe Second Trial Description : The Second Trial Source : Smullyan, R., (1991),\nThe Lady or The Tiger, Oxford University Press\n\nThe Third Trial Description : The Third Trial Source : Smullyan, R., (1991),\nThe Lady or The Tiger, Oxford University Press\n\nThe Fourth Trial Description : The Fourth Trial Source : Smullyan, R., (1991),\nThe Lady or The Tiger, Oxford University Press\n\nThe Fifth Trial Description : The Fifth Trial Source : Smullyan, R., (1991),\nThe Lady or The Tiger, Oxford University Press\n\nThe Sixth Trial Description : The Sixth Trial Source : Smullyan, R., (1991),\nThe Lady or The Tiger, Oxford University Press\n\nWerewolves II Description : Werewolves II Source : Smullyan, R., (1978), What\nis the Name of this Book?, Prentice-Hall\n\nWerewolves IV Description : Werewolves IV Source : Smullyan, R., (1978), What\nis the Name of this Book?, Prentice-Hall\n\nEarthlings Description : Earthlings Source : Poniachik, J. & L., (1998), Hard-\nto-solve Brainteasers, Sterling\n\nEqual Vision Description : Equal Vision Source : Poniachik, J. & L., (1998),\nHard-to-solve Brainteasers, Sterling\n\nProblems from Integer Programming Puzzles section 4 Models: On the road\nDescription : On the road Source : Poniachik, J. & L, (1998), Hard-to-solve\nBrainteasers, Sterling\n\nThe Riddle of the Pilgrims Description : The Riddle of the Pilgrims Source :\nDudeney, H.E., (1949), The Canterbury Puzzles, 7th ed., Thomas Nelson and\nSons.\n\nThe Logical Labyrinth Description : The Logical Labyrinth Source : Smullyan,\nR., (1991), The Lady or The Tiger, Oxford University Press\n\nThe gentle art of stamp-licking Description : The gentle art of stamp-licking\nSource : Dudeney, H.E., (1917), Amusements in Mathematics, Thomas Nelson and\nSons.\n\nThe crowded board Description : The crowded board Source : Dudeney, H.E.,\n(1917), Amusements in Mathematics, Thomas Nelson and Sons.\n\nNon-dominating queens problem Description : Non-dominating queens problem\nSource : http://www.cli.di.unipi.it/~velucchi/queens.txt\n\nEnigma Description : Enigma Source : Herald Tribune circa November 1979 -\ncourtesy of Dr Tito A. Ciriani\n\nPrice change puzzle Source: M Kraitchik, Mathematical Recreations (p 33-35),\nDover\n\nBook buy puzzle Source: M Kraitchik, Mathematical Recreations(p37), Dover\n\nShopping puzzle Source: M Kraitchik, Mathematical Recreations(p37), Dover\n\nBook discount problem Source: J. & L. Poniachik, Hard-to-Solve Brainteasers\n(p16), Sterling\n\nSeven 11 Source: alt.math.recreational\n\n### Models based on Martin Chlond's Puzzle articles in Informs Transations on\nEducation\n\nAnd here is some other models of recreational mathematics created by Martin\nChlond, published in the Puzzle section of Informs Transations on Education\n(an open operations research journal).\n\n  * Alien tiles (from An Alien IP)\n  * Elevator puzzle model (from A Tokyo Elevator Puzzle)\n  * Elevator 6 3 puzzle (from A Tokyo Elevator Puzzle)\n  * Elevator 8 4 puzzle (from A Tokyo Elevator Puzzle)\n  * Fairies problem (from PuzzlO.R. with the Fairies)\n  * Gunport problem 1 (from The Gunport Problem)\n  * Gunport problem 2 (from The Gunport Problem)\n  * Nimatron problem (from A Nimatron)\n  * Sangraal (from Fantasy OR) CP version: sangraal_cp.mzn\n  * Tank Attack Puzzle (from A Tank Attack Puzzle)\n  * Touching numbers puzzle (from The Traveling Space Telescope Problem)\n  * Tripuzzle 1 (from Tri-Puzzle: A Three-Cornered Conundrum)\n  * Tripuzzle 2 (from Tri-Puzzle: A Three-Cornered Conundrum)\n\n### Other models\n\nMath, utils, etc.\n\n  * 99_bottles_of_beer.mzn: 99 bottles of beer (Rosetta code)\n  * adjacency_matrix_from_degrees.mzn: Adjacency matrix from degree sequence (from Stack Overflow: Anyone has the logic for the following puzzle)\n  * antisymmetric.mzn: Antisymmetric relation (matrix)\n  * argmax.mzn: Predicates argmax_gt, argmax_ge, argmin_lt, argmin_le. E.g. argmax_gt(pos, x): pos is the position in array x for the maximum value. The other predicates is defined accordingly.\n  * best_shuffle.mzn: From Rosetta code Best shuffle\n  * binary_matrix2array.mzn: Converts a binary matrix to/from the corresponding array\n  * bit_vector1.mzn: A small bit vector problem\n  * catalan_numbers.mzn: Catalan numbers\n  * chinese_remainder_problem.mzn: Chinese remainder problem\n  * collatz.mzn: Collatz problem\n  * copy_arrays2.mzn: Copy arrays (1d and 2d). Requires MiniZinc v 2.\n  * equal_sized_groups.mzn: Dividing into roughly equal sized groups (from OR-Exchange: dividing into roughly equal sized groups, with a sorted list)\n  * factorial.mzn: Factorial (alternative version not using the prod predicate)\n  * family.mzn: Family database\n  * fib_test2.mzn: Fibonacci sequence, as an array since MiniZinc don't handle recursion\n  * filling_table_with_ticks.mzn: Filling a table (matrix) with ticks (from Stack Overflow: puzzle of filling 4*6 table with 18 ticks\n  * fizz_buzz.mzn: Fizz buzz problem\n  * four_power.mzn: Simple math problem\n  * full_adder.mzn: Full adder (digital circuit)\n  * is_prime.mzn: Check for primality\n  * isbn.mzn: Some explorations in ISBN-13\n  * leap_year.mzn: Leap year\n  * life.mzn: The Game of Life\n  * matrix2num.mzn: Converts a binary matrix to/frm a list of integers.\n  * optimal_picking_elements_from_each_list.mzn: Optimal picking one element from each list (from Stack Overflow: Optimally picking one element from each list)\n  * pairwise_sum_of_n_numbers.mzn: Pairwise sum of n numbers in non increasing order (from Stack Overflow Converts a binary matrix to/frm a list of integers)\n  * penguin.mzn: Nonmonotonic reasoning: can Tweety - a penguin - fly? (Alma-0)\n  * permutation_number.mzn: Permutation number\n  * power.mzn: my_pow(var int, int) which is not builtin in MiniZinc\n  * prime.mzn: Some number theory\n  * primes.mzn: Some more number theory, primes with set representation.\n  * primes_param.mzn: Generating a (par) set of primes (and a simple prime problem)\n  * product_test.mzn: simply defined the predicate product() since as of MiniZinc version <= 0.8.1 the predicate prod() is yet implemented\n  * pythagoras.mzn: Pythagoras number\n  * rectangle_from_line_segments.mzn: Largest rectange from line segments (From Stack Overflow: Construct the largest possible rectangle out of line segments of given lengths)\n  * rot13.mzn: Rot 13 (Caesar) cipher\n  * rot13_2.mzn: Rot N (Caesar) cipher (where N is a decision variable as well)\n  * sieve.mzn: Another number theory stuff\n  * sum_of_next_natural_numbers.mzn: Sum of next (increasing) natural numbers\n  * sum_sets.mzn: sum the integers in a set\n  * symmetry_breaking.mzn: Example of symmetry breaking for a math problem\n  * unique_set_puzzle.mzn: Unique set representing puzzle (from Stack Overflow: Choosing unique set representing number puzzle)\n\nAlso, see my other pages about constraint programming systems: * My Constraint\nProgramming Blog, especially the MiniZinc/Zinc category * Constraint\nProgramming * Common constraint programming problems * My Zinc page * My JaCoP\npage * My JaCoP/Scala page * My Choco page * My Gecode/R page * My Comet page\n* My Gecode page * My ECLiPSe page * My Tailor/Essence' page * My SICStus\nProlog page * My Google CP Solver page * My OscaR page * My JSR-331 page * My\nNumberjack page * My AIMMS+CP page * My B-Prolog page * My Choco3 page * My\nPicat page * My Z3 page * My SWI-Prolog page\n\nBack to my homepage Created by Hakan Kjellerstrand hakank@gmail.com\n\n", "frontpage": false}
