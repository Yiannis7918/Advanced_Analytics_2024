{"aid": "40033870", "title": "Emacs 2011-2023", "url": "https://bastibe.de/2024-03-24-rip-emacs-2011-2023.html", "domain": "bastibe.de", "votes": 13, "user": "todsacerdoti", "posted_at": "2024-04-14 19:52:02", "comments": 0, "source_title": "\ud83e\udea6 Emacs 2011-2023", "source_text": "\ud83e\udea6 Emacs 2011-2023\n\nBasti's Scratchpad on the Internet\n\nGithub | Projects | Uses | Reviews | About\n\n24 Mar 2024\n\n# \ud83e\udea6 Emacs 2011-2023\n\nFor the last dozen years, I have used Emacs as my text editor and development\nenvironment. But this era ended. In this post, I outline how I went from using\nEmacs as a cornerstone of my digital life, to abandoning it.\n\nIn an ironic twist of history, it was Visual Studio that drove me to Emacs in\nthe first place, and what ultimately pulled me away from it: In 2011, I was\nworking on the firmware of a digital mixing console. This was edited in Visual\nStudio, compiled with an embedded compiler software, and source-controlled\nwith command-line Git. It was ultimately Emacs that allowed me to tie this\nhodgepodge of idiosyncratic C+^1, Git, and the proprietary compiler into a\nsomewhat sane development environment.\n\nOver the years, my Emacs config grew, I learned Elisp, I published my own\nEmacs packages, and developed my own Emacs theme. I went back to university,\ndid my PhD, worked both OSS and commercially, and almost all of this was done\nin Emacs. As particular standouts beyond traditional text editing, I used\nEmacs' Git-client Magit every single day, and my own org-journal was\nabsolutely vital as my research/work journal.\n\nMy custom Emacs theme, all monochrome, with varying fonts instead of colors\n\nIn 2023, however, I started a new job, once again with a Visual Studio\ncodebase. This time, however, the code base and build system was tightly woven\ninto the Visual Studio IDE, and only really navigable and editable therein. It\nthus made no sense to edit this code in Emacs, so I didn't. Perhaps I also\nneeded a break.\n\nAnd as my Emacs usage waned, so its ancient keyboard shortcuts started to\nbecome a liability. I started mis-typing Emacs things in Visual Studio, and\nhitting Windows shortcuts in Emacs. Friction began to arise. At the same time,\nI started noticing how poorly Emacs runs on Windows. Startup takes many\nseconds, it does not integrate well into the task bar^2, it doesn't handle\nresolution changes gracefully, and it's best I don't start talking about its\nhorrendously broken mouse scrolling. And of course it can't scroll point out\nof the window^3.\n\nMy last use-case for Emacs was org-journal. I ended up porting a basic version\nof it to Visual Studio Code. Having thus written a text editor plugin for both\neditors, I have to be blunt: both, the anachronistic bone-headedness of Elisp,\nand the utter insanity of TypeScript's node APIs, are terrible environments\nfor writing plugins. A few years ago I did the same exercise in Sublime Text\nPython, which was a beautiful, simple, quick affair. But I do enjoy a\nprogramming puzzle, so here we are.\n\nThe final nail in Emacs' coffin came from an unexpected corner: For all my\nprofessional life, I was a solo coder. My Emacs was proudly black-and-white\n(different fonts instead of different colors!), and my keyboard shortcuts were\nidiosyncratically my own. I did not merely use Emacs. I had built MY OWN\nEmacs. I like to think this built character, and API design experience. But it\nwas of course a complete non-starter for pair programming. After having tasted\nVisual Studio (\u00b1 Code) Live Sharing, there was simply no going back.\n\nAnd thus, I am saddened to see that I haven't started Emacs in several weeks.\nI guess this is goodbye. This blog is still rendered by Emacs, and I still\nmaintain various Emacs modules. My journal is still written in org-mode. But\nit is now edited in Visual Studio Code.\n\n## Footnotes:\n\n^1\n\nAn eclectic subset of C++, intersected with the limitations of the embedded\ncompiler. This was decidedly pre-\"modern\" C++, and probably less than the sum\nof its parts.\n\n^2\n\nUsually, the program's taskbar button starts the program, and represents it\nwhile running. Emacs spawns a new button instead.\n\n^3\n\nThis is emacs-speak for \"it can't scroll the cursor outside the viewport\"\n\nTags: emacs\n\nOther posts\n\nbastibe.de by Bastian Bechtold is licensed under a Creative Commons\nAttribution-ShareAlike 3.0 Unported License.\n\n", "frontpage": true}
