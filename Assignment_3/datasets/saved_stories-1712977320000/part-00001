{"aid": "40017590", "title": "What Do Developers Want from AI?", "url": "https://www.computer.org/csdl/magazine/so/2024/03/10493171/1VTvfCwygyk", "domain": "computer.org", "votes": 1, "user": "tosh", "posted_at": "2024-04-12 21:00:23", "comments": 0, "source_title": "What Do Developers Want From AI?", "source_text": "What Do Developers Want From AI?\n\nOpens in a new window Opens an external website Opens an external website in a\nnew window\n\nThis website utilizes technologies such as cookies to enable essential site\nfunctionality, as well as for analytics, personalization, and targeted\nadvertising purposes. You may change your settings at any time or accept the\ndefault settings. You may close this banner to continue with only essential\ncookies. Privacy Policy\n\nStorage Preferences\n\n  * Join Us\n  * Sign In\n  * My Subscriptions\n  * Magazines\n  * Journals\n  * Video Library\n  * Conference Proceedings\n  * Individual CSDL Subscriptions\n  * Institutional CSDL Subscriptions\n  * Resources\n\n    * Career Center\n    * Tech News\n    * Resource Center\n    * Press Room\n    * Advertising\n    * Librarian Resources\n\n  * Previous Next\n  * Table of Contents\n  * Past Issues\n  * References\n  * Related Articles\n\n  1. Home\n  2. Magazines\n  3. IEEE Software\n  4. 2024.03\n\nIEEE Software\n\n# What Do Developers Want From AI?\n\nMay-June 2024, pp. 11-15, vol. 41\n\nDOI Bookmark: 10.1109/MS.2024.3363538\n\n#### Authors\n\nSarah D\u2019Angelo, Engineering Productivity Research Team, Google, Auckland, New\nZealand Ambar Murillo, Core Developer Team, Google, Munich, Germany Satish\nChandra, Developer AI Team, Google, Sunnyvale, CA, USA Andrew Macvean,\nDeveloper Organization, Google, Seattle, WA, USA\n\nDownload PDF\n\nSHARE ARTICLE\n\n#### Keywords\n\nArtificial Intelligence, Productivity, Social Networking Online, Chatbots,\nSoftware Tools, Codes, Software Quality, Development Of Tools, Historical\nMoment, Pivotal Moment, User Study, Software Development, Processing Software,\nSimple Task, Pain Points, Rewarding Aspects, User Goals\n\n#### Abstract\n\nThe evolution of AI is a pivotal moment in history, but it\u2019s not the first\ntime we have experienced technological advances that have changed how humans\nwork. By looking at the advances in automobiles, we are reminded of the\nimportance of focusing on our developers\u2019 needs and goals.\n\nThe recent advances in AI have resulted in the development of an increasing\nnumber of developer tools enhanced with AI (e.g., DuetAI, CoPilot, and ChatGPT\nfor coding tasks). With this growth, there has been a lot of research on the\nimpact of these enhancements from the perspective of developer productivity:\nAre AI enhancements increasing the speed at which developers write code? Do\nthey improve the quality of the code written?^1 Do they help developers find\nmore creative solutions? However, there has been far less discussion of where\nand how developers want to interact with AI in their tools. If we do not\naddress these questions, we risk focusing too much on the technology and its\ncapabilities and not enough on identifying promising opportunities. As we have\nemphasized in this column before, our team takes a human-centered approach to\nunderstanding developer productivity, and accordingly, we began our\nexplorations into this space from the developer\u2019s perspective. Where do\ndevelopers want AI in their workflows, and what do they anticipate its effects\nto be?\n\n## Introduction\n\nUnderstanding what humans want and need from technology is the foundation of\nuser experience research. However, this approach is sometimes questioned,\nespecially when it comes to large technical innovations. The often\nmisattributed quote \u201cIf I had asked people what they wanted, they would have\nsaid faster horses\u201d is used to suggest that users may not be able to imagine\nlarge innovative technological leaps (they wouldn\u2019t have been able to imagine\nthe car). While there is no evidence that this was ever said by Henry\nFord,^2,^3 it remains a popular justification of going directly to the user to\nbetter understand what they want. But if you take a closer look at the quote,\nit actually does reveal the importance of understanding user goals: a car is\nfaster than a horse. It is a way to get from point A to B, faster. So if we\nfocus on the user goal in that quote, we realize that it\u2019s not about the\nsolution (e.g., the horse or the car), it\u2019s about the fundamental user need\nand goal: getting somewhere faster. In the apocryphal Ford quote, the car is a\nlarge technical innovation that meets a user\u2019s need for fast transportation.\nIf we accept that AI is a large technical innovation that can meet needs for\ndevelopers, it makes sense to explicitly investigate what needs (and\npreferences) developers have that AI can meet. So with this in mind, what do\ndevelopers want from AI? To begin unpacking this question, we started where we\ntypically start: with the developers.\n\n## Efficient Horses\n\nIn our many interviews and user studies with developers who had varied\nexperiences with AI-enhanced developer tooling, they expressed a desire for\nAI-enhanced developer tooling to save them time and energy by helping them do\ntheir job more efficiently. This calls us back to the faster horses quote:\ndevelopers do not want AI to fundamentally change their workflows (right now),\nthey want AI to help them do what they are already doing, getting from point A\nto point B. Notably, they are not only focused on speed: efficiency is more\nthan just speed, it\u2019s also about making things easier and at least\nmaintaining, if not improving, quality.\n\nWe also heard from developers that they want AI to support simpler tasks and\nreduce toil, allowing the developer to focus more of their energy on the\ncomplex problem solving and creative aspects of their jobs. As one developer\nput it, \u201cAutomating menial and repetitive tasks could help me focus more on\nthe use case and the problem at hand.\u201d Similarly, another developer expressed\nhow AI could help them feel more creative by saving time on simpler tasks: \u201cIt\nfeels much more impactful if I can spend less time on the finer details. I\nthink AI powered tools will help me be more creative and think about the\nbigger picture and long-term goals.\u201d This is because right now, engineers want\nto stay in control, and that is okay. It is also consistent with perspectives\nshared by engineers outside of Google.^4\n\nTo put it in context, even today, we are only beginning to deploy driverless\ncars and in most cases still want human supervision in autonomous vehicles.\nThis is also true in AI-enhanced developer tools. Right now, when it comes to\nAI in developer tooling, developers want to stay in the driver\u2019s seat. They\nwant to maintain control and still decide how to get from A to B, even if AI\ncan help them on the way. For example, one participant in our user studies\nsaid, \u201cI like to use AI with \u2018trust, but verify.\u2019 You can look at the\nsuggestion and say, okay, [the AI] has some confidence that it\u2019s correct, but\nI need to be that final barrier.\u201d Another developer reflected, \u201cI don\u2019t think\nI personally would ever trust it 100% like we don\u2019t trust human written code\n100%, we\u2019re like okay, you know, it needs a code review, it needs to be looked\nover by someone else.\u201d\n\nThis is good because we are still in the early days of AI, so we still want\nsomeone \u201cbehind the wheel.\u201d The task for us is to ensure developers feel in\ncontrol when working with AI-enhanced tooling and, above all, to make sure\nthat AI is working for developers, supporting efficiency, while letting\ndevelopers solve the hard problems that they find rewarding.\n\nThis is not to say that AI enhancements in developer tooling will stay only at\nthe level of automating simpler tasks or that developers will always want\ncomplete control. What we want to highlight is that developers want to keep\ndoing the most rewarding aspects of their workflows and want AI tooling to\nhelp expedite the less rewarding aspects. And what falls into each category\nwill likely change over time, also in response to developments in AI.\n\n## The Horse to Car Journey for AI Developer Tooling\n\nIf we lean into the advent and advances of the automobile as a metaphor for\nthe integration of AI into developer tooling, it raises important\nconsiderations for the future based on technological innovations of the past,\ngiving us new insights into how we think about what developers want from AI in\ndeveloper tooling.\n\nWe looked to the history of car technology^5 to gather inspiration for how we\nmight think about the trajectory of AI in developer tooling. This revealed\nthree categories of enhancements (Table 1).\n\nTable 1. Three categories of AI enhancements.\n\nWhen it comes to AI in developer tooling today, we\u2019re mostly enhancing\nexisting capabilities and extending them. For example, AI-powered code\ncompletion enhances developers\u2019 ability to write code quickly, while\nleveraging large language models to find answers extends developers\u2019\ncapabilities to search for information. If we look at the evolution of car\ntechnology as a similar journey, there were many advances that made cars\neasier to drive, faster, and more comfortable, highlighting that in our AI\njourney, there is a lot of innovation to be had before we get to self-driving\ncars. When we think about how to build AI developer tools for developers, we\nshould ask ourselves, how might we leverage AI to make software development\nmore secure, higher quality, easier to learn, and efficient? Each of these\nplayed a pivotal role in making automobiles as pervasive as they are today,\nand we expect the same to be true for AI.\n\nLooking to the future, when we ask engineers what they want from AI in the\nlong term, engineers want AI to transform the way they work (e.g., elevate\ntheir thinking and help them solve complex problems).^4 For example,\ndevelopers we talked to expressed excitement for expanding capabilities of AI\nto do more. One developer said, \u201cIt would be nice to have a J.A.R.V.I.S. type\nof AI that is a coding partner... It feels more like: feeding a design doc\ninto an AI and having it generate the library. I see AI, in that case, as a\nprogramming companion.\u201d (J.A.R.V.I.S. stands for \u201cJust a Rather Very\nIntelligent System\u201d; see https://en.wikipedia.org/wiki/J.A.R.V.I.S.)\nSimilarly, another developer mentioned, \u201cWhen the suggestions and the\nassistance can get ahead of where I\u2019m thinking and allow me to think faster,\nthat to me is interesting, it\u2019s not the typing speed that is really the\nbottleneck for most software developers, it\u2019s the ability to really think\nthings through.\u201d These quotes highlight the opportunities for AI to go beyond\nenhancing and extending human capabilities into delegating them. As we think\nabout the future, how might we anticipate these use cases and plan for them?\nWhat is the optimal balance of system autonomy and user control?\n\nIt\u2019s important to acknowledge that other pivotal innovations were happening to\nimprove car technology that did not alter human capabilities, for example, the\nintroduction of the electric ignition.^3 Examples of these innovations in the\nAI space include model quality improvements and changes to the underlying\ntechnologies (e.g., the introduction of Transformer).^6 These are critical\naspects of the \u201chorse to car\u201d journey that we are not focusing on in this\ndiscussion.\n\n## Opportunities for AI to Support Developers\n\nSo, now that we\u2019ve situated ourselves in the horse to car journey, what do\ndevelopers want AI to do more specifically? As we\u2019ve said before, we don\u2019t\nneed to look too far. Ask developers. What are their pain points with current\nworkflows? What tasks are error prone and tedious? We can think of AI as a\ntool that we can use to enhance and extend human capabilities, particularly in\nareas where we know developers have already expressed pain points.\n\nAt Google, every quarter we ask a third of Google developers what hinders\ntheir productivity. The top hindrance is consistently technical debt, and the\nfollowing two most common hindrances are interesting opportunities for AI: 1.\npoor or missing documentation and 2. learning a new platform, infrastructure,\nframework, or technology (see Figure 1).\n\nFigure 1. The top 10 hindrances to developer productivity at Google in Q4 2023\n(the question asks engineers to select their top three hindrances and includes\nmore options than shown here).\n\nAt Google we are leaning in to supporting these pain points by investing in AI\nto support both the inner and outer loops of software development,^7 not just\nwriting code. While AI could be applied to all aspects of the development\nlifecycle, at Google we are driven by what developers tell us are their pain\npoints as a starting point for our AI investments. For example, to address the\npain point of learning new platforms and frameworks, we are investing in\nhelping engineers find answers to their questions. For example, DUET AI^8\nprovides chatbot and troubleshooting support to developers. Additionally, we\nare investing in AI support for reviewing and testing code^9 to address pain\npoints with those tasks. Asking developers about what hinders their\nproductivity helps us identify new directions and take a holistic approach in\nAI in development workflows.\n\nAt Google, we are focusing on supporting the entire development lifecycle,\nunderstanding resistance to AI, and thinking about what AI means for product\ndevelopment more broadly.\n\nWe also ask developers how they feel about AI in their workflows. While a\nmajority of developers express positive impacts of AI and are in various\nstages of trusting it to assist their workflows, others said they do not want\nAI in their workflows. This is not new to AI; there were holdouts to cars as\nwell. It is important to have skepticism with new technology: research has\nshown that engineers using AI-powered tools were more likely to write insecure\ncode during security-related tasks than those without.^10,^11 Adding AI to\ndeveloper tooling isn\u2019t without risk, and not all developers are enthusiastic\nabout it. (Cars are not perfectly safe, and not everyone has a driver\u2019s\nlicense.) It\u2019s important for us to understand developers\u2019 resistance to AI and\nidentify opportunities to make improvements and meet developers where they\nare.\n\n## Beyond the Car Itself\n\nNow that we have an idea of what AI can do for developers, we have to take a\nstep back. To achieve the full benefits of cars, we did not just simply make\nthem available, we had to create infrastructure to allow for easy adoption and\nreasonable evolution (e.g., highways, speed limits, and regulations). We also\nhad to support people in transitioning from horses to cars. The same\nprinciples apply for AI. As we move toward more AI support in developer\nworkflows, how can we anticipate structural changes that need to be made? Do\nwe need common infrastructure for AI-powered tools? And how can we work\ntogether across industries to ensure safe, fair, and equitable access to AI in\ndeveloper tools?\n\nThis takes us beyond Google and will involve the entire software engineering\ncommunity. With the rapid innovation and development of AI specifically in\ndeveloper tooling, these questions are increasingly important and urgent.\n\nThe evolution of AI is a pivotal moment in history, but it\u2019s not the first\ntime we have experienced technological advances that have changed how humans\nwork. Looking back at past examples, such as the advent and advances of\nautomobiles, can give us a different perspective and remind us of the\nimportance of focusing on our developers\u2019 goals, as well as highlighting that\nwhen a new technology appears, it can add value in both intended and\nunexpected ways. The transition from horses to cars is just one metaphor, but\nthere are many others that can provide valuable lessons. For example, AI is\nnot the first major advancement that has affected software engineering.\nEngineers were skeptical of \u201cautomatic coding,\u201d^12 but the compiler allowed\ndevelopers to codify best practices and automate them, which in turn allowed\nthem to work at a higher level of abstraction. The addition of AI in developer\ntooling presents a similar opportunity.\n\nAs we think about the future of software with AI, it\u2019s important to consider\nwhat developers\u2019 fundamental goals are (regardless of what they imagine them\nto look like) and how they want AI to support them. At Google, we are focusing\non supporting the entire development lifecycle, understanding resistance to\nAI, and thinking about what AI means for product development more broadly. We\nhope this article has given you a new lens on AI in developer tools and\nsparked ideas to the questions we have posed.\n\n## References\n\n  * 1.\u201cEarly LLM-based tools for enterprise information workers likely provide meaningful boosts to productivity.\u201d Microsoft. Accessed: Feb.1, 2024. [Online]. Available: https://www.microsoft.com/en-us/research/publication/early-llm-based-tools-for-enterprise-information-workers-likely-provide-meaningful-boosts-to-productivity/\n  * 2.\u201cHenry Ford, innovation, and that \u2018Faster Horse\u2019 quote,\u201d Harvard Bus. Rev., Aug., 2011. Accessed: Feb.1, 2024. [Online]. Available: https://hbr.org/2011/08/henry-ford-never-said-the-fast\n  * 3.\u201cUser research and design: Three old chestnuts cracked,\u201d Foolproof, London, U.K., 2017. [Online]. Available: https://www.foolproof.co.uk/journal/user-research-and-design-three-old-chestnuts-cracked/\n  * 4.\u201cA developer\u2019s second brain: Reducing complexity through partnership with AI.\u201d GitHub. Accessed: Feb.1, 2024. [Online]. Available: https://github.blog/2024-01-17-a-developers-second-brain-reducing-complexity-through-partnership-with-ai/\n  * 5.\u201cThe history of car technology.\u201d Jardine Motors Groups. Accessed: Feb.1, 2024. [Online]. Available: https://news.jardinemotors.co.uk/lifestyle/the-history-of-car-technology\n  * 6.\u201cTransformer: A novel neural network architecture for language understanding.\u201d Google Research. Accessed: Feb.1, 2024. [Online]. Available: https://blog.research.google/2017/08/transformer-novel-neural-network.html\n  * 7.J. Bader, S. Seohyun Kim, F. Sifei Luan, S. Chandra, and E. Meijer, \u201cAI in software engineering at Facebook,\u201d IEEE Softw., vol. 38, no. 4, pp. 52\u201361, Jul./Aug.2021, doi: 10.1109/MS.2021.3061664.\n  * 8.\u201cAI-assisted application development.\u201d Google Cloud. Accessed: Feb.1, 2024. [Online]. Available: https://cloud.google.com/duet-ai\n  * 9.\u201cResolving code review comments with ML.\u201d Google Research. Accessed: Feb.1, 2024. [Online]. Available: https://blog.research.google/2023/05/resolving-code-review-comments-with-ml.html\n  * 10.H. Pearce, B. Ahmad, B. Tan, B. Dolan-Gavitt, and R. Karri, \u201cAsleep at the keyboard? Assessing the security of GitHub copilot\u2019s code contributions,\u201d in Proc. IEEE Symp. Secur. Privacy (SP), 2022, pp. 754\u2013768, doi: 10.1109/SP46214.2022.9833571.\n  * 11.N. Perry, M. Srivastava, D. Kumar, and D. Boneh, \u201cDo users write more insecure code with AI assistants?\u201d in Proc. ACM SIGSAC Conf. Comput. Commun. Secur., 2022, pp. 2785\u20132799, doi: 10.1145/3576915.3623157. [Online]. Available: https://dl.acm.org/doi/abs/10.1145/3576915.3623157\n  * 12.J. W. Backus et al., \u201cThe FORTRAN automatic coding system,\u201d presented at the Western Joint Comput. Conf., Techn. Rel. (IRE-AIEE-ACM (Western)), New York, NY, USA: Association for Computing Machinery, Feb. 26\u201328, 1957, pp. 188\u2013198, doi: 10.1145/1455567.1455599.\n\nSarah D\u2019Angelo is a user experience researcher on the Engineering Productivity\nResearch Team, Google, Auckland 1010, New Zealand. Contact her at\nsdangelo@google.com.\n\nAmbar Murillo is a user experience researcher on the Core Developer Team,\nGoogle, 80636 Munich, Germany. Contact her at ambarm@google.com.\n\nSatish Chandra is the leader of the Developer AI Team, Google, Sunnyvale, CA\n94089 USA. Contact him at schandra@acm.org.\n\nAndrew Macvean is the head of UX research in the Developer Organization,\nGoogle, Seattle, WA 98103 USA. Contact him at amacvean@google.com.\n\n#### Related Articles\n\n  * What developers want and need from program analysis: An empirical study 2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE)\n  * What Do Developers Want? An Advisor Approach for Developer Priorities 2017 IEEE/ACM 10th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)\n  * Educational Software Features: What Do Educators Want? EdCompCon '84\n  * What help do developers seek, when and how? 2013 20th Working Conference on Reverse Engineering (WCRE)\n  * Negative Productivity and What to Do about It IEEE Software\n  * What Predicts Software Developers\u2019 Productivity? IEEE Transactions on Software Engineering\n  * Generative AI for Software Practitioners IEEE Software\n  * Optimizing Workflow for Elite Developers: Perspectives on Leveraging SE Bots 2023 IEEE/ACM 5th International Workshop on Bots in Software Engineering (BotSE)\n  * Do Developers Discover New Tools On The Toilet? 2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)\n  * What Do Developers Discuss about Biometric APIs? 2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)\n\nSign up for our newsletter.\n\nEMAIL ADDRESS\n\nIEEE COMPUTER SOCIETY\n\n  * About Us\n  * Board of Governors\n  * Newsletters\n  * Press Room\n  * IEEE Support Center\n  * Contact Us\n\nDIGITAL LIBRARY\n\n  * Magazines\n  * Journals\n  * Conference Proceedings\n  * Video Library\n\nCOMPUTING RESOURCES\n\n  * Jobs Board\n  * Courses & Certifications\n  * Webinars\n  * Podcasts\n  * Tech News\n  * Membership\n\nCOMMUNITY RESOURCES\n\n  * Conference Organizers\n  * Authors\n  * Chapters\n  * Communities\n\nBUSINESS SOLUTIONS\n\n  * Corporate Partnerships\n  * Conference Sponsorships & Exhibits\n  * Advertising\n  * Recruiting\n  * Digital Library Institution Subscriptions\n\nPOLICIES\n\n  * Privacy\n  * Accessibility Statement\n  * IEEE Nondiscrimination Policy\n  * XML Sitemap\n\n\u00a9IEEE \u2014 All rights reserved. Use of this website signifies your agreement to\nthe IEEE Terms and Conditions.\n\nA not-for-profit organization, the Institute of Electrical and Electronics\nEngineers (IEEE) is the world's largest technical professional organization\ndedicated to advancing technology for the benefit of humanity.\n\n", "frontpage": false}
