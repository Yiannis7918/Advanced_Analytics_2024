{"aid": "39960474", "title": "Goja: ECMAScript/JavaScript engine in pure Go", "url": "https://github.com/dop251/goja", "domain": "github.com/dop251", "votes": 2, "user": "thunderbong", "posted_at": "2024-04-07 13:02:41", "comments": 0, "source_title": "GitHub - dop251/goja: ECMAScript/JavaScript engine in pure Go", "source_text": "GitHub - dop251/goja: ECMAScript/JavaScript engine in pure Go\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ndop251 / goja Public\n\n  * Notifications\n  * Fork 343\n  * Star 4.9k\n\nECMAScript/JavaScript engine in pure Go\n\n### License\n\nMIT license\n\n4.9k stars 343 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# dop251/goja\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n4 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndop251Save return value and restore the stack before running finally. Fixes\n#...e401ed4 \u00b7\n\n## History\n\n464 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Upgraded staticcheck for Go 1.20  \n  \n### ast\n\n|\n\n### ast\n\n| Fix indexes of nodes (#532)  \n  \n### file\n\n|\n\n### file\n\n| Added trim whitespace from sourcemap source to avoid URL parse failur...  \n  \n### ftoa\n\n|\n\n### ftoa\n\n| Fixed formatting for Go 1.19  \n  \n### goja\n\n|\n\n### goja\n\n| Removed the usage of deprecated ioutil package. Bumped minimum Go ver...  \n  \n### parser\n\n|\n\n### parser\n\n| Fix indexes of nodes (#532)  \n  \n### testdata\n\n|\n\n### testdata\n\n| Initial commit  \n  \n### token\n\n|\n\n### token\n\n| Async/await functionality (#464)  \n  \n### unistring\n\n|\n\n### unistring\n\n| Optimized CPU and memory usage when importing strings and using JSON....  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial commit  \n  \n### .tc39_test262_checkout.sh\n\n|\n\n### .tc39_test262_checkout.sh\n\n| Fixed defineProperty(\"length\") for arrays. Improved detection of non-...  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit  \n  \n### README.md\n\n|\n\n### README.md\n\n| Fixed Readme for AssertFunction Call Case (#523)  \n  \n### array.go\n\n|\n\n### array.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### array_sparse.go\n\n|\n\n### array_sparse.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### array_sparse_test.go\n\n|\n\n### array_sparse_test.go\n\n| Improved export of Map, Set and iterable objects. Closes #368.  \n  \n### array_test.go\n\n|\n\n### array_test.go\n\n| Fixed misuse of reflect.SliceHeader. Added go vet. (#365)  \n  \n### builtin_array.go\n\n|\n\n### builtin_array.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_arrray_test.go\n\n|\n\n### builtin_arrray_test.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_boolean.go\n\n|\n\n### builtin_boolean.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_date.go\n\n|\n\n### builtin_date.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_error.go\n\n|\n\n### builtin_error.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_function.go\n\n|\n\n### builtin_function.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_function_test.go\n\n|\n\n### builtin_function_test.go\n\n| Skip hashbang at beginning of source contents  \n  \n### builtin_global.go\n\n|\n\n### builtin_global.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_global_test.go\n\n|\n\n### builtin_global_test.go\n\n| Refactored tests  \n  \n### builtin_json.go\n\n|\n\n### builtin_json.go\n\n| Correctly detect circular references in JSON.stringify for wrapped Go...  \n  \n### builtin_json_test.go\n\n|\n\n### builtin_json_test.go\n\n| Correctly detect circular references in JSON.stringify for wrapped Go...  \n  \n### builtin_map.go\n\n|\n\n### builtin_map.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_map_test.go\n\n|\n\n### builtin_map_test.go\n\n| Fixed the order in which the adder function and the iterator are obta...  \n  \n### builtin_math.go\n\n|\n\n### builtin_math.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_number.go\n\n|\n\n### builtin_number.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_object.go\n\n|\n\n### builtin_object.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_promise.go\n\n|\n\n### builtin_promise.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_proxy.go\n\n|\n\n### builtin_proxy.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_proxy_test.go\n\n|\n\n### builtin_proxy_test.go\n\n| Refactored tests  \n  \n### builtin_reflect.go\n\n|\n\n### builtin_reflect.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_regexp.go\n\n|\n\n### builtin_regexp.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_set.go\n\n|\n\n### builtin_set.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_set_test.go\n\n|\n\n### builtin_set_test.go\n\n| Fixed the order in which the adder function and the iterator are obta...  \n  \n### builtin_string.go\n\n|\n\n### builtin_string.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_string_test.go\n\n|\n\n### builtin_string_test.go\n\n| Exposed String and StringBuilder. Closes #321.  \n  \n### builtin_symbol.go\n\n|\n\n### builtin_symbol.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_typedarrays.go\n\n|\n\n### builtin_typedarrays.go\n\n| Fix using runtime.NewArrayBuffer  \n  \n### builtin_typedarrays_test.go\n\n|\n\n### builtin_typedarrays_test.go\n\n| Refactored tests  \n  \n### builtin_weakmap.go\n\n|\n\n### builtin_weakmap.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_weakmap_test.go\n\n|\n\n### builtin_weakmap_test.go\n\n| Fixed the order in which the adder function and the iterator are obta...  \n  \n### builtin_weakset.go\n\n|\n\n### builtin_weakset.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### builtin_weakset_test.go\n\n|\n\n### builtin_weakset_test.go\n\n| Fixed the order in which the adder function and the iterator are obta...  \n  \n### compiler.go\n\n|\n\n### compiler.go\n\n| Added documentation to Program. Closes #535  \n  \n### compiler_expr.go\n\n|\n\n### compiler_expr.go\n\n| Exposed String and StringBuilder. Closes #321.  \n  \n### compiler_stmt.go\n\n|\n\n### compiler_stmt.go\n\n| Save return value and restore the stack before running finally. Fixes #...  \n  \n### compiler_test.go\n\n|\n\n### compiler_test.go\n\n| Save return value and restore the stack before running finally. Fixes #...  \n  \n### date.go\n\n|\n\n### date.go\n\n| Refactored conversion to primitive to better match modern ECMAScript ...  \n  \n### date_parser.go\n\n|\n\n### date_parser.go\n\n| Treat date-only formats as UTC and date-time as local timezone. Added...  \n  \n### date_parser_test.go\n\n|\n\n### date_parser_test.go\n\n| Date.parse() now returns a number. Switched to own date parser for be...  \n  \n### date_test.go\n\n|\n\n### date_test.go\n\n| Refactored tests  \n  \n### destruct.go\n\n|\n\n### destruct.go\n\n| Exposed String and StringBuilder. Closes #321.  \n  \n### extract_failed_tests.sh\n\n|\n\n### extract_failed_tests.sh\n\n| Added toString tag to Reflect, allowed tests without id to run. Closes ...  \n  \n### func.go\n\n|\n\n### func.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### func_test.go\n\n|\n\n### func_test.go\n\n| Reworked AsyncContextTracker. Fixes #474 (#480)  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| Bump golang.org/x/text from 0.3.7 to 0.3.8  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| Bump golang.org/x/text from 0.3.7 to 0.3.8  \n  \n### ipow.go\n\n|\n\n### ipow.go\n\n| Check for overflows in ipow()  \n  \n### map.go\n\n|\n\n### map.go\n\n| Support for malformed UTF-16 strings and property keys. Missing Strin...  \n  \n### map_test.go\n\n|\n\n### map_test.go\n\n| Exposed Symbol  \n  \n### object.go\n\n|\n\n### object.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### object_args.go\n\n|\n\n### object_args.go\n\n| Improved export of Map, Set and iterable objects. Closes #368.  \n  \n### object_dynamic.go\n\n|\n\n### object_dynamic.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### object_dynamic_test.go\n\n|\n\n### object_dynamic_test.go\n\n| Added NewSharedDynamicObject() and NewSharedDynamicArray(). Closes #418.  \n  \n### object_goarray_reflect.go\n\n|\n\n### object_goarray_reflect.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### object_goarray_reflect_test.go\n\n|\n\n### object_goarray_reflect_test.go\n\n| Refactored conversion to primitive. Always use String() method if d...  \n  \n### object_gomap.go\n\n|\n\n### object_gomap.go\n\n| Refactored conversion to primitive to better match modern ECMAScript ...  \n  \n### object_gomap_reflect.go\n\n|\n\n### object_gomap_reflect.go\n\n| \"De-interface\" values retrieved from maps. Fixes #469.  \n  \n### object_gomap_reflect_test.go\n\n|\n\n### object_gomap_reflect_test.go\n\n| \"De-interface\" values retrieved from maps. Fixes #469.  \n  \n### object_gomap_test.go\n\n|\n\n### object_gomap_test.go\n\n| Refactored tests  \n  \n### object_goreflect.go\n\n|\n\n### object_goreflect.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### object_goreflect_test.go\n\n|\n\n### object_goreflect_test.go\n\n| Exposed String and StringBuilder. Closes #321.  \n  \n### object_goslice.go\n\n|\n\n### object_goslice.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### object_goslice_reflect.go\n\n|\n\n### object_goslice_reflect.go\n\n| Update the length property when it's accessed, rather than on grow/sh...  \n  \n### object_goslice_reflect_test.go\n\n|\n\n### object_goslice_reflect_test.go\n\n| Update the length property when it's accessed, rather than on grow/sh...  \n  \n### object_goslice_test.go\n\n|\n\n### object_goslice_test.go\n\n| Update the length property when it's accessed, rather than on grow/sh...  \n  \n### object_template.go\n\n|\n\n### object_template.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### object_test.go\n\n|\n\n### object_test.go\n\n| Exposed String and StringBuilder. Closes #321.  \n  \n### profiler.go\n\n|\n\n### profiler.go\n\n| Collect profiler samples after stop  \n  \n### profiler_test.go\n\n|\n\n### profiler_test.go\n\n| Collect profiler samples after stop  \n  \n### proxy.go\n\n|\n\n### proxy.go\n\n| Exposed String and StringBuilder. Closes #321.  \n  \n### regexp.go\n\n|\n\n### regexp.go\n\n| Exposed String and StringBuilder. Closes #321.  \n  \n### regexp_test.go\n\n|\n\n### regexp_test.go\n\n| Refactored tests  \n  \n### runtime.go\n\n|\n\n### runtime.go\n\n| Wrap error returned by MarshalJSON() in GoError. Added Exception.Unwr...  \n  \n### runtime_test.go\n\n|\n\n### runtime_test.go\n\n| Save return value and restore the stack before running finally. Fixes #...  \n  \n### staticcheck.conf\n\n|\n\n### staticcheck.conf\n\n| Added staticcheck (#364)  \n  \n### string.go\n\n|\n\n### string.go\n\n| Exposed String and StringBuilder. Closes #321.  \n  \n### string_ascii.go\n\n|\n\n### string_ascii.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### string_imported.go\n\n|\n\n### string_imported.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### string_test.go\n\n|\n\n### string_test.go\n\n| Exposed String and StringBuilder. Closes #321.  \n  \n### string_unicode.go\n\n|\n\n### string_unicode.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### tc39_norace_test.go\n\n|\n\n### tc39_norace_test.go\n\n| Added staticcheck (#364)  \n  \n### tc39_race_test.go\n\n|\n\n### tc39_race_test.go\n\n| Fixed formatting for go 1.17  \n  \n### tc39_test.go\n\n|\n\n### tc39_test.go\n\n| Implement String.prototype.replaceAll  \n  \n### typedarrays.go\n\n|\n\n### typedarrays.go\n\n| Fix using runtime.NewArrayBuffer  \n  \n### typedarrays_test.go\n\n|\n\n### typedarrays_test.go\n\n| ExportTo() now supports exporting of ArrayBuffer and ArrayBuffer-back...  \n  \n### value.go\n\n|\n\n### value.go\n\n| Implemented template-backed objects and used them for most of the bui...  \n  \n### vm.go\n\n|\n\n### vm.go\n\n| Save return value and restore the stack before running finally. Fixes #...  \n  \n### vm_test.go\n\n|\n\n### vm_test.go\n\n| Implemented \"cpu\" profiler for ECMAScript code (similar to pprof.Star...  \n  \n## Repository files navigation\n\n# goja\n\nECMAScript 5.1(+) implementation in Go.\n\nGoja is an implementation of ECMAScript 5.1 in pure Go with emphasis on\nstandard compliance and performance.\n\nThis project was largely inspired by otto.\n\nMinimum required Go version is 1.16.\n\n## Features\n\n  * Full ECMAScript 5.1 support (including regex and strict mode).\n  * Passes nearly all tc39 tests for the features implemented so far. The goal is to pass all of them. See .tc39_test262_checkout.sh for the latest working commit id.\n  * Capable of running Babel, Typescript compiler and pretty much anything written in ES5.\n  * Sourcemaps.\n  * Most of ES6 functionality, still work in progress, see https://github.com/dop251/goja/milestone/1?closed=1\n\n## Known incompatibilities and caveats\n\n### WeakMap\n\nWeakMap is implemented by embedding references to the values into the keys.\nThis means that as long as the key is reachable all values associated with it\nin any weak maps also remain reachable and therefore cannot be garbage\ncollected even if they are not otherwise referenced, even after the WeakMap is\ngone. The reference to the value is dropped either when the key is explicitly\nremoved from the WeakMap or when the key becomes unreachable.\n\nTo illustrate this:\n\n    \n    \n    var m = new WeakMap(); var key = {}; var value = {/* a very large object */}; m.set(key, value); value = undefined; m = undefined; // The value does NOT become garbage-collectable at this point key = undefined; // Now it does // m.delete(key); // This would work too\n\nThe reason for it is the limitation of the Go runtime. At the time of writing\n(version 1.15) having a finalizer set on an object which is part of a\nreference cycle makes the whole cycle non-garbage-collectable. The solution\nabove is the only reasonable way I can think of without involving finalizers.\nThis is the third attempt (see #250 and #199 for more details).\n\nNote, this does not have any effect on the application logic, but may cause a\nhigher-than-expected memory usage.\n\n### WeakRef and FinalizationRegistry\n\nFor the reason mentioned above implementing WeakRef and FinalizationRegistry\ndoes not seem to be possible at this stage.\n\n### JSON\n\nJSON.parse() uses the standard Go library which operates in UTF-8. Therefore,\nit cannot correctly parse broken UTF-16 surrogate pairs, for example:\n\n    \n    \n    JSON.parse(`\"\\\\uD800\"`).charCodeAt(0).toString(16) // returns \"fffd\" instead of \"d800\"\n\n### Date\n\nConversion from calendar date to epoch timestamp uses the standard Go library\nwhich uses int, rather than float as per ECMAScript specification. This means\nif you pass arguments that overflow int to the Date() constructor or if there\nis an integer overflow, the result will be incorrect, for example:\n\n    \n    \n    Date.UTC(1970, 0, 1, 80063993375, 29, 1, -288230376151711740) // returns 29256 instead of 29312\n\n## FAQ\n\n### How fast is it?\n\nAlthough it's faster than many scripting language implementations in Go I have\nseen (for example it's 6-7 times faster than otto on average) it is not a\nreplacement for V8 or SpiderMonkey or any other general-purpose JavaScript\nengine. You can find some benchmarks here.\n\n### Why would I want to use it over a V8 wrapper?\n\nIt greatly depends on your usage scenario. If most of the work is done in\njavascript (for example crypto or any other heavy calculations) you are\ndefinitely better off with V8.\n\nIf you need a scripting language that drives an engine written in Go so that\nyou need to make frequent calls between Go and javascript passing complex data\nstructures then the cgo overhead may outweigh the benefits of having a faster\njavascript engine.\n\nBecause it's written in pure Go there are no cgo dependencies, it's very easy\nto build and it should run on any platform supported by Go.\n\nIt gives you a much better control over execution environment so can be useful\nfor research.\n\n### Is it goroutine-safe?\n\nNo. An instance of goja.Runtime can only be used by a single goroutine at a\ntime. You can create as many instances of Runtime as you like but it's not\npossible to pass object values between runtimes.\n\n### Where is setTimeout()?\n\nsetTimeout() assumes concurrent execution of code which requires an execution\nenvironment, for example an event loop similar to nodejs or a browser. There\nis a separate project aimed at providing some NodeJS functionality, and it\nincludes an event loop.\n\n### Can you implement (feature X from ES6 or higher)?\n\nI will be adding features in their dependency order and as quickly as time\npermits. Please do not ask for ETAs. Features that are open in the milestone\nare either in progress or will be worked on next.\n\nThe ongoing work is done in separate feature branches which are merged into\nmaster when appropriate. Every commit in these branches represents a\nrelatively stable state (i.e. it compiles and passes all enabled tc39 tests),\nhowever because the version of tc39 tests I use is quite old, it may be not as\nwell tested as the ES5.1 functionality. Because there are (usually) no major\nbreaking changes between ECMAScript revisions it should not break your\nexisting code. You are encouraged to give it a try and report any bugs found.\nPlease do not submit fixes though without discussing it first, as the code\ncould be changed in the meantime.\n\n### How do I contribute?\n\nBefore submitting a pull request please make sure that:\n\n  * You followed ECMA standard as close as possible. If adding a new feature make sure you've read the specification, do not just base it on a couple of examples that work fine.\n  * Your change does not have a significant negative impact on performance (unless it's a bugfix and it's unavoidable)\n  * It passes all relevant tc39 tests.\n\n## Current Status\n\n  * There should be no breaking changes in the API, however it may be extended.\n  * Some of the AnnexB functionality is missing.\n\n## Basic Example\n\nRun JavaScript and get the result value.\n\n    \n    \n    vm := goja.New() v, err := vm.RunString(\"2 + 2\") if err != nil { panic(err) } if num := v.Export().(int64); num != 4 { panic(num) }\n\n## Passing Values to JS\n\nAny Go value can be passed to JS using Runtime.ToValue() method. See the\nmethod's documentation for more details.\n\n## Exporting Values from JS\n\nA JS value can be exported into its default Go representation using\nValue.Export() method.\n\nAlternatively it can be exported into a specific Go variable using\nRuntime.ExportTo() method.\n\nWithin a single export operation the same Object will be represented by the\nsame Go value (either the same map, slice or a pointer to the same struct).\nThis includes circular objects and makes it possible to export them.\n\n## Calling JS functions from Go\n\nThere are 2 approaches:\n\n  * Using AssertFunction():\n\n    \n    \n    const SCRIPT = ` function sum(a, b) { return +a + b; } ` vm := goja.New() _, err := vm.RunString(SCRIPT) if err != nil { panic(err) } sum, ok := goja.AssertFunction(vm.Get(\"sum\")) if !ok { panic(\"Not a function\") } res, err := sum(goja.Undefined(), vm.ToValue(40), vm.ToValue(2)) if err != nil { panic(err) } fmt.Println(res) // Output: 42\n\n  * Using Runtime.ExportTo():\n\n    \n    \n    const SCRIPT = ` function sum(a, b) { return +a + b; } ` vm := goja.New() _, err := vm.RunString(SCRIPT) if err != nil { panic(err) } var sum func(int, int) int err = vm.ExportTo(vm.Get(\"sum\"), &sum) if err != nil { panic(err) } fmt.Println(sum(40, 2)) // note, _this_ value in the function will be undefined. // Output: 42\n\nThe first one is more low level and allows specifying this value, whereas the\nsecond one makes the function look like a normal Go function.\n\n## Mapping struct field and method names\n\nBy default, the names are passed through as is which means they are\ncapitalised. This does not match the standard JavaScript naming convention, so\nif you need to make your JS code look more natural or if you are dealing with\na 3rd party library, you can use a FieldNameMapper:\n\n    \n    \n    vm := goja.New() vm.SetFieldNameMapper(TagFieldNameMapper(\"json\", true)) type S struct { Field int `json:\"field\"` } vm.Set(\"s\", S{Field: 42}) res, _ := vm.RunString(`s.field`) // without the mapper it would have been s.Field fmt.Println(res.Export()) // Output: 42\n\nThere are two standard mappers: TagFieldNameMapper and UncapFieldNameMapper,\nor you can use your own implementation.\n\n## Native Constructors\n\nIn order to implement a constructor function in Go use func\n(goja.ConstructorCall) *goja.Object. See Runtime.ToValue() documentation for\nmore details.\n\n## Regular Expressions\n\nGoja uses the embedded Go regexp library where possible, otherwise it falls\nback to regexp2.\n\n## Exceptions\n\nAny exception thrown in JavaScript is returned as an error of type *Exception.\nIt is possible to extract the value thrown by using the Value() method:\n\n    \n    \n    vm := goja.New() _, err := vm.RunString(` throw(\"Test\"); `) if jserr, ok := err.(*Exception); ok { if jserr.Value().Export() != \"Test\" { panic(\"wrong value\") } } else { panic(\"wrong type\") }\n\nIf a native Go function panics with a Value, it is thrown as a Javascript\nexception (and therefore can be caught):\n\n    \n    \n    var vm *Runtime func Test() { panic(vm.ToValue(\"Error\")) } vm = goja.New() vm.Set(\"Test\", Test) _, err := vm.RunString(` try { Test(); } catch(e) { if (e !== \"Error\") { throw e; } } `) if err != nil { panic(err) }\n\n## Interrupting\n\n    \n    \n    func TestInterrupt(t *testing.T) { const SCRIPT = ` var i = 0; for (;;) { i++; } ` vm := goja.New() time.AfterFunc(200 * time.Millisecond, func() { vm.Interrupt(\"halt\") }) _, err := vm.RunString(SCRIPT) if err == nil { t.Fatal(\"Err is nil\") } // err is of type *InterruptError and its Value() method returns whatever has been passed to vm.Interrupt() }\n\n## NodeJS Compatibility\n\nThere is a separate project aimed at providing some of the NodeJS\nfunctionality.\n\n## About\n\nECMAScript/JavaScript engine in pure Go\n\n### Topics\n\njavascript golang\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n4.9k stars\n\n### Watchers\n\n80 watching\n\n### Forks\n\n343 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Used by 7.6k\n\n\\+ 7,631\n\n## Contributors 25\n\n\\+ 11 contributors\n\n## Languages\n\n  * Go 99.8%\n  * Other 0.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
