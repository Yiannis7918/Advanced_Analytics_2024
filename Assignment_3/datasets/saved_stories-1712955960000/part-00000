{"aid": "40013777", "title": "Tomorrow's FBI Mixer", "url": "https://twobithistory.org/2020/06/28/rest.html", "domain": "twobithistory.org", "votes": 1, "user": "listenlight", "posted_at": "2024-04-12 15:05:09", "comments": 0, "source_title": "Roy Fielding's Misappropriated REST Dissertation", "source_text": "Roy Fielding's Misappropriated REST Dissertation\n\n# 0b10\n\nTwo-Bit History\n\n# 0b10\n\nTwo-Bit History\n\nComputing through the ages\n\n# Roy Fielding's Misappropriated REST Dissertation\n\n  * Web\n  * Papers\n\n28 Jun 2020\n\nRESTful APIs are everywhere. This is funny, because how many people really\nknow what \u201cRESTful\u201d is supposed to mean?\n\nI think most of us can empathize with this Hacker News poster:\n\n> I\u2019ve read several articles about REST, even a bit of the original paper. But\n> I still have quite a vague idea about what it is. I\u2019m beginning to think\n> that nobody knows, that it\u2019s simply a very poorly defined concept.\n\nI had planned to write a blog post exploring how REST came to be such a\ndominant paradigm for communication across the internet. I started my research\nby reading Roy Fielding\u2019s 2000 dissertation, which introduced REST to the\nworld. After reading Fielding\u2019s dissertation, I realized that the much more\ninteresting story here is how Fielding\u2019s ideas came to be so widely\nmisunderstood.\n\nMany more people know that Fielding\u2019s dissertation is where REST came from\nthan have read the dissertation (fair enough), so misconceptions about what\nthe dissertation actually contains are pervasive.\n\nThe biggest of these misconceptions is that the dissertation directly\naddresses the problem of building APIs. I had always assumed, as I imagine\nmany people do, that REST was intended from the get-go as an architectural\nmodel for web APIs built on top of HTTP. I thought perhaps that there had been\nsome chaotic experimental period where people were building APIs on top of\nHTTP all wrong, and then Fielding came along and presented REST as the sane\nway to do things. But the timeline doesn\u2019t make sense here: APIs for web\nservices, in the sense that we know them today, weren\u2019t a thing until a few\nyears after Fielding published his dissertation.\n\nFielding\u2019s dissertation (titled \u201cArchitectural Styles and the Design of\nNetwork-based Software Architectures\u201d) is not about how to build APIs on top\nof HTTP but rather about HTTP itself. Fielding contributed to the HTTP/1.0\nspecification and co-authored the HTTP/1.1 specification, which was published\nin 1999. He was interested in the architectural lessons that could be drawn\nfrom the design of the HTTP protocol; his dissertation presents REST as a\ndistillation of the architectural principles that guided the standardization\nprocess for HTTP/1.1. Fielding used these principles to make decisions about\nwhich proposals to incorporate into HTTP/1.1. For example, he rejected a\nproposal to batch requests using new MGET and MHEAD methods because he felt\nthe proposal violated the constraints prescribed by REST, especially the\nconstraint that messages in a REST system should be easy to proxy and cache.^1\nSo HTTP/1.1 was instead designed around persistent connections over which\nmultiple HTTP requests can be sent. (Fielding also felt that cookies are not\nRESTful because they add state to what should be a stateless system, but their\nusage was already entrenched.^2) REST, for Fielding, was not a guide to\nbuilding HTTP-based systems but a guide to extending HTTP.\n\nThis isn\u2019t to say that Fielding doesn\u2019t think REST could be used to build\nother systems. It\u2019s just that he assumes these other systems will also be\n\u201cdistributed hypermedia systems.\u201d This is another misconception people have\nabout REST: that it is a general architecture you can use for any kind of\nnetworked application. But you could sum up the part of the dissertation where\nFielding introduces REST as, essentially, \u201cListen, we just designed HTTP, so\nif you also find yourself designing a distributed hypermedia system you should\nuse this cool architecture we worked out called REST to make things easier.\u201d\nIt\u2019s not obvious why Fielding thinks anyone would ever attempt to build such a\nthing given that the web already exists; perhaps in 2000 it seemed like there\nwas room for more than one distributed hypermedia system in the world. Anyway,\nFielding makes clear that REST is intended as a solution for the scalability\nand consistency problems that arise when trying to connect hypermedia across\nthe internet, not as an architectural model for distributed applications in\ngeneral.\n\nWe remember Fielding\u2019s dissertation now as the dissertation that introduced\nREST, but really the dissertation is about how much one-size-fits-all software\narchitectures suck, and how you can better pick a software architecture\nappropriate for your needs. Only a single chapter of the dissertation is\ndevoted to REST itself; much of the word count is spent on a taxonomy of\nalternative architectural styles^3 that one could use for networked\napplications. Among these is the Pipe-and-Filter (PF) style, inspired by Unix\npipes, along with various refinements of the Client-Server style (CS), such as\nLayered-Client-Server (LCS), Client-Cache-Stateless-Server (C$SS), and\nLayered-Client-Cache-Stateless-Server (LC$SS). The acronyms get unwieldy but\nFielding\u2019s point is that you can mix and match constraints imposed by existing\nstyles to derive new styles. REST gets derived this way and could instead have\nbeen called\u2014but for obvious reasons was not\u2014Uniform-Layered-Code-on-Demand-\nClient-Cache-Stateless-Server (ULCODC$SS). Fielding establishes this taxonomy\nto emphasize that different constraints are appropriate for different\napplications and that this last group of constraints were the ones he felt\nworked best for HTTP.\n\nThis is the deep, deep irony of REST\u2019s ubiquity today. REST gets blindly used\nfor all sorts of networked applications now, but Fielding originally offered\nREST as an illustration of how to derive a software architecture tailored to\nan individual application\u2019s particular needs.\n\nI struggle to understand how this happened, because Fielding is so explicit\nabout the pitfalls of not letting form follow function. He warns, almost at\nthe very beginning of the dissertation, that \u201cdesign-by-buzzword is a common\noccurrence\u201d brought on by a failure to properly appreciate software\narchitecture.^4 He picks up this theme again several pages later:\n\n> Some architectural styles are often portrayed as \u201csilver bullet\u201d solutions\n> for all forms of software. However, a good designer should select a style\n> that matches the needs of a particular problem being solved.^5\n\nREST itself is an especially poor \u201csilver bullet\u201d solution, because, as\nFielding later points out, it incorporates trade-offs that may not be\nappropriate unless you are building a distributed hypermedia application:\n\n> REST is designed to be efficient for large-grain hypermedia data transfer,\n> optimizing for the common case of the Web, but resulting in an interface\n> that is not optimal for other forms of architectural interaction.^6\n\nFielding came up with REST because the web posed a thorny problem of \u201canarchic\nscalability,\u201d by which Fielding means the need to connect documents in a\nperformant way across organizational and national boundaries. The constraints\nthat REST imposes were carefully chosen to solve this anarchic scalability\nproblem. Web service APIs that are public-facing have to deal with a similar\nproblem, so one can see why REST is relevant there. Yet today it would not be\nat all surprising to find that an engineering team has built a backend using\nREST even though the backend only talks to clients that the engineering team\nhas full control over. We have all become the architect in this Monty Python\nsketch, who designs an apartment building in the style of a slaughterhouse\nbecause slaughterhouses are the only thing he has experience building.\n(Fielding uses a line from this sketch as an epigraph for his dissertation:\n\u201cExcuse me... did you say \u2018knives\u2019?\u201d)\n\nSo, given that Fielding\u2019s dissertation was all about avoiding silver bullet\nsoftware architectures, how did REST become a de facto standard for web\nservices of every kind?\n\nMy theory is that, in the mid-2000s, the people who were sick of SOAP and\nwanted to do something else needed their own four-letter acronym.\n\nI\u2019m only half-joking here. SOAP, or the Simple Object Access Protocol, is a\nverbose and complicated protocol that you cannot use without first\nunderstanding a bunch of interrelated XML specifications. Early web services\noffered APIs based on SOAP, but, as more and more APIs started being offered\nin the mid-2000s, software developers burned by SOAP\u2019s complexity migrated\naway en masse.\n\nAmong this crowd, SOAP inspired contempt. Ruby-on-Rails dropped SOAP support\nin 2007, leading to this emblematic comment from Rails creator David\nHeinemeier Hansson: \u201cWe feel that SOAP is overly complicated. It\u2019s been taken\nover by the enterprise people, and when that happens, usually nothing good\ncomes of it.\u201d^7 The \u201centerprise people\u201d wanted everything to be formally\nspecified, but the get-shit-done crowd saw that as a waste of time.\n\nIf the get-shit-done crowd wasn\u2019t going to use SOAP, they still needed some\nstandard way of doing things. Since everyone was using HTTP, and since\neveryone would keep using HTTP at least as a transport layer because of all\nthe proxying and caching support, the simplest possible thing to do was just\nrely on HTTP\u2019s existing semantics. So that\u2019s what they did. They could have\ncalled their approach Fuck It, Overload HTTP (FIOH), and that would have been\nan accurate name, as anyone who has ever tried to decide what HTTP status code\nto return for a business logic error can attest. But that would have seemed\nrecklessly blas\u00e9 next to all the formal specification work that went into\nSOAP.\n\nLuckily, there was this dissertation out there, written by a co-author of the\nHTTP/1.1 specification, that had something vaguely to do with extending HTTP\nand could offer FIOH a veneer of academic respectability. So REST was\nappropriated to give cover for what was really just FIOH.\n\nI\u2019m not saying that this is exactly how things happened, or that there was an\nactual conspiracy among irreverent startup types to misappropriate REST, but\nthis story helps me understand how REST became a model for web service APIs\nwhen Fielding\u2019s dissertation isn\u2019t about web service APIs at all. Adopting\nREST\u2019s constraints makes some sense, especially for public-facing APIs that do\ncross organizational boundaries and thus benefit from REST\u2019s \u201cuniform\ninterface.\u201d That link must have been the kernel of why REST first got\nmentioned in connection with building APIs on the web. But imagining a\nseparate approach called \u201cFIOH,\u201d that borrowed the \u201cREST\u201d name partly just for\nmarketing reasons, helps me account for the many disparities between what\ntoday we know as RESTful APIs and the REST architectural style that Fielding\noriginally described.\n\nREST purists often complain, for example, that so-called REST APIs aren\u2019t\nactually REST APIs because they do not use Hypermedia as The Engine of\nApplication State (HATEOAS). Fielding himself has made this criticism.\nAccording to him, a real REST API is supposed to allow you to navigate all its\nendpoints from a base endpoint by following links. If you think that people\nare actually out there trying to build REST APIs, then this is a glaring\nomission\u2014HATEOAS really is fundamental to Fielding\u2019s original conception of\nREST, especially considering that the \u201cstate transfer\u201d in \u201cRepresentational\nState Transfer\u201d refers to navigating a state machine using hyperlinks between\nresources (and not, as many people seem to believe, to transferring resource\nstate over the wire).^8 But if you imagine that everyone is just building FIOH\nAPIs and advertising them, with a nudge and a wink, as REST APIs, or slightly\nmore honestly as \u201cRESTful\u201d APIs, then of course HATEOAS is unimportant.\n\nSimilarly, you might be surprised to know that there is nothing in Fielding\u2019s\ndissertation about which HTTP verb should map to which CRUD action, even\nthough software developers like to argue endlessly about whether using PUT or\nPATCH to update a resource is more RESTful. Having a standard mapping of HTTP\nverbs to CRUD actions is a useful thing, but this standard mapping is part of\nFIOH and not part of REST.\n\nThis is why, rather than saying that nobody understands REST, we should just\nthink of the term \u201cREST\u201d as having been misappropriated. The modern notion of\na REST API has historical links to Fielding\u2019s REST architecture, but really\nthe two things are separate. The historical link is good to keep in mind as a\nguide for when to build a RESTful API. Does your API cross organizational and\nnational boundaries the same way that HTTP needs to? Then building a RESTful\nAPI with a predictable, uniform interface might be the right approach. If not,\nit\u2019s good to remember that Fielding favored having form follow function. Maybe\nsomething like GraphQL or even just JSON-RPC would be a better fit for what\nyou are trying to accomplish.\n\nIf you enjoyed this post, more like it come out every four weeks! Follow\n@TwoBitHistory on Twitter or subscribe to the RSS feed to make sure you know\nwhen a new post is out.\n\nPreviously on TwoBitHistory...\n\n> New post is up! I wrote about how to solve differential equations using an\n> analog computer from the '30s mostly made out of gears. As a bonus there's\n> even some stuff in here about how to aim very large artillery\n> pieces.https://t.co/fwswXymgZa\n>\n> \u2014 TwoBitHistory (@TwoBitHistory) April 6, 2020\n\n  1. Roy Fielding. \u201cArchitectural Styles and the Design of Network-based Software Architectures,\u201d 128. 2000. University of California, Irvine, PhD Dissertation, accessed June 28, 2020, https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation_2up.pdf. \u21a9\n\n  2. Fielding, 130. \u21a9\n\n  3. Fielding distinguishes between software architectures and software architecture \u201cstyles.\u201d REST is an architectural style that has an instantiation in the architecture of HTTP. \u21a9\n\n  4. Fielding, 2. \u21a9\n\n  5. Fielding, 15. \u21a9\n\n  6. Fielding, 82. \u21a9\n\n  7. Paul Krill. \u201cRuby on Rails 2.0 released for Web Apps,\u201d InfoWorld. Dec 7, 2007, accessed June 28, 2020, https://www.infoworld.com/article/2648925/ruby-on-rails-2-0-released-for-web-apps.html \u21a9\n\n  8. Fielding, 109. \u21a9\n\n", "frontpage": false}
