{"aid": "39967143", "title": "How to Setup Leptos SSR with Cloudflare Pages", "url": "https://github.com/DylanRJohnston/leptos-cloudflare-example", "domain": "github.com/dylanrjohnston", "votes": 1, "user": "BreakfastB0b", "posted_at": "2024-04-08 07:32:01", "comments": 0, "source_title": "GitHub - DylanRJohnston/leptos-cloudflare-example: Example of getting Leptos SSR working with Cloudflare Pages", "source_text": "GitHub - DylanRJohnston/leptos-cloudflare-example: Example of getting Leptos\nSSR working with Cloudflare Pages\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nDylanRJohnston / leptos-cloudflare-example Public\n\n  * Notifications\n  * Fork 0\n  * Star 1\n\nExample of getting Leptos SSR working with Cloudflare Pages\n\n1 star 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# DylanRJohnston/leptos-cloudflare-example\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nDylanRJohnstonAdd demo linkcfb65c8 \u00b7\n\n## History\n\n4 Commits  \n  \n### site\n\n|\n\n### site\n\n| Initial commit  \n  \n### src\n\n|\n\n### src\n\n| Initial commit  \n  \n### .envrc\n\n|\n\n### .envrc\n\n| Initial commit  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Remove node_modules  \n  \n### Cargo.lock\n\n|\n\n### Cargo.lock\n\n| Initial commit  \n  \n### Cargo.toml\n\n|\n\n### Cargo.toml\n\n| Initial commit  \n  \n### README.md\n\n|\n\n### README.md\n\n| Add demo link  \n  \n### build.sh\n\n|\n\n### build.sh\n\n| Initial commit  \n  \n### flake.lock\n\n|\n\n### flake.lock\n\n| Initial commit  \n  \n### flake.nix\n\n|\n\n### flake.nix\n\n| Initial commit  \n  \n## Repository files navigation\n\n# Leptos + Cloudflare Pages\n\nThis is a \"Hello World\" style repo showing how to successfully integrate\nLeptos SSR with Cloudflare Pages. Cloudflare Pages has the advantage over\nworker sites in that static asset retrieval, such as a the client wasm bundle\nor css, is free.\n\nThe app contains a SSR'ed page with client hydration of a button, which hits a\nServer Side Function that generates a random number and returns it to the\nclient.\n\nLive Demo\n\n    \n    \n    #[server] pub async fn generate_random_number() -> Result<f64, ServerFnError> { Ok(js_sys::Math::random()) } #[component] pub fn hello_world() -> impl IntoView { provide_meta_context(); let get_random = create_server_action::<GenerateRandomNumber>(); let on_click = move |_| get_random.dispatch(GenerateRandomNumber {}); view! { <h1>\"Hello, World! \"{move || get_random.value()}</h1> <button on:click=on_click>\"Get me a random number\"</button> } }\n\n### Routing\n\nTo determine what is routed to static assets in Cloudflare Pages vs the Worker\nfunctions there is the _routes.json file which controls basic pattern matching\nof routes. e.g.\n\n    \n    \n    { \"version\": 1, \"include\": [\"/*\"], \"exclude\": [\"/pkg/*\"] }\n\nThe exclude clause overrides the include clause and so this routes file will\nroute all requests not starting with /pkg to the Cloudflare Worker where\nLeptos and Axum can use SSR.\n\n### SSR\n\nServer Side Rendering is handled via Cloudflare Workers, Leptos, and Axum.\nSupport for Axum was added recently to the workers-rs repository and so\nintermediate libraries like cloudflare-axum and leptos-cloudflare are no\nlonger required.\n\nThe configuration of Leptos and Axum looks fairly normal with the exception\nthat instead of binding the router to a port we invoke it once with the\nRequest passed into the Cloudflare Worker e.g.\n\n    \n    \n    #[event(fetch)] pub async fn fetch( req: HttpRequest, _env: Env, _ctx: Context, ) -> Result<axum::http::Response<axum::body::Body>> { let leptos_options = LeptosOptions::builder() .output_name(\"index\") .site_pkg_dir(\"pkg\") .build(); // Automatic registration of server_fns doesn't work in WASM register_explicit::<GenerateRandomNumber>(); let mut router = Router::new() .leptos_routes(&leptos_options, generate_route_list(HelloWorld), HelloWorld) .with_state(leptos_options); Ok(router.call(req).await?) }\n\nI haven't had much chance to play around with it, but it might also be\npossible to render out static routes and Leptos Islands into static files\nserved by Cloudflare Pages for free instead of requiring an invocation of the\nCloudflare Worker which counts towards your bill.\n\n### Hydration\n\nThe client and server wasm bundles are built separately and then transformed\nwith wasm-bindgen. The client bundle is placed inside site/pkg where\nCloudflare Pages serves it to the client for free.\n\n### Building\n\nBuilding is achieved by building the client and server wasm separately, and\nthen using wasm-bindgen to generate the JS compatible bindings. The server\nrequires a small shim which is detailed below.\n\n    \n    \n    cargo build --release --bin server --no-default-features --target wasm32-unknown-unknown --features ssr cargo build --release --bin client --no-default-features --target wasm32-unknown-unknown --features hydrate wasm-bindgen target/wasm32-unknown-unknown/release/server.wasm --out-name index --no-typescript --target bundler --out-dir site wasm-bindgen target/wasm32-unknown-unknown/release/client.wasm --out-name index --no-typescript --target web --out-dir site/pkg\n\n### Cloudflare Worker Shim\n\nA small JS shim is required to bridge the gap between the JS produced by wasm-\nbindgen and what is expected by Cloudflare Workers, the shim can be found in\nsite/_worker.js. This originally came from the official Cloudflare\nDocumentation but I can't find the source when putting this documentation\ntogether anymore.\n\n    \n    \n    import * as imports from \"./index_bg.js\"; export * from \"./index_bg.js\"; import wkmod from \"./index_bg.wasm\"; import * as nodemod from \"./index_bg.wasm\"; if (typeof process !== \"undefined\" && process.release.name === \"node\") { imports.__wbg_set_wasm(nodemod); } else { const instance = new WebAssembly.Instance(wkmod, { \"./index_bg.js\": imports, }); imports.__wbg_set_wasm(instance.exports); } Error.stackTraceLimit = Infinity; imports.start?.(); export * as default from \"./index_bg.js\"\n\n### Local Development\n\nBecause cargo leptos doesn't support this style of server we're left with\nputting the tools together ourselves, building is fairly simple as documented\nabove, but lacks hot-reloading and other quality of life features. I\npersonally use entr to watch for file changes and then re-compile.\n\nCloudflare pages also supports local development via wrangler.\n\n    \n    \n    wrangler pages dev site\n\nWrangler also allows for easy testing against a real deployment to their\ncloud, please see their documentation for more details.\n\n### Nix\n\nI've provided a flake.nix which has all the required dependencies to get\nstarted, including an overlay for a more recent wasm-bidngen-cli if nix is\nyour thing. If not a rough guide to what you'll need is as follows.\n\n  * rustc\n  * cargo\n  * wrangler\n  * wasm-bindgen-cli\n  * entr\n\n## About\n\nExample of getting Leptos SSR working with Cloudflare Pages\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n1 star\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Rust 38.3%\n  * Nix 36.9%\n  * Shell 12.7%\n  * JavaScript 12.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
