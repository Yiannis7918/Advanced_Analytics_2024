{"aid": "40078302", "title": "Running production-grade PostgreSQL on Kubernetes", "url": "https://www.simplyblock.io/post/production-grade-postgresql-on-kubernetes-with-\u00e1lvaro-hern\u00e1ndez-tortosa-from-ongres", "domain": "simplyblock.io", "votes": 3, "user": "panrobo", "posted_at": "2024-04-18 16:58:16", "comments": 0, "source_title": "Production-grade PostgreSQL on Kubernetes with \u00c1lvaro Hern\u00e1ndez Tortosa from OnGres", "source_text": "Production-grade PostgreSQL on Kubernetes with \u00c1lvaro Hern\u00e1ndez Tortosa from\nOnGres\n\ntop of page\n\nChat with us\n\n  * Chris Engelbert\n  *     * Apr 5\n    * 15 min read\n\n# Production-grade PostgreSQL on Kubernetes with \u00c1lvaro Hern\u00e1ndez Tortosa from\nOnGres\n\nThis interview is part of the Simplyblock Cloud Commute Podcast, available on\nYoutube, Spotify, iTunes/Apple Podcasts, Pandora, Samsung Podcasts, and our\nshow site.\n\nIn this installment, we're talking to \u00c1lvaro Hern\u00e1ndez Tortosa from OnGress, a\ncompany creating StackGres, a PostgreSQL operator to help operate PostgreSQL\nin a Kubernetes environment, as well as the Postgres ecosystem and why it is\nso hard to create a production-grade Postgres service.\n\nChris Engelbert: Welcome to this week's episode of Cloud Commute podcast by\nsimplyblock. Today, I have another incredible guest, a really good friend,\n\u00c1lvaro Hern\u00e1ndez from OnGres. He's very big in the Postgres community. So\nhello, and welcome, \u00c1lvaro.\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: Thank you very much, first of all, for having me\nhere. It's an honor.\n\nChris Engelbert: Maybe just start by introducing yourself, who you are, what\nyou've done in the past, how you got here. Well, except me inviting you.\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: OK, well, I don't know how to describe myself, but I\nwould say, first of all, I'm a big nerd, big fan of open source. And I've been\nworking with Postgres, I don't know, for more than 20 years, 24 years now. So\nI'm a big Postgres person. There's someone out there in the community that\nsays that if you say Postgres three times, I will pop up there. It's kind of\nlike Superman or Batman or these superheroes. No, I'm not a superhero. But\nanyway, professionally, I'm the founder and CEO of a company called OnGres.\nLet's guess what it means, On Postgres. So it's pretty obvious what we do. So\neverything revolves around Postgres, but in reality, I love all kinds of\ntechnology. I've been working a lot with many other technologies. I know you\nbecause of being a Java programmer, which is kind of my hobby. I love\nprogramming in my free time, which almost doesn't exist. But I try to get some\nfrom time to time. And everything related to technology in general, I'm also a\nbig fan and supporter of open source. I have contributed and keep contributing\na lot to open source. I also founded some open source communities, like for\nexample, I'm a Spaniard. I live in Spain. And I founded Debian Spain, an\nassociation like, I don't know, 20 years ago. More recently, I also founded a\nfoundation, a nonprofit foundation also in Spain called Fundaci\u00f3n PostgreSQL.\nAgain, guess what it does? And I try to engage a lot with the open source\ncommunities. We, by the way, organized a conference for those who are\ninterested in Postgres in the magnificent island of Ibiza in the Mediterranean\nSea in September this year, 9th to 11th September for those who want to join.\nSo yeah, that's probably a brief intro about myself.\n\nChris Engelbert: All right. So you are basically the Beetlejuice of Postgres.\nThat's what you're saying.\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: Beetlejuice, right. That's more upper bid than\nsuperheroes. You're absolutely right.\n\nChris Engelbert: I'm not sure if he is a superhero, but he's different at\nleast. Anyway, you mentioned OnGres. And I know OnGres isn't really like the\nfirst company. There were quite a few before, I think, El Toro, a database\ncompany.\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: Yes, Toro DB.\n\nChris Engelbert: Oh, Toro DB. Sorry, close, close, very close. So what is up\nwith that? You're trying to do a lot of different things and seem to love\ntrying new things, right?\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: Yes. So I sometimes define myself as a 0.x serial\nentrepreneur, meaning that I've tried several ventures and sold none of them.\nBut I'm still trying. I like to try to be resilient, and I keep pushing the\nideas that I have in the back of my head. So yes, I've done several ventures,\nall of them, around certain patterns. So for example, you're asking about Toro\nDB. Toro DB is essentially an open source software that is meant to replace\nMongoDB with, you guessed it, Postgres, right? There's a certain pattern in my\nprofessional life. And Toro DB was. I'm speaking in the past because it no\nlonger unfortunately maintained open source projects. We moved on to something\nelse, which is OnGres. But the idea of Toro DB was to essentially replicate\nfrom Mongo DB live these documents and in the process, real time, transform\nthem into a set of relational tables that got stored inside of a Postgres\ndatabase. So it enabled you to do SQL queries on your documents that were\nMongoDB. So think of a MongoDB replica. You can keep your MongoDB class if you\nwant, and then you have all the data in SQL. This was great for analytics. You\ncould have great speed ups by normalizing data automatically and then doing\nqueries with the power of SQL, which obviously is much broader and richer than\nquery language MongoDB, especially for analytics. We got like 100 times faster\non most queries. So it was an interesting project.\n\nChris Engelbert: So that means you basically generated the schema on the fly\nand then generated the table for that schema specifically? Interesting.\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: Yeah, it was generating tables and columns on the\nfly.\n\nChris Engelbert: Right. Ok, interesting. So now you're doing the OnGres thing.\nAnd OnGres has, I think, the main product, StackGres, as far as I know. Can\nyou tell a little bit about that?\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: Yes. So OnGres, as I said, means On Postgres. And\none of our goals in OnGres is that we believe that Postgres is a fantastic\ndatabase. I don't need to explain that to you, right? But it's kind of the\nLinux kernel, if I may use this parallel. It's a bit bare bones. You need\nsomething around it. You need a distribution, right? So Postgres is a little\nbit the same thing. The core is small, it's fantastic, it's very featureful,\nit's reliable, it's trustable. But it needs tools around it. So our vision in\nOnGres is to develop this ecosystem around this Postgres core, right? And one\nof the things that we experience during our professional lifetime is that\nPostgres requires a lot of tools around it. It needs monitoring, it needs\nbackups, it needs high availability, it needs connection pooling. By the way,\ndo not use Postgres without connection pooling, right? So you need a lot of\ntools around. And none of these tools come from a core. You need to look into\nthe ecosystem. And actually, this is good and bad. It's good because there's a\nlot of options. It's bad because there's a lot of options. Meaning which one\nto choose, which one is good, which one is bad, which one goes with a good\nbackup solution or the good monitoring solution and how you configure them\nall. So this was a problem that we coined as a stack problem. So when you\nreally want to run Postgres in production, you need the stack on top of\nPostgres, right? To orchestrate all these components.\n\nNow, the problem is that we've been doing this a lot of time for our\ncustomers. Typically, we love infrastructure scores, right? And everything was\ndone with Ansible and similar tools and Terraform for infrastructure and\nAnsible for orchestrating these components. But the reality is that every\nenvironment into which we looked was slightly different. And we can just take\nour Ansible code and run it. You've got this stack. But now the storage is\ndifferent. Your networking is different. Your entry point. Here, one is using\nvirtual IPs. That one is using DNS. That one is using proxies. And then the\ncompute is also somehow different. And it was not reusable. We were doing a\nlot of copy, paste, modify, something that was not very sustainable.\n\nAt some point, we started thinking, is there a way in which we can pack this\nstack into a single deployable unit that we can take essentially anywhere? And\nthe answer was Kubernetes. Kubernetes provides us this abstraction where we\ncan abstract away this compute, this storage, this bit working and code\nagainst a programmable API that we can indeed create this package. So that's a\nStackGres. So StackGres is the stack of components you need to run production\nPostgres, packaging a way that is uniform across any environment where you\nwant to run it, cloud, on-prem, it doesn't matter. And is production ready!\nIt's packaged at a very, very high level. So basically you barely need, I\nwould say, you don't need Postgres knowledge to run a production ready\nenterprise quality Postgres cluster introduction. And that's the main goal of\nStackGres.\n\nChris Engelbert: Right, right. And as far as I know, I think it's implemented\nas a Kubernetes operator, right?\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: Yes, exactly.\n\nChris Engelbert: And there's quite a few other operators as well. But I know\nthat StackGres has some things which are done slightly differently. Can you\ntalk a little bit about that? I don't know how much you wanna actually make\nthis public right now.\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: No, actually everything is open source. Our roadmap\nis open source, our issues are open source. I'm happy to share everything.\nWell, first of all, what I would say is that the operator pattern is\nessentially these controllers that take actions on your cluster and the CRDs.\nWe gave a lot of thought to these CRDs. I would say that a lot of operators,\nCRDs are kind of a byproduct. A second thought, \"I have my objects and then\nsome script generates the CRDs.\" No, we said CRDs are our user-facing API. The\nCRDs are our extended API. And the goal of operators is to abstract the way\nand package business logic, right? And expose it with a simple user interface.\nSo we designed our CRDs to be very, very high level, very amenable to the\nuser, so that again, you don't require any Postgres expertise. So if you look\nat the CRDs, in practical terms, the YAMLs, right?\n\nThe YAMLs that you write to deploy something on StackGres, they should be able\nto deploy, right? You could explain to your five-year-old kid and your five-\nyear-old kid should be able to deploy Postgres into a production-quality\ncluster, right? And that's our goal. And if we didn't fulfill this goal,\nplease raise an issue on our public issue tracker on GitLab because we\ndefinitely have failed if that's not true. So instead of focusing on the\nPostgres usual user, very knowledgeable, very high level, most operators\nfocused on low level CRDs and they require Postgres expertise, probably a lot.\nWe want to make Postgres more mainstream than ever, right? Postgres increases\nin popularity every year and it's being adopted by more and more\norganizations, but not everybody's a Postgres expert. We want to make Postgres\nuniversally accessible for everyone. So one of the things is that we put a lot\nof effort into this design. And we also have, instead of like a big one,\ngigantic CRD. We have multiple. They actually can be attached like in an ER\ndiagram between them. So you understand relationships, you create one and then\nyou reference many times, you don't need to restart or reconfigure the\nconfiguration files. Another area where I would say we have tried to do\nsomething is extensions. Postgres extensions is one of the most loved, if not\nthe most loved feature, right?\n\nAnd StackGres is the operator that arguably supports the largest number of\nextensions, over 200 extensions of now and growing. And we did this because we\ndeveloped a custom solution, which is also open source by StackGres, where we\ncan load extensions dynamically into the cluster. So we don't need to build\nyou a fat container with 200 images and a lot of security issues, right? But\nrather we deploy you a container with no extensions. And then you say, \"I want\nthis, this, this and that.\" And then they will appear in your cluster\nautomatically. And this is done via simple YAML. So we have a very powerful\nextension mechanism.\n\nAnd the other thing is that we not only expose the usual CRD YAML interface\nfor interacting with StackGres, it's more than fine and I love it, but it\ncomes with a fully fledged web console. Not everybody also likes the command\nline or GitOps approach. We do, but not everybody does. And it's a fully\nfledged web console which also supports single sign-on, where you can\nintegrate with your AD, with your OIDC provider, anything that you want. Has\ndetailed fine-grained permissions based on Kubernetes RBAC. So you can say,\n\"Who can create clusters, who can view configurations, who can do anything?\"\n\nAnd last but not least, there's a REST API. So if you prefer to automate and\nintegrate with another kind of solution, you can also use the REST API and\ncreate clusters and manage clusters via the REST API. And these three\nmechanisms, the YAML files, CRDs, the REST API and the web console are fully\ninterchangeable. You can use one for one operation, the other one for\neverything goes back to the same. So you can use any one that you want. And\nlately we also have added sharding. So sharding scales out with solutions like\nCitus, but we also support foreign interoperability, Postgres with\npartitioning and Apache ShardingSphere. Our way is to create a cluster of\nmultiple instances. Not only one primary and one replica, but a coordinator\nlayer and then shards, and it shares a coordinator of the replica. So\ntypically dozens of instances, and you can create them with a simple YAML file\nand very high-level description, requires some knowledge and wires everything\nfor you. So it's very, very convenient to make things simple.\n\nChris Engelbert: Right. So the plugin mechanism or the extension mechanism,\nthat was exactly what I was hinting at. That was mind-blowing. I've never seen\nanything like that when you showed it last year in Ibiza. The other thing that\nis always a little bit of like a hat-scratcher, I think, for a lot of people\nwhen they hear that a Kubernetes operator is actually written in Java. I think\nRedHat built the original framework. So it kind of makes sense that RedHat is\ndoing that, I think the original framework was a Go library. And Java would\nprobably not be like the first choice to do that. So how did that happen?\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: Well, at first you're right. Like the operator\nframework is written in Go and there was nothing else than Go at the time. So\nwe were looking at that, but our team, we had a team of very, very senior Java\nprogrammers and none of them were Go programmers, right? But I've seen the\nPostgres community and all the communities that people who are kind of more in\nthe DevOps world, then switching to Go programmers is a bit more natural, but\nat the same time, they are not senior from a Go programming perspective,\nright? The same would have happened with our team, right? They would switch\nfrom Java to Go. They would have been senior in Go, obviously, right? So it\nwould have taken some time to develop those skills. On the other hand, we\nlooked at what is the technology behind, what is an operator? An operator is\nno more than essentially an HTTP server that receives callbacks from\nKubernetes and a client because it makes calls to Kubernetes. And HTTP clients\nand servers can read written in any language. So we look at the core, how\ncomplicated this is and how much does this operator framework bring to you?\nHow we saw that it was not that much. And actually something, for example,\njust mentioned before, the CRDs are kind of generated from your structures and\nwe really wanted to do the opposite way. This is like the database. You use an\nORM to read your database existing schema that we develop with all your SQL\ncapabilities or you just create an object and let that generate a database. I\nprefer the format. So we did the same thing with the CRDs, right? And we\nwanted to develop them. So Java was more than okay to develop a Kubernetes\noperator and our team was expert in Java. So by doing it in Java, we were able\nto be very efficient and deliver a lot of value, a lot of features very, very\nfast without having to retrain anyone, learn a new language, or learn new\nskills.\n\nOn top of this, there's sometimes a concern that Java requires a JVM, which is\nkind of a heavy environment, right? And consumes memory and resources, and\ndisk. But by default, StackGres uses a compilation technology and will build a\nwhole project around it called GraalVM. And this allows you to generate native\nimages that are indistinguishable from any other binary, Linux binary you can\nhave with your system. And we deploy StackGres with native images. You can\nalso switch JVM images if you prefer. We over expose both, but by default,\nthere are native images. So at the end of the day, StackGres is several\nmegabytes file, Linux binary and the container and that's it.\n\nChris Engelbert: That makes sense. And I like that you basically pointed out\nthat the efficiency of the existing developers was much more important than\nlike being cool and going from a new language just because everyone does. So\nwe talked about the operator quite a bit. Like what are your general thoughts\non databases in the cloud or specifically in Kubernetes? What are like the\nissues you see, the problems running a database in such an environment? Well,\nit's a wide topic, right? And I think one of the most interesting topics that\nwe're seeing lately is a concern about cost and performance. So there's kind\nof a trade off as usual, right?\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: There's a trade off between the convenience I want\nto run a database and almost forget about it. And that's why you switched to a\ncloud managed service which is not always true by the way, because forgetting\nabout it means that nobody's gonna then back your database, repack your\ntables, right? Optimize your queries, analyze if you haven't used indexes. So\nif you're very small, that's more than okay. You can assume that you don't\nneed to touch your database even if you grow over a certain level, you're\ngonna need the same DBAs, the same, at least to operate not the basic\noperations of the database which are monitoring, high availability and\nbackups. So those are the three main areas that a managed service provides to\nyou. But so there's convenience, but then there's an additional cost. And this\nadditional cost sometimes is quite notable, right? So it's typically around\n80% premium on a N+1/N number of instances because sometimes we need an extra\neven instance for many cloud services, right? And that multiply by 1.8 ends up\nbeing two point something in the usual case. So you're overpaying that. So you\nneed to analyze whether this is good for you from this perspective of\nconvenience or if you want to have something else. On the other hand, almost\nall cloud services use network disks. And these network disks are very good\nand have improved performance a lot in the last years, but still they are far\nfrom the performance of a local drive, right? And running databases with local\ndrives has its own challenges, but they can be addressed. And you can really,\nreally move the needle by kind of, I don't know if that's the right term to\ncall it self-hosting, but this trend of self-hosting, and if we could marry\nthe simplicity and the convenience of managed services, right?\n\nWith the ability of running on any environment and running on any environment\nat a much higher performance, I think that's kind of an interesting trend\nright now and a good sweet spot. And Kubernetes, to try to marry all the terms\nthat you mentioned in the question, actually is one driver towards this goal\nbecause it enables us infrastructure independence and it enables both network\ndisks and local disks and equally the same. And it's kind of an enabler for\nthis pattern that I see more trends, more trends as of now, more important and\none that definitely we are looking forward to.\n\nChris Engelbert: Right, I like that you pointed out that there's ways to\naddress the local storage issues, just shameless plug, we're actually working\non something.\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: I heard something.\n\nChris Engelbert: Oh, you heard something. (laughing) All right, last question\nbecause we're also running out of time. What do you see as the biggest trend\nright now in containers, cloud, whatever? What do you think is like the next\nbig thing? And don't say AI, everyone says that.\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: Oh, no. Well, you know what? Let me do a shameless\nplug here, right?\n\nChris Engelbert: All right. I did one. (laughing)\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: So there's a technology we're working on right now\nthat works for our use case, but will work for many use cases also, which is\nwhat we're calling dynamic containers. So containers are essential as\nsomething that is static, right? You build a container, you have a build with\nyour Dockerfile, whatever you use, right? And then that image is static. It is\nwhat it is. Contains the layers that you specified and that's all. But if you\nlook at any repository in Docker Hub, right? There's plenty of tags. You have\nwhat, for example, Postgres. There's Postgres based on Debian. There's\nPostgres based on Alpine. There's Postgres with this option. Then you want\nthis extension, then you want this other extension. And then there's a whole\nvariety of images, right? And each of those images needs to be built\nindependently, maintained, updated independently, right? But they're very\northogonal. Like upgrading the Debian base OS has nothing to do with the\nPostgres layer, has nothing to do with the timescale extension, has nothing to\ndo with whether I want the debug symbols or not. So we're working on\ntechnology with the goal of being able to, as a user, express any combination\nof items I want for my container and get that container image without having\nto rebuild and maintain the image with the specific parameters that I want.\n\nChris Engelbert: Right, and let me guess, that is how the Postgres extension\nstuff works.\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: It is meant to be, and then as a solution for the\nPostgres extensions, but it's actually quite broad and quite general, right?\nLike, for example, I was discussing recently with some folks of the\nOpenTelemetry community, and the OpenTelemetry collector, which is the router\nfor signals in the OpenTelemetry world, right? Has the same architecture, has\nlike around 200 plugins, right? And you don't want a container image with\nthose 200 plugins, which potentially, because many third parties may have some\nsecurity vulnerabilities, or even if there's an update, you don't want to\nupdate all those and restart your containers and all that, right? So why don't\nyou kind of get a container image with the OpenTelemetry collector with this\nsource and this receiver and this export, right? So that's actually probably\nmore applicable. Yeah, I think that makes sense, right? I think that is a\nreally good end, especially because the static containers in the past were in\nthe original idea was that the static gives you some kind of consistency and\nsome security on how the container looks, but we figured out over time, that\nis not the best solution. So I'm really looking forward to that being probably\na more general thing. To be honest, actually the idea, I call it dynamic\ncontainers, but in reality, from a user perspective, they're the same static\nas before. They are dynamic from the registry perspective.\n\nChris Engelbert: Right, okay, fair enough. All right, thank you very much. It\nwas a pleasure like always talking to you. And for the other ones, I see,\nhear, or read you next week with my next guest. And thank you to \u00c1lvaro, thank\nyou for being here. It was appreciated like always.\n\n\u00c1lvaro Hern\u00e1ndez Tortosa: Thank you very much.\n\n  * podcast\n  * \u2022\n  * Cloud Knowledge\n  * \u2022\n  * kubernetes\n\n## Recent Posts\n\nSee All\n\nBlock Storage Volume Pooling for the Cloud-Age\n\nKubernetes: Future or Fad?\n\nWhat is a Kubernetes Persistent Volume?\n\nSimplyblock is the first company to build a container storage system for\nKubernetes, specifically designed for latency-sensitive, IO-intensive, cloud-\nnative stateful workloads, such as databases, analytics, crypto / blockchain,\ndocument storages, and others.\n\nA fully distributed storage solution, built upon our VASHTM technology,\noffering seamless scalability without downtimes, and is highly optimized for\nAWS NVMe\u00ae (io1/2) and gp3 volumes.\n\n##### Subscribe to keep updated\n\n###### Products\n\nWhy Simplyblock\n\nFrequently Asked Questions\n\nGlossary\n\n###### Use Cases\n\nKubernetes Container Storage\n\nDatabase Storage\n\nCrypto / Blockchain Storage\n\nData Warehouse Storage\n\nCDN / Shared Webserver Storage\n\nFile / Asset Storage\n\nSupported Technologies\n\n###### Compare\n\nSimplyblock vs Amazon EBS\n\nSimplyblock vs Ceph\n\n###### Resources\n\nDocumentation\n\nBlog\n\nWhitepapers\n\nWebinars\n\nCase Studies\n\nPricing\n\n###### Support\n\nSupport\n\nStackOverflow\n\n###### Company\n\nAbout\n\nCareers\n\nNewsroom\n\nPress Releases\n\nBrand\n\nContact Us\n\nCloud Commute Podcast\n\n\u00a9 2024 Simplyblock Gmbh | All Rights Reserved.\n\nImprint\n\nPrivacy Policy\n\nThe NVM Express & Design\u00ae and the NVM EXPRESS\u00ae NVMe\u00ae, and NVMe-oFTM word marks\nare registered or unregistered service marks of NVM Express, Inc. Amazon Web\nServices, AWS, the Powered by AWS logo, Amazon EBS, Amazon EKS are trademarks\nof Amazon.com, Inc. or its affiliates. Intel and the Intel logo are trademarks\nof Intel Corporation or its subsidiaries.\n\nbottom of page\n\n", "frontpage": false}
