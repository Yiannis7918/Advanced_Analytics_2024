{"aid": "40079287", "title": "App Mindset, Infra Mindset (2022)", "url": "https://www.simplermachines.com/app-mindset-infra-mindset/", "domain": "simplermachines.com", "votes": 1, "user": "noop_joe", "posted_at": "2024-04-18 18:33:03", "comments": 0, "source_title": "App mindset, Infra mindset", "source_text": "App mindset, Infra mindset\n\nSimpler Machines\n\nSign in Subscribe\n\nHey there newsletter readers. I'm Nat Bennett, software consultant and dog\nnamer extroardinaire (current front runners for the next one: \"Stroopwaffel\"\nand \"Big Hissman\") and you're reading Simpler Machines, a weekly letter about\ncomputers and how to make them behave better by letting them do fewer things.\n\nThis week, by the way, the letter likely won't be weekly \u2013 family vacation\ncoming up, so I'm taking a break.\n\nIn the last few years I've worked as both an infrastructure engineer and an\napplication developer, switching back and forth between the two from team to\nteam and job to job. It's a little bit like the engineer/manager pendulum, but\nfor engineering specialties. Switching back and forth regularly gives me\nsuperpowers, and I bring the skills from the other specialty to whatever team\nI'm on.\n\nLately, I've been on an application team, so I've been doing a lot of\ninfrastructure work \u2013 teaching Terraform, explaining what the big deal is\nabout containers, digging into the details of our build system and deploy\nsystems. I also spend a lot of time helping my team understand and interface\nwith infrastructure teams\u2013 because the infrastructure mindset is really\ndifferent from the application mindset. Each speciality sees the system they\nwork on together very differently, and those different assumptions can lead to\nconflict if you're not aware of them.\n\nWhen I have an Application Mindset, I care a lot about the details of one\nparticular application. My app is a \"pet,\" even if the servers it runs on\naren't. I'm thinking about what's going on inside of it, what its code is\ndoing and how that code is structured. I'm thinking about the people who use\nit and what exactly they're trying to do. When I interact with other systems \u2013\nthe platform it runs on, the pipeline that deploys it, the data services it\nuses, the other services it talks to \u2013 I'm thinking about those systems in\nrelation to my app. I care about the details of individual requests. I want\neverything to be optimized for my particular use case, my particular workflow.\n\nWhen I have an Infrastructure Mindset, an app is just an app. It's \"cattle,\"\none of many. If I care about some detail of it, it's probably a category that\nit shares with other applications\u2013 what language it's written in, what\nframework it uses, what common dependencies its packaged with. Same thing with\nrequests, data services, and most of the infrastructure I deal with. They're\neach one of many, and I care about their behavior in aggregate. I care about\nerror rates, and individual errors only as examples of a type of misbehavior.\nI care about scale, both of the system as a whole, but also about my team's\nability to support ever-more applications and ever more application\ndevelopers. I want every individual thing to be as similar as possible to\nothers of its type, so I can manage it in aggregate.\n\nNot every conflict between the two groups comes down to this difference but it\nsometimes calms everyone down a lot to point out that e.g. some release team's\nbaffling insistence on some inconsequential detail is because they're dealing\nwith hundreds of things with that detail and that it's tremendously simpler\nfor them if all those things are the same. Infrastructure teams often take for\ngranted that standardization is important, but this isn't obvious to people\nwho work primarily on applications, because the details inherently matter so\nmuch for apps.\n\nLikewise \u2013 folks with an infrastructure mindset often have some blind spots\naround which details are most important for applications and application\ndevelopers. They may assume, especially, that the work involved in setting up\nnew applications and services is trivial or straightforward, or at least\nobviously worth the investment in learning, because they do it all the time.\nBut for an application team, \"setting up a new application\" is something that\nthey may only ever do once, so anything they have to learn to be able to do it\nwon't be as obviously valuable to them.\n\nConversely, if a process is really difficult at the beginning, or while the\ncode is changing all the time, but then gets easy once the application is\ndeployed and running, it will seem \"easy\" to an infrastructure-oriented team\nthat spends a lot of time thinking about how to keep working applications\nworking, and \"hard\" to the application team that mostly works on applications\nwhile they're actually changing the code.\n\nSo\u2013 next time someone on the other side of that line does something completely\nbaffling (\"organize all the apps in this repo by language,\" \"complain about\nhaving to make their closed-source repo ssh-pullable just like the open source\nrepos\") I hope that this helps you understand what the hell they were\nthinking, and how you can explain what you and your team needs.\n\n## Media etc.\n\nMoon Knight. It's good. Oscar Isaac does actor stuff and he's great at it.\nI've mostly stopped watching Marvel stuff because deeply tedious but I was\nglad I made the exception here. He's one of these rare-ish dudes who's\nunreasonably handsome for how good of a character actor he is, and Moon Knight\nreally relies on his ability to convince you that the two characters he's\nplaying are different people. Can't say too much without spoilers but he's\nreally skilled at body language and the show really showcases this, especially\nlater in the season.\n\n# App mindset, Infra mindset\n\n#### Nat Bennett\n\nMay 8, 2022\n\nSimpler Machines \u00a9 2024. Powered by Ghost\n\n", "frontpage": false}
