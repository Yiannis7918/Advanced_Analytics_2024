{"aid": "40076848", "title": "Hermit is a hermetic and reproducible sandbox for running programs", "url": "https://github.com/facebookexperimental/hermit", "domain": "github.com/facebookexperimental", "votes": 4, "user": "PaulHoule", "posted_at": "2024-04-18 14:46:50", "comments": 0, "source_title": "GitHub - facebookexperimental/hermit: Hermit launches linux x86_64 programs in a special, hermetically isolated sandbox to control their execution. Hermit translates normal, nondeterministic behavior, into deterministic, repeatable behavior. This can be used for various applications, including replay-debugging, reproducible artifacts, chaos mode concurrency testing and bug analysis.", "source_text": "GitHub - facebookexperimental/hermit: Hermit launches linux x86_64 programs in\na special, hermetically isolated sandbox to control their execution. Hermit\ntranslates normal, nondeterministic behavior, into deterministic, repeatable\nbehavior. This can be used for various applications, including replay-\ndebugging, reproducible artifacts, chaos mode concurrency testing and bug\nanalysis.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nfacebookexperimental / hermit Public\n\n  * Notifications\n  * Fork 28\n  * Star 757\n\nHermit launches linux x86_64 programs in a special, hermetically isolated\nsandbox to control their execution. Hermit translates normal, nondeterministic\nbehavior, into deterministic, repeatable behavior. This can be used for\nvarious applications, including replay-debugging, reproducible artifacts,\nchaos mode concurrency testing and bug analysis.\n\n### License\n\nView license\n\n757 stars 28 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# facebookexperimental/hermit\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n12 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nKevin Huiandfacebook-github-botAdd flags to enable x86-64-v2 supportApr 10,\n2024bd3153b \u00b7 Apr 10, 2024Apr 10, 2024\n\n## History\n\n239 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Reenable cargo build under github actions. (#13)| Nov 22, 2022  \n  \n### common\n\n|\n\n### common\n\n| format_code_in_doc_comments = true| Jan 10, 2024  \n  \n### detcore-model\n\n|\n\n### detcore-model\n\n| third-party/rust: make tracing and tracing-subscriber available to no...|\nMar 26, 2024  \n  \n### detcore\n\n|\n\n### detcore\n\n| Add flags to enable x86-64-v2 support| Apr 10, 2024  \n  \n### docs\n\n|\n\n### docs\n\n| Initial commit| Nov 12, 2022  \n  \n### examples\n\n|\n\n### examples\n\n| Readme tweaks (#9)| Nov 19, 2022  \n  \n### flaky-tests\n\n|\n\n### flaky-tests\n\n| Add default crate information| Dec 11, 2023  \n  \n### hermit-cli\n\n|\n\n### hermit-cli\n\n| third-party/rust: make tracing and tracing-subscriber available to no...|\nMar 26, 2024  \n  \n### hermit-verify\n\n|\n\n### hermit-verify\n\n| third-party/rust: make tracing and tracing-subscriber available to no...|\nMar 26, 2024  \n  \n### scripts\n\n|\n\n### scripts\n\n| Initial commit| Nov 12, 2022  \n  \n### tests\n\n|\n\n### tests\n\n| Add default crate information| Dec 11, 2023  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial commit| Nov 12, 2022  \n  \n### CODE_OF_CONDUCT.md\n\n|\n\n### CODE_OF_CONDUCT.md\n\n| Initial commit| Nov 12, 2022  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Initial commit| Nov 12, 2022  \n  \n### Cargo.toml\n\n|\n\n### Cargo.toml\n\n| Rerun autocargo to generate resolvers for virtual manifests| Dec 16, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Nov 12, 2022  \n  \n### README.md\n\n|\n\n### README.md\n\n| clean up the CLI verb structure| Dec 5, 2022  \n  \n### rust-toolchain.toml\n\n|\n\n### rust-toolchain.toml\n\n| switch rust-toolchain.toml to llvm-fb-15| Jan 22, 2024  \n  \n### rustfmt.toml\n\n|\n\n### rustfmt.toml\n\n| format_code_in_doc_comments = true| Jan 10, 2024  \n  \n## Repository files navigation\n\n# Hermit: A reproducible container\n\nHermit forces deterministic execution of arbitrary programs and acts like a\nreproducible container. That is, it hermetically isolates the program from\nsources of non-determinism such as time, thread interleavings, random number\ngeneration, etc. Guaranteed determinism is a powerful tool and it serves as a\nbasis for a number of applications, including concurrency stress testing,\nrecord/replay, reproducible builds, and automatic diagnosis of concurrency\nbugs, and more.\n\nHermit cannot isolate the guest program from sources of non-determinism such\nas file system changes or external network responses. Instead, in order to\nprovide complete determinism, the user should provide a fixed file system base\nimage (e.g., with Docker) and disable external networking.\n\n# How it works\n\nHermit sits between the guest process and the OS intercepting system calls\nmade by the guest (using Reverie). In some cases, it can completely replace\nthe functionality of the kernel and suppress the original system call. In\nother cases, it forwards the system call to the kernel and sanitizes the\nresponse such that it is made deterministic.\n\nAs a concrete example, lets say we have a program that reads random bytes from\n/dev/urandom. Hermit will see that the guest opened this file (a known source\nof non-determinism) and intercept subsequent reads to this file. Instead of\nletting the OS fill a buffer with random bytes, Hermit uses a deterministic\npseudorandom number generator with a fixed seed to fill in the buffer. The\ncontents of the buffer are then guaranteed to be the same upon every execution\nof the program.\n\nThe most complex source of non-determinism is in the thread scheduler. The way\nthreads are scheduled by the kernel depends on many external factors,\nincluding the number of physical CPUs or other threads running on the system\nthat require CPU time. To ensure that the threads of the guest process (and\nall of its child processes) are scheduled in a repeatable way, we first make\nsure that all thread executions are serialized so that there is effectively\nonly one CPU. Then, we deterministically pick which thread is allowed to run\nnext. In order to only allow a thread to run for a fixed number of\ninstructions, we use the CPU's Performance Monitoring Unit (PMU) to stop\nexecution after a fixed number of retired conditional branches (RCBs).\n\nRead below about how to build Hermit, and you can get an idea of what it does\nfrom running examples in the ./examples folder.\n\n# Building and running Hermit\n\nHermit is built with the standard Rust cargo tool.\n\n    \n    \n    cargo build\n\nThis builds the whole cargo workspace. The actual binary is located in target\ndirectory (target/debug/hermit).\n\nThen, once you've built Hermit, all you need to run your program\ndeterministically is:\n\n    \n    \n    hermit run <prog>\n\nAfter that you can try running it in a concurrency stress testing (chaos)\nmode, or varying other parameters of the configuration such as the speed at\nwhich virtual time passes inside the container, or the random number\ngeneration seed:\n\n    \n    \n    hermit run --chaos --sched-seed=3 <prog>\n\nYou can use hermit as a replay-debugger as well, either recording a non-\ndeterministic execution (real time, real randomness, etc), or repeatedly\nrunning a controlled, deterministic one (virtual time, pseudo-randomness,\netc).\n\n    \n    \n    hermit record start <prog> hermit replay\n\n# Example programs\n\nSee the the examples folder for example programs and instructions on how to\nrun them. These showcase different sources of nondeterminism, and how hermit\neliminates or controls them.\n\nIn order to explore more advanced examples, you can look at some of the\nintegration tests built from ./tests/ or ./flaky-tests/. For example, using\nthe commands below you can run a racy example multiple times to see its\nnondeterminism. Then run it under hermit to watch that determinism disappear.\nThen run it under hermit --chaos to bring that nondeterminism back, but in a\ncontrolled way that can be reproduced based on the input seed.\n\n    \n    \n    cargo build for ((i=0; i<20; i++)); do ./target/debug/hello_race; done for ((i=0; i<20; i++)); do hermit run ./target/debug/hello_race; done for ((i=0; i<20; i++)); do hermit run --chaos --seed-from=SystemRandom ./target/debug/hello_race; done\n\n# The state of CI and testing\n\nAt Meta, this repository is built using buck. We have over 700 integration\ntests that run under this setup. But as of this initial release (2022-11-21),\nwe have not ported these tests to an external build system yet.\n\nA few unit tests run under cargo test, but the integration tests are more\ncomplicated because they combine various run modes with each of the test\nbinaries (which are built from tests/, flaky-tests/, and the rr test suite\ntoo).\n\nWe plan to get the internal Buck configuration files building externally with\nbuck or bazel.\n\n# Applications\n\nHermit translates normal, non-deterministic Linux behavior, into\ndeterministic, repeatable behavior. This can be used for various applications,\nincluding: record/replay debugging, simple reproducibility, \"chaos mode\" to\nexpose concurrency bugs in a controlled and repeatable way. Generally, Hermit\nmakes implicit inputs into explicit ones, and so enables searching over\npossible executions by explicitly varying these inputs and study the changes\nin outcomes. This can be used for either searching for bugs or trying to\nnarrow down their causes.\n\n## Diagnosing concurrency bugs\n\nOne experimental application that Hermit has built-in support for is\ndiagnosing concurrency bugs, in terms of identifying the stack traces of\nracing critical operations which, if their order is flipped in the schedule,\ncause the program to crash (also called an \"order violation\" bug). Hermit can\ndetect these even if the racing instructions are in different processes and\nwritten in different programming languages.\n\nYou can kick off analyze with any program invocation, and tell it to search\nfor failing (and passing) executions, and then diagnose the difference between\nthem.\n\n    \n    \n    hermit analyze --search -- <run_args> <prog>\n\n# License\n\nHermit is licensed under a BSD-3 clause license, included in the LICENSE file\nin this directory.\n\n# Support\n\nHermit currently supports x86_64 Linux. Aarch64 support is a work in progress.\n\n## About\n\nHermit launches linux x86_64 programs in a special, hermetically isolated\nsandbox to control their execution. Hermit translates normal, nondeterministic\nbehavior, into deterministic, repeatable behavior. This can be used for\nvarious applications, including replay-debugging, reproducible artifacts,\nchaos mode concurrency testing and bug analysis.\n\n### Resources\n\nReadme\n\n### License\n\nView license\n\n### Code of conduct\n\nCode of conduct\n\n### Security policy\n\nSecurity policy\n\nActivity\n\nCustom properties\n\n### Stars\n\n757 stars\n\n### Watchers\n\n12 watching\n\n### Forks\n\n28 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 23\n\n\\+ 9 contributors\n\n## Languages\n\n  * Rust 92.2%\n  * C 3.7%\n  * Shell 2.4%\n  * Starlark 0.8%\n  * Python 0.6%\n  * C++ 0.3%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
