{"aid": "40078106", "title": "You Need a \"WTF Notebook\"", "url": "https://www.simplermachines.com/why-you-need-a-wtf-notebook/", "domain": "simplermachines.com", "votes": 16, "user": "fanf2", "posted_at": "2024-04-18 16:42:04", "comments": 0, "source_title": "Why you need a \"WTF Notebook\"", "source_text": "Why you need a \"WTF Notebook\"\n\nSimpler Machines\n\nSign in Subscribe\n\n# Why you need a \"WTF Notebook\"\n\nThere's a very specific reputation I want to have on a team: \"Nat helps me\nsolve my problems. Nat get things I care about done.\"\n\nPhoto by Glenn Carstens-Peters / Unsplash\n\nI keep a bullet journal. I'm not one of those people you see on Pinterest with\nthe fancy spreads \u2013 I mostly just use black ink, the standard setup, and the\noccasional custom collection.\n\nEvery time I join a new team, I go to the next fresh page, and on top of that\npage I write: \"WTF - [Team Name].\" Then I make a note every time I run into\nsomething that makes me go \"wtf,\" and a task every time I come up with\nsomething I want to change.\n\nFor two weeks, that's all I do. I just write it down. I don't tell the team\neverything that I think they're doing wrong. I don't show up at retro with all\nthe stuff I think they need to change. I just watch, and listen, and I write\ndown everything that seems deeply weird.\n\nThis is a trick I picked up from a team lead a few years ago, who learned it\nfrom a previous lead of his in turn. It's one of my most powerful techniques\nfor making changes on a team, and managing myself while I do it. So I'm going\nto walk you through how I use that list, and how it helps me to build a\nreputation as someone who's really effective at getting stuff done, and avoid\nbeing someone who's complaining all the time.\n\nThere's always stuff that makes me go \"wtf\" on a new team. The team talks for\nan hour in retro about a serious problem, and then leaves without making any\naction items. The tests don't run locally and no one seems to notice. Big\nchunks of the build board are always red. Only one person can do some\ncritical, time-sensitive thing. The team is spending a bunch of time on some\nfeature, but when I ask around no one can seems to know why it's important or\nhow it'll help a customer.\n\nOnce I've got a nice big list, I start crossing things off. There are four\nreasons at this point that I might cross off something I've put on that list:\n\n  1. There's actually a good reason for it\n  2. The team is already working on a fix\n  3. The team doesn't care about it\n  4. It's really easy to fix\n\nIf the tests don't run locally, for instance, that might be a known issue that\nthere's an ongoing effort to address. The team might do all of their work on\nvirtual machines, and have a simple chat command that provisions those\nmachines for them. Or they might have a pretty good continuous integration\nsystem and good habits around making small changes, so not being able to run\nthe tests locally isn't stopping them from deploying multiple times a day.\n\nSometimes, it'll turn out that there's a really simple fix for some of the\nthings I've identified. Maybe there's some documentation I can write, once I\nknow where it is, or maybe there's an easy change once I find the right\nscripts. That's not always immediately obvious when I first see a problem.\nWhen I do see an easy fix, though, I'll just go ahead and make it.\n\nAfter a few weeks, though, I'll still have a bunch of weird, unresolved issues\non that list. At this point I'll start talking about it with other people on\nthe team, the team lead, and my manager.\n\nI'll ask why things on the list are that way, and how they got to be that way.\nI'm trying to establish credibility as someone who's genuinely curious and\nempathetic, who's patient, and who respects the expertise of my coworkers.\nThat's the reputation that's going to let me make changes later.\n\nGenerally, I'll find out that the things that problems I've noticed are around\nfor one of a few reasons.\n\n  1. The team hasn't noticed it\n  2. The team has gotten used to it\n  3. The problem is relatively new, and the old problem it replaced was much worse\n  4. They don't know how to fix the problem\n  5. They've tried to fix the problem before and failed\n\nOn a lot of teams, when I ask some questions about things that turn out to be\nin the first few questions, the person I ask will just fix them immediately.\nOr they'll help me figure out how to fix them. If it's a technical problem,\nthat means writing a story or a ticket together, and then we'll work on it. If\nit's more process or social, it means bringing the problem up at retro and\ntalking about it with the whole team.\n\nAt this point I'm looking for one or two problems that have been bugging one\nof my new teammates for a while, and that have relatively simple solutions.\nI'm looking for something I can put on the retro board and know I won't be the\nonly person who's bothered by that problem. Then, during the team conversation\nabout the problem, I'll identify something that teammate suggests as an action\nitem that we could try immediately. That way the team starts to see me as\nsomeone who helps them solve their problems.\n\nThe feeling that I want to create, the association I want people to have with\nme, is, \"Oh, Nat joined the team and little things started to get better,\nalmost immediately. It feels like we're starting to make some progress. And\nit's not like they showed up and started telling me what to do, either.\nThey're really listening to me, they're helping me explain myself to the rest\nof the team.\"\n\nPretty soon, I'll start to get in to the really sticky issues. The problems\nthe team knows about but is afraid of dealing with. The things that aren't\n\"that bad,\" but that no one wants to talk about. Maybe they're missing the\ntechnical skills to deal with the problem. Maybe there's a knotty people\nproblem at the center of it.\n\nAt this point I'm going to be talking to my manager. I'm going to bring them\nthat list I've been working on, and I'm going to say something like, \"Now that\nI've been on the team for a few weeks, this is what I'm seeing. We're making\nprogress on some of it, but some of these seem like they're going to take\nlonger. I wanted to get your thoughts before I try to do anything about them.\nIs there something I'm missing? Is there a particular area I'd like you to\nfocus?\"\n\nThe reaction I'm looking for from my manager, at this point, is something\nlike, \"Wow. This is really validating. I've been concerned about these things\nbut the team doesn't seem really bothered by them, so I didn't want to push\ntoo hard. I'm glad you're bringing this up.\"\n\nThen we can have a conversation about what their concerns and problems are. I\ncan do some reflective listening to help them organize their thoughts, and I\ncan talk about what I've seen work well, or not, in the past. They'll start to\nsee me as someone with good judgement, and someone they can come to for help\nsolving their harder problems.\n\nThere's a very specific reputation I want to have on a team: \"Nat helps me\nsolve my problems. Nat get things I care about done.\" That's the reputation\nthat's going to get me the results I want in next year's performance review.\nThat's the reputation that's going to get me a referral a few years from now.\n\nBefore I started keeping this kind of list, I brought up problem I saw\nimmediately, as soon as I noticed it. The reputation I got was, \"Nat's always\ncomplaining about things. Nat thinks we're never doing things right.\" People\nstopped listening to me. I was personally frustrated, and professionally\nineffective.\n\nThere's no faster way to totally sink my credibility, as a new team member, by\nmaking a huge fuss over something that's not a problem, or that the team\ndoesn't see as a problem, or that there's already an effort to fix, or that\nthere's a really simple way to fix that I just didn't see at first. There are\nalways so many problems on a team, so many things that could be better, that\nI'm only ever going to solve a handful of them. Working on problems in the\norder I noticed them is rarely the most effective order. So the WTF Notebook\ngives me a place to park the impulse to fix it now, damn it! until I have more\ncontext for deciding what to work on first.\n\nInstead, for two weeks, I just write things down.\n\n# Jobs\n\nPeriodic reminder that Code for America is usually hiring, and they pair and\nwrite tests. Until the end of this month they have a Software Engineer role up\nfor a team that works San Francisco hours. If you're looking for a \"show up,\nwrite code, go home\" experience, and want to help Americans access food stamps\nand other safety net services, this is a team that can deliver it \u2013 especially\nif you have some experience with Rails or Spring.\n\nIf, on the other hand, you're interested in gnarly cloud infrastructure and\nsoftware problems for the Department of Defense, check out Rise8. If you've\nheard about Kessel Run, or Pivotal's work with the Air Force generally, Rise8\nis where many of those folks ended up. They also practice design thinking,\ntest-driven development, and continuous deployment, but they're teaching them\nto folks who have never used these practices before, and pairing with military\nservice people. Their job listings mention experience at Pivotal Labs by name.\n\nIf you've got an active job search running and you're struggling to keep track\nof it all, check out Davis Frank's guide to Job Search Journaling with\nObsidian.\n\nJob listings from previous issues\n\n# Reading\n\nI've mentioned Seeing Like a State before but I reread it while we were on the\nroad, and, and, man, seriously, if there's one book I wish everyone I talk to\nhad read, it's this one. Nothing explains systems thinking in action better.\nNothing has more useful anecdotes for illustrating how large organizations\nwork, and why they work the way they do.\n\nThe other book I've read by James C. Scott is Against the Grain, and if you're\nat all interested in the history of the earliest states and the initial\ndevelopment of human civilization, that book will absolutely blow your mind.\n\nEd Zitron's piece recently about How Our Need For Attention Online Drives Us\nCrazy articulated a bunch of half-formed thoughts I've been chewing on and\ntrying to figure out how to write about. It doesn't mention Slack explicitly,\nbut I've seen Slack drive a lot of these same processes at work.\n\n#### Nat Bennett\n\nSep 24, 2021\n\nSoftware\n\nSimpler Machines \u00a9 2024. Powered by Ghost\n\n", "frontpage": true}
