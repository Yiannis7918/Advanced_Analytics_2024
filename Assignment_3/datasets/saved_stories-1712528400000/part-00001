{"aid": "39961743", "title": "Heckler: Breaking Confidential VMs with Malicious Interrupts", "url": "https://ahoi-attacks.github.io/heckler/", "domain": "ahoi-attacks.github.io", "votes": 2, "user": "transpute", "posted_at": "2024-04-07 16:18:39", "comments": 0, "source_title": "Heckler", "source_text": "Heckler\n\n4\\. April 2024 - Embargo is over. We are live.\n\nAhoi Attacks\n\n##### Ahoi Attacks\n\n  * Heckler\n  * WeSee\n  * Blog\n  * Media\n\n  * Twitter\n  * GitHub\n\n# Search\n\nLoading search index...\n\nNo recent searches\n\nNo results for \"Query here\"\n\n  * to select\n  * to navigate\n  * to close\n\nSearch by FlexSearch\n\n# Heckler\n\nBreaking Confidential VMs with Malicious Interrupts (to appear at USENIX\nSecurity 2024)\n\nPaper\n\nSource\n\nCVE\n\n## How Does It Work?#\n\nAMD SEV-SNP and Intel TDX enable Confidential VMs (CVMs). With these CVMs, the\nuntrusted hypervisor is still responsible for resource and configuration\nmanagement. Consequently, the hypervisor also manages interrupts for CVMs. In\nHeckler, the hypervisor uses malicious interrupts to compromise the security\nof the CVMs. Our insight is to use the interrupt handlers that have global\neffects, such that we can manipulate a CVM\u2019s register states to change the\ndata and control flow. Let\u2019s first look at how interrupts are handled during a\nbenign execution. The hypervisor hooks on physical interrupts from the\ninterrupt controller and sends them to the CVMs. The CVMs service these\ninterrupts by executing handlers. In the x86 architecture, hardware exceptions\n(e.g., divide-by-zero, undefined instruction) are also mapped to interrupt\nnumbers. For a detailed explanation check out our blog post.\n\n### Int 0x80#\n\nIn the x86 architecture, user-space applications execute legacy 32-bit system\ncalls using the int 0x80 instruction. When the hardware executes this\ninstruction, it raises interrupt number 128 (0x80) which invokes the 32-bit\nsystem call handler in the Linux kernel. This system call handler has a global\neffect\u2014it returns the result of the system call in rax. We use this global\neffect in the handler to compromise the CVMs execution. Specifically, a\nmalicious hypervisor injects int 0x80 to induce a change in the value of rax\nthat a victim application uses. For example, change rax right before an\napplication checks it to successfully authenticate a user. This allows the\nmalicious hypervisor to bypass authentication checks (e.g., OpenSSH, sudo).\n\n### Signals#\n\nThe OS converts different hardware exceptions to signals that are delivered to\nuser-space applications. The applications register signal handlers which can\nhave global effects. In AMD SEV-SNP, the hardware exceptions are mapped to\ninterrupt numbers that a malicious hypervisor can inject. These malicious\ninterrupts trick the OS into sending a signal to the user-space application.\nDepending on the effects application\u2019s signal handler, this malicious\ninterrupt injection can be used to compromise the security of the CVM.\n\nIn the Animation below, the function updates the mean of a data set when new\ndata is added to it. Crucially, in a signal handler, the application discards\nany faulty data (e.g., data that overflows the mean) and reverts the mean. An\nattacker can bias this data set by using Heckler.\n\n## Breaking into CVMs with Heckler#\n\n### OpenSSH#\n\nUsing Heckler, we attack OpenSSH v9.4.P1+ to compromise its authentication and\nget a shell on the CVM. Without Heckler, the attacker is not authorized to get\na shell.\n\nSpecifically, OpenSSH calls mm_answer_authpassword to decide if authentication\nis successful. We use Heckler\u2019s int 0x80 attack and inject an interrupt when\nthis function executes to change its return value. To determine when to inject\nthe interrupt, we use the hypervisor\u2019s ability to observe page faults.\nmm_answer_authpassword invokes auth_password on a different page. We inject\nint 0x80 when we observe that execution returns back to the\nmm_answer_authpassword to compromise its return value.\n\n### Sudo#\n\nWe demonstrate an attack on the sudo binary in the Ubuntu 23.10 distribution\nto get a root shell on the CVM. Specifically, an attacker with a non-root\nshell on the CVM can escalate privilege to a root shell using Heckler.\n\nLike the OpenSSH attack, we identify functions that lie on different pages. We\nobserve the page trace in the hypervisor and use int 0x80 to compromise the\nreturn values leading to successful authentication.\n\nIn summary, a malicious hypervisor can use Heckler to gain access to a shell\n(using the OpenSSH attack) on the CVM and escalate privilege to a root shell\n(using the sudo attack). Further, Heckler can be used to compromise victim\napplications by sending arbitrary signals. For more details, please see our\npaper and our code.\n\n## Affected Hardware and Software#\n\nAll Intel TDX and AMD SEV-SNP processors are vulnerable to Heckler. See our\nFAQs for more information.\n\n## FAQ#\n\n## Authors#\n\n  * Benedict Schl\u00fcter\n  * Supraja Sridhara\n  * Mark Kuhne\n  * Andrin Bertschi\n  * Shweta Shinde\n\n## Responsible Disclosure#\n\nWe informed Intel and AMD about int 0x80 on the 27th and 28th September 2023\nrespectively. We updated AMD on 14th October 2023 about our findings for other\ninterrupts and our analysis of their defenses. At the request of AMD, we\nextended the embargo till 4 April 2024.\n\n## CVE#\n\nHeckler is tracked under the following CVEs:\n\n  * CVE-2024-25744\n  * CVE-2024-25743\n\n## Acknowledgments#\n\nThanks to Intel, AMD, and Linux for the mitigation discussions and for\ndeveloping the patches. We thank Benny Fuhry and Mona Vij from Intel for\ngranting us early-access to TDX pre-production machines.\n\nEdit this page on GitHub\n\nNext\n\nWeSee\n\n  * Imprint\n\n  * Secure and Trustworthy Systems Group, ETH Zurich\n\n", "frontpage": false}
