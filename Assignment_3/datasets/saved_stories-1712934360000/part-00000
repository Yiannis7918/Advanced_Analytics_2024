{"aid": "40010677", "title": "You probably don't need GraphQL", "url": "https://mxstbr.com/thoughts/graphql/", "domain": "mxstbr.com", "votes": 2, "user": "the_mitsuhiko", "posted_at": "2024-04-12 09:05:06", "comments": 0, "source_title": "You probably don't need GraphQL", "source_text": "You probably don't need GraphQL\n\nHome\n\nBedrock\n\nThoughts\n\nAppearances\n\nOSS\n\n@mxstbr\n\nBACK TO BLOG\n\n## You probably don't need GraphQL\n\nPublished April 10th, 2024\n\nI asked, \u201cWhy are you not using GraphQL?\u201d on Twitter, and most of the 150+\nresponses were some form of \u201cI don\u2019t need it.\u201d\n\nAnd they are right: they probably don\u2019t need GraphQL!\n\nYou might be surprised to read that from the co-founder of a GraphQL company.\n\nLet me explain.\n\n## Why you probably don\u2019t need GraphQL\n\nShortly after its release by Facebook in 2015 (almost ten years ago!), GraphQL\ngot a lot of hype because it enabled building typesafe APIs with a better\ndeveloper experience than any other API. All kinds of people adopted it,\nincluding:\n\n  1. Early-stage startups with small teams\n\n  2. Indie hackers building their MVPs\n\n  3. Companies building products without a UI\n\n  4. Microservice teams for service-to-service communication\n\n  5. Even database engine teams as their query language\n\nBut GraphQL wasn\u2019t made for those use cases.\n\nFacebook invented GraphQL as a central intermediary layer between their many\nend-user-facing clients and many data sources. They made a new language (and\nthus toolchain) to enable it to work across microservices written in different\nlanguages.\n\nThat makes it a heavy-handed solution for the problem of \u201cI want client-side\ndata access to be typesafe.\u201d Inevitably, better solutions for those use cases\nemerged (like tRPC) and overtook GraphQL in adoption. And, with the advent of\nReact server components, many of these use cases are yet again poised to be\neven further simplified.\n\n## So then, who even needs GraphQL?\n\nThe difficulty of answering \u201cWho needs GraphQL?\u201d is that GraphQL solves many\ndifferent problems. When you speak with two people who use it, you will\ninevitably get two different answers about why they\u2019re using it.\n\nNot only that, but GraphQL doesn\u2019t obviously solve all of these many different\nproblems; many just kind of... disappear when you\u2019re using GraphQL. That makes\nit difficult to realize that GraphQL solves them because you \u201chave to have\nbeen there before\u201d to see which problems quietly disappeared.\n\nI would know: as part of my job of running a GraphQL company, I\u2019ve spent the\nlast three years speaking with thousands of engineers at hundreds of companies\nabout their APIs, especially ones building with GraphQL.\n\nLet me summarize what they\u2019ve told me about the problems GraphQL solved for\nthem and how it did.\n\n### The problems that GraphQL solves\n\n#### 1\\. Mobile apps break periodically after API changes\n\nGraphQL only returns the fields the client explicitly requests, so new\ncapabilities can be added by adding new types or fields, which is never a\nbreaking change for existing clients.\n\nOn top of that, you can monitor which clients are using which fields because\nthey have to specify exactly which data they need.\n\n#### 2\\. Slow loading times because of request waterfalls and/or overfetching\n\nWith GraphQL, a client sends one request for all the data it needs to render\nthe whole page/view, and the server resolves all of it and sends it back in\none response\u2014without the duplication introduced by BFFs. (the client can even\nask the server to stream above-the-fold data first with the @defer and @stream\ndirectives)\n\n#### 3\\. Difficult maintenance and endpoint discovery due to hundreds of\nduplicative one-off endpoints\n\nGraphQL centralizes the data access of each entity/resource. When an\nunderlying microservice or database changes how it manages its data, that\nchange only has to be applied to the single, central place in the API layer\nrather than having to update many endpoints or BFFs.\n\nGoing one step further, GraphQL enables clients to specify their data needs on\na component level with fragments. (e.g., a UserAvatar component can abstractly\nspecify that it needs UserType.avatarUrl) So, even on the client, changes must\nbe applied only to the specific components the change is related to!\n\n#### 4\\. Security and performance are a game of whack-a-mole\n\nGraphQL is the central data access layer for clients, so you can enforce\nsecurity and performance SLAs at as fine-grained a level as you need.\nSimilarly to per-endpoint for REST APIs, you can enforce limits per-operation\nin GraphQL, but you can also go more fine-grained and limit per-type or even\nper-field.\n\nIf your company is running into one (or more!) of these problems, you owe it\nto yourselves to consider adding GraphQL to your stack.\n\nIf you don\u2019t have any of these problems today, you might wonder, \u201cWhen will I\nhit these problems?\u201d The answer is that it\u2019s difficult to predict because it\ndepends on your specific use case. Some companies scale to 50 engineers and\nmillions of users without hitting any of these problems. Others hit multiple\nof these problems while building their MVPs.\n\nTo give some guidance from my experience: at the latest when you have 100+\nengineers, you will likely run into at least one of these problems.\n\nThat\u2019s why most of the responders to my tweet were right: they probably don\u2019t\nneed GraphQL.\n\nOne thing is for certain, though: whenever you hit any of these problems,\nGraphQL will be there to solve them for you.\n\nStay tuned for my next essay, which will explain the counterintuitive path\nthat we have learned works best to adopt GraphQL successfully. (subscribe to\nthe newsletter below if you don\u2019t want to miss it!)\n\nDiscuss on HackerNews \u00b7 Discuss on Twitter \u00b7 Edit on GitHub\n\n###\n\nSubscribe to the newsletter\n\nBe the first to know when I post something new! Candid thoughts about\nReact.js, Node.js, startups and other interesting things.\n\nPrevious post\n\nWhy I Love Tailwind\n\nSocials\n\nView source on GitHub\n\nFollow me on Twitter\n\nConnect with me on LinkedIn\n\nSee my stories on Instagram\n\nSubscribe to the RSS feed\n\n", "frontpage": false}
