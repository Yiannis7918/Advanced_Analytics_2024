{"aid": "40087064", "title": "Htmx Is So Cool I Rolled My Own", "url": "https://dbushell.com/2024/04/16/htmx-and-modern-javascript/", "domain": "dbushell.com", "votes": 4, "user": "marban", "posted_at": "2024-04-19 14:12:28", "comments": 0, "source_title": "HTMX Is So Cool I Rolled My Own! \u2013 David Bushell \u2013 Freelance Web Design (UK)", "source_text": "HTMX Is So Cool I Rolled My Own! \u2013 David Bushell \u2013 Freelance Web Design (UK)\n\nHomepage Contact\n\n# HTMX Is So Cool I Rolled My Own!\n\nTuesday 16 Apr 2024\n\nHTMX is hot right now. HTMX rejects modern JavaScript UI in favour of server-\nrendered HTML. It\u2019s not a new concept it\u2019s an evolution of old ideas. It\nbuilds on how we did things before the front-end got all bloated with React.\n\nPopular HTMX examples are infinite scroll, live search results, etc. I must\nhave implemented those a 100 different ways. I wish I had HTMX ten years ago.\nHTMX does not solve all of the problems that React et al. try to solve. It\neven appears rather limiting to me. But within those limits HTMX is gold.\n\nI like how Carson Gross \u2014 HTMX author \u2014 talks about HTMX on the recent\nPodRocket podcast episode. He says HTMX is not a \u201cmagic bullet\u201d and:\n\n> I think some of the ideas behind HTMX are probably more important than HTMX\n\nI think so too.\n\n## The Experiment\n\nI wanted to give HTMX a fair try. Reading documentation only goes so far.\nActually using code is the real test and I found a good use for HTMX.\n\nI recently refactored the server for my self-hosted podcast web app. The\nprevious iteration used SvelteKit. I\u2019m a big fan of SvelteKit but it can be\noverwhelming for smaller websites.\n\nI replaced SvelteKit with my own janky DinoSsr project I\u2019ve been hacking away\non. I also use it to build my static site and serve my bookmark blog. DinoSsr\nis primarily server-side. It can serve components as front-end \u201cislands\u201d but\nthey do not provide full page interactivity. This is a problem for my audio\nplayer component. It needs to persist as I navigate between pages otherwise\nthe listening experience is swiftly ended.\n\nLet\u2019s take a look:\n\nThe left-hand screenshot about shows the sauroPod design without annotation.\nThe middle screenshot has all the Svelte components highlighted. SvelteKit\nmagically handled all UI updates and front-end routing. It was really nice;\nmaybe I should have kept it.\n\nThe right-hand screenshot highlights my new build. Here only the audio player\ncomponent has front-end JavaScript. DinoSsr purposefully does not attempt\nclient-side routing. Navigation reloads the entire page ending any playback.\nNot ideal.\n\nI recognised an opportunity to use HTMX here. I have a handful of pages that\ndiffer in the <main> section I\u2019ve highlighted orange on the screenshot above.\nWith HTMX I can progressively enhance links and update this section without\nreloading the page. Thus keeping the audio component intact.\n\nI tried HTMX and it worked great!\n\nThen I immediately removed HTMX and decided to roll my own.\n\nBut first:\n\n## A Few Thoughts on HTMX\n\nIn my case HTMX is a replacement for front-end Svelte. But not a \u2018drop-in\u2019\nreplacement like React would be. It\u2019s a dramatic shift in thinking. I find\nthat refreshing.\n\nAlthough HTMX ships as a JavaScript library to progressively enhance the\nfront-end, most of the HTMX implementation is done on the back-end. HTMX does\nnot prescribe code for the back-end. You must bring your own server templates\nand configuration.\n\nHTTP requests that serve HTML are effectively the HTMX API. There\u2019s nuance in\nconfiguring HTTP headers to ensure correct caching. It\u2019s all documented but I\nthink server related docs should be introduced earlier for JavaScript addicts\nlike myself.\n\nMinor nitpick but I\u2019m not keen on the hx-* prefixed HTML attributes where\ndata-* should be used (with dataset). Why use non-standard when a standard\nexists?\n\nLarger nitpick: HTMX documentation has a lot of <div> examples:\n\n    \n    \n    <div hx-put=\"/messages\"> Put To Messages </div>\n\n> When a user clicks on this div, issue a PUT request to the URL /messages and\n> load the response into the div\n\nDid I mistake this for a React tutorial? Users should not be clicking <div>\nelements.\n\nIn my opinion some of the more advanced HTMX examples using inline JavaScript\nget a bit nasty. Those show the limits of declarative attribute templating.\n\nCriticisms aside, I think HTMX offers a limited but useful feature set that\ncan enhance many common web design patterns. If I hated it I wouldn\u2019t take the\ntime to blog about it!\n\n## Rolling My Own\n\nSo anyway, immediately after successfully adding HTMX I removed it! I had so\nmuch fun I decided to write my own mini version using the same ideas.\n\nI used the same last-modified and if-modified-since HTTP headers and 304\nresponse to allow caching fetch requests. I used pushState and popstate for\nbasic history integration. I added a bit of code to extract and replace\n<title> elements. Inspired by the HTMX preload extension I built in preloading\nusing pointer events. This gives a little performance boost by starting the\nfetch request before the click event is fired. I suspect as I dogfood my\nimplementation I\u2019ll find stuff I\u2019ve missed. It\u2019s working well so far.\n\nSource code for my experiment is on GitHub. It\u2019s very basic but it\ndemonstrates how little JavaScript is actually needed in the browser. By using\nHTMX \u2014 or \u201cwe have HTMX at home\u201d \u2014 my codebase has become much smaller and\nsimpler.\n\n## Front-end JavaScript\n\nTemplates and \u2018components\u2019 are practically necessary to organise and reuse\ncode for all but the smallest of websites. That can be done server-side using\nPHP, Ruby, Go, anything, even JavaScript. Does that need to be replicated in\nthe browser? Or worse, only in the browser? With the popularity of React et\nal. many of us have stopped asking that question. This project has reminded me\nthe answer is an emphatic No.\n\nFront-end JavaScript fatigue is real. I\u2019m guilty myself of over-engineering JS\nUI despite preferring good old server templates. I don\u2019t even think HTMX is\nthat good but the philosophy behind it embarrasses the modern JavaScript\ndeveloper. For that I appreciate it very much.\n\n## Support my work!\n\nTip me on Ko-fi\n\nEnjoying this blog? Please consider a small tip to say thanks.\n\nA $5 coffee would taste wonderful!\n\nabout tips\n\n### David Bushell\n\nAvatar of David Bushell\n\nBased in the UK, near Manchester, I freelance for businesses, start-ups,\nindividuals, and fellow web agencies, all over the world.\n\nAbout Ko-fi Mastodon Twitter CodePen GitHub RSS Feed\n\n### My Projects New and old!\n\nSee what I\u2019m coding right now and check out my design portfolio.\n\n### Web Agencies Need a hand?\n\nI\u2019m reliable, flexible, and pride myself in communication and initiative to\ndelivery on time and within budget.\n\n### Businesses Have an idea?\n\nLet\u2019s discuss your requirements, share ideas, and figure out what\u2019s best for\nyour new website together.\n\n### The Blog\n\nI write about website design and development.\n\n  * HTMX Is So Cool I Rolled My Own!\n  * Offscreen Canvas and Web Workers\n  * Spring 2024: Self-Hosted Update\n  * Better Syntax Highlighting\n  * CSS Button Styles You Might Not Know\n  * JSR: Second Look\n  * A Fun Line of Code\n  * JSR: First Impressions\n  * Super Fast Builds \u26a1\n  * RSS Feed Styles\n\n### Copyright and Privacy\n\nCopyright \u00a9 2004\u20132024 David Bushell \u2022 Privacy Policy\n\nBuy me a coffee!\n\n", "frontpage": false}
