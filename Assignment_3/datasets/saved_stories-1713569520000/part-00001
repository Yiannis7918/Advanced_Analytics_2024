{"aid": "40089644", "title": "hashin pins Python dependencies to checksums in requirements.txt for security", "url": "https://github.com/peterbe/hashin", "domain": "github.com/peterbe", "votes": 1, "user": "spyc", "posted_at": "2024-04-19 17:30:56", "comments": 0, "source_title": "GitHub - peterbe/hashin: Helping you write hashed entries for packages in your requirements.txt", "source_text": "GitHub - peterbe/hashin: Helping you write hashed entries for packages in your\nrequirements.txt\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\npeterbe / hashin Public\n\n  * Notifications\n  * Fork 26\n  * Star 100\n\nHelping you write hashed entries for packages in your requirements.txt\n\nwww.peterbe.com/plog/hashin\n\n### License\n\nMIT license\n\n100 stars 26 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# peterbe/hashin\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n6 Branches\n\n1 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\npeterbeMerge pull request #164 from hartwork/lock-ci-permissions-down-for-\nse...Mar 13, 2024e068483 \u00b7 Mar 13, 2024Mar 13, 2024\n\n## History\n\n167 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Lock permissions down to minimum for GitHub Actions| Mar 13, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| tests/test_cli.py: Apply Black 24.2.0| Mar 13, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| ignore htmlcov/| Mar 20, 2018  \n  \n### .therapist.yml\n\n|\n\n### .therapist.yml\n\n| black the code (#80)| Oct 8, 2018  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| update license file| Jul 28, 2016  \n  \n### README.rst\n\n|\n\n### README.rst\n\n| Version 1.0.1| Mar 13, 2024  \n  \n### deploy.sh\n\n|\n\n### deploy.sh\n\n| version for 1.0.0 release| Mar 13, 2024  \n  \n### hashin.py\n\n|\n\n### hashin.py\n\n| Replace deprecated pkg_resources by importlib.metadata of Python >=3.8| Mar\n12, 2024  \n  \n### lint-requirements.txt\n\n|\n\n### lint-requirements.txt\n\n| lint-requirements.txt: Make flake8 working for Python 3.12| Mar 12, 2024  \n  \n### setup.cfg\n\n|\n\n### setup.cfg\n\n| universal wheel| Jan 18, 2019  \n  \n### setup.py\n\n|\n\n### setup.py\n\n| Version 1.0.1| Mar 13, 2024  \n  \n### test-requirements.txt\n\n|\n\n### test-requirements.txt\n\n| Migrate from PyPI mock to stdlib unittest.mock| Mar 12, 2024  \n  \n### tox.ini\n\n|\n\n### tox.ini\n\n| tox.ini: Slightly turn up test verbosity| Mar 12, 2024  \n  \n## Repository files navigation\n\n# hashin\n\nHelps you write your requirements.txt with hashes so you can install with pip\ninstall --require-hashes -r ...\n\nIf you want to add a package or edit the version of one you're currently using\nyou have to do the following steps:\n\n  1. Go to pypi for that package\n  2. Download the .tgz file\n  3. Possibly download the .whl file\n  4. Run pip hash downloadedpackage-1.2.3.tgz\n  5. Run pip hash downloadedpackage-1.2.3.whl\n  6. Edit requirements.txt\n\nThis script does all those things. Hackishly wonderfully so.\n\n## A Word of Warning!\n\nThe whole point of hashing is that you vet the packages that you use on your\nlaptop and that they haven't been tampered with. Then you can confidently\ninstall them on a server.\n\nThis tool downloads from PyPI (over HTTPS) and runs pip hash on the downloaded\nfiles.\n\nYou should check that the packages that are downloaded are sane and not\ntampered with. The way you do that is to run hashin as normal but with the\n--verbose flag. When you do that it will print where it downloaded the\nrelevant files and those files are not deleted. For example:\n\n    \n    \n    $ hashin --verbose bgg /tmp/reqs.txt https://pypi.python.org/pypi/bgg/json * Latest version for 0.22.1 * Found URL https://pypi.python.org/packages/2.7/b/bgg/bgg-0.22.1-py2-none-any.whl * Re-using /var/folders/1x/2hf5hbs902q54g3bgby5bzt40000gn/T/bgg-0.22.1-py2-none-any.whl * Hash e5172c3fda0e8a42d1797fd1ff75245c3953d7c8574089a41a219204dbaad83d * Found URL https://pypi.python.org/packages/source/b/bgg/bgg-0.22.1.tar.gz * Re-using /var/folders/1x/2hf5hbs902q54g3bgby5bzt40000gn/T/bgg-0.22.1.tar.gz * Hash aaa53aea1cecb8a6e1288d6bfe52a51408a264a97d5c865c38b34ae16c9bff88 * Editing /tmp/reqs.txt\n\nYou might not have time to go through the lines one by one but you should be\naware that the vetting process is your responsibility.\n\n## Installation\n\nThis is something you only do or ever need in a development environment. Ie.\nyour laptop:\n\n    \n    \n    pip install hashin\n\n## How to use it\n\nSuppose you want to install futures. You can either do this:\n\n    \n    \n    hashin futures\n\nWhich will download the latest version tarball (and wheel) and calculate their\npip hash and edit your requirements.txt file.\n\nOr you can be specific about exactly which version you want:\n\n    \n    \n    hashin \"futures==2.1.3\"\n\nYou can also specify more than one package at a time:\n\n    \n    \n    hashin \"futures==2.1.3\" requests\n\nSuppose you don't have a requirements.txt right there in the same directory\nyou can specify --requirements-file:\n\n    \n    \n    hashin futures --requirements-file=stuff/requirements/prod.txt\n\nBy default sha256 hashes are used, but this can be overridden using the\n--algorithm argument:\n\n    \n    \n    hashin futures --algorithm=sha512\n\nIf there's no output, it worked. Check how it edited your requirements file.\n\n## Filtering releases by Python version\n\nSome requirements have many releases built for different versions of Python\nand different architectures. These hashes aren't useful in some cases, if\nthose wheels don't work with your project. hashin can filter on the Python\nversion to skip these extraneous hashes.\n\nFor example, the cffi package offers wheels built for many versions of CPython\nfrom 2.6 to 3.5. To select only one of them, you can use the --python-version\noption:\n\n    \n    \n    hashin \"cffi==1.5.2\" --python-version 3.5\n\nIf you need to support multiple versions, you can pass this option multiple\ntimes:\n\n    \n    \n    hashin \"cffi==1.5.2\" --python-version 2.7 --python-version 3.5\n\nhashin will expand these Python versions to a full list of identifers that\ncould be found on PyPI. For example, 3.5 will expand to match any of 3.5, py3,\npy3.5, py2.py3, or cp3.5. You can also specify these exact identifiers\ndirectly, if you need something specific.\n\nThe source release is always automatically included. pip will use this as a\nfallback in the case a suitable wheel cannot be found.\n\n## Dry run mode\n\nThere are some use cases, when you maybe don't want to edit your\nrequirements.txt right away. You can use the --dry-run argument to show the\ndiff, so you can preview the changes to your requirements.txt file.\n\nExample:\n\n    \n    \n    hashin --dry-run requests==2.19.1\n\nWould result in a printout on the command line:\n\n    \n    \n    --- Old +++ New @@ -0,0 +1,3 @@ +requests==2.19.1 \\ + --hash=sha256:63b52e3c866428a224f97cab011de738c36aec0185aa91cfacd418b5d58911d1 \\ + --hash=sha256:ec22d826a36ed72a7358ff3fe56cbd4ba69dd7a6718ffd450ff0e9df7a47ce6a\n\n## PEP-0496 Environment Markers\n\nRequirements can use PEP-0496 style specifiers (e.g. like cffi==1.5.2;\npython_version >= '3.4') and these will be passed through when re-writing the\nrequirements.txt file. hashin doesn't parse the specifiers themselves and will\ntake anything after the semicolon. If you are using python_version you will\nstill need to pass appropriate options if you don't want every available hash.\n\nAn example of this might be:\n\n    \n    \n    hashin \"pywin32-ctypes ; sys_platform == 'win32'\"\n\nwhich will result it something like this in the requirements.txt file:\n\n    \n    \n    pywin32-ctypes==0.1.2; sys_platform == 'win32' \\ --hash=sha256:4820b830f42e6889d34142bcd07b3896018c3620d8c31f5e13b72caf1f4d1d0f\n\nAnd if you want to limit it to certain Python versions, here's an example:\n\n    \n    \n    hashin \"cffi==1.5.2; python_version >= '3.4'\" -p 3.4 -p 3.5\n\n## Using as a Python library\n\nEverything you can do with hashin on the command line you can do in running\nPython too. For example:\n\n    \n    \n    import hashin from pprint import pprint pprint(hashin.get_package_hashes('Django'))\n\nThis will print out:\n\n    \n    \n    {'hashes': [{'hash': 'fbc7ffaa45a4a67cb45f77dbd94e8eceecebe1d0959fe9c665dfbf28b41899e6', 'url': 'https://pypi.python.org/packages/41/c1/68dd27946b03a3d756b0ff665baad25aee1f59918891d86ab76764209208/Django-1.11b1-py2.py3-none-any.whl'}], 'package': 'Django', 'version': '1.11b1'}\n\nOr with specific version, algorithm and certain Python versions:\n\n    \n    \n    import hashin from pprint import pprint pprint(hashin.get_package_hashes( 'Django', version='1.10', algorithm='sha512', python_versions=('3.5',) ))\n\n## Local development\n\nAfter you have cloned the project, created a virtual environment and run:\n\n> pip install -e \".[dev]\"\n\nNow, to run it you can use the installed executable hashin and do things like:\n\n    \n    \n    touch /tmp/reqs.txt hashin -r /tmp/reqs.txt Django\n\n## Running tests\n\nSimply run:\n\n    \n    \n    python setup.py test\n\nWhen you use pip install \".[dev]\" it will install tox which you can use to run\nthe full test suites (plus linting) in different Python environments:\n\n    \n    \n    tox\n\n## Running tests with test coverage\n\nTo run the tests with test coverage, with pytest run something like this:\n\n    \n    \n    $ pip install pytest-cover $ pytest --cov=hashin --cov-report=html $ open htmlcov/index.html\n\n## Debugging\n\nTo avoid having to install hashin just to test it or debug a feature you can\nsimply just run it like this:\n\n    \n    \n    touch /tmp/whatever.txt python hashin.py --verbose Django /tmp/whatever.txt\n\n## Code Style\n\nAll Python code should be run through Black. This is checked in CI and you can\ntest it locally with tox.\n\nAlso, this project uses therapist which helps with checking code style as a\ngit pre-commit hook. therapist is used in tox. To run all code style checks,\nuse tox -e lint but make sure your version of tox is built on a Python 3.\n\n## History\n\nThis program is a \"fork\" of https://pypi.python.org/pypi/peepin peepin was a\ncompanion to the program peep https://pypi.python.org/pypi/peep/ but the\nfunctionality of peep has been put directly into pip as of version 8.\n\n## Future\n\nIf this script proves itself to work and be useful, I hope we can put it\ndirectly into pip.\n\n## Version History\n\n1.0.1\n\n    \n\n  * Update change log about the 1.0.0 release.\n\n1.0.0\n\n    \n\n  * Update setup.py, tox.ini and GitHub Actions to use Python >=3.8 and up to 3.12.\n\n0.17.0\n\n    \n\n  * Add python 3.9 and 3.10 to the test matrix.\n  * Preserve lexigraphical order of hashes for the output of the get_releases_hashes function. See #126\n\n0.16.0\n\n    \n\n  * Preserve indented comments when updating requirements files. See #124\n  * Switch to GitHub Actions instead of TravisCI. And test tox in Python 3.7 and 3.8 additionally as well as upgrading lint requirements. See #118\n\n0.15.0\n\n    \n\n  * Use of underscore or hyphens in package names is corrected See #116 Thanks @caphrim007\n\n0.14.6\n\n    \n\n  * Indentation in the requirements file is preserved. See #112 Thanks @techtonik\n  * If you use --update-all and forget the -r when specifying your requirements file, instead of complaining, it corrects the intentions. See #104\n\n0.14.5\n\n    \n\n  * When writing down hashes, they are now done in a lexigraphically ordered way. This makes the writes to the requirements file more predictable. See #105\n\n0.14.4\n\n    \n\n  * Bugfix for new --index-url option feature in version 0.14.3. See #108\n\n0.14.3\n\n    \n\n  * New parameter --index-url which allows to override the default which is https://pypi.org. Thanks @nmacinnis See #107\n\n0.14.2\n\n    \n\n  * When using --update-all and parsing requirements file it could be fooled by comments that look like package specs (e.g # check out foo==1.0) See #103\n\n0.14.1\n\n    \n\n  * All HTTP GET work to fetch information about packages from PyPI is done in concurrent threads. Requires backport for Python 2.7. See #101\n\n0.14.0\n\n    \n\n  * \\--interactive (when you use --update-all) will iterate over all outdated versions in your requirements file and ask, for each one, if you want to updated it. See #90\n  * Order of hashes should not affect if a package in the requirements file should be replaced or not. See #93\n  * (Internal) All tests have been rewritten as plain pytest functions.\n  * In Python 3, if the package can't be found you get a more explicit exception pointing out which package (URL) that failed. See #87\n  * New flag --update-all (alias -u) will parse the requirements file, ignore the version, and update all packages that have new versions. See #88\n  * Support for \"extras syntax\". E.g. hashin \"requests[security]\". Doesn't actually get hashes for security (in this case, that's not even a package) but allows that syntax into your requirements.txt file. See #70\n  * All code is now formatted with Black.\n\n0.13.4\n\n    \n\n  * Ability to pass --dry-run which prints a diff of what it would do to your requirements file. See #78\n  * Better error message when no versions, but some pre-releases found. See #76\n  * Don't show URLs when using --verbose if files don't need to be downloaded. See #73\n\n0.13.3\n\n    \n\n  * Makes it possible to install nltk on Windows. Thanks @chrispbailey!\n\n0.13.2\n\n    \n\n  * Match Python versions as py{major}{minor} additionally. Solves problem with installing packages with files like Paste-2.0.3-py34-none-any.whl. Thanks @danfoster!\n\n0.13.1\n\n    \n\n  * Ability to pass --include-prereleases if you're trying to add a package that only has pre-releases.\n\n0.13.0\n\n    \n\n  * Two new dependencies for hashin: pip-api and packaging. This means we no longer need to import pip and rely on private APIs. Thanks @di! This also means you can no longer install hashin on Python 2.6 and Python <=3.3.\n\n0.12.0\n\n    \n\n  * Switch from pypi.python.org/pypi/<package>/json to pypi.org/pypi/<package>/json which also means the sha256 hash is part of the JSON payload immediately instead of having to download and run pip to get the hash.\n  * Testing no runs Python 2.6 and Python 3.3.\n  * All hashes, per package, are sorted (by the hash) to make it more predictable.\n\n0.11.5\n\n    \n\n  * You can now pass PEP-0496 Environment Markers together with the package name, and they get passed into the requirements.txt file. Thanks @meejah\n\n0.11.4\n\n    \n\n  * PackageErrors happening in CLI suppressed just the error message out on stderr. No full traceback any more.\n\n0.11.3\n\n    \n\n  * Better error if you typo the package name since it'll 404 on PyPI.\n\n0.11.2\n\n    \n\n  * Run continuous integration tests with Python 3.6 too.\n\n0.11.1\n\n    \n\n  * Ability to run hashin --version to see what version of hashin is installed. See #41\n\n0.11.0\n\n    \n\n  * Cope with leading zeros in version numbers when figuring out what the latest version is. See #39\n\n0.10.0\n\n    \n\n  * Latest version is now figured out by looking at all version numbers in the list of releases from the JSON payload. The pre releases are skipped.\n\n0.9.0\n\n    \n\n  * Fixed a bug where it would fail to install a package whose name is partially part of an existing (installed) package. E.g. installing redis==x.y.z when django-redis==a.b.c was already in the requirements file.\n\n0.8.0\n\n    \n\n  * Ability to make hashin work as a library. Thanks @jayfk !\n  * pep8 cleanups.\n\n0.7.2\n\n    \n\n  * Fixes bug related to installing platform specific archives See #33 Thanks @mythmon\n\n0.7.1\n\n    \n\n  * Package matching is now case insensitive. E.g. hashin dJaNgO\n\n0.7.0\n\n    \n\n  * The requirements file and algorithm arguments are now keyword arguments. Now, the second, third, nth positional argument are additional arguments. Thanks @https://github.com/ahal\n\n0.6.1\n\n    \n\n  * Support windows binaries packaged as a .msi file.\n\n0.6.0\n\n    \n\n  * Fix compatibility issue with pip 8.1.2 and 8.1.1-2ubuntu0.1 and drop support for Python 2.6\n\n0.5.0\n\n    \n\n  * Important bug fix. As an example, if you had pytest-selenium==... already in your requirements.txt file and add selenium==x.y.z it would touch the line with pytest-selenium too.\n\n0.4.1\n\n    \n\n  * Support for PyPI links that have a hash in the file URL.\n\n0.4.1\n\n    \n\n  * Fix PackageError if no Python version is defined.\n\n0.4\n\n    \n\n  * Add filtering of package releases by Python version.\n\n0.3\n\n    \n\n  * Issue a warning for users of Python before version 2.7.9.\n\n0.2\n\n    \n\n  * Last character a single newline. Not two.\n\n0.1\n\n    \n\n  * First, hopefully, working version.\n\n## About\n\nHelping you write hashed entries for packages in your requirements.txt\n\nwww.peterbe.com/plog/hashin\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n100 stars\n\n### Watchers\n\n3 watching\n\n### Forks\n\n26 forks\n\nReport repository\n\n## Releases 1\n\n1.0.1 Latest\n\nMar 13, 2024\n\n## Packages 0\n\nNo packages published\n\n## Used by 302\n\n\\+ 294\n\n## Contributors 20\n\n\\+ 6 contributors\n\n## Languages\n\n  * Python 99.9%\n  * Shell 0.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
