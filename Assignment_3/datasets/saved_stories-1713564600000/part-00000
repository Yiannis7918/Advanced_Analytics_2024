{"aid": "40088534", "title": "ShredOS \u2013 Secure Disk Erasure/Wipe", "url": "https://github.com/PartialVolume/shredos.x86_64", "domain": "github.com/partialvolume", "votes": 1, "user": "ementally", "posted_at": "2024-04-19 16:07:05", "comments": 0, "source_title": "GitHub - PartialVolume/shredos.x86_64: Shredos Disk Eraser 64 bit for all Intel 64 bit processors as well as processors from AMD and other vendors which make compatible 64 bit chips. ShredOS - Secure disk erasure/wipe", "source_text": "GitHub - PartialVolume/shredos.x86_64: Shredos Disk Eraser 64 bit for all\nIntel 64 bit processors as well as processors from AMD and other vendors which\nmake compatible 64 bit chips. ShredOS - Secure disk erasure/wipe\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nPartialVolume / shredos.x86_64 Public\n\n  * Sponsor\n  * Notifications\n  * Fork 51\n  * Star 1.2k\n\nShredos Disk Eraser 64 bit for all Intel 64 bit processors as well as\nprocessors from AMD and other vendors which make compatible 64 bit chips.\nShredOS - Secure disk erasure/wipe\n\n### License\n\nView license\n\n1.2k stars 51 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# PartialVolume/shredos.x86_64\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n29 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nPartialVolumeMerge pull request #243 from rarzberger4/patch-1Apr 15,\n2024139cf78 \u00b7 Apr 15, 2024Apr 15, 2024\n\n## History\n\n136 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Create FUNDING.yml| Mar 24, 2023  \n  \n### .kdev4\n\n|\n\n### .kdev4\n\n| Upgrade buildroot to 2023.05 (from 2021.08.2), kernel is upgraded to ...|\nJul 5, 2023  \n  \n### arch\n\n|\n\n### arch\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### board\n\n|\n\n### board\n\n| New shutdown and reboot options| Mar 6, 2024  \n  \n### boot\n\n|\n\n### boot\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### configs\n\n|\n\n### configs\n\n| Multiple loop device test mode for developers & testers.| Feb 22, 2024  \n  \n### docs.original\n\n|\n\n### docs.original\n\n| Upgrade buildroot to 2023.05 (from 2021.08.2), kernel is upgraded to ...|\nJul 5, 2023  \n  \n### docs\n\n|\n\n### docs\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### fs\n\n|\n\n### fs\n\n| Upgrade buildroot to 2023.05 (from 2021.08.2), kernel is upgraded to ...|\nJul 5, 2023  \n  \n### images\n\n|\n\n### images\n\n| Add example PDF animated gif which is used in README.md| Nov 10, 2023  \n  \n### linux\n\n|\n\n### linux\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### package\n\n|\n\n### package\n\n| 1\\. Now searches through multiple drives looking for exfat/fat32 shred...|\nJan 1, 2024  \n  \n### support\n\n|\n\n### support\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### system\n\n|\n\n### system\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### toolchain\n\n|\n\n### toolchain\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### utils\n\n|\n\n### utils\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### .defconfig\n\n|\n\n### .defconfig\n\n| First commit of Shredos v2021.08.2_19_x86-64_0.32.014| Nov 23, 2021  \n  \n### .flake8\n\n|\n\n### .flake8\n\n| First commit of Shredos v2021.08.2_19_x86-64_0.32.014| Nov 23, 2021  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| First commit of Shredos v2021.08.2_19_x86-64_0.32.014| Nov 23, 2021  \n  \n### .gitlab-ci.yml\n\n|\n\n### .gitlab-ci.yml\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### CHANGES\n\n|\n\n### CHANGES\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### COPYING\n\n|\n\n### COPYING\n\n| First commit of Shredos v2021.08.2_19_x86-64_0.32.014| Nov 23, 2021  \n  \n### Config.in\n\n|\n\n### Config.in\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### Config.in.legacy\n\n|\n\n### Config.in.legacy\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### DEVELOPERS\n\n|\n\n### DEVELOPERS\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Update to buildroot 2023.08.2, updated nwipe to v0.35, added ChromeOS...|\nNov 8, 2023  \n  \n### Makefile.legacy\n\n|\n\n### Makefile.legacy\n\n| First commit of Shredos v2021.08.2_19_x86-64_0.32.014| Nov 23, 2021  \n  \n### README\n\n|\n\n### README\n\n| First commit of Shredos v2021.08.2_19_x86-64_0.32.014| Nov 23, 2021  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 15, 2024  \n  \n### buildroot-2021.08.2.kdev4\n\n|\n\n### buildroot-2021.08.2.kdev4\n\n| Upgrade buildroot to 2023.05 (from 2021.08.2), kernel is upgraded to ...|\nJul 5, 2023  \n  \n### diff_result.txt\n\n|\n\n### diff_result.txt\n\n| Upgrade buildroot to 2023.05 (from 2021.08.2), kernel is upgraded to ...|\nJul 5, 2023  \n  \n### manual.mk\n\n|\n\n### manual.mk\n\n| Upgrade buildroot to 2023.05 (from 2021.08.2), kernel is upgraded to ...|\nJul 5, 2023  \n  \n## Repository files navigation\n\n# ShredOS x86_64 - Disk Eraser\n\n## For all Intel and compatible 64 & 32 bit processors\n\n#### As well as a 64bit versions, also included are 32bit .img & .iso images\nof ShredOS that will run on both 32bit and 64bit processors, see Release\nAssets and the table of download links below. For those that wish to build\ntheir own ShredOS from source, rather than just burn the .img/.iso images,\ninstructions for modififing the x86_64 build to generate 32bit code as well as\n.iso images will be included below in the notes in due course.\n\n#### For those that just want to get on with using ShredOS, you can download\nthe pre-built .img or .iso images and burn them straight to USB flash drive or\nCD/DVD. Boot from the USB flash drive or CD/DVD and nwipe will appear ready\nfor you to select your preferred wipe options.\n\n## Download the Latest ShredOS .img and .iso files for burning to USB flash\ndrives and CD-R/DVD-R.\n\nNOTE! There may be pre-release versions that are newer than the latest\nversions listed below, To see all versions, pre-release & latest The latest\nversions contain a full set of .img & .iso images in 32bit & 64bit while the\npre-releases generally only contain a 64bit .img. Which should you use? Well,\nunless you need either 32 bit images or .iso images I would tend to download\nthe very latest pre-release. Even the pre-releases are subjected to a fair\namount of testing before they become a pre-release.\n\n### ShredOS version v2023.08.2_25_x86-64_0.35 (Latest Release)\n\nNwipe Version| File to download  \n---|---  \nv0.35| ShredOS .img x86_64bit for USB Vanilla DRM  \nv0.35| ShredOS .iso x86_64bit for CD/DVD, Ventoy Vanilla DRM  \nv0.35| ShredOS .iso x86_64bit for CD/DVD, Ventoy nomodeset NoDRM  \nv0.35| ShredOS .img i586_32bit for USB Vanilla  \nv0.35| ShredOS .iso i586_32bit for CD/DVD  \n  \n### ShredOS version v2021.08.2_23_x86-64_0.34 (Previous Release)\n\nNwipe Version| File to download  \n---|---  \nv0.34| ShredOS .img x86_64bit for USB flash drive  \nv0.34| ShredOS .iso x86_64bit for CD/DVD, Ventoy  \nv0.34| ShredOS .img i686_32bit for USB flash drive  \nv0.34| ShredOS .iso i686_32bit for CD/DVD  \n  \n### For all releases including latest and more recent pre-releases releases\n\nNote: The .img files for burning to USB flash drives support both bios/UEFI\nbooting. The .iso image currently supports legacy bios booting only and not\nUEFI, however, a bios/UEFI version of the .iso is in development and will be\nreleased shortly. You can also consider VENTOY (Open Source tool to create\nbootable USB drive for ISO/WIM/IMG/VHD(x)/EFI files) as a workaround to avoid\nbios/UEFI issues.\n\n#### Demo video below: ShredOS automatically displays Nwipe's interactive GUI\nat boot.\n\nYou can then select one or more drives to be erased, wipe method or pattern to\nbe used, number of rounds, whether a zeros blanking pass is applied,\nverification options such as last pass, all passes or no verification. ShredOS\nand nwipe are highly configurable so if you prefer to run nwipe without a GUI\nthen you can configure nwipe by applying nwipe options to the linux command\nline in grub.cfg on the USB flash drive.\n\n#### Below: Example of ShredOS's (Nwipe) multi page PDF certificate.\n\nA certificate can optionally be created for each drive erased, the default is\nto create the certificate, but can be disabled by either an nwipe option\napplied in grub.cfg or via the nwipe configuration menu. The status of which\nis saved to the USB stick you booted from, so next time you boot from the USB\nstick the configuration settings are remembered. The first page of the PDF\ncertificate contains details of the erasure and whether it was succesfully\nerased, failed due to drive errors, or partially erased due to HPA/DCO hidden\nsectors. Pages two and three contain the drives smart data.\n\n  1. What is ShredOS?\n  2. What do I do after I've erased everything on my disk? What is actually erased?\n  3. Nwipe's erasure methods\n  4. Obtaining and writing ShredOS to a USB flash drive - The easy way!\n\n    1. Linux and MAC users\n    2. Windows users\n    3. Multi OS with VENTOY\n    4. How to edit the ShredOS /EFI/BOOT/grub.cfg and boot/grub.cfg files when using Ventoy with ShredOS .img files\n  5. A word about the MAC Book Pro\n  6. Having trouble with USB adapters not working/hanging, want to buy one that works properly!\n  7. Virtual terminals\n  8. How to exclude the fat formatted shredos boot drive from nwipe interactive and autonuke modes\n  9. How to run nwipe so you can specify nwipe command line options\n  10. How to change the default nwipe options so the change persists between reboots\n  11. How to set the keyboard map using the loadkeys command (see here for persistent change between reboots\n  12. How to make a persistent change to keyboard maps\n  13. Reading and saving nwipes log files - via USB (manually) or ftp (manually & automatically)\n\n    1. Transferring nwipe log files to a USB storage device\n    2. Transferring nwipe log files to a ftp server\n  14. How to wipe drives on headless systems or systems with faulty display hardware. (For use on secure LANs only)\n  15. Nwipe's font size is too small, How to double the size of the text\n  16. Shredos includes the following related programs\n\n    1. smartmontools\n    2. hexedit\n    3. hdparm\n  17. Compiling shredos and burning to USB stick, the harder way!\n\n    1. Install the following prerequisite software first. Without this software, the make command will fail\n    2. Download the ShredOS source using the git command and build ShredOS\n    3. Commands to configure buildroot, you will only need to use these if you are making changes to ShredOS\n  18. Important ShredOS files and folders when building from source\n\n    1. ../board/shredos/doimg.sh\n    2. ../board/shredos/version.txt\n    3. ../board/shredos/fsoverlay/\n    4. ../board/shredos/fsoverlay/etc/init.d/S40network\n    5. ../board/shredos/fsoverlay/usr/bin/nwipe_launcher\n    6. ../package/nwipe/\n    7. ../package/nwipe/nwipe.mk\n    8. ../package/nwipe/nwipe.hash\n    9. ../package/nwipe/Config.in\n    10. ../package/nwipe/002-nwipe-banner-patch.sh\n\n## What is ShredOS?\n\nShredOS is a USB bootable (BIOS or UEFI) small linux distribution with the\nsole purpose of securely erasing the entire contents of your disks using the\nprogram nwipe. If you are familiar with dwipe from DBAN then you will feel\nright at home with ShredOS and nwipe. What are the advantages of nwipe over\ndwipe/DBAN? Well as everybody probably knows, DBAN development stopped in 2015\nwhich means it has not received any further bug fixes or support for new\nhardware since that date. Nwipe originally was a fork of dwipe but has\ncontinued to have improvements and bug fixes and is now available in many\nLinux distros. ShredOS hopefully will always provide the latest nwipe on a up\nto date Linux kernel so it will support modern hardware.\n\nShredOS supports either 32bit or 64bit processors. You will need to download\nthe appropriate 64bit or 32bit .img or .iso file, depending upon your target\nprocessor and whether you want to burn ShredOS to a USB memory stick, in which\ncase you would download the .img file. Alternatively, if you wanted to burn\nShredOS to CD/DVD, then you would download the .iso file.\n\nBecause ShredOS boots and runs straight from a USB flash drive or DVD/CD, it\ndoesn't matter what operating system already exists on the computer. It will\nremove all data/directories/operating systems, from the drive or drives you\nhave selected for wiping, leaving a disk with no trace of what originally\nexisted. It will wipe PC's & Intel based MACs, such as MAC Book Pros. It\ndoesn't care what operating system previosuly existed, be it Windows/MAC\nOSX/Linux/VXWorks.\n\nShredOS can be used as a software image and booted via the network using a\nclient PC that supports Preboot execution environment (PXE) via a PXE enabled\nserver. A procedure for creating a simple UEFI PXE server based on\nDebian/Ubuntu and serving up ShredOS can be found here #148\n\nYou can also use ShredOS on headless systems or systems with faulty display\nhardware as it includes a user enabled telnet server. Further details can be\nfound here. How to wipe drives on headless systems or systems with faulty or\nmissing display hardware or keyboards\n\nShredOS includes the latest Nwipe official release, but in addition includes\nother disk related utilities such as Smartmontools, hdparm, a hexeditor\nhexedit, and, the program loadkeys which can be used for setting the keyboard\nlayout. Nwipe automatically starts it's GUI in the first virtual terminal\n(ALT-F1), hdparm, smartmontools and hexeditor can be run in the second virtual\nterminal, (ALT-F2). Nwipe will erase drives using a user selectable choice of\nseven methods. hdparm - amongst many of its options - can be used for wiping a\ndrive by issueing ATA erase commands to the drive's internal firmware. This is\na planned feature addition to nwipe.\n\nShredOS boots very quickly and depending upon the host system can boot in as\nlittle as 2 seconds (typically 4 to 6 seconds) on modern hardware, while on an\nold Pentium4 may take 40+ seconds. Nwipe automatically starts in GUI mode and\nwill list the disks present on the host system. In fact, on version of ShredOS\nearlier than v2023.08.2_25.0_x86-64_0.35 nwipe can launch so fast that the USB\ndevices have not yet initialised so the first time nwipe appears it may not\nshow any USB drives, this behaviour has been fixed from version\nv2023.08.2_25.0_x86-64_0.35 onwards so there will usually be a delay of about\n5-10 seconds while the USB devices are initialised. On older versions of\nShredOS you would use Control-C to exit and restart nwipe to see any attached\nUSB devices. You can then select the methods by which you want to securely\nerase the disk/s. Nwipe is able to simultanuosly wipe multiple disks using a\nthreaded software architecture. I have simultaneously wiped 28 loop devices in\ntests and know of instances where it's been used to simultaneuosly wipe\nupwards of fifty drives on a rack server.\n\nThe vanilla version of ShredOS boots into nwipe's GUI and shows the available\ndiscs that can then be selected for wiping. It does not autonuke your discs at\nlaunch, however it is capable of doing that, if you edit the grub.cfg file and\nspecify the appropriate nwipe command line option. Details of configuring\nnwipe's launch behaviour is shown below How to run nwipe so you can specify\nnwipe command line options\n\n## What do I do after I've erased everything on my disk? What is actually\nerased?\n\nThis paragraph is for those that are not familiar with wiping disks. if you\nknow what you are doing skip to the next section. So you have erased your disk\nwith ShredOS/nwipe and nwipe reported zero errors and the disk was erased. In\nit's erased state and depending upon the method you used every block on the\ndrive contains either zero's or meaningless random data. In this state the\ndisk won't be recognised by your operating system except at a very low level\nor by specialised programs. You won't be able to write files to the disk\nbecause nwipe has removed everything, absolutely everything, the operating\nsystem is gone, all your data is gone, the partition table is gone, the file\nsystem gone, the MBR and all the files have been erased without a trace and\nwill never ever be recovered from the disk. The only thing left is a whole\nload of zeros or random data. To make the disk usable again you will either\nneed to format the disk, which creates a partition table and directory\nstructure or install a new operating system such as Linux or Windows. Of\ncourse, if you are just disposing of or reselling the disk then you don't need\nto do anything else. So if you are reasonably happy that you know what you are\ndoing and you understand that you will need to format the disk then I hope\nthis software does it's job and is useful to you. Before you press that 'S'\nkey to start the wipe, pause and double check you have selected the correct\ndrive/s, something I always do !\n\n## Nwipe's erasure methods\n\n  * Fill With Zeros - Fills the device with zeros (0x00), one round only.\n  * Fill With Ones - Fills the device with ones (0xFF), one round only.\n  * RCMP TSSIT OPS-II - Royal Canadian Mounted Police Technical Security Standard, OPS-II\n  * DoD Short - The American Department of Defense 5220.22-M short 3 pass wipe (passes 1, 2 & 7).\n  * DoD 5220.22M - The American Department of Defense 5220.22-M full 7 pass wipe.\n  * Gutmann Wipe - Peter Gutmann's method (Secure Deletion of Data from Magnetic and Solid-State Memory).\n  * PRNG Stream - Fills the device with a stream from the PRNG.\n  * Verify Zeros - This method only reads the device and checks that it is filled with zeros (0x00).\n  * Verify Ones - This method only reads the device and checks that it is filled with ones (0xFF).\n  * HMG IS5 enhanced - Secure Sanitisation of Protectively Marked Information or Sensitive Information\n\nNwipe also includes the following pseudo random number generators:\n\n  * Mersenne Twister (mt19937ar-cok)\n  * ISAAC (rand.c 20010626)\n\n## Obtaining and writing ShredOS to a USB flash drive, the easy way!\n\nYou can of course compile ShredOS from source but that can take a long time\nand you can run into all sorts of problems if your not familiar with compiling\nan operating system. So if you just want to get started with using ShredOS and\nnwipe then just download the ShredOS image file and write it to a USB flash\ndrive. Please note this will over write the existing contents of your USB\nflash drive.\n\nDownload the latest ShredOS for either 32bit, 64bit, .img or .iso from here\n\n#### Linux (and MAC) users\n\nCheck it's not corrupt by running the following command and comparing with the\nchecksum shown in the release notes:\n\n    \n    \n    $ sha1sum shredos.img.tar.gz (shasum instead of sha1sum if you're using a MAC) (example) sha1 db37ea8526a17898b0fb34a2ec4d254744ef08a1 shredos.img.tar.gz\n\nIf the image file has a .img.tar.gz extension then use the following commands\nto extract the .img file. If the file extension simply ends with .img and\nthere is no tar.gz then skip this step.\n\n    \n    \n    $ gunzip shredos.img.tar.gz $ tar xvf shredos.img.tar\n\nIf you are using linux or a MAC write the shredos.img file (also sometimes\ncalled shredos-2020MMDD.img i.e. shredos-20200418.img etc) to your USB flash\ndrive using the following command. (/dev/sdx is the device name of your USB\ndrive, this can be obtained from the results of sudo fdisk -l on linux and\ndiskutil list on a MAC)\n\n    \n    \n    sudo dd if=shredos.img of=/dev/sdx\n\n#### Windows users:\n\nIf you are a windows user, use a program such as Rufus or etcher to write the\nimage file to a USB stick, remembering that the entire contents of the USB\nflash drive will be overwritten. Winzip can be used to extract the shredos.img\nfile from the compressed shredos.img.tar.gz file that you downloaded. hashtab\ncan be downloaded and used to confirm the sha1 checksum.\n\n#### Multi OS with VENTOY\n\nAs explained on the GitHub repository:\n\n> Ventoy is an open source tool to create bootable USB drive for\n> ISO/WIM/IMG/VHD(x)/EFI files. With ventoy, you don't need to format the disk\n> over and over, you just need to copy the image files to the USB drive and\n> boot it. You can copy many image files at a time and ventoy will give you a\n> boot menu to select them. You can also browse ISO/WIM/IMG/VHD(x)/EFI files\n> in local disk and boot them. x86 Legacy BIOS, IA32 UEFI, x86_64 UEFI, ARM64\n> UEFI and MIPS64EL UEFI are supported in the same way. Both MBR and GPT\n> partition style are supported in the same way. Most type of OS\n> supported(Windows/WinPE/Linux/Unix/ChromeOS/Vmware/Xen...) 920+ ISO files\n> are tested (List). 90%+ distros in distrowatch.com supported (Details).\n\nOnce your USB removable drive is having VENTOY installed, you just have to\ncopy the latest .img or .iso version of ShredOS to the root of your Ventoy USB\nstick\n\n#### How to edit the ShredOS /EFI/BOOT/grub.cfg and boot/grub/grub.cfg files\nwhen using Ventoy with ShredOS .img files\n\nAs Ventoy simply requires you to copy the .img file to the root of the Ventoy\nUSB stick, to edit the ShredOS grub.cfg files it's neccessary to unpack the\nShredOS .img, edit the files and re-create the .img file that now includes the\nmodified grub files. The procedure below shows you how to do this on a Linux\ndistro.\n\nCreate a file on the disk that is slightly larger than the size of the ShredOS\n.img. In this example we will use\nshredos-2023.08.2_25.1_x86-64_0.35_20231202.img which is 260646656 bytes in\nsize (260.64MByte, 248.57MiByte). So if we create a empty file that is\n270Mbyte in size that should be sufficient. I'm going to go a bit over the top\nand create a 500MB file for this example but that isn't necessary if all you\nare doing is editing the grub files\n\n    \n    \n    >truncate -s 500M loopbackfile.img\n\nCreate a virtual disk, i.e /dev/loopx that uses the file we just created\n\n    \n    \n    >sudo losetup -fP loopbackfile.img\n\nWe need to determine what device name our loopbackfile.img is associated with.\nIn our example we will assume losetup returns the device /dev/loop30\n\n    \n    \n    >sudo losetup -a | grep -i loopbackfile.img /dev/loop30\n\nWe now have a virtual disk called /dev/loop30 that is 270MB in size. Now copy\nthe shredos-2023.08.2_25.1_x86-64_0.35_20231202.img file onto this virtual\ndisk using the dd command\n\n    \n    \n    >sudo dd if=shredos-2023.08.2_25.1_x86-64_0.35_20231202.img of=/dev/loop30\n\nDetermine the partition name of this ShredOS virtual drive. As can be seen\nbelow the partition name is /dev/loop30p1\n\n    \n    \n    >sudo fdisk -l /dev/loop30 Disk /dev/loop30: 500 MiB, 524288000 bytes, 1024000 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x00000000 Device Boot Start End Sectors Size Id Type /dev/loop30p1 1263 509075 507813 248M c W95 FAT32 (LBA)\n\nMount the /dev/loop30p1 partition to a folder called virtual_disc\n\n    \n    \n    >mkdir virtual_disc >sudo mount /dev/loop30p1 virtual_disc\n\nYou can now edit the grub.cfg files\n\n    \n    \n    >vi virtual_disc/EFI/BOOT/grub.cfg >vi virtual_disc/boot/grub/grub.cfg\n\nOnce you have finished making your changes unmount the drive\n\n    \n    \n    >sudo umount virtual_disc\n\nCreate the new ShredOS .img file\n\n    \n    \n    >sudo dd if=/dev/loop30 of=shredos_with_mods.img\n\nCopy shredos_with_mods.img to the root of the Ventoy USB stick and boot the\nVentoy USB stick. You can confirm your changes to the kernel commmand line by\nbooting ShredOS, switching to a virtual terminal ALT F2, and type more\n/proc/cmdline\n\n## Virtual Terminals\n\nShredOS has three tty terminals, ALT-F1 (Where nwipe is initially launched),\nALT-F2 (A virtual terminal), ALT-F3 (console log, login required which is root\nwith no password). Typical use of a virtual terminal might be to run other\ndisk related tools such as hdparm to remove hidden sectors or hexedit to\ndisplay the contents of the disk as hexadecimal values.\n\n## How to exclude the FAT formatted ShredOS Boot drive from Nwipe, interactive\nand autonuke modes\n\nThere are two methods that can be used to exclude the FAT formatted ShredOS\nboot drive from appearing in nwipe's interactive mode or autonuke modes.\n\n  * Method 1: The first method is to place the following string shredos_exclude_boot_disc=\"yes\" on the kernel command line in /boot/grub/grub.cfg and EFI/BOOT/grub.cfg on the ShredOS boot drive. This method obviously requires access to the grub.cfg file so is particularily suitable if you are creating your ShredOS boot drive using dd, Rufus or a similiar program however it's not possible to use this method if you are copying the .iso or .img file to a Ventoy USB drive as you would need to either unpack, edit the grub.cfg files and repack the .img or build the .iso or .img from source after editing the grub.cfg in the source. So for Ventoy users who want to exclude the FAT formatted ShredOS boot drive you should consider method 2 below.\n\n    \n    \n    set default=\"0\" set timeout=\"0\" menuentry \"shredos\" { linux /boot/shredos console=tty3 loglevel=3 shredos_exclude_boot_disc=\"yes\"\n\n  * Method 2: The second method is to create a empty file on the ShredOS boot disk at this specific location /etc/shredos/shredos_exclude_disc. This method will work irespective of whether you created the ShredOS boot disk with dd, Rufus or copied the .iso/.img to a Ventoy flash drive.\n\nWARNING You should not place the string /etc/shredos/shredos_exclude_disc on\nmultiple FAT formatted drives or for that matter any drive irrespective of\nformatting, expecting all the drives with this string to not appear in nwipe\nor not get wiped in interactive mode. The file\n/etc/shredos/shredos_exclude_disc should only appear on the one and only\nShredOS boot drive on the system. Any other drives that contain\n/etc/shredos/shredos_exclude_disc will appear in nwipe and WILL get wiped in\nautonuke mode.\n\n## A word about the MAC Book Pro\n\nYes, ShredOS will boot on MAC Book Pros, however here's a few tips you may\nfind useful.\n\n  * Booting from USB. Power off then power on holding down the alt key. After a few seconds select EFI boot.\n  * Due to the high resolution screens on a MAC Book Pro you may find the text displayed by nwipe and in the virtual terminals is very small. To enlarge the text follow the instructions here.\n  * How to switch between virtual terminals on a MAC. On a PC it's usually (but not always) ALT F1 (/dev/tty1 - nwipe), ALT F2 (/dev/tty2 or /dev/tty0 - terminal), ALT F3 (/dev/console - console). However on a MAC you switch virtual terminals as follows. FN+ALT F1 (/dev/tty1 - nwipe), FN+ALT F2 (/dev/tty2 or /dev/tty0 - terminal), FN+ALT F3 (/dev/console).\n\n## How to make a persistent change to the terminal resolution\n\nThis procedure only applies to setting the resolution of the frame buffer in\nlegacy boot. Using set gfxpayload=1024x768x16 appears to have no affect on\nUEFI resolution.\n\nAfter you have created the bootable ShredOS USB flash drive, you may want to\nincrease the resolution from the default value which is usually quite low,\ni.e. 640x480 in legacy boot.\n\nIf you prefer a higher resolution than 640x480, then edit the\n/boot/grub/grub.cfg file as shown below. However very occasionally it might be\nnecessary to change the resolution. Case in point, a blank screen after\nbooting ShredOS. Sometimes you may come across a monitor that will not work\nwith 640x480 resolution, such as the HP compaq LA2405X. In which case you\nshould increase the resolution to 1024x768x16 which seems to work with the\nmajority of monitors, even 16:10/16:9 ratio monitors.\n\n#### Example resolutions based on screen aspect ratio:\n\n4:3 aspect ratio resolutions: 640\u00d7480, 800\u00d7600, 960\u00d7720, 1024\u00d7768, 1280\u00d7960,\n1400\u00d71050, 1440\u00d71080 , 1600\u00d71200, 1856\u00d71392, 1920\u00d71440, and 2048\u00d71536.\n\n16:10 aspect ratio resolutions: 1280\u00d7800, 1440\u00d7900, 1680\u00d71050, 1920\u00d71200,\n2560\u00d71600 and 2880x1800.\n\n16:9 aspect ratio resolutions: 1024\u00d7576, 1152\u00d7648, 1280\u00d7720, 1366\u00d7768,\n1600\u00d7900, 1920\u00d71080, 2560\u00d71440 and 3840\u00d72160.\n\nAdd the command set gfxpayload=1024x768x16 prior to the kernel command line,\nchanging the resolution as required for your hardware/monitor. See the example\nbelow:\n\n    \n    \n    set default=\"0\" set timeout=\"0\" set gfxpayload=1024x768x16 menuentry \"shredos\" { linux /boot/shredos console=tty3 loglevel=3 }\n\n## How to run nwipe so you can specify nwipe command line options\n\nThe version of nwipe that runs in the default terminal will automatically\nrestart when you exit it, either at the end of a wipe or using CONTROL-C to\nabort. So if you want to run nwipe in the traditional way, along with any\ncommand line options you require, then use the second terminal ALT-F2, as an\nexample, you could then use the command nwipe --nousb --logfile=nwipe.log etc.\nIf you do use ALT-F2 to run a second copy of nwipe, please remember that if\nyou already have one copy of nwipe wiping, the second copy of nwipe will hang\non starting. Therefore nwipe in the default terminal should be left at the\ndrive selection screen to prevent the second occurence of nwipe from hanging.\nAlternatively, a second occurrence of nwipe could be started by specifying the\ndrive on the command line as long as that drive is not already being wiped by\nthe first instance of nwipe, i.e.nwipe /dev/sdc etc.\n\n## How to change the default nwipe options so the change persists between\nreboots\n\nTo change the default settings of nwipe you will need to place the nwipe\noptions required on the kernel command line in /boot/grub/grub.cfg and\n/EFI/BOOT/grub.cfg\n\nExample of default grub.cfg\n\n    \n    \n    set default=\"0\" set timeout=\"0\" menuentry \"shredos\" { linux /boot/shredos console=tty3 loglevel=3 }\n\nAdding nwipe_options=\"...\" to grub.cfg to make the default nwipe start up with\nzero method, no verification, no blanking, ignore USB devices and\nautomatically power off the computer at the end of the wipe.\n\n    \n    \n    set default=\"0\" set timeout=\"0\" menuentry \"shredos\" { linux /boot/shredos console=tty3 loglevel=3 nwipe_options=\"--method=zero --verify=off --noblank --nousb --autopoweroff\" }\n\nYou are not only limited to nwipe options, you can also specify devices along\nwith those options. As would be the case when using nwipe from the command\nline, the devices to be wiped come after the options, as shown in the example\nbelow.\n\n    \n    \n    set default=\"0\" set timeout=\"0\" menuentry \"shredos\" { linux /boot/shredos console=tty3 loglevel=3 nwipe_options=\"--method=zero --verify=off --noblank --nousb --autopoweroff /dev/sdd /dev/sde\" }\n\nFor reference and as of nwipe v0.35, listed below are all the options that you\ncan use with nwipe and can place on the kernel command line in grub.cfg as\ndescribed in the examples above.\n\n    \n    \n    Usage: nwipe [options] [device1] [device2] ... Options: -V, --version Prints the version number -v, --verbose Prints more messages to the log -h, --help Prints this help --autonuke If no devices have been specified on the command line, starts wiping all devices immediately. If devices have been specified, starts wiping only those specified devices immediately. --autopoweroff Power off system on completion of wipe delayed for for one minute. During this one minute delay you can abort the shutdown by typing sudo shutdown -c --sync=NUM Will perform a sync after NUM writes (default: 100000) 0 - fdatasync after the disk is completely written fdatasync errors not detected until completion. 0 is not recommended as disk errors may cause nwipe to appear to hang 1 - fdatasync after every write Warning: Lower values will reduce wipe speeds. 1000 - fdatasync after 1000 writes etc. --verify=TYPE Whether to perform verification of erasure (default: last) off - Do not verify last - Verify after the last pass all - Verify every pass -m, --method=METHOD The wiping method. See man page for more details. (default: dodshort) dod522022m / dod - 7 pass DOD 5220.22-M method dodshort / dod3pass - 3 pass DOD method gutmann - Peter Gutmann's Algorithm ops2 - RCMP TSSIT OPS-II random / prng / stream - PRNG Stream zero / quick - Overwrite with zeros one - Overwrite with ones (0xFF) verify_zero - Verifies disk is zero filled verify_one - Verifies disk is 0xFF filled -l, --logfile=FILE Filename to log to. Default is STDOUT -P, --PDFreportpath=PATH Path to write PDF reports to. Default is \".\" If set to \"noPDF\" no PDF reports are written. -p, --prng=METHOD PRNG option (mersenne|twister|isaac|isaac64) -q, --quiet Anonymize logs and the GUI by removing unique data, i.e. serial numbers, LU WWN Device ID, and SMBIOS/DMI data XXXXXX = S/N exists, ????? = S/N not obtainable -r, --rounds=NUM Number of times to wipe the device using the selected method (default: 1) --noblank Do NOT blank disk after wipe (default is to complete a final blank pass) --nowait Do NOT wait for a key before exiting (default is to wait) --nosignals Do NOT allow signals to interrupt a wipe (default is to allow) --nogui Do NOT show the GUI interface. Automatically invokes the nowait option. Must be used with the --autonuke option. Send SIGUSR1 to log current stats --nousb Do NOT show or wipe any USB devices whether in GUI mode, --nogui or --autonuke modes. -e, --exclude=DEVICES Up to thirty comma separated devices to be excluded --exclude=/dev/sdc --exclude=/dev/sdc,/dev/sdd --exclude=/dev/sdc,/dev/sdd,/dev/mapper/cryptswap1\n\n## How to set the keyboard map using the loadkeys command (see here for\npersistent change between reboots)\n\nYou can set the type of keyboard that you are using by typing, loadkeys uk,\nloadkeys us, loadkeys fr, loadkeys cf, loadkeys by, loadkeys cf, loadkeys cz\netc. See /usr/share/keymaps/i386/ for full list of keymaps. However you will\nneed to add an entry to loadkeys=uk etc to grub.cfg for a persistent change\nbetween reboots.\n\nExamples are: (azerty:) azerty, be-latin1, fr-latin1, fr-latin9, fr-pc, fr,\nwangbe, wangbe2\n\n(bepo:) fr-bepo-latin9, fr-bepo\n\n(carpalx:) carpalx-full, carpalx\n\n(colemak:) en-latin9\n\n(dvorak:) ANSI-dvorak, dvorak-ca-fr, dvorak-es, dvorak-fr, dvorak-l, dvorak-\nla, dvorak-programmer, dvorak-r, dvorak-ru, dvorak-sv-a1, dvorak-sv-a5,\ndvorak-uk, dvorak, no\n\n(fgGIod:) tr_f-latin5, trf\n\n(include:) applkey, backspace, ctrl, euro, euro1, euro2, keypad, unicode,\nwindowkeys\n\n(olpc:) es, pt\n\n(qwerty:) bashkir, bg-cp1251, bg-cp855, bg_bds-cp1251, bg_bds-utf8, bg_pho-\ncp1251, ... by, cf, cz, dk, es, et, fi, gr, il, it, jp106, kazakh, la-latin1,\nlt, lv, mk, nl, nl2, no, pc110, pl, ro, ru, sk-qwerty, sr-cy, sv-latin1, ua,\nuk, us (for the full list see /usr/share/keymaps/i386/qwerty)\n\n## How to make a persistent change to keyboard maps\n\nThe default grub.cfg looks like this\n\n    \n    \n    set default=\"0\" set timeout=\"0\" menuentry \"shredos\" { linux /boot/shredos console=tty3 loglevel=3 }\n\nAdd the following options to the kernel command line, i.e. loadkeys=uk,\nloadkeys=fr etc\n\n    \n    \n    set default=\"0\" set timeout=\"0\" menuentry \"shredos\" { linux /boot/shredos console=tty3 loglevel=3 loadkeys=uk }\n\n## Reading and saving nwipes log files - via USB (manually) or ftp (manually &\nautomatically)\n\nThe nwipe that is automatically launched in the first virtual terminal ALT-F1,\ncreates a log file that contains the details of the wipe/s and a summary table\nthat shows successfull erasure or failure. The file is time stamped within\nit's name. A new timestamped log file is created each time nwipe is started.\nThe files can be found in the / directory. A example being\nnwipe_log_20200418-084910.txt. As of version v2021.08.2_23_x86-64_0.34 ShredOS\nwill automatically copy the nwipe log files to the first FAT32 partition it\nfinds, which is normally the ShredOS USB flash drive. In addition you can\nmanually copy the log files or send them to a ftp server on your local area\nnetwork. Both methods are described below starting with manually writing to a\nUSB storage device. This is then followed by setting up grub.cfg to auto\ntransfer the nwipe log files to a ftp server.\n\n### Transferring nwipe log files to a USB storage device\n\n  1. Locate the device name of your USB stick from it's model & size.\n\nFor Linux: If the | character isn't displayed properly use loadkeys fr etc to select the correct keyboard if not US qwerty prior to running this pipe command.\n    \n    \n    fdisk -l | more\n\nFor MACS:\n\n    \n    \n    diskutil list\n\n  2. Create a directory that we will mount the USB flash drive on\n\n    \n    \n    mkdir /store\n\n  3. Mount the USB flash drive, replacing sdx with the device name of your USB flash drive found in step 1\n\n    \n    \n    mount /dev/sdx1 /store\n\n  4. Copy the log files to the USB flash drive\n\n    \n    \n    cp /nwipe_log* /store/\n\n  5. Unmount the USB flash drive\n\n    \n    \n    cd /;umount store\n\n### Transferring nwipe log files to a ftp server\n\nShredOS uses the lftp application to transfer files to a remote server. To\nenable the automatic transfer of nwipe log files, you will need to edit both\ngrub.cfg files (/boot/grub/grub.cfg and /EFI/BOOT/grub.cfg) on the ShredOS USB\nmemory stick. In much the same way you you specify loadkeys or nwipe options\nwhich are described above, you edit the linux kernal command line and add the\nfollowing lftp=\"open 192.168.1.60; user your-username your-password; cd data;\nmput nwipe_*.txt\", changing the IP, username and password as required. As ftp\ndoes not encrypt data you should really only use it to transfer data on your\nlocal area network and not over the internet. sftp may be implemented at a\nfuture date if users request that feature. You can also manually use lftp on\nthe command line (ALT-F2 or ALT-F3) if you prefer. I use this feature with a\nchrooted vsftpd ftp server on a Linux PC. The automatic transfer of nwipe log\nfiles will be initiated on completion of all wipes and after pressing any key\nin nwipe to exit. The lftp status will be shown after the nwipe summary table.\n\nIMPORTANT\n\n  * I would recommend you setup a new user account on the system that hosts your ftp server and only use that new user's account, username and password with ShredOS. You don't want to use your own personal user account details as you will be placing those details on the ShredOS USB storage device in a plain text format.\n  * For security reasons, you should setup your ftp server as chrooted.\n\nExample grub.cfg with the lftp option appended:\n\n    \n    \n    set default=\"0\" set timeout=\"0\" menuentry \"shredos\" { linux /boot/shredos console=tty3 loglevel=3 lftp=\"open 192.168.1.60; user your-username your-password; cd data; mput nwipe_*.txt; mput *.pdf\" }\n\nvsftpd configuration for a chrooted server\n\nFor those using vsftpd as your ftp server, you will need to change\n/etc/vsftpd.conf as follows. Some of these entries may already be present but\ncommented out, make a backup of /etc/vsftpd.conf prior to editing and the\nuncomment or alter as below:\n\n    \n    \n    anon_mkdir_write_enable=YES listen=YES listen_ipv6=YES local_root=/home/yournewftpuser/ftpdata/ write_enable=YES anon_mkdir_write_enable=YES chown_uploads=YES chown_username=yournewftpuser nopriv_user=ftpsecure ftpd_banner=Welcome to the ShredOS log server. chroot_local_user=YES chroot_list_enable=NO secure_chroot_dir=/home/yournewftpuser/ftpdata\n\nDisclaimer: The above settings should get you going but may or may not be\nideal for your local situation. Refer to the vsftp website and forums if\nthings aren't working as they should. The lftp application that ShredOS uses,\nshould also work with any Microsoft Windows based ftp server, as well as Linux\nand MAC based systems.\n\n## How to wipe drives on headless systems or systems with faulty display\nhardware. (For use on secure LANs only)\n\nShredOS includes a user enabled telnet server. The downloadable .img images\nare supplied with telnet disabled as default.\n\nTo enable the telnet server, edit /boot/grub/grub.cfg or/and\n/EFI/BOOT/grub.cfg and on the USB flash drive, add telnetd=enable to the\nkernel command line.\n\nExample:\n\n    \n    \n    set default=\"0\" set timeout=\"0\" menuentry \"shredos\" { linux /boot/shredos console=tty3 loglevel=3 telnetd=enable }\n\nAssuming the headless systems are configured to boot via USB and if UEFI that\nsecure boot is disabled, just plug a USB stick containing ShredOS\nv2021.08.2_20_0.32.014 or higher into the system. Power cycle the system and\nthen after giving ShredOS sufficient time to boot (4 to 60 seconds depending\non the hardware) you can then, from another PC/laptop on the same network, use\nnmap as shown below to list all IP addresses that have open telnet ports on\nyour local LAN:\n\n    \n    \n    nmap -p23 192.168.1.0/24 --open $ nmap -p23 192.168.1.0/24 --open Starting Nmap 7.80 ( https://nmap.org ) at 2021-11-29 20:54 GMT Nmap scan report for 192.168.1.30 Host is up (0.071s latency). PORT STATE SERVICE 23/tcp open telnet Nmap scan report for 192.168.1.100 Host is up (0.050s latency). PORT STATE SERVICE 23/tcp open telnet Nmap done: 256 IP addresses (19 hosts up) scanned in 14.53 seconds\n\nTelnet into the appropriate IP address telnet 192.168.1.100. ShredOS will\nrespond with:\n\n    \n    \n    telnet 192.168.1.100 Trying 192.168.1.100... Connected to 192.168.1.100. Escape character is '^]'. shredos login: root { no password } sh-5.1# nwipe\n\nType nwipe as shown above and the nwipe GUI will be displayed and you can\nproceed with wiping the discs. On some terminals, i.e retro, nwipe doesn't\ndisplay properly. If you find this then use a different terminal to launch\nnwipe. Terminals that do work ok are KDE's Konsole, terminator, guake, tmux,\nxfce terminal and xterm. Terminals that don't seem to work properly via a\ntelnet session with nwipe are cool retro term and qterminal. Putty works but\ndoesn't have the correct box characters but is usable. Putty may work\nperfectly if you can set the correct character encoding. These are my\nobservations using KDE Neon, they may differ on your systems. If you find a\nworkaround for those terminals that don't display nwipe perfectly over telnet,\nthen please let me know.\n\n> Warning Due to the insecure nature of telnet as opposed to ssh, it goes\n> without saying that this method of accessing ShredOS & nwipe should only be\n> carried out on a trusted local area network and never over the internet\n> unless via a VPN or SSH tunnel. ssh access may be provided at a future date\n> if it's requested.\n\n## Nwipes font size is too small How to double the size of the text\n\nIf you are using a monitor with a native high resolution you may find that\nnwipe's font size is too small for your liking, if that's the case, you just\nneed to type the following command in the second virtual terminal /bin/setfont\n-d -C /dev/tty1. To double the font size in other virtual terminals use\n/bin/setfont -d -C /dev/tty2 and /bin/setfont -d -C /dev/console.\n\n#### Detail\n\nType ALT F2 (Fn ALT F2 on a MAC) to bring up the 2nd virtual console. Type the\nfollowing tty command which will return the current console name. So from this\nresult /dev/tty2 we can deduce that the default nwipe in ALT F1 is /dev/tty1.\nFor reference ALT F3 is /dev/console.\n\n    \n    \n    tty /dev/tty2\n\nTo set the font for the default nwipe in the first virtual console ALT F1\n(/dev/tty1), type the following command in the 2nd virtual console (ALT F2)\n\n    \n    \n    /bin/setfont -d -C /dev/tty1\n\n> Warning Always specify the full path to setfont, setfont -d -C /dev/tty1\n> without the /bin/ prefix, will not work! There are actually two different\n> versions of setfont on Linux and if you ommit the prefix path you will be\n> running the wrong setfont which won't work.\n\nDefault font size on a high resolution monitor. . After running the setfont\ncommand.\n\n## ShredOS includes the following related programs\n\n#### smartmontools\n\nNwipes ability to detect serial numbers on USB devices now works on USB\nbridges who's chipset supports that functionality. Smartmontools provides\nnwipe with that capability. Smartmontools can be used in the second or third\nvirtual terminal. ALT-F2 and ALT-F3.\n\n#### hexedit\n\nUse hexedit to examine and modify the contents of a hard disk. Hexedit can be\nused in the second or third virtual terminal. ALT-F2 and ALT-F3.\n\n#### hdparm\n\nhdparm has many uses and is a powerfull tool. Although Nwipe will be adding\nATA secure erase capability, i.e using the hard disk own firmware to initiate\nan erase, nwipe currently wipes drives using the traditional method of writing\nto every block. If you want to initiate a ATA secure erase using the drives\nfirmware then hdparm will be of use.\n\n## Compiling ShredOS and burning to USB stick, the harder way !\n\nThe ShredOS system is based on the buildroot tool whos main application is to\ncreate operating systems for embedded systems. The image (.img) file is\napproximately 260 MiB and can be written to a USB memory stick with a tool\nsuch as dd or Etcher.\n\n### You can build shredos using the following commands. This example build was\ncompiled on KDE Neon (Ubuntu 20.04).\n\n#### Install the following prerequisite software first. Without this software,\nthe make command will fail\n\n    \n    \n    $ sudo apt install git $ sudo apt install build-essential pkg-config automake libncurses5-dev autotools-dev libparted-dev dmidecode coreutils smartmontools $ sudo apt-get install libssl-dev $ sudo apt-get install libelf-dev $ sudo apt-get install mtools\n\n#### Download the ShredOS source using the git clone command, build ShredOS\nand write to a USB memory device.\n\n    \n    \n    $ git clone https://github.com/PartialVolume/shredos.x86_64.git (or shredos.i686.git for 32bit) $ cd shredos $ mkdir package/shredos $ touch package/shredos/Config.in $ make clean $ make shredos_defconfig $ make $ ls output/images/shredos*.img $ cd output/images $ dd if=shredos-20200412.img of=/dev/sdx (20200412 will be the day you compiled, sdx is the USB flash drive)\n\n### Issues that you may get when building ShredOS\n\n  * Error: \"Internal Size Too Big\" If you are compiling the vanilla version of ShredOS and have made no alterations or additions but it fails to build the .img with the error \"Internal error: size too big\" then you may have a version of mtools that has a version of mcopy which has a bug whenever the -b option is used. This bug is known to exist in mcopy version 4.0.32 and maybe others but is fixed in v4.0.42. The solution is to upgrade your copy of mtools to a later version. However, if you have altered ShredOS by adding more packages you may need to update the size of the fat32 partition. You can do this by increasing the 'size' in ../board/shredos/genimage.cfg. Depending on how much extra software you have added increase the size by 10MB or more. Currently as of March 2023 the current size is size = 130000000, this is in bytes, so adding 10MB will mean you need to edit this value so that it reads size = 140000000. After the edit, just run make which will result in a quicker build. You don't need to run make clean first as that would result in a full rebuild which is not neccessary when all you are doing is increasing the final image size. If your repository does not supply a later version of mtools, then you can obtain mtools packages for various distros from here\n\n> INFO: vfat(boot.vfat): cmd: \"MTOOLS_SKIP_CHECK=1 mcopy -bsp -i\n> '/home/shredos/Downloads/shredos/mcopybug/shredos.x86_64/output/images/boot.vfat'\n> '/home/shredos/Downloads/shredos/mcopybug/shredos.x86_64/output/images/grub.cfg'\n> '::boot/grub/grub.cfg'\" (stderr): Internal error, size too big Streamcache\n> allocation problem:: 5 INFO: vfat(boot.vfat): cmd: \"rm -f\n> \"/home/shredos/Downloads/shredos/mcopybug/shredos.x86_64/output/images/boot.vfat\"\"\n> (stderr): ERROR: vfat(boot.vfat): failed to generate boot.vfat make[1]:\n> [Makefile:823: target-post-image] Error 1 make: [Makefile:84: _all] Error 2\n\n### Commands to configure buildroot, you will only need to use these if you\nare making changes to ShredOS\n\n#### Change buildroot configuration, select the architecture, install software\npackages then save the buildroot config changes to shredos_defconfig, the\nlocation if which is defined in the buildroot config within make menuconfig\nALWAYS RUN make savedefconfig AFTER CHANGES are made in menuconfig.\n\n    \n    \n    $ make menuconfig $ make savedefconfig # save the changes\n\n#### Edit the linux kernel configuration, install kernel drivers .. then save\nthe configuration.\n\n    \n    \n    $ make linux-menuconfig $ make linux-update-defconfig # save the changes\n\n#### Edit the busybox selection of software and save the configuration.\n\n    \n    \n    make busybox-menuconfig make busybox-update-config # save the changes\n\n### Important ShredOS files and folders when building ShredOS from source\n\n#### ../board/shredos/doimg.sh\n\ndoimg.sh is a bash script, the main purpose of which is to generate the .img\nfile located in output/images/. However it is also used to copy the pre-\ncompiled .efi file and other files such as the shredos.ico, autorun.inf for\nWindows, README.txt. The contents of board/shredos/version.txt is also used to\nrename the .img file with version info and the current date and time.\n\n#### ../board/shredos/fsoverlay/etc/shredos/version.txt\n\nThis file contains the version information as seen in the title on nwipe's\ntitle bar, i.e. '2021.08.2_22_x86-64_0.32.023'. This version ingformation is\nalso used when naming the .img file in ../output/images/\n../board/shredos/fsoverlay/etc/shredos/version.txt is manually updated for\neach new release of ShredOS.\n\n#### ../board/shredos/fsoverlay/\n\nThis fsoverlay directory contains files and folders that are directly copied\ninto the root filesystem of ShredOS. A example of this is the\n../board/shredos/fsoverlay/etc/inittab file where the tty1 and tty2 virtual\nterminals are configured. This is where you will find the script\n/usr/bin/nwipe_launcher that automatically starts in tty1 after ShredOS has\nbooted. If you want to place or overwrite a specific file in the root\nfilesystem of ShredOS, the ../board/shredos/fsoverlay/ directory is one way of\ninserting your own files.\n\n#### ../board/shredos/fsoverlay/etc/init.d/S40network\n\nS40network is responsible for starting the network & obtaining a IP address\nvia DHCP by starting a ShredOS script called /usr/bin/shredos_net.sh The\nshredos_net.sh script can also be found in the fsoverlay directory\n../board/shredos/fsoverlay/usr/bin/shredos_net.sh which then ends up in the\ndirectory /usr/bin/ of the ShredOS filesystem.\n\n#### ../board/shredos/fsoverlay/usr/bin/nwipe_launcher\n\nnwipe_launcher starts the nwipe program in tty1, see\n../board/shredos/fsoverlay/etc/inittab which is where nwipe_launcher is called\nfrom. The nwipe_launcher script, apart from starting nwipe in tty1 also is\nresponsible for calling the lftp program to automatically transfer log files\nto a remote ftp server on your local area network, assuming lftp has been\nenabled on the kernel command line. It also contains the 4,3,2,1 countdown and\nnwipe restart code.\n\n#### ../package/nwipe/\n\nAll programs in ShredOS appear under their individual sub-directory under the\npackage directory, therefore, you will find all the information relating to\nthe build of nwipe under ../package/nwipe. The four files contained here are\ninvolved in downloading the nwipe source from\nhttps://github.com/PartialVolume/nwipe, checking the integrity of the source\nby comparison of the hash, patching the nwipe version.c and compiling the\ncode. Each file in ../package/nwipe/ is descibed below.\n\n#### ../package/nwipe/nwipe.mk\n\nThis is the buildroot make file for nwipe. This is where the nwipe source\ndownload is initiated & hash checked. It also patches the nwipe code, in the\ncase of ShredOS the only patching to the vanilla nwipe code is to change the\nnwipe title bar from nwipe [version] to ShredOS [shredos version] i.e ShredOS\n2021.08.2_22_x86-64_0.32.023. This file also includes nwipe dependencies and\nnwipe version number. Therefore is file should have the nwipe version number\nupdated if a new version of nwipe is incorporated into ShredOS.\n\n#### ../package/nwipe/nwipe.hash\n\nThis file contains the sha1 hash for the nwipe tar file, i.e.\nnwipe-v0.32.023.tar.gz. The hash and filename contained in this file is\nmanually updated with each new release of nwipe.\n\n#### ../package/nwipe/Config.in\n\nThis is a buildroot file that exists in each package. The only time it would\nbe manually edited is if nwipe's dependendencies changed.\n\n#### ../package/nwipe/002-nwipe-banner-patch.sh\n\nThis script contains the changes that are made to nwipe's version.c\n\n#### END OF README.md\n\n## About\n\nShredos Disk Eraser 64 bit for all Intel 64 bit processors as well as\nprocessors from AMD and other vendors which make compatible 64 bit chips.\nShredOS - Secure disk erasure/wipe\n\n### Topics\n\nusb disk prng hdparm buildroot dod delete eraser wipe prng-methods erase dban\nnwipe hexedit erase-disk secure-disk-erase dwipe\n\n### Resources\n\nReadme\n\n### License\n\nView license\n\nActivity\n\n### Stars\n\n1.2k stars\n\n### Watchers\n\n20 watching\n\n### Forks\n\n51 forks\n\nReport repository\n\n## Releases 27\n\nv2023.08.2_25.0_x86-64_0.35 Latest\n\nNov 10, 2023\n\n\\+ 26 releases\n\n## Sponsor this project\n\nPartialVolume\n\nSponsor\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Contributors 7\n\n## Languages\n\n  * Makefile 57.5%\n  * HTML 12.0%\n  * Python 12.0%\n  * C 7.2%\n  * Shell 6.1%\n  * BitBake 2.5%\n  * Other 2.7%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
