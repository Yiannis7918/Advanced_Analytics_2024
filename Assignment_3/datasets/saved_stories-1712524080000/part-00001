{"aid": "39961243", "title": "Using Multiple GitHub Accounts", "url": "https://www.cfclrk.com/articles/github_identities.html", "domain": "cfclrk.com", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-07 15:06:36", "comments": 0, "source_title": "Using Multiple GitHub Accounts", "source_text": "Using Multiple GitHub Accounts\n\n# Using Multiple GitHub Accounts\n\n## The Problem\n\nYou have multiple GitHub accounts, and you want git to automatically use the\n\"right\" GitHub account.\n\nA good way to do that is to put work-related stuff under a single directory,\nsay, ~/Work. Then, configure git to use your work account for any project in\nyour ~/Work directory.\n\nIn this article I set things up so that:\n\n  * Projects in ~/Work/ use your work GitHub account\n  * Projects elsewhere use your home GitHub account\n\nMy git configuration on GitHub is generated from this article.\n\n## The SSH Config\n\nAssuming you use the git protocol to clone repositories (not https), you must\ncreate at least two SSH keys for GitHub \u2013 one for each GitHub account (GitHub\nwill not allow you to use the same SSH key for both accounts, but will allow\nyou to use the PGP key for both accounts).\n\nOnce you've created your SSH keys, your ~/.ssh directory will look something\nlike:\n\n    \n    \n    $ tree ~/.ssh/ /Users/cfclrk/.ssh/ \u251c\u2500\u2500 config \u251c\u2500\u2500 github-home \u251c\u2500\u2500 github-home.pub \u251c\u2500\u2500 github-work \u2514\u2500\u2500 github-work.pub\n\nEnsure these SSH keys work:\n\n    \n    \n    ssh -i ~/.ssh/github-home -T git@github.com 2>&1\n    \n    \n    ssh -i ~/.ssh/github-work -T git@github.com 2>&1\n\nWe don't need to modify the ~/.ssh/config file. Instead, we'll explicitly tell\ngit which SSH keys to use in our git config files.\n\n## The Git Config\n\nHere we tell git to use different git configurations for different\ndirectories. Git supports this with the includeIf directive (read about it\nhere). Do this by creating the following two files:\n\n~/.config/git/config\n\n    \n    \n    [user] name = Chris Clark email = cfclrk@gmail.com signingkey = C6ECD046467701AB [core] sshCommand = \"ssh -i ~/.ssh/github-home\" [commit] gpgsign = true [init] defaultBranch = main [github] user = cfclrk [includeIf \"gitdir:~/Work/\"] path = work.gitconfig\n\n~/.config/git/work.gitconfig\n\n    \n    \n    [user] email = cclark@splashfinancial.com [core] sshCommand = \"ssh -i ~/.ssh/github-work\" [github] user = cclark-splash\n\nIgnore the [github] sections; those are for Emacs forge. And of course, update\nthe values for your name, email, and \u2013 if you're using Signed Commits \u2013 your\nPGP signingkey id.\n\nThat's it for the git config! Move on to Signed Commits. The next subsection\nexplains the above, if you are interested.\n\n### More about Git Config Loading\n\nGit loads all applicable config files. If one option is set multiple times\n(potentially form differnt files), the last value wins.\n\nFor example: assume you have the git config files above, which has:\n\n    \n    \n    [includeIf \"gitdir:~/Work/\"] path = work.gitconfig\n\nNow, when you run a git command in a project located at ~/Work/projectA/, git\ndoes something like:\n\n  * Load the default ~/.config/git/config file\n\n    * Set core.sshCommand to ssh -i ~/.ssh/github-home\n  * Does [includeIf \"gitdir:~/Work/\"] apply?\n\n    * Yes! Load the work.gitconfig file\n    * Set core.sshCommand to ssh -i ~/.ssh/github-work\n\nIn this case, both config files were loaded. The value of core.sshCommand is\nssh -i ~/.ssh/github-work, because that value was loaded last.\n\nThe determining factor is the order in which the configuration is defined, and\nthe last value wins.\n\n## Signed Commits\n\n### Rationale\n\nWhy sign commits?\n\nThe value of user.email is the only piece of information GitHub uses when\ndetermining what profile picture to display next to a commit. You can set that\nemail address to anything! E.g. set it to torvalds@linux-foundation.org, and\nGitHub will happily put Linus Torvalds' picture next to your git commits. And\nto be sure, that happens.\n\nIf you don't want other people impersonating you, you can partially mitigate\nthis problem of attribution by using signed commits.\n\nGitHub allows you to upload a PGP key to your GitHub account, and GitHub\ndisplays a \"Verified\" badge on commits that proprely verify (i.e. git verify-\ncommit <commit> works). For a commit to verify,\n\n  1. The email address in the commit must match your GitHub account email address\n  2. The commit must be signed by a PGP key that has been uploaded to your GitHub account\n\n### Prerequisites\n\nFirst install the necessary tools:\n\n    \n    \n    brew install gnupg brew install pinentry-mac\n\npinentry-mac saves passphrases in the MacOS keychain.\n\n### Create PGP key\n\nAlthough GitHub has some instructions for creating a PGP key, I find it easier\nto use keybase.\n\nTo use keybase, first install the native app (this installs the keybase CLI\nprogram).\n\nYou can import preexisting PGP keys from keybase, but it's a better idea to\ncreate a new PGP key for every device. To view your existing PGP keys in\nkeybase:\n\n    \n    \n    keybase pgp list\n\nAnd to list your local PGP keys (this may be empty):\n\n    \n    \n    gpg --list-secret-keys --keyid-format=long\n\nNow, create one new PGP key. We'll add both your home and work email addresses\nto this key, then upload the public key to both GitHub accounts (GitHub will\nallow the same PGP key to be used for multiple accounts). Alternatively, you\ncould create two different PGP keys: one for each GitHub account.\n\n    \n    \n    keybase pgp gen --multi\n\n  * It will prompt you for email addresses one at a time. Add both your home and work email addresses.\n  * Add a passphrase.\n\n### Update trust level\n\nUpdate this key's trust level to \"ultimate\"; this is not strictly necessary,\nbut will make some gpg CLI output cleaner.\n\n    \n    \n    gpg --edit-key $keyid\n\nAt the prompt, type trust, after which you'll see some output like this:\n\n    \n    \n    Please decide how far you trust this user to correctly verify other users' keys (by looking at passports, checking fingerprints from different sources, etc.) 1 = I don't know or won't say 2 = I do NOT trust 3 = I trust marginally 4 = I trust fully 5 = I trust ultimately m = back to the main menu\n\nChoose 5 for ultimate trust. Then, at the prompt, type save.\n\n### Add key ID to git config\n\nGet the GPG key ID of your PGP key. To get the key ID:\n\n    \n    \n    gpg --list-secret-keys --keyid-format=long\n\nIn the above, the key ID is 80027A20FC0B6207 (is there some command that\nprints out the key id?). Update your git config like so:\n\n    \n    \n    [user] signingkey = 80027A20FC0B6207 [commit] gpgsign = true\n\n### Update gpg-agent.conf\n\nAdd the following to ~/.gnupg/gpg-agent.conf. This allows for automatic\nsigning (on MacOS anyway).\n\n    \n    \n    # Connects gpg-agent to the MacOS keychain. This enables # automatic key signing. pinentry-program /opt/homebrew/bin/pinentry-mac\n\n### Make a git commit\n\nIf you used a passphrase on your PGP key, your first git commit will probably\nfail. For your first git commit:\n\n    \n    \n    export GPG_TTY=$(tty)\n\nNow, when you make a git commit, it should prompt you for the PGP key's\npassphrase. After you do this once, you should never have to do it again.\n\n### Add public key to GitHub\n\nTODO: keybase pgp export $keyid and gpg --armor --export $keyid create\ndifferent things. Do they both work? Which is more appropriate to put in\nGitHub?\n\n    \n    \n    gpg --armor --export $keyid | pbcopy\n\nAdd this key to GitHub.\n\n## Appendix\n\n### Other Resources\n\n  * Managing several SSH identities explained\n\n### Keybase\n\nIf you want to import an existing PGP key from keybase instead of creating a\nnew one:\n\n    \n    \n    # Import the public key keybase pgp export -q $keyid \\ | gpg --import # Import the private key keybase pgp export -q $keyid \\ --secret \\ | gpg --allow-secret-key \\ --import\n\n", "frontpage": false}
