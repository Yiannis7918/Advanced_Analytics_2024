{"aid": "39959396", "title": "Zero dependency Promise-based TypeScript API for sqlite3", "url": "https://www.npmjs.com/package/sqlite", "domain": "npmjs.com", "votes": 1, "user": "keepamovin", "posted_at": "2024-04-07 08:58:54", "comments": 0, "source_title": "sqlite", "source_text": "sqlite - npm\n\nskip to:contentpackage searchsign in\n\n\u2764\n\nnpm\n\nSign UpSign In\n\n#\n\nsqlite\n\n5.1.1 \u2022 Public \u2022 Published 5 months ago\n\n  * Readme\n  * Code Beta\n  * 0 Dependencies\n  * 416 Dependents\n  * 66 Versions\n\n# SQLite Client for Node.js Apps\n\n> A wrapper library written in Typescript with ZERO dependencies that adds ES6\n> promises and SQL-based migrations API to sqlite3 (docs).\n\nnote v4 of sqlite has breaking changes compared to v3! Please see CHANGELOG.md\nfor more details.\n\n  * Installation\n\n    * Install sqlite3\n    * Install sqlite\n  * Usage\n\n    * Opening the database\n\n      * Without caching\n      * With caching\n      * Enable verbose / debug mode\n      * Tracing SQL errors\n      * With a custom driver\n      * Opening multiple databases\n      * open config params\n    * Examples\n\n      * Creating a table and inserting data\n      * Getting a single row\n      * Getting many rows\n      * Inserting rows\n      * Updating rows\n      * Prepared statement\n      * each()\n      * Get the driver instance\n      * Closing the database\n    * ES6 tagged template strings\n    * Migrations\n  * Typescript tricks\n\n    * Import interfaces from sqlite\n    * Specify typings for a specific database driver\n    * Use generics to get better typings on your rows\n\n      * Get example\n      * All example\n  * API Documentation\n  * Management Tools\n  * Alternative SQLite libraries\n  * References\n  * License\n\n## Installation\n\n### Install sqlite3\n\nMost people who use this library will use sqlite3 as the database driver.\n\nAny library that conforms to the sqlite3 (API) should also work.\n\n$ npm install sqlite3 --save\n\n### Install sqlite\n\n    \n    \n    # v4 of sqlite is targeted for nodejs 10 and on. $ npm install sqlite --save # If you need a legacy version for an older version of nodejs # install v3 instead, and look at the v3 branch readme for usage details $ npm install sqlite@3 --save\n\n## Usage\n\nThis module has the same API as the original sqlite3 library (docs), except\nthat all its API methods return ES6 Promises and do not accept callback\narguments (with the exception of each()).\n\n### Opening the database\n\n#### Without caching\n\n    \n    \n    import sqlite3 from 'sqlite3' import { open } from 'sqlite' // this is a top-level await (async () => { // open the database const db = await open({ filename: '/tmp/database.db', driver: sqlite3.Database }) })()\n\nor\n\n    \n    \n    import sqlite3 from 'sqlite3' import { open } from 'sqlite' open({ filename: '/tmp/database.db', driver: sqlite3.Database }).then((db) => { // do your thing })\n\nor\n\n    \n    \n    import sqlite3 from 'sqlite3' import { open } from 'sqlite' // you would have to import / invoke this in another file export async function openDb () { return open({ filename: '/tmp/database.db', driver: sqlite3.Database }) }\n\n#### With caching\n\nIf you want to enable the database object cache\n\n    \n    \n    import sqlite3 from 'sqlite3' import { open } from 'sqlite' (async () => { const db = await open({ filename: '/tmp/database.db', driver: sqlite3.cached.Database }) })()\n\n#### Enable verbose / debug mode\n\n    \n    \n    import sqlite3 from 'sqlite3' sqlite3.verbose()\n\n#### Tracing SQL errors\n\nFor more info, see this doc.\n\n    \n    \n    db.on('trace', (data) => { })\n\n#### With a custom driver\n\nYou can use an alternative library to sqlite3 as long as it conforms to the\nsqlite3 API.\n\nFor example, using sqlite3-offline-next:\n\n    \n    \n    import sqlite3Offline from 'sqlite3-offline-next' import { open } from 'sqlite' (async () => { const db = await open({ filename: '/tmp/database.db', driver: sqlite3Offline.Database }) })()\n\n#### Opening multiple databases\n\n    \n    \n    import sqlite3 from 'sqlite3' import { open } from 'sqlite' (async () => { const [db1, db2] = await Promise.all([ open({ filename: '/tmp/database.db', driver: sqlite3.Database }), open({ filename: '/tmp/database2.db', driver: sqlite3.Database }), ]) await db1.migrate({ migrationsPath: '...' }) await db2.migrate({ migrationsPath: '...' }) })()\n\n#### open config params\n\n    \n    \n    // db is an instance of `sqlite#Database` // which is a wrapper around `sqlite3#Database` const db = await open({ /** * Valid values are filenames, \":memory:\" for an anonymous in-memory * database and an empty string for an anonymous disk-based database. * Anonymous databases are not persisted and when closing the database * handle, their contents are lost. */ filename: string /** * One or more of sqlite3.OPEN_READONLY, sqlite3.OPEN_READWRITE and * sqlite3.OPEN_CREATE. The default value is OPEN_READWRITE | OPEN_CREATE. */ mode?: number /** * The database driver. Most will install `sqlite3` and use the `Database` class from it. * As long as the library you are using conforms to the `sqlite3` API, you can use it as * the driver. * * @example * * ``` * import sqlite from 'sqlite3' * * const driver = sqlite.Database * ``` */ driver: any })\n\n### Examples\n\n  * See the src/**/__tests__ directory for more example usages\n  * See the docs/ directory for full documentation.\n  * Also visit the sqlite3 library API docs\n\n#### Creating a table and inserting data\n\n    \n    \n    await db.exec('CREATE TABLE tbl (col TEXT)') await db.exec('INSERT INTO tbl VALUES (\"test\")')\n\n#### Getting a single row\n\n    \n    \n    const result = await db.get('SELECT col FROM tbl WHERE col = ?', 'test') // { col: 'test' }\n    \n    \n    const result = await db.get('SELECT col FROM tbl WHERE col = ?', ['test']) // { col: 'test' }\n    \n    \n    const result = await db.get('SELECT col FROM tbl WHERE col = :test', { ':test': 'test' }) // { col: 'test' }\n\n#### Getting many rows\n\n    \n    \n    const result = await db.all('SELECT col FROM tbl') // [{ col: 'test' }]\n\n#### Inserting rows\n\n    \n    \n    const result = await db.run( 'INSERT INTO tbl (col) VALUES (?)', 'foo' ) /* { // row ID of the inserted row lastID: 1, // instance of `sqlite#Statement` // which is a wrapper around `sqlite3#Statement` stmt: <Statement> } */\n    \n    \n    const result = await db.run('INSERT INTO tbl(col) VALUES (:col)', { ':col': 'something' })\n\n#### Updating rows\n\n    \n    \n    const result = await db.run( 'UPDATE tbl SET col = ? WHERE col = ?', 'foo', 'test' ) /* { // number of rows changed changes: 1, // instance of `sqlite#Statement` // which is a wrapper around `sqlite3#Statement` stmt: <Statement> } */\n\n#### Prepared statement\n\n    \n    \n    // stmt is an instance of `sqlite#Statement` // which is a wrapper around `sqlite3#Statement` const stmt = await db.prepare('SELECT col FROM tbl WHERE 1 = ? AND 5 = ?5') await stmt.bind({ 1: 1, 5: 5 }) let result = await stmt.get() // { col: 'some text' }\n    \n    \n    const stmt = await db.prepare( 'SELECT col FROM tbl WHERE 13 = @thirteen ORDER BY col DESC' ) const result = await stmt.all({ '@thirteen': 13 })\n\n#### each()\n\neach() is a bit different compared to the other operations due to its\nunderlying implementation.\n\nThe function signature looks like this:\n\nasync each (sql, [...params], callback)\n\n  * callback(err, row) is triggered when the database has a row to return\n  * The promise resolves when all rows have returned with the number of rows returned.\n\n    \n    \n    try { // You need to wrap this in a try / catch for SQL parse / connection errors const rowsCount = await db.each( 'SELECT col FROM tbl WHERE ROWID = ?', [2], (err, row) => { if (err) { // This would be if there is an error specific to the row result throw err } // row = { col: 'other thing' } } ) } catch (e) { throw e } // rowsCount = 1\n\n#### Get the driver instance\n\nUseful if you need to call methods that are not supported yet.\n\n    \n    \n    const rawDb = db.getDatabaseInstance() const rawStatement = stmt.getStatementInstance()\n\n#### Closing the database\n\n    \n    \n    await db.close()\n\n### ES6 tagged template strings\n\nThis module is compatible with sql-template-strings.\n\n    \n    \n    import SQL from 'sql-template-strings' const book = 'harry potter'; const author = 'J. K. Rowling'; const data = await db.all(SQL`SELECT author FROM books WHERE name = ${book} AND author = ${author}`);\n\n### Migrations\n\nThis module comes with a lightweight migrations API that works with SQL-based\nmigration files\n\nWith default configuration, you can create a migrations/ directory in your\nproject with SQL files, and call the migrate() method to run the SQL in the\ndirectory against the database.\n\nSee this project's migrations/ folder for examples.\n\n    \n    \n    await db.migrate({ /** * If true, will force the migration API to rollback and re-apply the latest migration over * again each time when Node.js app launches. */ force?: boolean /** * Migrations table name. Default is 'migrations' */ table?: string /** * Path to the migrations folder. Default is `path.join(process.cwd(), 'migrations')` */ migrationsPath?: string })\n\n## Typescript tricks\n\n### Import interfaces from sqlite\n\nimport { ISqlite, IMigrate } from 'sqlite'\n\nSee the definitions for more details.\n\n### Specify typings for a specific database driver\n\n    \n    \n    // Assuming you have @types/sqlite3 installed import sqlite3 from 'sqlite3' // sqlite3.Database, sqlite3.Statement is the default if no explicit generic is specified await open<sqlite3.Database, sqlite3.Statement>({ filename: ':memory' })\n\n### Use generics to get better typings on your rows\n\nMost methods allow for the use of generics to specify the data type of your\nreturned data. This allows your IDE to perform better autocomplete and the\ntypescript compiler to perform better static type analysis.\n\n#### Get example\n\n    \n    \n    interface Row { col: string } // result will be of type Row, allowing Typescript supported IDEs to autocomplete on the properties! const result = await db.get<Row>('SELECT col FROM tbl WHERE col = ?', 'test')\n\n#### All example\n\n    \n    \n    interface Row { col: string } // Result is an array of rows, you can now have array-autocompletion data const result = await db.all<Row[]>('SELECT col FROM tbl') result.each((row) => { // row should have type information now! })\n\n## API Documentation\n\nSee the docs directory for full documentation.\n\n## Management Tools\n\n  * Beekeeper Studio: Open Source SQL Editor and Database Manager\n  * DB Browser for SQLite: Desktop-based browser.\n  * datasette: Datasette is a tool for exploring and publishing data. Starts up a server that provides a web interface to your SQLite data.\n  * SQLite Studio: A free, open source, multi-platform SQLite database manager written in C++, with use of Qt framework.\n  * HeidiSQL: Full-featured database editor.\n  * DBeaver: Full-featured multi-platform database tool and designer.\n\n## Alternative SQLite libraries\n\nThis library and the library it primarily supports, sqlite3, may not be the\nbest library that fits your use-case. You might want to try these other SQLite\nlibraries:\n\n  * better-sqlite3: Totes itself as the fastest and simplest library for SQLite3 in Node.js.\n  * Bun sqlite3: bun:sqlite is a high-performance builtin SQLite3 module for bun.js.\n  * sql.js: SQLite compiled to Webassembly.\n  * sqlite3-offline-next: Offers pre-compiled sqlite3 binaries if your machine cannot compile it. Should be mostly compatible with this library.\n\nIf you know of any others, feel free to open a PR to add them to the list.\n\n## References\n\n  * Using SQLite with Node.js for Rapid Prototyping on Medium.com\n  * SQLite Documentation, e.g. SQL Syntax, Data Types etc. on SQLite.org\n  * ES6 tagged sql-template-strings.\n\n## License\n\nThe MIT License \u00a9 2020-present Kriasoft / Theo Gravity. All rights reserved.\n\nMade with \u2665 by Konstantin Tarkus (@koistya), Theo Gravity and contributors\n\n## Readme\n\n### Keywords\n\n  * sqlite\n  * db\n  * database\n  * sql\n  * migrate\n  * migration\n  * migrations\n  * migrator\n  * seed\n  * seeds\n  * seeder\n  * node\n  * node5\n  * babel\n  * es6\n  * async\n  * promise\n  * promises\n  * api\n\n## Package Sidebar\n\n### Install\n\nnpm i sqlite\n\n### Repository\n\ngithub.com/kriasoft/node-sqlite\n\n### Homepage\n\ngithub.com/kriasoft/node-sqlite#readme\n\n### Weekly Downloads\n\n100,971\n\n### Version\n\n5.1.1\n\n### License\n\nMIT\n\n### Unpacked Size\n\n98.5 kB\n\n### Total Files\n\n27\n\n### Last publish\n\n5 months ago\n\n### Collaborators\n\nTry on RunKit\n\nReport malware\n\n## Footer\n\n### Support\n\n  * Help\n  * Advisories\n  * Status\n  * Contact npm\n\n### Company\n\n  * About\n  * Blog\n  * Press\n\n### Terms & Policies\n\n  * Policies\n  * Terms of Use\n  * Code of Conduct\n  * Privacy\n\n", "frontpage": false}
