{"aid": "39958888", "title": "Improving Cloudflare Workers and D1 Developer Experience with Prisma ORM", "url": "https://blog.cloudflare.com/prisma-orm-and-d1", "domain": "cloudflare.com", "votes": 2, "user": "chihwei", "posted_at": "2024-04-07 07:20:21", "comments": 0, "source_title": "Improving Cloudflare Workers and D1 developer experience with Prisma ORM", "source_text": "Improving Cloudflare Workers and D1 developer experience with Prisma ORM\n\nGet Started Free|Contact Sales\n\n## The Cloudflare Blog\n\nSubscribe to receive notifications of new posts:\n\n# Improving Cloudflare Workers and D1 developer experience with Prisma ORM\n\n04/03/2024\n\n  * Jon Harrell (Guest Author)\n\n5 min read\n\nWorking with databases can be difficult. Developers face increasing data\ncomplexity and needs beyond simple create, read, update, and delete (CRUD)\noperations. Unfortunately, these issues also compound on themselves:\ndevelopers have a harder time iterating in an increasingly complex\nenvironment. Cloudflare Workers and D1 help by reducing time spent managing\ninfrastructure and deploying applications, and Prisma provides a great\nexperience for your team to work and interact with data.\n\nTogether, Cloudflare and Prisma make it easier than ever to deploy globally\navailable apps with a focus on developer experience. To further that goal,\nPrisma Object Relational Mapper (ORM) now natively supports Cloudflare Workers\nand D1 in Preview. With version 5.12.0 of Prisma ORM you can now interact with\nyour data stored in D1 from your Cloudflare Workers with the convenience of\nthe Prisma Client API. Learn more and try it out now.\n\n### What is Prisma?\n\nFrom writing to debugging, SQL queries take a long time and slow developer\nproductivity. Even before writing queries, modeling tables can quickly become\nunwieldy, and migrating data is a nerve-wracking process. Prisma ORM looks to\nresolve all of these issues by providing an intuitive data modeling language,\nan automated migration workflow, and a developer-friendly and type-safe client\nfor JavaScript and TypeScript, allowing developers to focus on what they\nenjoy: developing!\n\nPrisma is focused on making working with data easy. Alongside an ORM, Prisma\noffers Accelerate and Pulse, products built on Cloudflare that cover needs\nfrom connection pooling, to query caching, to real-time type-safe database\nsubscriptions.\n\n## How to get started with Prisma ORM, Cloudflare Workers, and D1\n\nTo get started with Prisma ORM and D1, first create a basic Cloudflare Workers\napp. This guide will start with the \u201dHello World\u201d Worker example app, but any\nWorkers example app will work. If you don\u2019t have a project yet, start by\ncreating a new one. Name your project something memorable, like my-d1-prisma-\napp and select \u201cHello World\u201d worker and TypeScript. For now, we will choose to\nnot deploy and will wait until after we have set up D1 and Prisma ORM.\n\nnpm create cloudflare@latest\n\nNext, move into your newly created project and make sure that dependencies are\ninstalled:\n\ncd my-d1-prisma-app && npm install\n\nAfter dependencies are installed, we can move on to the D1 setup.\n\nFirst, create a new D1 database for your app.\n\n    \n    \n    npx wrangler d1 create prod-prisma-d1-app . . . [[d1_databases]] binding = \"DB\" # i.e. available in your Worker on env.DB database_name = \"prod-prisma-d1-app\" database_id = \"<unique-ID-for-your-database>\"\n\nThe section starting with [[d1_databases]] is the binding configuration needed\nin your wrangler.toml for your Worker to communicate with D1. Add that now:\n\n    \n    \n    // wrangler.toml name=\"my-d1-prisma-app\" main = \"src/index.ts\" compatibility_date = \"2024-03-20\" compatibility_flags = [\"nodejs_compat\"] [[d1_databases]] binding = \"DB\" # i.e. available in your Worker on env.DB database_name = \"prod-prisma-d1-app\" database_id = \"<unique-ID-for-your-database>\"\n\nYour application now has D1 available! Next, add Prisma ORM to manage your\nqueries, schema and migrations! To add Prisma ORM, first make sure the latest\nversion is installed. Prisma ORM versions 5.12.0 and up support Cloudflare\nWorkers and D1.\n\nnpm install prisma@latest @prisma/client@latest @prisma/adapter-d1\n\nNow run npx prisma init in order to create the necessary files to start with.\nSince D1 uses SQLite\u2019s SQL dialect, we set the provider to be sqlite.\n\nnpx prisma init --datasource-provider sqlite\n\nThis will create a few files, but the one to look at first is your Prisma\nschema file, available at prisma/schema.prisma\n\n    \n    \n    // schema.prisma // This is your Prisma schema file, // learn more about it in the docs: https://pris.ly/d/prisma-schema generator client { provider = \"prisma-client-js\" } datasource db { provider = \"sqlite\" url = env(\"DATABASE_URL\") }\n\nBefore you can create any models, first enable the driverAdapters Preview\nfeature. This will allow the Prisma Client to use an adapter to communicate\nwith D1.\n\n    \n    \n    // schema.prisma // This is your Prisma schema file, // learn more about it in the docs: https://pris.ly/d/prisma-schema generator client { provider = \"prisma-client-js\" + previewFeatures = [\"driverAdapters\"] } datasource db { provider = \"sqlite\" url = env(\"DATABASE_URL\") }\n\nNow you are ready to create your first model! In this app, you will be\ncreating a \u201cticker\u201d, a mainstay of many classic Internet sites.\n\nAdd a new model to your schema, Visit, which will track that an individual\nvisited your site. A Visit is a simple model that will have a unique ID and\nthe time at which an individual visited your site.\n\n    \n    \n    // This is your Prisma schema file, // learn more about it in the docs: https://pris.ly/d/prisma-schema generator client { provider = \"prisma-client-js\" previewFeatures = [\"driverAdapters\"] } datasource db { provider = \"sqlite\" url = env(\"DATABASE_URL\") } + model Visit { + id Int @id @default(autoincrement()) + visitTime DateTime @default(now()) + }\n\nNow that you have a schema and a model, let\u2019s create a migration. First use\nwrangler to generate an empty migration file and prisma migrate to fill it. If\nprompted, select \u201cyes\u201d to create a migrations folder at the root of your\nproject.\n\n    \n    \n    npx wrangler d1 migrations create prod-prisma-d1-app init \u26c5\ufe0f wrangler 3.36.0 ------------------- \u2714 No migrations folder found. Set `migrations_dir` in wrangler.toml to choose a different path. Ok to create /path/to/your/project/my-d1-prisma-app/migrations? ... yes \u2705 Successfully created Migration '0001_init.sql'! The migration is available for editing here /path/to/your/project/my-d1-prisma-app/migrations/0001_init.sql\n    \n    \n    npx prisma migrate diff --script --from-empty --to-schema-datamodel ./prisma/schema.prisma >> migrations/0001_init.sql\n\nThe npx prisma migrate diff command takes the difference between your database\n(which is currently empty) and the Prisma schema. It then saves this\ndifference to a new file in the migrations directory.\n\n    \n    \n    // 0001_init.sql -- Migration number: 0001 2024-03-21T22:15:50.184Z -- CreateTable CREATE TABLE \"Visit\" ( \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, \"visitTime\" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP\n\nNow you can migrate your local and remote D1 database instances using wrangler\nand re-generate your Prisma Client to begin making queries.\n\n    \n    \n    npx wrangler d1 migrations apply prod-prisma-d1-app --local npx wrangler d1 migrations apply prod-prisma-d1-app --remote npx prisma generate\n\nMake sure to import PrismaClient and PrismaD1, define the binding for your D1\ndatabase, and you\u2019re ready to use Prisma in your application.\n\n    \n    \n    // src/index.ts import { PrismaClient } from \"@prisma/client\"; import { PrismaD1 } from \"@prisma/adapter-d1\"; export interface Env { DB: D1Database, } export default { async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> { const adapter = new PrismaD1(env.DB); const prisma = new PrismaClient({ adapter }); const { pathname } = new URL(request.url); if (pathname === '/') { const numVisitors = await prisma.visit.count(); return new Response( `You have had ${numVisitors} visitors!` ); } return new Response(''); }, };\n\nYou may notice that there\u2019s always 0 visitors. Add another route to create a\nnew visitor whenever someone visits the /visit route\n\n    \n    \n    // src/index.ts import { PrismaClient } from \"@prisma/client\"; import { PrismaD1 } from \"@prisma/adapter-d1\"; export interface Env { DB: D1Database, } export default { async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> { const adapter = new PrismaD1(env.DB); const prisma = new PrismaClient({ adapter }); const { pathname } = new URL(request.url); if (pathname === '/') { const numVisitors = await prisma.visit.count(); return new Response( `You have had ${numVisitors} visitors!` ); } else if (pathname === '/visit') { const newVisitor = await prisma.visit.create({ data: {} }); return new Response( `You visited at ${newVisitor.visitTime}. Thanks!` ); } return new Response(''); }, };\n\nYour app is now set up to record visits and report how many visitors you have\nhad!\n\n## Summary and further reading\n\nWe were able to build a simple app easily with Cloudflare Workers, D1 and\nPrisma ORM, but the benefits don\u2019t stop there! Check the official\ndocumentation for information on using Prisma ORM with D1 along with workflows\nfor migrating your data, and even extending the Prisma Client for your\nspecific needs.\n\nWe protect entire corporate networks, help customers build Internet-scale\napplications efficiently, accelerate any website or Internet application, ward\noff DDoS attacks, keep hackers at bay, and can help you on your journey to\nZero Trust.\n\nVisit 1.1.1.1 from any device to get started with our free app that makes your\nInternet faster and safer.\n\nTo learn more about our mission to help build a better Internet, start here.\nIf you're looking for a new career direction, check out our open positions.\n\nDiscuss on Hacker News\n\nDeveloper WeekDevelopersDeveloper PlatformD1PrismaPartners\n\nFollow on X\n\nJon Harrell (Guest Author)|@jonbharrell\n\nCloudflare|@cloudflare\n\nRelated posts\n\nApril 05, 2024 3:45 PM\n\n## Cloudflare acquires Baselime to expand serverless application observability\ncapabilities\n\nToday, we\u2019re thrilled to announce that Cloudflare has acquired Baselime, a\nserverless observability company...\n\nBy\n\n  * Boris Tane,\n\n  * Rita Kozlov\n\nDeveloper Week, Developers, Developer Platform, Product News, Cloudflare\nWorkers, Observability, Acquisitions\n\nApril 05, 2024 1:01 PM\n\n## Browser Rendering API GA, rolling out Cloudflare Snippets, SWR, and\nbringing Workers for Platforms to all users\n\nBrowser Rendering API is now available to all paid Workers customers with\nimproved session management...\n\nBy\n\n  * Tanushree Sharma,\n\n  * Celso Martinho,\n\n  * Nikita Cano,\n\n  * Matt Bullock,\n\n  * Tim Kornhammar\n\nDeveloper Week, Developers, Developer Platform, Turnstile, Application\nServices, Product News, General Availability, Cloudflare Workers\n\nApril 05, 2024 1:00 PM\n\n## Cloudflare acquires PartyKit to allow developers to build real-time multi-\nuser applications\n\nWe're thrilled to announce that PartyKit, a trailblazer in enabling developers\nto craft ambitious real-time, collaborative, multiplayer applications, is now\na part of Cloudflare...\n\nBy\n\n  * Sunil Pai,\n\n  * Rita Kozlov\n\nDeveloper Week, Acquisitions, Cloudflare Workers, AI, Durable Objects\n\nApril 05, 2024 1:00 PM\n\n## Blazing fast development with full-stack frameworks and Cloudflare\n\nYou can now use your framework\u2019s development server while accessing D1\ndatabases, R2 object stores, AI models, and more. Iterate locally in\nmilliseconds to build sophisticated web apps that run on Cloudflare...\n\nBy\n\n  * Igor Minar,\n\n  * Dario Piotrowicz,\n\n  * James Culveyhouse,\n\n  * Peter Bacon Darwin\n\nDeveloper Week, Developers, Developer Platform, Full Stack, Wrangler,\nMiniflare\n\n  * Sales\n  * Enterprise Sales\n  * Become a Partner\n\nContact Sales:\n\n+1 (888) 993-5273\n\n  * Getting Started\n  * Pricing\n  * Case Studies\n  * White Papers\n  * Webinars\n  * Learning Center\n\n  * Community\n  * Community Hub\n  * Project Galileo\n  * Athenian Project\n  * Cloudflare TV\n\n  * Developers\n  * Developer Hub\n  * Developers Discord\n  * Cloudflare Workers\n  * Integrations\n\n  * Tools\n  * Cloudflare Radar\n  * Speed Test\n  * Is BGP Safe Yet?\n  * RPKI Toolkit\n  * Certificate Transparency\n\n  * Support\n  * Support\n  * Cloudflare Status\n  * Compliance\n  * GDPR\n\n  * Company\n  * About Cloudflare\n  * Our Team\n  * Press\n  * Analysts\n  * Careers\n  * Logo\n  * Network Map\n\n\u00a9 2024 Cloudflare, Inc. | Privacy Policy | Terms of Use |Cookie Preferences | Trust & Safety | Trademark\n\n", "frontpage": false}
