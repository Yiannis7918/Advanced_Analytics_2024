{"aid": "40098960", "title": "Hierarchical Clustering", "url": "https://en.wikipedia.org/wiki/Hierarchical_clustering", "domain": "wikipedia.org", "votes": 4, "user": "elsewhen", "posted_at": "2024-04-20 17:24:56", "comments": 0, "source_title": "Hierarchical clustering", "source_text": "Hierarchical clustering - Wikipedia\n\nJump to content\n\nSearch\n\n# Hierarchical clustering\n\n  * \u0627\u0644\u0639\u0631\u0628\u064a\u0629\n  * \u010ce\u0161tina\n  * Deutsch\n  * Espa\u00f1ol\n  * Euskara\n  * \u0641\u0627\u0631\u0633\u06cc\n  * Fran\u00e7ais\n  * \ud55c\uad6d\uc5b4\n  * Italiano\n  * Polski\n  * Portugu\u00eas\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n  * \u7cb5\u8a9e\n  * \u4e2d\u6587\n\nEdit links\n\nFrom Wikipedia, the free encyclopedia\n\nStatistical method of analysis which seeks to build a hierarchy of clusters\n\n\"SLINK\" redirects here. For the online magazine, see Slink.\n\nPart of a series on  \n---  \nMachine learning and data mining  \nParadigms\n\n  * Supervised learning\n  * Unsupervised learning\n  * Online learning\n  * Batch learning\n  * Meta-learning\n  * Semi-supervised learning\n  * Self-supervised learning\n  * Reinforcement learning\n  * Curriculum learning\n  * Rule-based learning\n  * Quantum machine learning\n\n  \nProblems\n\n  * Classification\n  * Generative modeling\n  * Regression\n  * Clustering\n  * Dimensionality reduction\n  * Density estimation\n  * Anomaly detection\n  * Data cleaning\n  * AutoML\n  * Association rules\n  * Semantic analysis\n  * Structured prediction\n  * Feature engineering\n  * Feature learning\n  * Learning to rank\n  * Grammar induction\n  * Ontology learning\n  * Multimodal learning\n\n  \nSupervised learning (classification \u2022 regression)\n\n  * Apprenticeship learning\n  * Decision trees\n  * Ensembles\n    * Bagging\n    * Boosting\n    * Random forest\n  * k-NN\n  * Linear regression\n  * Naive Bayes\n  * Artificial neural networks\n  * Logistic regression\n  * Perceptron\n  * Relevance vector machine (RVM)\n  * Support vector machine (SVM)\n\n  \nClustering\n\n  * BIRCH\n  * CURE\n  * Hierarchical\n  * k-means\n  * Fuzzy\n  * Expectation\u2013maximization (EM)\n  * DBSCAN\n  * OPTICS\n  * Mean shift\n\n  \nDimensionality reduction\n\n  * Factor analysis\n  * CCA\n  * ICA\n  * LDA\n  * NMF\n  * PCA\n  * PGD\n  * t-SNE\n  * SDL\n\n  \nStructured prediction\n\n  * Graphical models\n    * Bayes net\n    * Conditional random field\n    * Hidden Markov\n\n  \nAnomaly detection\n\n  * RANSAC\n  * k-NN\n  * Local outlier factor\n  * Isolation forest\n\n  \nArtificial neural network\n\n  * Autoencoder\n  * Cognitive computing\n  * Deep learning\n  * DeepDream\n  * Feedforward neural network\n  * Recurrent neural network\n    * LSTM\n    * GRU\n    * ESN\n    * reservoir computing\n  * Restricted Boltzmann machine\n  * GAN\n  * Diffusion model\n  * SOM\n  * Convolutional neural network\n    * U-Net\n  * Transformer\n    * Vision\n  * Mamba\n  * Spiking neural network\n  * Memtransistor\n  * Electrochemical RAM (ECRAM)\n\n  \nReinforcement learning\n\n  * Q-learning\n  * SARSA\n  * Temporal difference (TD)\n  * Multi-agent\n    * Self-play\n\n  \nLearning with humans\n\n  * Active learning\n  * Crowdsourcing\n  * Human-in-the-loop\n  * RLHF\n\n  \nModel diagnostics\n\n  * Coefficient of determination\n  * Confusion matrix\n  * Learning curve\n  * ROC curve\n\n  \nMathematical foundations\n\n  * Kernel machines\n  * Bias\u2013variance tradeoff\n  * Computational learning theory\n  * Empirical risk minimization\n  * Occam learning\n  * PAC learning\n  * Statistical learning\n  * VC theory\n\n  \nMachine-learning venues\n\n  * ECML PKDD\n  * NeurIPS\n  * ICML\n  * ICLR\n  * IJCAI\n  * ML\n  * JMLR\n\n  \nRelated articles\n\n  * Glossary of artificial intelligence\n  * List of datasets for machine-learning research\n    * List of datasets in computer vision and image processing\n  * Outline of machine learning\n\n  \n  \n  * v\n  * t\n  * e\n\n  \n  \nIn data mining and statistics, hierarchical clustering (also called\nhierarchical cluster analysis or HCA) is a method of cluster analysis that\nseeks to build a hierarchy of clusters. Strategies for hierarchical clustering\ngenerally fall into two categories:\n\n  * Agglomerative: This is a \"bottom-up\" approach: Each observation starts in its own cluster, and pairs of clusters are merged as one moves up the hierarchy.\n  * Divisive: This is a \"top-down\" approach: All observations start in one cluster, and splits are performed recursively as one moves down the hierarchy.\n\nIn general, the merges and splits are determined in a greedy manner. The\nresults of hierarchical clustering^[1] are usually presented in a dendrogram.\n\nHierarchical clustering has the distinct advantage that any valid measure of\ndistance can be used. In fact, the observations themselves are not required:\nall that is used is a matrix of distances. On the other hand, except for the\nspecial case of single-linkage distance, none of the algorithms (except\nexhaustive search in ) can be guaranteed to find the optimum solution.\n\n## Complexity[edit]\n\nThe standard algorithm for hierarchical agglomerative clustering (HAC) has a\ntime complexity of and requires memory, which makes it too slow for even\nmedium data sets. However, for some special cases, optimal efficient\nagglomerative methods (of complexity ) are known: SLINK^[2] for single-linkage\nand CLINK^[3] for complete-linkage clustering. With a heap, the runtime of the\ngeneral case can be reduced to , an improvement on the aforementioned bound of\n, at the cost of further increasing the memory requirements. In many cases,\nthe memory overheads of this approach are too large to make it practically\nusable. Methods exist which use quadtrees that demonstrate total running time\nwith space.^[4]\n\nDivisive clustering with an exhaustive search is , but it is common to use\nfaster heuristics to choose splits, such as k-means.\n\n## Cluster Linkage[edit]\n\nIn order to decide which clusters should be combined (for agglomerative), or\nwhere a cluster should be split (for divisive), a measure of dissimilarity\nbetween sets of observations is required. In most methods of hierarchical\nclustering, this is achieved by use of an appropriate distance d, such as the\nEuclidean distance, between single observations of the data set, and a linkage\ncriterion, which specifies the dissimilarity of sets as a function of the\npairwise distances of observations in the sets. The choice of metric as well\nas linkage can have a major impact on the result of the clustering, where the\nlower level metric determines which objects are most similar, whereas the\nlinkage criterion influences the shape of the clusters. For example, complete-\nlinkage tends to produce more spherical clusters than single-linkage.\n\nThe linkage criterion determines the distance between sets of observations as\na function of the pairwise distances between observations.\n\nSome commonly used linkage criteria between two sets of observations A and B\nand a distance d are:^[5]^[6]\n\nNames| Formula  \n---|---  \nMaximum or complete-linkage clustering  \nMinimum or single-linkage clustering  \nUnweighted average linkage clustering (or UPGMA)  \nWeighted average linkage clustering (or WPGMA)  \nCentroid linkage clustering, or UPGMC| where and are the centroids of A resp.\nB.  \nMedian linkage clustering, or WPGMC| where  \nVersatile linkage clustering^[7]  \nWard linkage,^[8] Minimum Increase of Sum of Squares (MISSQ)^[9]  \nMinimum Error Sum of Squares (MNSSQ)^[9]  \nMinimum Increase in Variance (MIVAR)^[9]  \nMinimum Variance (MNVAR)^[9]  \nMini-Max linkage^[10]  \nHausdorff linkage^[11]  \nMinimum Sum Medoid linkage^[12]| such that m is the medoid of the resulting\ncluster  \nMinimum Sum Increase Medoid linkage^[12]  \nMedoid linkage^[13]^[14]| where , are the medoids of the previous clusters  \nMinimum energy clustering  \n  \nSome of these can only be recomputed recursively (WPGMA, WPGMC), for many a\nrecursive computation with Lance-Williams-equations is more efficient, while\nfor other (Mini-Max, Hausdorff, Medoid) the distances have to be computed with\nthe slower full formula. Other linkage criteria include:\n\n  * The probability that candidate clusters spawn from the same distribution function (V-linkage).\n  * The product of in-degree and out-degree on a k-nearest-neighbour graph (graph degree linkage).^[15]\n  * The increment of some cluster descriptor (i.e., a quantity defined for measuring the quality of a cluster) after merging two clusters.^[16]^[17]^[18]\n\n## Agglomerative clustering example[edit]\n\nRaw data\n\nFor example, suppose this data is to be clustered, and the Euclidean distance\nis the distance metric.\n\nThe hierarchical clustering dendrogram would be:\n\nTraditional representation\n\nCutting the tree at a given height will give a partitioning clustering at a\nselected precision. In this example, cutting after the second row (from the\ntop) of the dendrogram will yield clusters {a} {b c} {d e} {f}. Cutting after\nthe third row will yield clusters {a} {b c} {d e f}, which is a coarser\nclustering, with a smaller number but larger clusters.\n\nThis method builds the hierarchy from the individual elements by progressively\nmerging clusters. In our example, we have six elements {a} {b} {c} {d} {e} and\n{f}. The first step is to determine which elements to merge in a cluster.\nUsually, we want to take the two closest elements, according to the chosen\ndistance.\n\nOptionally, one can also construct a distance matrix at this stage, where the\nnumber in the i-th row j-th column is the distance between the i-th and j-th\nelements. Then, as clustering progresses, rows and columns are merged as the\nclusters are merged and the distances updated. This is a common way to\nimplement this type of clustering, and has the benefit of caching distances\nbetween clusters. A simple agglomerative clustering algorithm is described in\nthe single-linkage clustering page; it can easily be adapted to different\ntypes of linkage (see below).\n\nSuppose we have merged the two closest elements b and c, we now have the\nfollowing clusters {a}, {b, c}, {d}, {e} and {f}, and want to merge them\nfurther. To do that, we need to take the distance between {a} and {b c}, and\ntherefore define the distance between two clusters. Usually the distance\nbetween two clusters and is one of the following:\n\n  * The maximum distance between elements of each cluster (also called complete-linkage clustering):\n\n  * The minimum distance between elements of each cluster (also called single-linkage clustering):\n\n  * The mean distance between elements of each cluster (also called average linkage clustering, used e.g. in UPGMA):\n\n  * The sum of all intra-cluster variance.\n  * The increase in variance for the cluster being merged (Ward's method^[8])\n  * The probability that candidate clusters spawn from the same distribution function (V-linkage).\n\nIn case of tied minimum distances, a pair is randomly chosen, thus being able\nto generate several structurally different dendrograms. Alternatively, all\ntied pairs may be joined at the same time, generating a unique\ndendrogram.^[19]\n\nOne can always decide to stop clustering when there is a sufficiently small\nnumber of clusters (number criterion). Some linkages may also guarantee that\nagglomeration occurs at a greater distance between clusters than the previous\nagglomeration, and then one can stop clustering when the clusters are too far\napart to be merged (distance criterion). However, this is not the case of,\ne.g., the centroid linkage where the so-called reversals^[20] (inversions,\ndepartures from ultrametricity) may occur.\n\n## Divisive clustering[edit]\n\nThe basic principle of divisive clustering was published as the DIANA\n(DIvisive ANAlysis clustering) algorithm.^[21] Initially, all data is in the\nsame cluster, and the largest cluster is split until every object is separate.\nBecause there exist ways of splitting each cluster, heuristics are needed.\nDIANA chooses the object with the maximum average dissimilarity and then moves\nall objects to this cluster that are more similar to the new cluster than to\nthe remainder.\n\nInformally, DIANA is not so much a process of \"dividing\" as it is of\n\"hollowing out\": each iteration, an existing cluster (e.g. the initial cluster\nof the entire dataset) is chosen to form a new cluster inside of it. Objects\nprogressively move to this nested cluster, and hollow out the existing\ncluster. Eventually, all that's left inside a cluster is nested clusters that\ngrew there, without it owning any loose objects by itself.\n\nFormally, DIANA operates in the following steps:\n\n  1. Let be the set of all object indices and the set of all formed clusters so far.\n  2. Iterate the following until :\n\n    1. Find the current cluster with 2 or more objects that has the largest diameter:\n    2. Find the object in this cluster with the most dissimilarity to the rest of the cluster:\n    3. Pop from its old cluster and put it into a new splinter group .\n    4. As long as isn't empty, keep migrating objects from to add them to . To choose which objects to migrate, don't just consider dissimilarity to , but also adjust for dissimilarity to the splinter group: let where we define , then either stop iterating when , or migrate .\n    5. Add to .\n\nIntuitively, above measures how strongly an object wants to leave its current\ncluster, but it is attenuated when the object wouldn't fit in the splinter\ngroup either. Such objects will likely start their own splinter group\neventually.\n\nThe dendrogram of DIANA can be constructed by letting the splinter group be a\nchild of the hollowed-out cluster each time. This constructs a tree with as\nits root and unique single-object clusters as its leaves.\n\n## Software[edit]\n\n### Open source implementations[edit]\n\nHierarchical clustering dendrogram of the Iris dataset (using R).\nSourceHierarchical clustering and interactive dendrogram visualization in\nOrange data mining suite.\n\n  * ALGLIB implements several hierarchical clustering algorithms (single-link, complete-link, Ward) in C++ and C# with O(n2) memory and O(n3) run time.\n  * ELKI includes multiple hierarchical clustering algorithms, various linkage strategies and also includes the efficient SLINK,^[2] CLINK^[3] and Anderberg algorithms, flexible cluster extraction from dendrograms and various other cluster analysis algorithms.\n  * Julia has an implementation inside the Clustering.jl package.^[22]\n  * Octave, the GNU analog to MATLAB implements hierarchical clustering in function \"linkage\".\n  * Orange, a data mining software suite, includes hierarchical clustering with interactive dendrogram visualisation.\n  * R has built-in functions^[23] and packages that provide functions for hierarchical clustering.^[24]^[25]^[26]\n  * SciPy implements hierarchical clustering in Python, including the efficient SLINK algorithm.\n  * scikit-learn also implements hierarchical clustering in Python.\n  * Weka includes hierarchical cluster analysis.\n\n### Commercial implementations[edit]\n\n  * MATLAB includes hierarchical cluster analysis.\n  * SAS includes hierarchical cluster analysis in PROC CLUSTER.\n  * Mathematica includes a Hierarchical Clustering Package.\n  * NCSS includes hierarchical cluster analysis.\n  * SPSS includes hierarchical cluster analysis.\n  * Qlucore Omics Explorer includes hierarchical cluster analysis.\n  * Stata includes hierarchical cluster analysis.\n  * CrimeStat includes a nearest neighbor hierarchical cluster algorithm with a graphical output for a Geographic Information System.\n\n## See also[edit]\n\n  * Binary space partitioning\n  * Bounding volume hierarchy\n  * Brown clustering\n  * Cladistics\n  * Cluster analysis\n  * Computational phylogenetics\n  * CURE data clustering algorithm\n  * Dasgupta's objective\n  * Dendrogram\n  * Determining the number of clusters in a data set\n  * Hierarchical clustering of networks\n  * Locality-sensitive hashing\n  * Nearest neighbor search\n  * Nearest-neighbor chain algorithm\n  * Numerical taxonomy\n  * OPTICS algorithm\n  * Statistical distance\n  * Persistent homology\n\n## References[edit]\n\n  1. ^ Nielsen, Frank (2016). \"8. Hierarchical Clustering\". Introduction to HPC with MPI for Data Science. Springer. pp. 195\u2013211. ISBN 978-3-319-21903-5.\n  2. ^ Jump up to: ^a ^b R. Sibson (1973). \"SLINK: an optimally efficient algorithm for the single-link cluster method\" (PDF). The Computer Journal. 16 (1). British Computer Society: 30\u201334. doi:10.1093/comjnl/16.1.30.\n  3. ^ Jump up to: ^a ^b D. Defays (1977). \"An efficient algorithm for a complete-link method\". The Computer Journal. 20 (4). British Computer Society: 364\u20136. doi:10.1093/comjnl/20.4.364.\n  4. ^ Eppstein, David (2001-12-31). \"Fast hierarchical clustering and other applications of dynamic closest pairs\". ACM Journal of Experimental Algorithmics. 5: 1\u2013es. arXiv:cs/9912014. doi:10.1145/351827.351829. ISSN 1084-6654.\n  5. ^ \"The CLUSTER Procedure: Clustering Methods\". SAS/STAT 9.2 Users Guide. SAS Institute. Retrieved 2009-04-26.\n  6. ^ Sz\u00e9kely, G. J.; Rizzo, M. L. (2005). \"Hierarchical clustering via Joint Between-Within Distances: Extending Ward's Minimum Variance Method\". Journal of Classification. 22 (2): 151\u2013183. doi:10.1007/s00357-005-0012-9. S2CID 206960007.\n  7. ^ Fern\u00e1ndez, Alberto; G\u00f3mez, Sergio (2020). \"Versatile linkage: a family of space-conserving strategies for agglomerative hierarchical clustering\". Journal of Classification. 37 (3): 584\u2013597. arXiv:1906.09222. doi:10.1007/s00357-019-09339-z. S2CID 195317052.\n  8. ^ Jump up to: ^a ^b Ward, Joe H. (1963). \"Hierarchical Grouping to Optimize an Objective Function\". Journal of the American Statistical Association. 58 (301): 236\u2013244. doi:10.2307/2282967. JSTOR 2282967. MR 0148188.\n  9. ^ Jump up to: ^a ^b ^c ^d Podani, J\u00e1nos (1989), Mucina, L.; Dale, M. B. (eds.), \"New combinatorial clustering methods\", Numerical syntaxonomy, Dordrecht: Springer Netherlands, pp. 61\u201377, doi:10.1007/978-94-009-2432-1_5, ISBN 978-94-009-2432-1, retrieved 2022-11-04\n  10. ^ Ao, S. I.; Yip, K.; Ng, M.; Cheung, D.; Fong, P.-Y.; Melhado, I.; Sham, P. C. (2004-12-07). \"CLUSTAG: hierarchical clustering and graph methods for selecting tag SNPs\". Bioinformatics. 21 (8): 1735\u20131736. doi:10.1093/bioinformatics/bti201. ISSN 1367-4803. PMID 15585525.\n  11. ^ Basalto, Nicolas; Bellotti, Roberto; De Carlo, Francesco; Facchi, Paolo; Pantaleo, Ester; Pascazio, Saverio (2007-06-15). \"Hausdorff clustering of financial time series\". Physica A: Statistical Mechanics and Its Applications. 379 (2): 635\u2013644. arXiv:physics/0504014. Bibcode:2007PhyA..379..635B. doi:10.1016/j.physa.2007.01.011. ISSN 0378-4371. S2CID 27093582.\n  12. ^ Jump up to: ^a ^b Schubert, Erich (2021). HACAM: Hierarchical Agglomerative Clustering Around Medoids \u2013 and its Limitations (PDF). LWDA\u201921: Lernen, Wissen, Daten, Analysen September 01\u201303, 2021, Munich, Germany. pp. 191\u2013204 \u2013 via CEUR-WS.\n  13. ^ Miyamoto, Sadaaki; Kaizu, Yousuke; Endo, Yasunori (2016). Hierarchical and Non-Hierarchical Medoid Clustering Using Asymmetric Similarity Measures. 2016 Joint 8th International Conference on Soft Computing and Intelligent Systems (SCIS) and 17th International Symposium on Advanced Intelligent Systems (ISIS). pp. 400\u2013403. doi:10.1109/SCIS-ISIS.2016.0091.\n  14. ^ Herr, Dominik; Han, Qi; Lohmann, Steffen; Ertl, Thomas (2016). Visual Clutter Reduction through Hierarchy-based Projection of High-dimensional Labeled Data (PDF). Graphics Interface. Graphics Interface. doi:10.20380/gi2016.14. Retrieved 2022-11-04.\n  15. ^ Zhang, Wei; Wang, Xiaogang; Zhao, Deli; Tang, Xiaoou (2012). \"Graph Degree Linkage: Agglomerative Clustering on a Directed Graph\". In Fitzgibbon, Andrew; Lazebnik, Svetlana; Perona, Pietro; Sato, Yoichi; Schmid, Cordelia (eds.). Computer Vision \u2013 ECCV 2012. Lecture Notes in Computer Science. Vol. 7572. Springer Berlin Heidelberg. pp. 428\u2013441. arXiv:1208.5092. Bibcode:2012arXiv1208.5092Z. doi:10.1007/978-3-642-33718-5_31. ISBN 9783642337185. S2CID 14751. See also: https://github.com/waynezhanghk/gacluster\n  16. ^ Zhang, W.; Zhao, D.; Wang, X. (2013). \"Agglomerative clustering via maximum incremental path integral\". Pattern Recognition. 46 (11): 3056\u201365. Bibcode:2013PatRe..46.3056Z. CiteSeerX 10.1.1.719.5355. doi:10.1016/j.patcog.2013.04.013.\n  17. ^ Zhao, D.; Tang, X. (2008). \"Cyclizing clusters via zeta function of a graph\". NIPS'08: Proceedings of the 21st International Conference on Neural Information Processing Systems. Curran. pp. 1953\u201360. CiteSeerX 10.1.1.945.1649. ISBN 9781605609492.\n  18. ^ Ma, Y.; Derksen, H.; Hong, W.; Wright, J. (2007). \"Segmentation of Multivariate Mixed Data via Lossy Data Coding and Compression\". IEEE Transactions on Pattern Analysis and Machine Intelligence. 29 (9): 1546\u201362. doi:10.1109/TPAMI.2007.1085. hdl:2142/99597. PMID 17627043. S2CID 4591894.\n  19. ^ Fern\u00e1ndez, Alberto; G\u00f3mez, Sergio (2008). \"Solving Non-uniqueness in Agglomerative Hierarchical Clustering Using Multidendrograms\". Journal of Classification. 25 (1): 43\u201365. arXiv:cs/0608049. doi:10.1007/s00357-008-9004-x. S2CID 434036.\n  20. ^ Legendre, P.; Legendre, L.F.J. (2012). \"Cluster Analysis \u00a78.6 Reversals\". Numerical Ecology. Developments in Environmental Modelling. Vol. 24 (3rd ed.). Elsevier. pp. 376\u20137. ISBN 978-0-444-53868-0.\n  21. ^ Kaufman, L.; Rousseeuw, P.J. (2009) [1990]. \"6. Divisive Analysis (Program DIANA)\". Finding Groups in Data: An Introduction to Cluster Analysis. Wiley. pp. 253\u2013279. ISBN 978-0-470-31748-8.\n  22. ^ \"Hierarchical Clustering \u00b7 Clustering.jl\". juliastats.org. Retrieved 2022-02-28.\n  23. ^ \"hclust function - RDocumentation\". www.rdocumentation.org. Retrieved 2022-06-07.\n  24. ^ Galili, Tal; Benjamini, Yoav; Simpson, Gavin; Jefferis, Gregory (2021-10-28), dendextend: Extending 'dendrogram' Functionality in R, retrieved 2022-06-07\n  25. ^ Paradis, Emmanuel; et al. \"ape: Analyses of Phylogenetics and Evolution\". Retrieved 2022-12-28.\n  26. ^ Fern\u00e1ndez, Alberto; G\u00f3mez, Sergio (2021-09-12). \"mdendro: Extended Agglomerative Hierarchical Clustering\". Retrieved 2022-12-28.\n\n## Further reading[edit]\n\n  * Kaufman, L.; Rousseeuw, P.J. (1990). Finding Groups in Data: An Introduction to Cluster Analysis (1 ed.). New York: John Wiley. ISBN 0-471-87876-6.\n  * Hastie, Trevor; Tibshirani, Robert; Friedman, Jerome (2009). \"14.3.12 Hierarchical clustering\". The Elements of Statistical Learning (2nd ed.). New York: Springer. pp. 520\u20138. ISBN 978-0-387-84857-0. Archived from the original (PDF) on 2009-11-10. Retrieved 2009-10-20.\n\nAuthority control databases: National|\n\n  * Israel\n  * United States\n\n  \n---|---  \n  \nRetrieved from\n\"https://en.wikipedia.org/w/index.php?title=Hierarchical_clustering&oldid=1212834773\"\n\nCategories:\n\n  * Network analysis\n  * Cluster analysis algorithms\n\nHidden categories:\n\n  * Articles with short description\n  * Short description is different from Wikidata\n  * Articles with J9U identifiers\n  * Articles with LCCN identifiers\n\n  * This page was last edited on 9 March 2024, at 20:04 (UTC).\n  * Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n  * Privacy policy\n  * About Wikipedia\n  * Disclaimers\n  * Contact Wikipedia\n  * Code of Conduct\n  * Developers\n  * Statistics\n  * Cookie statement\n  * Mobile view\n  * Edit preview settings\n\n", "frontpage": true}
