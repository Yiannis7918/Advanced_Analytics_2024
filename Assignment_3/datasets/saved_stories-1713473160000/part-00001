{"aid": "40076813", "title": "Three Snazzy Commands to Enhance Your Vim Personality", "url": "https://b-sharman.dev/blog/three-snazzy-vim-commands", "domain": "b-sharman.dev", "votes": 1, "user": "chilipepperhott", "posted_at": "2024-04-18 14:43:32", "comments": 0, "source_title": "Three Snazzy Commands to Enhance Your Vim Personality", "source_text": "Three Snazzy Commands to Enhance Your Vim Personality - Byron Sharman's blog\n\n# Three Snazzy Commands to Enhance Your Vim Personality\n\n2024-04-17\n\nOne of the things I like about Vim is that each Vim user I know has their own\ndistinct style. Some have installed hundreds of plugins, committing to memory\nthe keybindings of each. Some use insert mode the whole time and pretend\nthey're in an ordinary text editor. Some know all the cool Visual mode\ncommands like gCtrl-A. Some read the entire manual out loud recreationally.\nAnd I like using Ex commands.\n\nFor those that don't know, an Ex command is a command starting with :, like :w\nor :qa (see :h :). They're inherited from the historic editor that Vi\nreplaced. If you have some time to kill, you can see all of them with :h holy-\ngrail. They're like a command line for Vim. In fact, you've probably already\nheard them referred to as Command-line mode.\n\n## :t and :m\n\nSome of my favorite Ex commands, aside from the universal ones, are :copy and\n:move, or their short forms :t and :m, which, when given a range and an\naddress, copy or move the range to the line after the address. If you aren't\nfamiliar with ranges, take a moment to read :h :range, which explains them\nbetter than I can.\n\n:t is useful for single-use operations, where it is often less cumbersome than\nswitching to Visual mode, selecting the lines you want to copy, yanking, and\nputting. Need to duplicate the previous two lines and the current line? Just\ndo :-2,t.. Way smoother than V2ky2jp.\n\n:m provides functionality lacking in most text editors today. Did you paste a\nline one line too low or too high? :m+1 or :m-2. So much more satisfying than\ndeleting and putting. Cut and paste as a workaround for moving is a sad UX\nclunkiness that society has grown complacent about. When in the same buffer,\nit doesn't make sense to delete and recreate when you just want to move.\nYou're doing two actions in order to accomplish one. Switching from yy and p\nto :m is like switching from smashing Backspace in the terminal to pressing\nCtrl-U. It's just a little more satisfying.\n\nAlso, remember marks? That feature that you never use because you don't\nunderstand why it'd be useful? Well, they're very handy when it comes to\nspecifying ranges. Say your cursor is near the bottom of the screen, and there\nare some lines near the top that you want to copy to your current position.\nThey're far away, so it's unwieldy to find the relative numbers and type\n:-17,-14t.. Instead, you want to select those lines with your mouse. So you\nmark the current line with ma and select the target lines graphically. This\nupdates the '< and '> marks to reflect the start and end of the selection,\nrespectively, and when you type : in Visual mode, the corresponding range\n'<,'> is automatically inserted. Now, type :t'a and your selection magically\nappears exactly where you wanted. Isn't that so much more natural than making\na mouse selection, pressing V to make sure you've got everything, yanking it,\nthen pressing Ctrl-O and ascertaining whether to choose p or P? Even better,\nif the starting line was the line you had edited most recently, you could have\nused the built-in mark '. that records the position of the last modification,\nskipping the ma step!\n\nNote: If you accidentally exit Visual mode before entering Command-line mode,\nyou can use * as a shorthand for '<,'>. See :h :star.\n\nAt this point, you might be unconvinced. You've spent the last few minutes\ninventing counterexamples to the greatness of Ex commands. I concede that Ex\ncommands are not universally superior; rather, they are preferable often\nenough to deserve incorporation into your Vim style. Besides, you can feel\nsmug satisfaction in transcending the copy and paste metaphor, knowing that\nfew people in the world can use their text editors like you. You can type\nthese commands in front of your VS Code-using friends and watch their jaws\ndrop. They'll think you're some super-hacker, just like non-computer people\nwatching someone use the command line.\n\n## :norm\n\nWhat if you could combine the versatility of Normal mode commands with the\npower of Ex commands? :norm[al] is one of the most satisfying tools I know of\nin Vim. It executes whatever keystrokes you give it as if you were in Normal\nmode. It also works with ranges, so :,/foo[0-9]/-1norm ^cEbar changes the\nfirst word to bar for each of the lines from the current line to the line\nbefore the next line matching foo[0-9].\n\nLet's look at a more concrete example. Suppose you have this CSV data and you\nwant to format it for insertion into a LaTeX table:\n\n    \n    \n    1, 1 2, 1 3, 2 4, 3 5, 5 6, 8\n\nTo convert this to LaTeX, you need to replace the commas with ampersands and\nappend \\\\\\ to each line. Let's say you address the first of those with the\ncanonical :%s/,/ \\&. Then, you have a couple options for the second. You could\nspend a few seconds coming up with a fancy regex like :%s/.*/\\0\\\\\\\\\\\\\\ or the\nslightly slimmer :%s/$/\\\\\\\\\\\\\\\\. You could painfully record a macro and replay\nit, qaA\\\\\\^Escjq5@a. You could think back to your multiple-cursor IDE days and\nreach for the setup-intensive Visual Block solution, gg$Ctrl-VGA\\\\\\^Esc. Or,\nyou could do the natural and brainless (in a good way) option: :%norm A\\\\\\\\.\nThis combines the power of :s with the intuition of the Visual block solution.\n\nStill unconvinced? I've just gotten started on :norm. You know how when you\ndiscover macros for the very first time and play out a really good one, you\nfeel immense satisfaction as everything falls into order and you briefly\nexperience omnipotence? Well, if you want more of that feeling, try combining\n:norm with the power of :g[lobal]. Say that you're writing a quick Python\nscript to solve an Advent of Code problem and you want to comment out your\nmultitudinous debug prints. :g/print/norm I# . Boom. You just commented every\nsingle line containing print in the entire file. If you have a keybinding\nconfigured for one of those new-fangled extensions that comment code depending\non what language you're in, that'll work with :norm as well. You can also use\n:g with ranges if you have some non-debug prints that you want to keep.\n\nNote: If you don't want :norm to adapt to your custom mappings, use :norm!,\nwhich executes the vanilla keystrokes. This is especially useful for sending\nconfiguration-agnostic Vim tricks.\n\nThis can get even more powerful. I was doing some discrete math homework in\nLaTeX with a template that caused tables to appear awkwardly without a line\nbreak.\n\nLook, an excuse to practice our Vim skills!\n\nFirst of all, since the point of this article is to demonstrate Vim\ncapabilities, ignore the solution of fixing the LaTeX itself. Instead, I will\ndiscuss how to best append \\\\\\ to every line preceding a \\begin{tabular}{...}.\n\nRight away, I knew I needed to automate this task because there were many\ntables in the document. Some of my readers might turn to :s[ubstitute] here.\nIf you are a Mega Regexasaurus Extraordinaire and have the multiline pattern-\nmatching syntax memorized, good for you. I, on the other hand, am a Normal\nHuman Being, and I reach for the solution with the same power but much less\nbrainpower. All I need to do is imagine in my head the keystrokes I would use\nto manually perform this once. Then, I type :g/beg.*tab/norm kA\\\\\\, and I'm\ndone! I have effortlessly automated this extremely specific task:\n\n  1. Find all the lines matching the pattern beg.*tab (a way for me to match \\begin{tabular} without having to type the whole thing).\n  2. For each of those lines, go to the preceding line.\n  3. Append \\\\\\ to that line.\n\nThis is just the beginning. There's nothing stopping you from combining :g and\n:norm and macros!\n\nThings like this are why you'll never be able to go back to VS Code after\nexperiencing the Vim Enlightenment. What sort of text editor or IDE has this\ncapability out of the box? OK, Emacs probably does. However, as an amateur\npianist and typist, I'd rather keep my pinky fingers intact for the next few\nyears.\n\nBack to home\n\n", "frontpage": false}
