{"aid": "40017126", "title": "Fast Git Handover with Mob", "url": "https://mob.sh/", "domain": "mob.sh", "votes": 1, "user": "aiobe", "posted_at": "2024-04-12 20:10:27", "comments": 0, "source_title": "Fast git handover with mob", "source_text": "Fast git handover with mob | Tool for smooth git handover.\n\n# Fast git handover with mob\n\n#StandWithUkraine donate here #StandWithUkraine\n\nFast git handover for remote pair/mob programming.\n\n  * mob is an open source command line tool written in go\n  * mob is the fastest way to hand over code via git\n  * mob keeps your branches clean and only creates WIP commits on temporary branches\n  * mob has a shared team timer timer.mob.sh\n  * mob is on \u2018assess\u2019 in the Thoughtworks Technology Radar\n  * mob has VSCode integration\n\n## What people say about mob\n\n> Sometimes you come across a tool that you didn\u2019t realize you needed until\n> you do; mob is just such a tool. Living as we do in a world where remote\n> pair programming has become the norm for many teams, having a tool that\n> allows for seamless handover either between pairs or a wider group as part\n> of a mob programming session is super useful. mob hides all the version\n> control paraphernalia behind a command-line interface that makes\n> participating in mob programming sessions simpler. It also provides specific\n> advice around how to participate remotely, for example, to \u201csteal the\n> screenshare\u201d in Zoom rather than ending a screenshare, ensuring the video\n> layout doesn\u2019t change for participants. A useful tool and thoughtful advice,\n> what\u2019s not to like? \u2014 Technology Radar Volume 25, thoughtworks\n\n> \u201cMob has allowed us to run fast-paced, engaging, and effective sessions by\n> enabling sub-10-second handover times and otherwise getting out of the way.\n> A simple but great tool!\u201d \u2014 Jeff Langr, developer\n\n> \u201cI love it, it is a quantum leap in our collaboration.\u201d \u2014 Vasiliy Sivovolov,\n> Senior Software Engineer\n\n> \u201cWhat a great tool to organise remote working.\u201d \u2014 Jennifer Gommans, IT\n> Consultant\n\n> \u201cI was recently introduced to mob.sh for remote pairing/mobbing\n> collaboration and I absolutely love it. The timer feature is really a\n> selling point for me. Kudos\u201d \u2014 Fabien Illert, IT Consultant\n\n## How to install\n\nThe recommended way to install mob is as a binary via the provided install\nscript:\n\n    \n    \n    # works for macOS, linux, and even on windows in git bash curl -sL install.mob.sh | sh\n\nOn macOS via homebrew:\n\n    \n    \n    brew install remotemobprogramming/brew/mob # upgrade to latest version brew upgrade remotemobprogramming/brew/mob\n\nOn Windows via Scoop:\n\n    \n    \n    scoop install mob\n\nor via Chocolatey\n\n    \n    \n    choco install mob\n\nOn Arch Linux via yay:\n\n    \n    \n    yay -S mobsh-bin\n\nOn Nix through declarative installation\n\n    \n    \n    { pkgs, ... }: { # Either for all users environment.systemPackages = with pkgs; [ mob ]; # Or for an explicit user users.users.\"youruser\".packages = with pkgs; [ mob ]; }\n\nOn NetBSD, macOS, SmartOS, Linux, FreeBSD, OpenBSD, and more, via pkgsrc:\n\n    \n    \n    # if there's a binary package for your platform pkgin install mob # otherwise, for any platform cd pkgsrc/devel/mob && bmake install clean\n\nOn Ubuntu there\u2019s an EXPERIMENTAL snap package with a known limitation (ssh-\nagent not working):\n\n    \n    \n    sudo snap install mob-sh sudo snap connect mob-sh:ssh-keys\n\n### Using go tools\n\nIf you have go 1.20+ you can install and build directly from source:\n\n    \n    \n    go install github.com/remotemobprogramming/mob/v4@latest\n\nor pick a specific version:\n\n    \n    \n    go install github.com/remotemobprogramming/mob/v4@v4.4.0\n\nor to install latest unreleased changes:\n\n    \n    \n    go install github.com/remotemobprogramming/mob/v4@main\n\n## How to use\n\nYou only need three commands: mob start, mob next, and mob done.\n\nSwitch to a separate branch with mob start and handover to the next person\nwith mob next. Repeat. When you\u2019re done, get your changes into the staging\narea of the main branch with mob done and commit them.\n\nHere\u2019s a short example on how the two developers Carola and Maria code a\nfeature together and push it in the end.\n\n    \n    \n    # Carola main $ mob start mob/main $ echo \"hello\" > work.txt mob/main $ mob next # Maria main $ mob start mob/main $ cat work.txt # shows \"hello\" mob/main $ echo \" world\" >> work.txt mob/main $ mob next # Carola mob/main $ mob start mob/main $ cat work.txt # shows \"hello world\" mob/main $ echo \"!\" >> work.txt mob/main $ mob done main $ git commit -m \"create greeting file\" main $ git push\n\nAnd here\u2019s the man page of the tool:\n\n    \n    \n    mob enables a smooth Git handover Basic Commands: start start session from base branch in wip branch next handover changes in wip branch to next person done squashes all changes in wip branch to index in base branch reset removes local and remote wip branch clean removes all orphan wip branches Basic Commands(Options): start [<minutes>] Start a <minutes> timer [--include-uncommitted-changes|-i] Move uncommitted changes to wip branch [--branch|-b <branch-postfix>] Set wip branch to 'mob/<base-branch>-<branch-postfix>' [--create] Create the remote branch [--room <room-name>] Set room name for timer.mob.sh once next [--stay|-s] Stay on wip branch (default) [--return-to-base-branch|-r] Return to base branch [--message|-m <commit-message>] Override commit message done [--no-squash] Squash no commits from wip branch, only merge wip branch [--squash] Squash all commits from wip branch [--squash-wip] Squash wip commits from wip branch, maintaining manual commits reset [--branch|-b <branch-postfix>] Set wip branch to 'mob/<base-branch>/<branch-postfix>' Timer Commands: timer <minutes> Start a <minutes> timer [--room <room-name>] Set room name for timer.mob.sh once timer open Opens the timer website [--room <room-name>] Set room name for timer.mob.sh once start <minutes> Start mob session in wip branch and a <minutes> timer break <minutes> Start a <minutes> break timer Short Commands (Options and descriptions as above): s alias for 'start' n alias for 'next' d alias for 'done' b alias for 'branch' t alias for 'timer' Get more information: status show the status of the current session fetch fetch remote state branch show remote wip branches config show all configuration options version show the version help show help Other moo moo! Add --debug to any option to enable verbose logging Examples: # start 10 min session in wip branch 'mob-session' mob start 10 # start session in wip branch 'mob/<base-branch>/green' mob start --branch green # handover code and return to base branch mob next --return-to-base-branch # squashes all commits and puts changes in index of base branch mob done # make a sound check mob moo\n\nIf you need some assistance when typing the subcommands and options, you might\nwant to have a look at fig which gives you autocompletion in your shell.\n\n## Best Practices\n\n  * Say out loud\n\n    * Whenever you key in mob next at the end of your turn or mob start at the beginning of your turn say the command out loud.\n    * Why? Everybody sees and also hears whose turn is ending and whose turn has started. But even more important, the person whose turn is about to start needs to know when the previous person entered mob next so they get the latest commit via their mob start.\n  * Steal the screenshare\n\n    * After your turn, don\u2019t disable the screenshare. Let the next person steal the screenshare. (Requires a setting in Zoom)\n    * Why? This provides more calm (and less diversion) for the rest of the mob as the video conference layout doesn\u2019t change, allowing the rest of the mob to keep discussing the problem and finding the best solution, even during a Git handover.\n  * Share audio\n\n    * Share your audio when you share your screen.\n    * Why? Sharing audio means everybody will hear when the timer is up. So everybody will help you to rotate, even if you have missed it coincidentally or deliberately.\n  * Use a timer\n\n    * Always specify a timer when using mob start (for a 5 minute timer use mob start 5)\n    * Why? Rotation is key to good pair and mob programming. Just build the habit right from the start. Try to set a timer so everybody can have a turn at least once every 30 minutes.\n  * Set up a global shortcut for screensharing\n\n    * Set up a global keyboard shortcut to start sharing your screen. In Zoom, you can do this via Zoom > Preferences > Keyboard Shortcuts. More tips on setting up Zoom for effective screen sharing.\n    * Why? This is just much faster than using the mouse.\n  * Set your editor to autosave\n\n    * Have your editor save your files on every keystroke automatically. IntelliJ products do this automatically. VS Code, however, needs to be configured via \u201cFile > Auto Save toggle\u201d.\n    * Why? Sometimes people forget to save their files. With autosave, any change will be handed over via mob next.\n\n### The Perfect Git Handover\n\nThe perfect git handover is quick, requires no talking, and allows the rest of\nthe team to continue discussing how to best solve the current problem\nundisturbed by the handover. Here\u2019s how to achieve that.\n\n  * Situation Maria is typist sharing the screen, Mona is next\n  * Maria runs mob next\n\n    * keeps sharing the screen with the terminal showing the successful run of mob next\n    * does nothing (i.e., no typing, no mouse cursor movement, no window switching)\n  * Mona steals screenshare using keyboard shortcut, and, afterwards, runs mob start\n  * Maria checks her twitter\n\n### Complementary Scripts\n\nmob-start feature1 creates a new base branch feature1 to immediately start a\nwip branch mob/feature1 from there.\n\n    \n    \n    mob-start() { git checkout -b \"$@\" && git push origin \"$@\" --set-upstream && mob start --include-uncommitted-changes; }\n\n### Useful Aliases\n\n    \n    \n    alias ms='mob start' alias mn='mob next' alias md='mob done' alias moo='mob moo'\n\n### Use the name you like\n\n    \n    \n    mob version #v1.11.0 alias ensemble='mob' # introduce alias export MOB_CLI_NAME='ensemble' # makes it aware of the alias ensemble next #\ud83d\udc49 to start working together, use # # ensemble start #\n\nAnd starting with v1.12.0, mob is symlink aware as well:\n\n    \n    \n    mob version #v1.12.0 ln -s /usr/local/bin/mob /usr/local/bin/ensemble ensemble next #\ud83d\udc49 to start working together, use # # ensemble start #\n\n### Automatically set the timer room when using ticket numbers as branch\nmodifiers\n\nSay you\u2019re a larger team and work on the same git repository using ticket\nnumbers as branch modifiers. It\u2019s easy to forget exporting the room that\nenables the integration with timer.mob.sh. Just set the configuration option\nMOB_TIMER_ROOM_USE_WIP_BRANCH_QUALIFIER=true in ~/.mob for that.\n\n### Automatically open the last modified file of the previous typist\n\nWhen you are rotating the typist, you often need to open the file, which the\nprevious typist has modified last. Mob supports you and can automate this\nstep. You just need the configuration option MOB_OPEN_COMMAND with the command\nto open a file in your preferred IDE.\n\nFor example if you want use IntelliJ the configuration option would look like\nthis: MOB_OPEN_COMMAND=\"idea %s\"\n\n## More on Installation\n\n### Known Issues\n\n  * When you have an ssh key with a password and you running mob on windows in powershell, you will not be able to enter a password for your ssh key. You can circumvent this problem by using the git bash instead of powershell.\n\n### Linux Timer\n\n(This is not needed when installing via snap.)\n\nTo get the timer to play \u201cmob next\u201d on your speakers when your time is up,\nyou\u2019ll need an installed speech engine. Install that on Debian/Ubuntu/Mint as\nfollows:\n\n    \n    \n    sudo apt-get install espeak-ng-espeak mbrola-us1\n\nor on Arch Linux as follows:\n\n    \n    \n    sudo pacman -S espeak-ng-espeak yay -S mbrola-voices-us1\n\nCreate a little script in your $PATH called say with the following content:\n\n    \n    \n    #!/bin/sh espeak -v us-mbrola-1 \"$@\"\n\nIf you use WSL2 on windows, install eSpeak as windows tool and Create a little\nscript in your $PATH called say with the following content:\n\n    \n    \n    #!/bin/sh /mnt/c/Program\\ Files\\ \\(x86\\)/eSpeak/command_line/espeak.exe \"$@\"\n\nmake sure that the path to the windows espeak.exefits your installation. You\ncan avoid the long path by adding it to your windows path variable.\n\n## How to configure\n\nShow your current configuration with mob config:\n\n    \n    \n    MOB_CLI_NAME=\"mob\" MOB_REMOTE_NAME=\"origin\" MOB_WIP_COMMIT_MESSAGE=\"mob next [ci-skip] [ci skip] [skip ci]\" MOB_START_COMMIT_MESSAGE=\"mob start [ci-skip] [ci skip] [skip ci]\" MOB_GIT_HOOKS_ENABLED=false MOB_REQUIRE_COMMIT_MESSAGE=false MOB_VOICE_COMMAND=\"say \\\"%s\\\"\" MOB_VOICE_MESSAGE=\"mob next\" MOB_NOTIFY_COMMAND=\"/usr/bin/osascript -e 'display notification \\\"%s\\\"'\" MOB_NOTIFY_MESSAGE=\"mob next\" MOB_NEXT_STAY=true MOB_START_CREATE=false MOB_STASH_NAME=\"mob-stash-name\" MOB_WIP_BRANCH_QUALIFIER=\"\" MOB_WIP_BRANCH_QUALIFIER_SEPARATOR=\"-\" MOB_WIP_BRANCH_PREFIX=\"mob/\" MOB_DONE_SQUASH=squash MOB_OPEN_COMMAND=\"idea %s\" MOB_TIMER=\"\" MOB_TIMER_ROOM=\"mob\" MOB_TIMER_ROOM_USE_WIP_BRANCH_QUALIFIER=false MOB_TIMER_LOCAL=true MOB_TIMER_USER=\"sh\" MOB_TIMER_URL=\"https://timer.mob.sh/\"\n\nOverride default value permanently via a .mob file in your user home or in\nyour git project repository root. (recommended)\n\nOverride default value permanently via environment variables:\n\n    \n    \n    export MOB_NEXT_STAY=true\n\nOverride default value just for a single call:\n\n    \n    \n    MOB_NEXT_STAY=true mob next\n\n### Integration with timer.mob.sh\n\nFor your name to show up in the room at timer.mob.sh you must set a timer\nvalue either via the MOB_TIMER variable, a config file, or an argument to\nstart.\n\n## How to uninstall\n\nMob can simply be uninstalled by removing the installed binary (at least if it\nwas installed via the http://install.mob.sh script).\n\n### Linux\n\n    \n    \n    rm /usr/local/bin/mob\n\n### Windows (Git Bash)\n\n    \n    \n    rm ~/bin/mob.exe\n\n### MacOS\n\n    \n    \n    brew uninstall remotemobprogramming/brew/mob\n\n## How to contribute\n\nPropose your change in an issue or directly create a pull request with your\nimprovements.\n\n    \n    \n    # PROJECT_ROOT is the root of the project/repository cd $PROJECT_ROOT git version # >= 2.17 go version # >= 1.15 go build # builds 'mob' go test # runs all tests go test -run TestDetermineBranches # runs the single test named 'TestDetermineBranches' # run tests and show test coverage in browser go test -coverprofile=cover.out && go tool cover -html=cover.out\n\n## Design Concepts\n\n  * mob is a thin wrapper around git.\n  * mob is not interactive.\n  * mob owns its wip branches. It will create wip branches, make commits, push them, but also delete them.\n  * mob requires the user to do changes in non-wip branches.\n  * mob provides a copy\u2019n\u2019paste solution if it encounters an error.\n  * mob relies on information accessible via git.\n  * mob provides only a few environment variables for configuration.\n  * mob only uses the Go standard library and no 3rd party plugins.\n\n## Who is using \u2018mob\u2019?\n\n  * INNOQ\n  * BLUME2000\n  * REWE Digital\n  * Amadeus IT Group\n  * FlixMobility TECH (FlixBus)\n  * And probably many others who shall not be named.\n\n## Credits\n\nCreated by Dr. Simon Harrer in September 2018.\n\nCurrently maintained by Gregor Riegler and Joshua T\u00f6pfer, and to some limited\ndegree still by Dr. Simon Harrer.\n\nContributions and testing by Jochen Christ, Martin Huber, Franziska Dessart,\nNikolas Hermann and Christoph Welcz. Thank you!\n\nLogo designed by Sonja Scheungrab.\n\nThis site is open source. Improve this page.\n\n", "frontpage": false}
