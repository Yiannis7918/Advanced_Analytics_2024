{"aid": "40086072", "title": "The Auth Bottleneck Pattern", "url": "https://fusionauth.io/articles/ciam/auth-and-the-bottleneck-architecture", "domain": "fusionauth.io", "votes": 1, "user": "mooreds", "posted_at": "2024-04-19 12:39:14", "comments": 0, "source_title": "The Auth Bottleneck Pattern", "source_text": "The Auth Bottleneck Pattern\n\n/ Articles\n\nLog In\n\n## Results\n\n  * If you search it, they will come.\n\n## Recent\n\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n\nCIAM\n\n  * Challenges of CIAM\n  * Developer's Guide To GDPR\n  * How Does Customer Identity And Access Management (CIAM) Differ From Identity And Access Management (IAM)?\n  * Making Sure Your Auth System Can Scale\n  * The Auth Bottleneck Pattern\n  * The Auth Facade Pattern\n  * The Demise of Third-Party Cookies and Why You Need to Run Your Own CIAM System\n  * Unlocking Growth: Why A Low Friction User Signup Process Is Crucial For Your Business\n  * What is Customer Identity and Access Management (CIAM)?\n\nContribute\n\n  * Edit on Github\n\nCIAM\n\n# The Auth Bottleneck Pattern\n\nBy Dan Moore\n\nA common pattern for modern organizations is to centralize user management\nwith a bottleneck architecture, both for customers and for employees. A user\nmanagement system is provisioned and all authentication and authorization\nrequests are routed through it. Rather than individual applications having\ntheir own auth components, the auth system provides a single point of control.\nIf there are other user databases, some auth requests may be federated.\n\n## The architectural pattern with OIDC and SAML\n\nIn this architectural pattern, applications delegate user management to a\nspecific system designed for the purpose. Many applications can delegate their\nauth needs to a standards based system. Examples include custom applications\nwritten by internal teams, third party services used by employees, such as\nSalesforce and Zendesk, and applications used by customers, such as forums,\nhelp desk software, or account management.\n\nBy choosing one user management application for your customer and employee\nneeds, you reduce training time. You can also easily allow different types of\nusers access to different types of applications.\n\nThere are a number of identity management standards, including OpenID Connect\n(OIDC), released in the mid 2010s, and Security Assertion Markup Language\n(SAML), which was standardized in the 2000s. Applications choosing to delegate\nuser management typically support one or more of these standards.\n\nIf the protocol in use is OIDC, the delegating applications are called Relying\nParties, or RPs. If the protocol is SAML, they are called Service Providers,\nor SPs. In either case, decisions about authentication, authorization, and\naccount management, are shifted from the application to a central service.\n\nIn OIDC systems, this centralized auth system is referred to as an OpenID\nprovider, or OP. For SAML based systems, it is called an Identity Provider, or\nIdP. The centralized system\u2019s scope includes:\n\n  * authentication - who is this user?\n  * authorization - what can this user do?\n  * user management - registration, forgot password flows, two factor authentication, reporting, and more\n\nHowever, an auth system isn\u2019t limited to just verifying users based on a local\ndatastore. It can also federate to other providers of identity, such as\nGoogle, Facebook or internal directories such as Active Directory. Standards\ncompliant providers adhering to the SAML or OIDC specifications may also be\nfederated. It\u2019s even possible to tie cloud vendors such as AWS into your\nidentity provider.\n\nHere\u2019s a diagram of the bottleneck architecture:\n\nThe applications, in purple, rely on the centralized auth system, which is in\ngray. They\u2019ll send auth requests to one place. Depending on how the auth\nsystem is configured, the applications\u2019 requests for user information may be\nanswered directly, based on information in the auth system\u2019s datastore. Or,\nalternately, auth requests for a given user can be relayed to the federated\nidentity providers, in orange.\n\n## Benefits of a user auth service\n\nThis user management architecture enables single sign-on (SSO), which makes\nusers\u2019 lives easier. They only have to remember username and password for all\ntheir applications. Among other benefits are increased visibility, decreased\noperational complexity, and increased authentication choice.\n\n### Increased visibility and development speed\n\nThere is one application for user and application management. Because of this,\nimplementing organization wide policies is easier, including those which are\nsecurity or compliance related. Users have only one identity to maintain, so\nany changes, such as to their password or personal information, are easier.\n\nThis bottleneck also serves as a continuously maintained list of applications\nused by the organization. Knowing which services are in use, and seeing usage\nfrequency, is as simple as signing into the auth service administration panel.\nThis also helps the organization avoid buying apps with overlapping\nfunctionality.\n\nIf your auth system has mature user management functionality, it will\naccelerate custom application development by providing necessary commodity\nuser management functionality. No more worrying about building a front end to\nallow customer service reps to lock accounts. Nor do you have to build a way\nto let end users reset their passwords or register.\n\n### Operational simplicity\n\nA centralized user auth service also makes it easy to turn accounts on and\noff. Onboarding a new employee becomes simpler, and offboarding departing\nemployees is a matter of disabling their account in one place, rather than\nhunting down all the applications to which they have access. Or worse, leaving\nthose accounts enabled.\n\nThere are additional benefits to end users, as well. While identifying people\nwith username, password and multi-factor authentication is a secure and\nrelatively convenient method, there may be times when an alternative such as a\npasswordless solution is a better user experience.\n\n### Meet your users where they are\n\nAs you might expect, different types of users have different third party\naccounts. If you are building a consumer focused application, offering sign on\nwith Facebook is a great idea, because most of the world has a Facebook\naccount. One less password for your potential users to remember; one less\nobstacle to signing in.\n\nOn the other hand, if the application is aimed at enterprise customers,\nintegrating with ActiveDirectory can help adoption, especially if you can\ndeploy your identity provider on premises. If developers are your target\nmarket, GitHub authentication eases the sign-up process and also signals to\nthem your understanding of their needs.\n\nIf your auth system allows for multiple identity providers, your application\ncan meet users \u201cwhere they are\u201d, rather than requiring them to create and\nmanage a new account.\n\nIf you work for a large organization, you may need to federate your user\nmanagement system to other user datastores. Having a central service for your\nsuite of applications means federation and integration only needs to be done\nonce, rather than for each application you build.\n\n## Challenges with SSO\n\nOf course, nothing is perfect. There are challenges with this approach as\nwell. Some technical, some not so much.\n\nFirst off is the SSO tax. Many third party applications don\u2019t support auth\ndelegation until you are on an enterprise plan. Investigate required\napplications to see if and how they can act as a RP or SP to a centralized\nuser management system before you decide to pursue the bottleneck\narchitecture.\n\nAnother organizational challenge is ensuring developers and end users actually\nuse the organization\u2019s user management system. Some may want to use their old,\nfamiliar authentication solutions. Encourage everyone to work within these\nconstraints by making adoption as easy as possible and clearly explaining the\nbenefits. Providing examples of successful integrations can help with both of\nthese.\n\nTying together the bottleneck system, the delegating applications, and the\nexternal identity providers requires effort. It can be simple; sometimes it\u2019s\njust following a tutorial on a website and adding a few lines of\nconfiguration. Other times it may be more complicated and may require\ncoordination across multiple teams.\n\nBeware of insecure or slow auth services. No one cares about authentication\nand authorization, except when it doesn\u2019t work. When was the last time you\nheard someone exclaim \u201cI love that login page!\u201c? People want to authenticate\nwhen and how they choose and have it work. They want to use the application,\nnot sign in. Select a system that is robust, has great support, and is\nflexible enough to meet future needs.\n\n### On this page\n\n## Kick the Tires & Build Your Own Instance\n\nDownload and install FusionAuth with no plans or credit card required.\n\nGet Started For Free\n\n## Results\n\n## Recent\n\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n\n", "frontpage": false}
