{"aid": "39961019", "title": "Insights from building Stripe's developer platform and API developer experience", "url": "https://kenneth.io/post/insights-from-building-stripes-developer-platform-and-api-developer-experience-part-1", "domain": "kenneth.io", "votes": 1, "user": "samwillis", "posted_at": "2024-04-07 14:30:22", "comments": 0, "source_title": "Insights from building @stripe's developer platform & API developer experience: Part 1", "source_text": "Insights from building @stripe's developer platform & API developer experience: Part 1 | Kenneth Auchenberg\n\n\ud83d\udc48 back to kenneth.io\n\n# Insights from building @stripe's developer platform & API developer\nexperience: Part 1\n\nApril 2024\n\nThis content initially started as a brain dump that was supposed to ship as a\nshort Twitter thread, but based on this, I'm now shipping this as a blog post.\nIt will probably turn into a mini-series of smaller posts like this.\n\nSince leaving Stripe, I've received many questions from founders, operators,\nand investors about whether I could share some insights into the work we put\ninto building Stripe's developer platform and API developer experience. In\nthis post, I want to share a few learnings from some of the pieces we built\nover the years, and link to resources that might be valuable for others\nbuilding their developer platforms.\n\nIn 2024, I often see companies providing public APIs focused on delivering\nexcellent documentation and code-generated SDKs, fueled by the rise of DXI\ncompanies. However, to provide a truly great developer experience for APIs in\n2024, there's more to it than meets the eye.\n\nSo here are a few insights and some of the things we built for @stripe's\ndeveloper platform:\n\n  * Foundation: First and foremost, a great API developer experience starts with a strong foundation: An intuitive API platform grounded in principles and predictable patterns across its surface area.\n\nAt Stripe, we spend a lot of time agonizing over patterns and consistency\nacross the API to ensure developers have a consistent DX across products and\nabstractions.\n\nWith the rise of AI and agents, it will be increasingly important to have a\nstrong API foundation based on predictable and consistent patterns easily\ndigestible for systems. This may be more important than everything else. Time\nwill tell.\n\n  * API Review: To operationalize this, we introduced a forcing function called API Review, where every change that modifies Stripe\u2019s API must pass a strict review process staffed by a cross-functional group of people who care about API design.\n\nNaturally, it was challenging to manage as a centralized friction point for\nthe company, particularly at scale with 1000s of engineers.\n\nIf I were to do things differently today, I would probably pivot the concept\naway from \u201creview\u201d to more of an education service that helps internal\nengineers develop excellent and consistent APIs.\n\nEngineers aren't always great API/abstraction designers, but this skill can be\nlearned with support and tools.\n\n-> This should be a product. Let me know if you are building this!\n\nMy former colleague @cjav_dev has a great post on the API design process here:\nhttps://blog.postman.com/how-stripe-builds-apis/.\n\n  * Abstraction ladders: Every API is an abstraction, and as APIs evolve, so does their abstraction ladder. Great abstractions enable developers to do powerful things with minimal effort, and great platforms reveal power and complexity as they progress through the abstraction ladder.\n\nMy former colleague, @sebasbensu, has a great blog post about API as ladders:\nhttps://blog.sbensu.com/posts/apis-as-ladders/\n\n  * Consistency across abstractions: One of the most common mistakes I see among companies are inconsistencies between method names and return signatures across abstraction ladders like REST \u2192 Back-end SDK \u2192 React SDK.\n\nIt doesn't matter if you call GET request to retrieve or get in your SDKs.\nWhat matters is consistency all the way through.\n\n  * Error messages: The difference between a good and a great error message can mean hours saved in debugging, so in addition to being rigorous on the error messages themselves, we also included two links directly to the request logs and the relevant doc page as part of the API response to enable better resource discoverability.\n\n  * Request spell-checking: Building upon great error messages, a common mistake is getting a parameter name wrong, so why not do some spell-checking and help developers?\n\nNotice the: Did you mean email?\n\n  * Test-mode and instances: As developers build integrations with your platform, they will make a lot of requests, and a good portion of those will have errors as the developers learn your API. To make it easier to get rolling, we set the standard by introducing a test mode that enabled developers to test their integration with Stripe without messing up real data or moving real money.\n\nHaving a test mode is critical, and in this day and age, I consider the\nevolution of test-mode with multi-instance/environment support to be a table\nstakes in 2024.\n\n  * Request logs: As developers make requests to your platform, they want to understand what\u2019s happening with those requests. So, we offered Request Logs in our developer dashboard to enable developers to confirm that Stripe actually received requests and what we received.\n\nRequest logs are a very underrated feature and something most developer\nplatforms lack.\n\n  * Further, having request logs enables \u201cinspectability\u201d of any API request, an essential educational tool for developers, as they can learn how the platform works by inspecting requests and understated object models and relationships.\n\nExample: Every API request made by the Stripe Dashboard shows up in request\nlogs, enabling anyone to use the Dashboard UI and map it to the underlying API\nrequests.\n\n  * Integration insights: Building upon request logs and the concept of inspectability, we built Integration Insights, which would analyze API request errors and provide developers with actionable insights and tips on fixing their integration.\n\nDevelopers would up/downvote insights, which helped our recommendation engine\nprovide insights.\n\n  * Integration builders: It's common to provide sample projects and code examples to help developers get started, but what developers really want is a more educational approach that can teach them core concepts while they see code.\n\nSo we introduced what we called integration builders, which takes an\ninteractive approach to explain concepts while showing developers tangible\nsample code they can download and run.\n\nThe format has been vital in getting developers started even faster on Stripe.\nIn particular, Stripe has scaled from indie hackers building in PHP to\nenterprise developers building in Java.\n\n  * Integration with existing tools: Most developers don\u2019t live inside your platform but in other tools and platforms. So, to meet developers where they are, we built tools like Stripe CLI and Stripe for VS Code, enabling developers to quickly test their webhooks, lint their code, and generate integrations with Stripe.\n\n  * Thicker SDKs: As we went from handwritten SDKs to code-generated SDKs based upon our OpenAPI spec, we gained the ability to have always up-to-date SDKs and code examples in our docs. This also enabled us to provide static types for languages like TypeScript.\n\nMost importantly, it enabled us to focus our investments on thicker SDKs for\nframeworks like React, where we could now provide more tailored experiences by\nbuilding upon our code-generated baseline.\n\n  * Lastly, while building supporting developer products and processes for our developer platform, nothing would beat the process of dogfooding our own products and abstractions through a process we called friction logging, where we all would try to use a new thing and document all the friction along the way.\n\nHere is @dps sharing insights about friction logging to @lennysan:\n\nIf you've made it this far, I hope you enjoyed this little post. Let me know\nwhat else you find interesting, and I'll incorporate that into the next post.\n\nAs always, I regularly share thoughts and perspectives on developer experience\nand developer platforms, so follow me at @auchenberg.\n\nBest, Kenneth\n\n", "frontpage": false}
