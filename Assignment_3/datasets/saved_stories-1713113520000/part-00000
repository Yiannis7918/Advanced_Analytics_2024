{"aid": "40030214", "title": "Show HN: Go RPC with automatically generated TypeScript client", "url": "https://github.com/turborpc/turborpc", "domain": "github.com/turborpc", "votes": 1, "user": "ola", "posted_at": "2024-04-14 10:49:44", "comments": 0, "source_title": "GitHub - turborpc/turborpc: Type-safe RPC for your frontend in Go", "source_text": "GitHub - turborpc/turborpc: Type-safe RPC for your frontend in Go\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nturborpc / turborpc Public\n\n  * Notifications\n  * Fork 0\n  * Star 1\n\nType-safe RPC for your frontend in Go\n\n### License\n\nMIT license\n\n1 star 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# turborpc/turborpc\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n3 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nolaholchore: add link to more examples818836d \u00b7\n\n## History\n\n8 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| feat: first version  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| feat: first version  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| chore: add license  \n  \n### README.md\n\n|\n\n### README.md\n\n| chore: add link to more examples  \n  \n### assert_test.go\n\n|\n\n### assert_test.go\n\n| feat: add custom error class to clients  \n  \n### bench_test.go\n\n|\n\n### bench_test.go\n\n| feat: log registered methods  \n  \n### client.go\n\n|\n\n### client.go\n\n| feat: first version  \n  \n### client_test.go\n\n|\n\n### client_test.go\n\n| feat: log registered methods  \n  \n### demo.gif\n\n|\n\n### demo.gif\n\n| docs: add demo to readme  \n  \n### example_test.go\n\n|\n\n### example_test.go\n\n| feat: first version  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| feat: first version  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| feat: first version  \n  \n### javascript.tmpl\n\n|\n\n### javascript.tmpl\n\n| feat: add custom error class to clients  \n  \n### logo.png\n\n|\n\n### logo.png\n\n| feat: first version  \n  \n### metadata.go\n\n|\n\n### metadata.go\n\n| feat: first version  \n  \n### method.go\n\n|\n\n### method.go\n\n| feat: first version  \n  \n### service.go\n\n|\n\n### service.go\n\n| feat: log registered methods  \n  \n### turborpc.go\n\n|\n\n### turborpc.go\n\n| feat: log registered methods  \n  \n### turborpc_test.go\n\n|\n\n### turborpc_test.go\n\n| feat: log registered methods  \n  \n### types.go\n\n|\n\n### types.go\n\n| feat: first version  \n  \n### types_test.go\n\n|\n\n### types_test.go\n\n| feat: first version  \n  \n### typescript.tmpl\n\n|\n\n### typescript.tmpl\n\n| feat: add custom error class to clients  \n  \n## Repository files navigation\n\nTurboRPC: Combination of tRPC and net/rpc. Run Fast, Move Fast, Break Nothing.\n\nWrite Go methods, get a type safe client for your frontend.\n\nServices are just Go objects with methods on the form func (s Service)\nMethod(ctx context.Context, input Input) (Output, error).\n\nBy using Go's built in reflection these services can be accessed over HTTP in\na type safe manner from a generated TypeScript client.\n\nWARNING TurboRPC is pre-alpha software, use with caution.\n\n## Example\n\n    \n    \n    package main import ( \"context\" \"net/http\" \"sync/atomic\" \"github.com/turborpc/turborpc\" ) type Counter atomic.Int64 func (c *Counter) Add(ctx context.Context, delta int64) (int64, error) { return (*atomic.Int64)(c).Add(delta), nil } func main() { rpc := turborpc.NewServer(turborpc.WithServerJavaScriptClient()) _ = rpc.Register(&Counter{}) http.Handle(\"/rpc\", rpc) http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(` <!DOCTYPE html> <html> <head> <title>Counter</title> <script src=\"/rpc\"></script> </head> <body> <strong id=\"count\"></strong> <button id=\"plus\">+</button> <button id=\"minus\">-</button> <script> const rpc = new Counter(\"/rpc\"); const setCount = (v) => document.getElementById(\"count\").innerText = v; document.getElementById(\"plus\").onclick = () => rpc.add(1).then(setCount); document.getElementById(\"minus\").onclick = () => rpc.add(-1).then(setCount); rpc.add(0).then(setCount); </script> </body> `)) }) http.ListenAndServe(\":3000\", nil) }\n\n## More Examples\n\n## About\n\nType-safe RPC for your frontend in Go\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\nCustom properties\n\n### Stars\n\n1 star\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\n3 tags\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Go 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
