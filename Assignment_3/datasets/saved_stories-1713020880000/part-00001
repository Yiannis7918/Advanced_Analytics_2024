{"aid": "40021665", "title": "Client-side JavaScript and React criticism: What comes next?", "url": "https://molily.de/javascript-criticism/", "domain": "molily.de", "votes": 2, "user": "tie-in", "posted_at": "2024-04-13 09:06:42", "comments": 0, "source_title": "Client-side JavaScript and React criticism: What comes next?", "source_text": "Client-side JavaScript and React criticism: What comes next? \u00b7 molily\n\nmolily Navigation\n\n# Client-side JavaScript and React criticism: What comes next?\n\nHow do we improve JavaScript usage, teach progressive enhancement and\nreconcile the community?\n\nMarch 3, 2023\n\nA continuation of An update on Robust Client-Side JavaScript \u2013 Where is\nclient-side JavaScript heading?\n\n## The Great Divide is now a Great War\n\nJavaScript critics are effing mad right now. For well-documented reasons. And\nthey do not mince matters any longer. The web development community has never\nbeen so divided. The Great Divide is now a Great War.\n\nCritics mostly talk to their kind on Mastodon while most of the client-side\nJavaScript authors still converse on Twitter. Both groups rant and rave in\ntheir respective echo chambers.\n\nI acknowledge the frustration and anger of JavaScript critics. It accumulated\nover years. Their articles, talks and Twitter posts are records on struggling\nwith client-side JavaScript practices and intervening into discussions.\n\nMy question is: Given the dire situation we have, the divided web development\ncommunity we have, where do we go now and what comes next? How do we cut the\nGordian knot? How do we reconcile?\n\nFirst of all, do we want to reconcile? Or are we fine with the divide? Are we\nfine with bridges burning? Are we fine with smart people on both sides\nridicule and insult each other? Is this the new normal?\n\n## Sermons and insults\n\nI hear JavaScript critics yelling: \u201cJust use Progressive Enhancement! Sprinkle\nsome JavaScript on your static HTML! Don\u2019t believe those fraudsters, grifters,\nbastards, idiots that lied to you!\u201d\n\nAgain, I understand the frustration. Nonetheless, I don\u2019t think the current\nsituation can be explained in terms of fraud, lies, gaslighting et cetera.\nWhile there are powerful actors with certain economic interests, there is no\n\u201cBig JavaScript\u201d conspiracy, no JavaScript framework cabal that has lied to us\nto sell us their sub-par products.\n\nEven if certain individuals would be to blame \u2013 critics personally blame\nJavaScript framework maintainers and the giant tech corporations they work for\n\u2013, I don\u2019t see much value in doing so.\n\nI don\u2019t have a grande theory that explains how we got into the current mess. I\nhave a rather technical explanation: Path dependence and technology lock-in.\nWe didn\u2019t start with the React single-page apps we have today. It was a series\nof small steps where each step seemed rational and logical at the time but\nlead to a poor outcome.\n\nWe started with DOM Scripting during the Browser Wars, then came Ajax and\nclient-side JavaScript exploded. Libraries like Backbone.js helped to\nstructure client-side JavaScript in order to implement dynamic interfaces.\nThen came React and solved a specific problem, more on that later. React\nbrought up new problems one obviously doesn\u2019t face without React, but React\nusers had to deal with them.\n\nThere are also several economic explanations for React\u2019s rise to power and\ncontinued dominance. For example, in 2019, Charlie O\u2019Hara described React as\nthe Fordism moment that commodified the web further. With React, Facebook\nintroduced an assembly line that standardized the work for developers, turning\nthem from artisans into factory workers.\n\n## Shifting the ecosystem\n\nBack to the message that JavaScript critics are sending right now. I don\u2019t\nthink that we can convince anyone with a sermon that is half truism and half\ninsult. We have been shouting \u201cuse Progressive Enhancement, duh!\u201d for almost\ntwo decades \u2013 just like Sisyphus is sentenced to roll up a boulder ad\ninfinitum after evading and outsmarting death many times. The recent addition\n\u2013 the insults \u2013 doesn\u2019t make the message more convincing.\n\nGiven the mess web developers are stuck in right now, I don\u2019t expect them to\nact accordingly. There is no easy way out for organizations that have invested\nin heavy client-side JavaScript architectures. Especially React doesn\u2019t\nprovide escape hatches. That is the core problem that critics describe so\nwell. React is a one-way road.\n\nSo I see no other option than to shift the JavaScript ecosystem gradually,\nwhich ironically is what some critics refuse. In particular, I don\u2019t\nunderstand why they refuse \u201ctransitional\u201d concepts like the Island\nArchitecture:\n\n> \u201cIslands\u201d is the rebranding that progressive enhancement never should have\n> needed.\n>\n> The problem with progressive enhancement is by nature, it means you have to\n> care about users, whereas \u201cIslands\u201d means developers can continue pretending\n> users don\u2019t exist.\n>\n> \u2013 Andy Bell\n\nGranted, \u201cislands\u201d aren\u2019t the user-centric breakthrough that we might have\nwished for. But it\u2019s useful to explain the concept of Progressive Enhancement\nto someone who is stuck knee-deep in a certain thinking, programming practice,\ntooling and legacy code. If we want to improve their JavaScript usage, we have\nto pull them out of that bog. We need to give them better tools that enable\nthem to do the right thing.\n\n## Sprinkling JavaScript\n\nAt the same time, we should be honest that a web site doesn\u2019t magically get\nmore robust and performant if web developers ditch React or whatever megabyte-\nheavy JavaScript stack they are using right now.\n\nFor more than 20 years, I\u2019ve sprinkled JavaScript on HTML, I\u2019ve built with\nProgressive Enhancement in mind, I\u2019ve helped people fixing their JavaScript,\nwith and without frameworks.\n\nOne thing I have learned and do not get tired mentioning is that \u201cvanilla\u201d\nJavaScript is a clusterfuck as well. I don\u2019t recommend writing client-side\nJavaScript without a proper concept, without proven patterns and tools.\nWithout guidance and guardrails, you\u2019ll end up with a buggy, slow, incoherent,\ninsecure and unmaintainable site.\n\nThe beauty and joy of client-side JavaScript is that there is no inherent\npurpose or limit. That means that Thou Shalt set up rules and restrain\nyourself to make your JavaScript benefit the user.\n\nProgressive Enhancement provides guardrails, but so do frameworks. To\nillustrate that, let me tell you from the Golden Age of jQuery and Ajax,\nbefore component libraries like React took over. What did \u201csprinkle JavaScript\non top of HTML\u201d mean back then?\n\nTwo-thirds of your front-end logic was server-delivered, declarative HTML and\nCSS. The other two-thirds was imperative, low-level jQuery DOM manipulation,\nevent handling, setting classes and inline styles.\n\nThe user session and the user interface state was two-thirds on the server,\ntwo-thirds on the client. Again, the client state was two-thirds in the DOM \u2013\nas element presence, classes, data attributes, JSON etc. The other two-thirds\nwas in JavaScript variables, most of them global.\n\nYes, there was roughly one third overlap and duplication, but no proper\nconnection or binding. There was no easy state change and automatic DOM\nupdate. This was a developing nightmare.\n\nMore importantly, such interfaces were error-prone and brittle. They failed\ntheir users. A user could easily get into a kaput state.\n\nIt was React that introduced the concept that the user interface is a function\nof the application state. The page DOM should always reflect the application\nstate properly and consistently. This concept is not a fancy legitimation for\nsingle-page apps, it addresses problems every tiny JavaScript widget deals\nwith.\n\nReact came at the expense of sucking HTML (JSX) and later CSS (CSS-in-JS) into\nits dysfunctional vortex. Better frameworks let you write plain HTML with non-\ninvasive template logic and plain CSS or Sass that is component-scoped per\ndefault. They allow to define the intersections of HTML, CSS and JavaScript\nmore clearly so they can render static pages, mangle and optimize the\nJavaScript code on compile time, then \u201chydrate partially\u201d or \u201cresume\u201d what is\nleft on the client.\n\nThese frameworks are still the opposite of sprinkling JavaScript onto your\nHTML. And I think this is totally fine as long as the outcome is an\naccessible, performant and robust web site.\n\n## Enhancing progressively with JavaScript\n\nLast but not least, if we tell web developers to \u201cuse Progressive Enhancement,\nduh!\u201d, especially developers bogged down in React single-page apps, we need to\nbring along a bouquet of tutorials, best practices and case studies that\nreflect their needs.\n\nEnhancing progressively with JavaScript means that many practical questions\npop up. How do users access and use my site? What are the common points of\nfailure? What is my technical baseline, what is the core functionality? Which\nenhancement steps do I pick assuming that every step needs a user? How do I\nbundle enhancements? How do I implement the enhancement steps? What can I\nachieve with server-side logic, HTML, CSS; which interactions are more user-\nfriendly and even more robust in client-side JavaScript? Can the enhancement\nsteps and different experiences incrementally build on each other? If not, how\ndoes the switch from one step to the next look and feel for the user? How do I\nkeep steps in sync and reduce duplication? How to fight fragmentation? How do\nI guarantee that enhancements are as robust as possible? How do I prevent\nfailure? How do I deal with failure? How do I measure and verify that my\nProgressive Enhancement approach improved the experience for the different\nusers and situations? [...]\n\nI\u2019ll stop here, you get the idea. These are questions me and my colleagues are\ndealing with every day.\n\nBy nature, Progressive Enhancement means deep research and learning by doing.\nMost advocates though tell you that building web sites with Progressive\nEnhancement is easier and the resulting site gets simpler. They argue that a\n\u201cminimal viable product\u201d approach will do away with unnecessary complexity of\nJavaScript-heavy front-ends.\n\nThere are certainly sites whose core functionality can be implemented with\nserver-rendered forms and minimal JavaScript logic. Even then, how are the\nenhancement steps implemented that enable users to achieve their tasks faster?\nWeb developers will not \u2013 and in my opinion should not \u2013 keep their hands off\nhighly dynamic client-side interactivity and associated frameworks.\n\nFor many years, I\u2019ve lamented that only a few people discuss and explore\npractical Progressive Enhancement with JavaScript on complex sites and web\napplications that currently default to React monoliths. Seriously, I cannot\nread another tutorial on Progressive Enhancement that operates on trivial\nexamples that allow straight-forward enhancements or require little client-\nside JavaScript at all. I wouldn\u2019t even recommend them to my colleagues since\nthey don\u2019t address their practical problems.\n\nI\u2019ve created technical demos myself to research and teach certain Progressive\nEnhancement and robust JavaScript techniques. That is totally fine, but in\npractice we have highly dynamic web applications that solve complex problems.\nThey are slow, brittle, buggy and inaccessible. Progressive Enhancement can\nhelp, among other practices. We need to empower web developers to enhance\nprogressively with JavaScript. Again, that means giving them a bouquet of\napproachable and adoptable best practices.\n\nmolily\n\n## Quotes\n\n  * \"Den ekel- und ha\u00dferf\u00fcllten Kopf auf die Brust senken. Gewi\u00df, aber wie, wenn Dich jemand am Hals w\u00fcrgt?\" Franz Kafka, 25. November 1917\n  * \"Dabei ist es doch m\u00fc\u00dfig \u00fcber den Gewaltakt der Befreiung nachzudenken, wenn Du nicht wei\u00dft, wer Dir die Fesseln anlegt.\" \u00c4lis, Eklektrick\n\n  * molily\n  * Email\n  * Mastodon\n  * Twitter\n  * Impressum & Datenschutz\n\n", "frontpage": false}
