{"aid": "40030292", "title": "Engineering Productivity, GenAI, Metrics, Toil", "url": "https://isthisit.nz/posts/2024/engineering-productivity-metrics-genai/", "domain": "isthisit.nz", "votes": 1, "user": "kiyanwang", "posted_at": "2024-04-14 11:09:54", "comments": 0, "source_title": "Engineering Productivity, GenAI, Metrics, Toil", "source_text": "Engineering Productivity, GenAI, Metrics, Toil\n\n\u1e2ds this it?\n\nsunsets are photons & atoms, not bits\n\n  * Software Engineering\n  * \u03b4\n  * Photography\n  * \u03b4\n  * About\n  * \u03b4\n  * Archive\n\n# Engineering Productivity, GenAI, Metrics, Toil\n\nJanuary 17 2024 \u00b7 tech devops ai software-engineering aws\n\nBoost software development productivity by 50x, so was the message on the expo\nfloor at AWS re:Invent. Hundreds of vendors, from startup to enterprise, had\nbooths at the expo marketing their developer tooling, platforms, and\nconsulting services. GenAI has been in full swing for a couple of years now,\nand with the recent trends of organisational efficiency, the two have married\nup. Most booths touted how recent GenAI features they\u2019ve added improves the\nproductivity of software developers. What are you waiting for? Buy their\ntools.\n\n## Engineering Metrics, Productivity\n\nIn my day job I lead the Engineering Metrics initiative for a big tech\ncompany. We measure aspects of software delivery, reliability, and security\nacross all systems across the company and provide a single pane of glass view\nfor everyone from a developer to the C-level to interpret them. Whether\nthrough technology trends or perceived financial constraints, the demand for\nmeasuring the productivity of software developer\u2019s has never been higher.\nProductivity means different things to different people. When I\u2019m asked if my\nteam can measure developer productivity I\u2019ll set up a conversation with the\nperson asking to learn about their context. A few generalised examples below:\n\n  * A platform team is not progressing on new initiatives. Their perceived productivity is low. The team deals with a lot of interrupt work to support customers using their platform.\n  * A platform team wants to use org-wide developer productivity metrics to show the value in delivering a new version of their software. The new version allows teams to work faster.\n  * A product team is not progressing on new initiatives. Their perceived productivity is low. The codebase they work on is old, hasn\u2019t been well maintained, and is very difficult to deploy.\n\nIn almost all situations there is a more objective metric that\u2019s easier to\nmeasure and is more accurate than some metric of aggregate productivity. Teams\nalready know why progress is slow or why costs are high. Typically it\u2019s much\nbetter to measure aspects of toil, cost, or the things that are preventing a\nteam from achieving subjective productivity than it is to measure productivity\nof some blackbox metric of units of value delivered divided by cost.\n\nDefining toil, improving, and iterating is nothing new. It\u2019s what I recognise\nas one of the core tenets of the DevOps philosophy. Breaking down complex work\nmakes it achievable. If we attempt to make \u2018units of value delivered\u2019 go up,\nor \u2018cost go down\u2019 then we can blindly stumble into unintentional side effects.\nFive years ago it was the same developer tooling companies that promised to\nsell us \u2018DevOps tools\u2019 which would improve productivity. We know that DevOps\nis a capability and culture that needs to be developed within a company, not a\ntool that can be bought off the shelf and wild productivity improvements\nrealised.\n\n## CodeWhisperer at AWS\n\nAt re:Invent I attended the talk Boost Developer Productivity with AWS\nCodeWhisperer. CodeWhisperer is a co-pilot tool which helps engineers write\nand debug code. The talk described how AWS measures developer productivity,\nand then how these metrics changed after a portfolio adopted CodeWhisperer.\nTheir developer productivity framework covers a few aspects:\n\n  * System Health - Observability, reliability, etc.\n  * Software Delivery Health - Delivery speed, frequency.\n  * Team Health and Developer Wellbeing - That annoying survey you get sent every two weeks.\n\nThe portfolio adopted CodeWhisperer and they saw strong movement in the Team\nHealth and Developer Wellbeing metrics. Developers enjoyed using the tool,\nsaid they felt more engaged with the code-writing aspects of their jobs and\nfound the tool especially valuable in generating test cases. I asked the\nspeakers whether they saw movements in the System Health or Software Delivery\nHealth metrics but it was a non-answer. I assume if there was a strong\nmovement they would have covered it in the talk. By their definition, adoption\nof CodeWhisperer improved productivity. By other measures of productivity, it\nwouldn\u2019t.\n\nI\u2019m not surprised that changes weren\u2019t observed in the System Health and\nSoftware Delivery Health metrics. The way metrics such as Delivery Lead Time\nand Service Level Objectives are measured means a range of factors, including\nthose outside a team\u2019s control, can impact them. As GenAI developer tooling\nevolves we might see it make more of an impact on software delivery.\n\n## GenAI Creates Toil\n\nI believe the most significant thing co-pilot and other software development\nGenAI tools do is to move work developers happily did into the category of\ntoil. Specifically, a subset of software development tasks related to writing\ncode and information retrieval (aka. googling).\n\nAt first glance these aren\u2019t toil. Toil is repetitive, manual, and time\nconsuming work \u2013 fixing broken pipelines, running data fixes, or having to\nmanually configure a server. Toilsome work prevents us from writing valuable\ncode. But that definition has been eroding away. Large companies invest a lot\nof money in service templates and golden paths to achieve a couple of\noutcomes:\n\n  * Faster zero to one for getting new services into production\n  * Consistency in technologies and configuration of services\n\nThose outcomes are achieved by skilled developers not writing code. I see\nGenAI tooling as the next step along the continuum. It moves some next segment\nof code, beyond the initial service template, from the categorisation of value\nto toil. CodeWhisperer and its competitors are working on features to allow\ncompanies to augment their GenAI model with code that the company provides.\nThis will allow the co-pilot to generate code using internal libraries that\nfollow internal coding standards.\n\nIt\u2019s a similar story in information retrieval. Developer tooling such as\nintellisense and code completion bring valuable information to the developer\u2019s\neyes when they need it the most. Asking a co-pilot or chat-like interface a\nquestion in real time in the text editors is miles ahead from doing a web\nsearch for a particular bug in a library, opening five tabs of documentation,\ngithub issues, and marketing copy, accepting all of their cookie policies, and\nspending ten minutes to read, aggregate, and understand the issue.\n\nThese tools are best used by experienced software developers who can interpret\nthe suggested code and incorporate it into the systems by applying judgement.\nA hugely undervalued boon of co-pilots is that they eliminate some instances\ncontext switching. They evolve developer tooling by bringing even more code\ngeneration and information retrieval into the IDE.\n\n## Conclusion\n\nProductivity means whatever you want it to mean. I don\u2019t think it needs to\nfactor into the decision for companies to adopt co-pilot tools. Developers\nwill use the tools they want, and in two years time co-pilots will be enabled\nin IDEs by default anyway.\n\nCo-pilots are approaching commodity status joining the glowing halls of other\n\u201850x productivity\u2019 tools such as CI/CD platforms. Like with CI/CD platforms,\nthere is value in companies choosing a blessed co-pilot to invest in. The\nfuture value prop for businesses will be co-pilots that can generate code and\nmake inline suggestions in accordance with the organisation\u2019s coding standards\nand recommended libraries. This will make both new and older codebases alike\neasier to work in.\n\nDon\u2019t fall into the productivity metrics trap.\n\n### Related Posts\n\n  * F# Web Application on AWS Lambda\n  * AWS Developer Associate Exam 2019\n  * Opinions on Software Delivery & Engineering Metrics\n  * Prompting GPT Models to Return JSON\n  * Building A ChatGPT-enhanced Python REPL\n\n\u00ab Western Landscapes\n\n\u1e5eecent Posts\n\n  * Engineering Productivity, GenAI, Metrics, Toil\n  * Western Landscapes\n  * Las Vegas\n  * Hydra\n  * Athens\n  * Opinions on Software Delivery & Engineering Metrics\n\n\u00a7earch\n\nTags\n\ntech (47) software-engineering (38) landscape-photography (34) hellenic (15)\ndevops (14) fsharp (14) dotnet (13) poems (13) astro-photography (12) central-\notago (12) film-photography (12) books (11) melbourne (9) monochrome (9)\nstreet-photography (9) continuous-deployment (8) lawrence-durrell (8)\nphilosophy (8) complexity (7) travel-writing (7) accelerate (6) computation\n(6) dunedin (6) aws (5) cavafy (4) george-seferis (4) linux (4) lparen (4)\ntasmania (4) wanaka (4) ai (3) aurora (3) python (3) queenstown (3)\nresilience-engineering (3) southland (3) stories (3) tekapo (3) wellington (3)\nbrighton (2) cellular-automata (2) cromwell (2) docker (2) fable (2) feliz (2)\nlunar-eclipse (2) teamcity (2) typescript (2)\n\n\u03bb\n\nAll of this is untrue but it is beautiful\n\n\u03bb\n\nabout \u03b4 archive \u03b4 .rss \u03b4 \ud83d\udcf7 \u03b4 logan@isthisit.nz\n\n", "frontpage": false}
