{"aid": "40085747", "title": "Three Important things I overlooked during code reviews", "url": "https://www.piglei.com/articles/3-important-things-I-overlooked-during-cr/", "domain": "piglei.com", "votes": 1, "user": "piglei", "posted_at": "2024-04-19 12:04:48", "comments": 0, "source_title": "3 important things I overlooked during code reviews | Piglei", "source_text": "3 important things I overlooked during code reviews | Piglei\n\nPiglei\n\n  * About\n  * Feed\n  * Blog\n  * \u4e2d\u6587\n\n# 3 important things I overlooked during code reviews\n\nPosted in 2024-04-19\n\nCode review is a popular practice in software development. By incorporating\nhuman reviews before merging code into the main branch, it facilitates\nknowledge sharing among team members and improves software quality.\n\nAs a reviewer, I have participated in many code reviews. Certain aspects have\nalways stood out to me, such as whether the design considers edge cases and\nwhether the code has adequate unit test coverage. However, there were other\nseemingly trivial aspects that I did not pay enough attention to until\nrecently, when I began to realize their importance.\n\nHere are three important things that I had previously overlooked.\n\n### 1\\. Naming\n\n> A young girl, Chihiro, enters a bathhouse run by the witch Yubaba and\n> designed for the gods. To work at the bathhouse, Chihiro signs a contract\n> with Yubaba, but the contract is not the key point. Instead, it is a\n> seemingly trivial action - Yubaba renames Chihiro from \"\u5343\u5bfb\" to \"\u5343\". Once\n> Chihiro loses her original name, she also loses the ability to escape the\n> bathhouse's otherworldly realm, and is condemned to eternal servitude under\n> Yubaba.\n>\n> \\-- The movie \"Spirited Away\"\n\nProgrammers' focus on \"naming\" seems to follow an \"inverted U-shaped\" curve.\nWhen they lack experience, their attention to naming is very low, resulting in\ncode filled with inaccurate and imprecise names that fail to effectively\ndescribe various abstract concepts.\n\nThe following code snippet illustrates several naming problems:\n\n    \n    \n    def get_var(u): \"\"\"Get the environment variables.\"\"\" data1 = UserVarsManager.get(u) data2 = SiteVarsManager.get(u.site) return data1 + data2\n\nWith more experience, more attention is paid to naming conventions in\nprojects. Names are becoming more descriptive, and vague names are gradually\ndisappearing. At the very least, names should no longer be a barrier to\nunderstanding the code.\n\nAt this stage, the code evolves to look something like this:\n\n    \n    \n    def list_environment_vars(user): \"\"\"Get the environment variables.\"\"\" items_user = UserVarsManager.get(user) items_site = SiteVarsManager.get(user.site) return items_user + items_site\n\nIn the vast majority of reviews, this would definitely qualify as satisfactory\ncode, unlikely to cause disputes over naming issues.\n\nAfter this point, most programmers' focus on naming follows a \"Inverted\nU-shaped\" curve: they no longer pay as much attention to naming as before,\nsatisfied as long as the names are somewhat descriptive and unambiguous. I was\none of them.\n\nHowever, we should not stay at this stage for too long. As code reviewers, we\nshould continually hone our sensitivity to naming. For example, for the code\nmentioned earlier, the following review suggestions might be considered:\n\n    \n    \n    def list_environment_vars(user): # 1 \"\"\"Get the environment variables.\"\"\" items_user = UserVarsManager.get(user) # 2 items_site = SiteVarsManager.get(user.site) return items_user + items_site\n\n  * Comment 1: The project uses a standard abbreviation for \"environment variables\" as env_variables / env_vars, and should be consistent here, using list_env_variables or list_env_vars.\n  * Comment 2: The naming of UserVarsManager.get can be optimized, as Manager is a \"catch-all\" term that fits in various contexts, but sacrifices the precision of the name (equivalent to \"responsibility\"). Consider using a more precise name, such as UserEnvVariables.get(user); the same goes for `SiteVarsManager'.\n\nAlthough these are just two minor improvements, many small improvements can\nadd up to a significant effect.\n\nEvery code review inevitably involves many new names. However, not all names\nare created equal; not all names deserve our time and focus. It's best to\nfocus on the most commonly used names that are closest to the user, such as\nresource names in URL paths, database models and field names, utility function\n(class method) names, and so on.\n\nIn addition, domain-specific vocabulary that is directly related to the\nbusiness is extremely important. During reviews, each key domain term deserves\ncareful consideration and repeated scrutiny. For example, if you are\ndeveloping a movie review feature, what should be the names for \"user rating,\"\n\"media rating,\" and \"average rating\"? You certainly wouldn't want to see\nmovie_score in one file and movie_rating in another.\n\nThough naming may seem trivial, the larger the project and the longer its\nduration, the more likely minor differences in name quality can accumulate\ninto a significantly impactful outcome.\n\n### 2\\. Guide comments\n\n> \u201cCharlotte had written the word RADIANT, and Wilbur really looked radiant as\n> he stood in the golden sunlight. Ever since the spider had befriended him,\n> he had done his best to live up to his reputation. When Charlotte's web said\n> SOME PIG, Wilbur had tried hard to look like some pig. When Charlotte's web\n> said TERRIFIC, Wilbur had tried to look terrific. And now that the web said\n> RADIANT, he did everything possible to make himself glow.\u201d\n>\n> \\-- \"Charlotte's Web\" by E.B.White\n\nRegarding comments, I have always believed Uncle Bob's view in Clean Code:\n\"The proper use of comments is to compensate for our failure to express\nourself in code.\" That is, good code should always convey its intent clearly,\nwithout the need for redundant comments. Comments should only be used to\ndescribe information outside the code, such as explaining \"why\".\n\nTherefore, comments should always be used sparingly. If a piece of code is\nhard to understand, the first reaction should not be to add comments, but to\ntry to rewrite it in a more understandable way.\n\nOver time, however, I have come to realize that things are not so black and\nwhite. \"Guide comments\", or what some might criticize as \"almost restating the\nintent of the code,\" also play an irreplaceable role.\n\nThe creator of Redis, antirez, is a strong supporter of guide comments. He\nonce wrote an article detailing the role of guide comments in the Redis\nproject. The following code snippet from the Redis source code contains\nseveral \"guide comments\":\n\n    \n    \n    /* Call the node callback if any, and replace the node pointer * if the callback returns true. */ if (it->node_cb && it->node_cb(&it->node)) memcpy(cp,&it->node,sizeof(it->node)); /* For \"next\" step, stop every time we find a key along the * way, since the key is lexicographically smaller compared to * what follows in the sub-children. */ if (it->node->iskey) { it->data = raxGetData(it->node); return 1; }\n\nIn this snippet, the two comments add no new information beyond the code\nitself. So what's the benefit?\n\nThe most direct benefit is that these comments make the code easier to\nunderstand, significantly reducing the mental effort required to read the\ncode. The same piece of code without directive comments might take 10 minutes\nto fully understand, but with comments, that time might be reduced to 5\nminutes or even less.\n\nWhen new developers join the project, these directive comments can help them\nget up to speed more quickly.\n\nFor this reason, when reviewing a piece of code, I often comment on a segment\nof complex logic: \"Nit: Consider adding a brief directive comment to clarify\nthe code's behavior.\"(Nit=nitpick, indicating a suggestion for improvement\nthat is not a strong demand).\n\nIn addition, if a section of code has sparked some in-depth discussions during\nthe review process, those discussions may be well suited to be reprocessed and\nadded into the code as guide comments. Sometimes they work wonders for\nunderstanding the code.\n\nHowever, in pursuing \"directive comments,\" it's also important to avoid the\nfollowing pitfalls:\n\n  * Comment restate code: While guide comments serve as an aid to understanding the code, they should not simply restate the code. Simply put, consider the stylistic difference in the information conveyed: if the code is a dense, authoritative science textbook, then the guide comments are like a concise science primer aimed at middle school students.\n  * Obsession with comment ratio: Do not set rigid targets for \"code comment ratio\". The quality of comments matters, and blindly chasing quantity can be counterproductive.\n  * Outdated comment: Outdated comments can be more harmful than the code itself. Be sure to modify or delete outdated comments in a timely manner.\n\nIn summary, you can think of directional comments as targeted \"teaching text\"\nfor the code. When reviewing code, if you find a piece of logic difficult to\nunderstand and there is little room for optimization in the code itself, do\nnot hesitate to express your need for this \"teaching text\"!\n\n### 3\\. Ways to communicate\n\n> \u201cI suffered so much over Ruth and Sarah leaving us. And I suffered all the\n> more because I believed I was alone.\"\n>\n> \"Really, Miss Kenton ...\" I picked up the tray on which I had gathered\n> together the used crockery. \"Naturally, one disapproved of the dismissals.\n> One would have thought that quite self-evident.\u201d\n>\n> \\-- \"The Remains of the Day\" by Kazuo Ishiguro\n\nTo this day, many still view software development as a solitary endeavor. A\nprogrammer, armed only with a keyboard, can seemingly produce endless streams\nof code without the need for anyone else. However, the era of the lone\nprogrammer is long gone. Modern software development has evolved into a\ncollaborative affair involving multiple participants. As such, a programmer's\nday is filled with various forms of communication, including participation in\ncode reviews.\n\nDuring code reviews, the reviewer's task might seem simple and\nstraightforward: point out defects in other people's code. Sounds easy, right?\nI once thought the same-that a review could be neatly summarized by the\nfollowing \"123\" steps:\n\n  1. Identify all the points that can be optimized (Stick to the facts!)\n  2. Wait for the submitter to make the changes, or confirm to keep the original after discussion (Discuss the matter at hand!)\n  3. Merge the code ( Mission accomplished!)\n\nYet reality often falls short of the ideal. Code reviews rarely go as smoothly\nas described above. Because once you get into interpersonal communication,\nespecially when one party is pointing out flaws in the work of another, how\ncan things remain simple?\n\nHumans are a fascinating, intelligent species; when reading a text, they can\nnot only extract information, but also sense the emotions embedded in the\nlines. Sometimes these emotions can overshadow the information itself and\ninfluence their judgments. Therefore, when participating in reviews, remember\nthis: stay humble, respect others, regardless of their experience or\nbackground. Excellent expression ensures that even in criticism, the other\nparty feels respected.\n\nLet me give you an example. A newcomer to the team submitted a PR using\nPython, a language he was not very familiar with. As the reviewer, you noticed\na lengthy loop in the code and wrote the following comment:\n\n    \n    \n    The code is too verbose, use a list comprehension instead.\n\nWhile your point is valid, the way it's expressed could be reconsidered.\nHere\u2019s an alternative version of this comment:\n\n    \n    \n    This loop only involves filtering and transformation, which makes it a good candidate for a list comprehension to simplify the code. Here's an example: items = [to_item(obj) for obj in objs if obj.is_valid()] Ref: https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\n\nCompared to the first comment, the latter is less likely to provoke a\ndefensive reaction from the newcomer and is more likely to be accepted. This\nreflects the old adage, \"The way you express something is as important, if not\nmore important, than what you express.\"\n\nIn addition to being humble and respectful, here are some other worthwhile\ncommunication tips for reviews:\n\n  * An example is worth a thousand words: Instead of writing a long explanation, it's sometimes more effective to write a few lines of code that provide a practical example.\n  * Tailor your language to your audience: You should (and can) treat developers who have been on the team for a month differently from those who have been there for a year; with inexperienced newcomers, be cautious with your language to avoid making them feel disrespected or overly frustrated; with seasoned colleagues, you can afford to be more straightforward and concise, without being overly verbose.\n\nI believe that most people fundamentally agree that code reviews should focus\non the code, not the person, and that criticism of the code should not be seen\nas a personal attack. However, advocating for better communication does not\nconflict with this. If the communication makes both parties feel satisfied,\nit's more likely to be effective. Therefore, improving the way we communicate\ncan enhance work efficiency. Why not embrace it?\n\n### Summary\n\nCode reviews, as a vital means of ensuring software quality, are an\nindispensable part of large-scale software development. This article\nsummarizes my reflections as a review participant in the areas of naming,\nguide comments, and communication styles, with the following key points:\n\n  * Programmers should continually improve their sensitivity to naming during code reviews.\n  * Two techniques for checking names: maintaining consistency with similar nouns, and replacing \"one-size-fits-all\" names with more precise terms.\n  * Treat names differently, paying extra attention to the most important ones.\n  * For any project, domain-specific (business-related) names are critical and deserve careful consideration and scrutiny.\n  * Guide comments, while not providing much information beyond the code, play an irreplaceable role.\n  * Guide comments greatly reduce the mental effort required to understand the code.\n  * Be aware of several pitfalls with guide comments: merely repeating the code, pursuing a \"comment ratio,\" and neglecting outdated comments.\n  * During review, be proactive in requesting additional guide comments for complex code logic.\n  * The ideal review is straightforward and focused on the issue at hand, but because it involves interpersonal communication, the reality often differs from the ideal.\n  * Text not only conveys information, it also carries emotions, which can affect the effectiveness of communication.\n  * Always stay humble and respectful during reviews, regardless of the other person's experience or background.\n  * Adopt different communication styles with reviewers who have different levels of experience.\n\nCode review is a complex, multi-participant, nuanced task. High-quality\nreviews can significantly improve both quality and team atmosphere, while\npoor-quality reviews can degenerate into formalism or even cause discord and\ndissatisfaction within the team.\n\nThe factors that affect the quality of reviews are often hidden in seemingly\ninsignificant details and minor issues. I hope my reflections on the \"little\nthings\" may inspire your work.\n\n\u00a9 2009 - 2024 by piglei. Powered by Django.\n\n", "frontpage": false}
