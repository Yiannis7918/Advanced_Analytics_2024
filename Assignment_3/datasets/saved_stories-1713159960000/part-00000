{"aid": "40035552", "title": "Spectral Ray Tracing", "url": "https://larswander.com/writing/spectral-ray-tracing/", "domain": "larswander.com", "votes": 4, "user": "earslap", "posted_at": "2024-04-14 23:45:28", "comments": 0, "source_title": "Spectral Ray Tracing", "source_text": "Spectral Ray Tracing\n\n~/ me art writing\n\n# Spectral Ray Tracing\n\n2024-04-13\n\n> I\u2019m sharing this to give some background on my recent artworks exploring\n> light, color, and perception through spectral ray tracing. This ray tracer\n> that I\u2019ve written has shown up in a few of my series, and I wanted to\n> explain what \u201cspectral ray tracing\u201d even is. I have shared some outputs at\n> the end of this writeup.\n\nIn computer art, the artist builds both a scene and a camera to capture it out\nof code. The system being visualized, and process to render it into an array\nof RGB values are both made of the same 1s and 0s, pure abstraction turned\ninto light. In much the same way, our eyes and brains are made of the same\nstuff as the universe they exist within and observe. This self-referential\nperspective on our awareness is both eerie and profound, obvious yet\nunsettling.\n\nFor this reason, this idea of building cameras out of code has stuck with me.\nNow there are countless ways to do so, but one very literal and well-known\nprocess is \u201cray tracing\u201d. In its essence, ray tracing models the path light\ntravels between a simulated camera and light source, bouncing rays between\nvirtual objects in to \u201cilluminate\u201d the scene.\n\n## Ray Tracing\n\nRay tracing takes many shortcuts in the process to render an image in the name\nof performance. For example: ray tracing traverses the path from the light\nsource to the camera in reverse (though there are exceptions), with the idea\nbeing that the vast majority of rays emitted from the light source never make\nit to the camera. By instead starting the ray at the camera\u2019s perspective and\ntraveling backwards, we know that the ray already \u201cmade it\u201d to the camera.\nThis is physically sound under our current model of the universe, as we assume\nthe laws governing light transport are symmetric with respect to the direction\nof time (a.k.a. T-symmetry).\n\nA simple scene being rendered via ray tracing. Each \"pixel\" on the left-hand\ngrid has its color determined by the object it intersects in the scene, and\nhow much light that object receives from the light source. Source: wikimedia\n\nAnother major shortcut that\u2019s typically taken, but is far less physically\nsound, involves treating each light ray as a particle carrying the RGB vector\ncorresponding to its \u201ccolor\u201d, ignoring any wave-like properties light has.\nRather remarkably, this shortcut produces physically-realistic scenes in a\nwide range of scenarios. The reason why this works so well has quite a long\nexplanation, but is in large part due to how our eyes work: simply put, we\nhave three types of color-sensitive cells in our eyes, sensitive to short\n(blue), medium (green), and long (red) wavelengths of light.\n\nThis diagram shows the sensitivity of the SML (short, medium, long) cone cells\nas a function of light's wavelength. The color we see is a result of how much\nthe incoming light stimulates each of those cone cells. Source: wikimedia\n\nHowever, our eyes don\u2019t just receive red, green, and blue light (unless\nthey\u2019re very close to a computer screen or wearing a VR headset); our eyes are\nreceiving a continuous spectrum of light, and converting that into the\nperception of color.\n\n## Seeing the Spectrum\n\nThe full visible spectrum of single-wavelength colors. Source: wikimedia\n\nColor that we see in the physical world is rarely made of just a single\nwavelength, instead, it\u2019s a collection of many wavelengths forming what we\ncall an SPD (spectral power distribution). For every color we can see, there\nare countless spectral power distributions that could correspond to that\ncolor. The fact that a single color can have many different SPDs is known as\nmetamerism, and is a fascinating concept in its own right. For example: yellow\nhas a corresponding wavelength as seen in the above visible spectrum at around\n580nm, but it can also be reproduced with a mix of red and green light (as it\nmust be, given that the diagram itself is being rendered using only RGB values\non a computer monitor).\n\nThe SPD for daylight, extending past the visible spectrum into ultraviolet and\ninfrared. It's no coincidence that the intensity peaks around the part of the\nspectrum visible to us, as this is clearly an evolutionary adaptation to our\nenvironment. Source: wikimedia\n\nAnother consequence of how our eyes see color from a distribution of\nwavelengths is the existence of non-spectral colors, like magenta. These\ncolors can\u2019t be reproduced by any single wavelength, and require multiple\nwavelengths of light to reproduce. Notice there is no magenta in that spectrum\nabove, as it requires a mix of high and low-wavelength light (blue and red) to\nbe seen.\n\nWhat\u2019s most remarkable about this conversion from SPD to color is that it is\npossible to do so purely mathematically. The fact that such a link exists,\nbridging physics, physiology, and our subjective experience is honestly\nsurreal. What\u2019s even more remarkable is that this quantitative link was made\nback in 1931 with the creation of the CIE 1931 color spaces, at a time before\nthe Turing machine (let alone a computer) was even invented, and access to\nelectricity hadn\u2019t even made it across America.\n\nIf you want to implement this conversion yourself, I recommend reading this\nchapter of Physically Based Rendering, which gives a very thorough treatment\nof the subject.\n\n## When Wavelength Matters\n\nAs mentioned above, when ray tracing it\u2019s often unnecessary to account for the\nfull spectrum of light, let alone each ray\u2019s \u201cwavelength\u201d. However, there are\ncases where a ray\u2019s wave-like properties directly influence its path through a\nscene, and as a result effects the colors we see. The classic example is\ndispersion, when the path light takes is \u201cbent\u201d according to its wavelength.\n\nAn optical prism showing white light being split into its component\nfrequencies via dispersion. Source: wikimedia\n\nAnother fascinating example you\u2019ve probably seen in person is called \u201cthin\nfilm interference\u201d, and it explains the rainbow-like patterns visible on soap\nbubbles. These patterns are formed by the constructive and destructive\ninterference patterns generated by the reflections off of the upper and lower\nlayers of the soap boundary. Since this doesn\u2019t involve splitting the spectrum\ninto single wavelengths, but rather increasing or decreasing the contribution\nof parts of the spectrum the colors generated are often non-spectral colors,\nlike turquoises, teals, magentas, browns...\n\nDestructive interference happening at a thin film boundary (in blue). The two\nincoming rays (labeled A and B) have the same wavelength, yet opposite phase\nafter reflection due to traveling different distances before overlapping. The\nresulting ray (labeled C) is attenuated as a result. Source: wikimedia\n\n## Spectral Ray Tracing and Computer Art\n\nTo summarize, spectral ray tracing is just ray tracing that takes into account\nthe wave-like properties of light. Instead of viewing the world through the\nlens of RGB color, spectral ray tracing generates spectral power distributions\nfor every pixel in the scene, leveraging the wavelength and phase of rays to\nbetter estimate color in scenarios where this extra information matters.\n\nI\u2019ve been curious what happens when some of the laws dictating how light moves\nare deliberately broken, building cameras out of code in a universe just a\nlittle unlike our own. Working with the richness of the full spectrum of\nlight, spectral ray tracing has allowed me to break the rules governing light\ntransport in otherworldly ways.\n\nHere are a few selected outputs from the past year. All of these were\ngenerated using my hand-written, no-dependency JavaScript and GLSL spectral\nray tracer.\n\nLight Doesn't Bend That Way #1, 2023\n\nThis was generated by making the angle of reflection a function of wavelength.\nNote this process only seems to generate spectral colors.\n\nUntitled, 2023\n\nAn WIP piece made for the series FULL_SPECTRUM, released in Tokyo 2023.\n\nUntitled, 2023\n\nPutting these pieces into motion has been my favorite part of this system so\nfar.\n\nUntitled, 2024\n\nI hope this has given you a little more insight into my practice and the works\nI\u2019ve created. I hope to keep exploring this medium, and if this excites you,\nyou can find more pieces like these on my twitter or instagram.\n\n", "frontpage": true}
