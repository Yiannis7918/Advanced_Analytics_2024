{"aid": "39967055", "title": "\"App Store Levels Playing Field and Supports Developers\"", "url": "https://boehs.org/node/private-apis", "domain": "boehs.org", "votes": 1, "user": "f_devd", "posted_at": "2024-04-08 07:16:06", "comments": 0, "source_title": "\"App Store Levels Playing Field and Supports Developers\"", "source_text": "\"App Store Levels Playing Field and Supports Developers\"\n\nEvan Boehs website Mastodon PGP Key email United States is never gonna tell a\nlie and hurt you\n\n# \"App Store Levels Playing Field and Supports Developers\"\n\nin\n\n    blog\ntags\n\n    \n\n  * apple\n  * app\n  * development\n  * operating systems\n\ndate\n\n    1/26/2024\n\nIn 2008, John Gruber published a blog post titled Private. The post, published\nless than 6 months after the App Store\u2019s release, detailed a number of\nrejections from the store on the grounds of private API usage. Private APIs\nare APIs that can be called from iOS apps, but developers are not allowed to\nuse them. These APIs, then, exist souly for use within Apple\u2019s own apps.\nGruber\u2019s post was seemingly written in a different political climate than that\nof 2024. His post, and the posts he made reference to, seem convinced that\nApple reserves the right to treat developers exactly as they wish. An Ars\narticle, written a month earlier, states:\n\n> Apple is a private company. It can do whatever it wants to stock its App\n> Store shelves however it pleases. There\u2019s nothing that says the company must\n> treat Joe Q. Developer the same way it treats Moneybags J. Google.\n\nThis quote, though Erica Saudun could not have known it at the time, aptly\ndescribes the same arguments being lobed in defense of Apple to this very day.\nIn this article, I will not pass my own judgements on the validity of these\narguments. Instead, I wish to present a holistic view of the situation, one\nfrom the perspective of an indiependent developer of apps for Apple platforms.\n\nThe range of information accessible through private APIs is large and ever\ngrowing \u2013 from certain cosmetic elements to the private information of iOS\nusers. Initially, the restrictions on private APIs were enforced through\nsimple visual tests. That changed when, in 2015, SourceDNA revealed that some\napps were using private APIs to read the email address & other information of\niOS users without their consent. After this revelation, SourceDNA was acquired\nby Apple. Their static analysis technology was integrated into App Store\nreview, and Apple began increasing the degree of access controls on these\nAPIs. Still, in 2024, private API usage is still rampant, developers have\nsimply learned how to fool static analysis. Below is a snippet of MIT licensed\ncode by Andrew Zheng, a prolific iOS developer:\n\n    \n    \n    let filterClassStringEncoded = \"Q0FGaWx0ZXI=\" let filterClassString: String = { if let data = Data(base64Encoded: filterClassStringEncoded), let string = String(data: data, encoding: .utf8) { return string } return \"\" }() // snip // guard let filterClass = NSClassFromString(filterClassString) as AnyObject as? NSObjectProtocol else { return }\n\nThis code obfuscates the name of the Private API being called by encoding it\nvia base64, and decoding it at runtime. It\u2019s safe to say that, as long as\nprivate APIs exist, developers will find a way to use them. What private API\nis this code using? The API in question, CAFilter implements the variadic blur\nthat is visible in first party iOS apps, like Apple Maps.\n\nDespite arming developers with sanctioned design tools, Apple always likes to\nkeep their proudest design elements exclusive to their own apps. There is, of\ncourse, a case to be made in Apple\u2019s favour here. Is Linear, for instance,\nrequired to open source their design system? Fine. Keep the blur to yourself,\nbut what about system APIs?\n\nI am working on an app for rating music. It would be convenient to offer a way\nto quickly open the currently playing album in my app, agonistic of the media\nplayer in use. A quick google search yields this answer on StackOverflow. For\npostarity, the code is copied below:\n\nWith modification, the code above correctly provides the necessary information\nfor my app\u2019s functionality. Despite this, my app will never run it. Users will\nalways need to search the album they wish to rate. Users will always have a\npoor experience, despite the fact that just 10 lines of code can fix it. That\nis because this code, of course, makes use of private APIs. I could attempt to\nobfuscate my usage and pray, or I could settle for a poor user experience.\nBecause a rejection would offer me no recourse, I choose the latter.\n\nIt\u2019s not just APIs that only Apple gets to play with. In addition, in\nSpotify\u2019s 2019 Play Fair campaign, Spotify alleges that Apple has placed\nitself at an unfair advantage, as they do not need to offer 30% of their\nrevenue to themselves. By competing in Spotify\u2019s court, while forcing Spotify\nto conform to their rules, Apple subjects Spotify to a playing field that is\ncertainly not level. Level playing field... Where have I heard that before?\n\nOh. It might have been 2021\u2019s Epic v. Apple lawsuit, where Epic made similar\ncomplaints about the 30% tax. Epic argues that this tax is unfair, as they are\nforced into Apple\u2019s distribution platform because they cannot distribute\nFortnite through external sources.\n\nOne year before this suit, as part of an antitrust hearing on the app store,\nPhil Schiller commented to reuters that:\n\n> One of the things we came up with is, we\u2019re going to treat all apps in the\n> App Store the same - one set of rules for everybody, no special deals, no\n> special terms, no special code, everything applies to all developers the\n> same.\n\nI would be remiss if I did not call attention to the deliberate language here.\nNote that Phil did not state they intend to treat all apps the same, he said\nthey intend to treat all apps in the app store the same. Despite the fact most\nof Apple\u2019s apps are available in the store, I suspect the fact that they are\npreinstalled on user\u2019s devices carves out a convenient exception. Then again,\nPhil is a lier. That statement, this idea that they treat 3rd party apps the\nsame, is bullshit.\n\nIn 2008, an update to the Google Mobile app added the ability to lift your\nphone to your ear and speak to search. The API to add this capability is\nprivate. In John\u2019s article on the matter, in 2008 mind you, he states\n\n> Third-party iPhone development is purportedly a level playing field. If\n> regular developers are forced to play by the rules, but Google is allowed to\n> use private APIs just because they\u2019re Google, the system is rigged.\n\nRigged indeed.\n\nIn 2015, around the same time it came out that 250 Chinese apps were using\nprivate APIs to read user emails and serial numbers, it was discovered that\nUber was using the same IOKit private API to fingerprint their users. (primary\nsource)\n\nThose Chinese apps were removed from the store. Kalanick went to Apple HQ\n\u201csporting his favorite pair of bright red sneakers and hot-pink socks\u201d, where\nTim Cook asked him \u201cin his calm, Southern tone\u201d to stop.\n\nGiven Uber\u2019s history of bending Apple\u2019s rules, you might be shocked to learn\nthat in 2017, Uber was granted the com.Apple.private.allow-explicit-graphics-\npriority entitlement. This entitlement gives Uber\u2019s app direct access to the\nIOMobileFramebuffer. This means that, for some amount of time, Uber had the\nability to directly read and write to the iPhone\u2019s framebuffer, including in\nthe background, meaning that they could record the screen at any moment. Uber\nclaimed this was required to render maps on the Apple Watch at the time.\nSpotify complains that Apple wasn\u2019t even letting them make a watch app.\n\nRemember Phil\u2019s comment about a level playing field? A little less than a year\nlater, the Epic v. Apple suit gave us some juicy documents. In a presentation\nmarked Apple Confidential\u2013Internal Use Only, we learn that, in an effort to\nretain Netflix, Apple built Netflix custom APIs to manage billing within their\napp, as opposed to going though the app store. They also offered to build\nadditional features based on Netflix\u2019s requests. Similar APIs were offered to\nHulu.\n\nZoom\u2019s iPad app was granted the com.Apple.developer.avfoundation.multitasking-\ncamera-access entitlement, which is not documented. This entitlement allows\nZoom to... you guessed it... use the camera while multitasking. A developer of\na 3rd party Zoom app was curious how Zoom was able to do this. Well, the\nanswer is preferential treatment.\n\nRecently, when Elon Musk rebranded Twitter to X, he faced difficulty on the\niOS app. As Taylor Lorenz notes, the App Store disallows single letter app\nnames. Why then, was Twitter\u2019s name eventually updated to X? For some reason,\nApple caved to Musk, carving an exception in the App Store policy out for him.\n\nWhy then, in the 2020 antitrust hearing, did Tim Cook say under oath that\n\n> We treat every developer the same. We have open and transparent rules, it\u2019s\n> a rigorous process. Because we care so deeply about privacy and security and\n> quality we do look at every app before it goes on. But those rules apply\n> evenly to everyone.\n\nIf Cook cares so much about privacy, why did Uber get the framebuffer? If all\napps play under the same rules, why is Twitter now named X? Is it possible?\nDid Tim Cook commit a felony? All signs point to yes.\n\nYesterday, in a blog post laden with resentment, Apple Inc. announced the\nmeasures they are taking to comply with the European Union\u2019s Digital Markets\nAct. The Digital Market Act (DMA) is a piece of legislation aimed at big tech\noperating in EU jurisdiction. The intention of the bill is to provide room for\nbusinesses to operate and compete in fields dominated by these companies.\n\nTo comply, Apple has announced new terms that can be opted into. These new\nterms, possibly in violation of the DMA, grant additional freedoms to\ndevelopers, including a reduced commission. Problematically, however, opting\ninto these new terms means after 1 million users, each user will cost the\ndeveloper 50 cents a year, making the new terms effectively useless. One pro\nof these terms, however, is the interoperability request form. If Apple\nfaithfully adheres to said form, it\u2019s possible their lie of a level playing\nfield might just come true, at least for developers in the EU. That\u2019s a big\nif, however. I somehow doubt, given Apple\u2019s 17 year long history of shafting\ndevelopers, that they will. But they might, I suppose. They might. Keep\nhoping.\n\n## \ud83c\udf31 What links here?\n\n  * Regarding app development for the Apple platform\n\nEvan Boehs /node/private-apis\n\n    \n    \n    _ /`\\ ( /`\\ (_) /`\\ // \\\\ )) // \\\\ // \\\\ // \\\\ /`\\_____|| // \\\\ // \\\\ // \\\\ // / \\ /`\\ // \\\\ // \\\\ // \\\\ ///_________\\// \\\\// \\\\ // \\\\ // \\\\ // |-[+]---| // \\\\// \\\\ // \\\\ // \\\\ // |-------| // \\\\// \\\\ _____,....-----'------'-----''-------'---'----'--\n\n", "frontpage": false}
