{"aid": "40031054", "title": "The unwritten laws of engineering at Stedi", "url": "https://www.stedi.com/blog/the-unwritten-laws-of-engineering-at-stedi", "domain": "stedi.com", "votes": 1, "user": "mooreds", "posted_at": "2024-04-14 13:55:19", "comments": 0, "source_title": "The unwritten laws of engineering at Stedi | Stedi - Modern EDI", "source_text": "The unwritten laws of engineering at Stedi | Stedi - Modern EDI\n\nBlog\n\nApr 4, 2024\n\n# The unwritten laws of engineering at Stedi\n\nEditor\u2019s note: Every company has a way of working. I wrote this document\nseveral years ago when we were still figuring out our way of working \u2013 \u201chow we\ndo things here\u201d \u2013 and were spending a lot of time aligning on decisions of all\nsizes. We talked about it a lot at the time, but we rarely have to reference\nit now \u2013 as Alfred North Whitehead said, \"Civilization advances by extending\nthe number of important operations which we can perform without thinking of\nthem.\"\n\nThe most difficult part of hiring for any company is finding people who are\nphilosophically aligned with a certain way of working. We are hiring across\nmultiple engineering, product, and design roles right now, so we wanted to\npost this publicly to give a sense of what it\u2019s like to work here. If this\nresonates with you, we would love to hear from you. \u2013 Zack Kanter\n\n\u2014\u2014\n\nThis document captures the cornerstones of Stedi\u2019s engineering culture. As a\nresult of following the framework, product development may sometimes come to a\nscreeching halt. The work itself may be tedious and frustrating. Progress may\ntake many multiples of the time it would take using other methods.\n\nThis impact is short term, immaterial, and ultimately irrelevant. The\nframework aligns with our long-term ambitions; nothing is more important than\nkeeping a high bar across these dimensions.\n\nThat's the difference between principles and preferences: principles are what\nyou do regardless of the cost \u2013 everything else is just a preference.\n\n## Key tenets\n\n  * Minimize long-term operational toil.\n\n  * Eliminate waste.\n\n## Practices\n\nThe following practices represent the bare minimum expectation of all teams:\n\n  * Security is job zero.\n\n    * There is nothing more important than securing our systems.\n\n  * Prioritize on-call.\n\n    * Implement thorough, pragmatic alerting and alarming.\n\n    * The baseline for alerts and alarms is expected to be zero.\n\n    * Prioritize work to mitigate the causes of pages above all else except for security.\n\n  * Define all infrastructure as code.\n\n    * Define all production infrastructure as code, from build and deployment pipelines to operational dashboards.\n\n    * Automate dependency updates and deployments to production.\n\n    * Keep all dependencies up to date across all non-archived repositories.\n\n    * Dependencies can be updated individually or in batches, in real-time or subject to some delay (for security or convenience), but the process must be automated.\n\n  * Investigate service metrics, build times, and infrastructure costs.\n\n    * Review service metrics, build times, and infrastructure costs (both per-request and total spend).\n\n    * The goal is not to strictly minimize these metrics via unbounded investment that has diminishing returns, but rather to surface flaws in configuration or implementation that are causing unnecessary waste.\n\n  * Pull pain forward.\n\n    * When a service\u2019s future is assured (that is, when it reaches or will soon reach GA), pull forward technical problems that get harder over time (e.g., backwards-incompatible changes; major architectural shortcomings).\n\n### Practices for practices\n\n\u2018Best effort\u2019 is ineffective \u2013 if \u2018best effort\u2019 were all it took, everything\nwould be in place already!\n\nInstead, implement mechanisms for continuous improvement \u2013 generally:\npreventative controls and/or detective controls wherever possible, with a root\ncause analysis process for any exceptions.\n\n## Component selection\n\nIn the fight against entropy, we use the following prioritization framework\nfor component types:\n\n  1. Managed, \u2018serverless\u2019 primitives.\n\n     * Use managed, serverless (defined as \u2018usage-based pricing with little to no capacity planning required\u2019) primitives wherever possible, even at the cost of functionality.\n\n     * Within those managed service options, use the highest-order primitive that fits a given use case.\n\n  2. Open source libraries and open standards.\n\n     * Where a suitable managed service cannot be found, use open source libraries and adopt open standards wherever possible.\n\n  3. Our own code and formats.\n\n     * When all other options have been exhausted, build it ourselves.\n\n### Selection framework for component sources\n\n  * Optimize for a cohesive set of components rather than selecting best-in-breed options, even when more compelling or popular alternatives exist.\n\n  * When choosing a set of components, invest in continuously-compounding ecosystems built by high-velocity organizations who are philosophically aligned with Stedi. Current ecosystems include AWS (infrastructure) and GitHub (source control, build, and deployment).\n\n  * Introduce new ecosystems at a clear boundary (e.g., GitHub for source control, build, and deployment of code; AWS for running the code), rather than in the middle of a system. For example, we would not use a database hosted at PlanetScale in an otherwise all-AWS backend.\n\n## Refactors\n\nWe often identify more suitable ways of building something (that is, more\nsuitable according to the framework listed above) after we\u2019ve begun, or after\nwe\u2019ve finished. For example, we might start with writing our own code, only to\nlater realize that what we\u2019ve written is similar to some open source library\ninstead.\n\nWhen the refactor:\n\n  * will get easier over time, we\u2019ll wait until it gets easier.\n\n  * will get harder over time, we'll do it without delay.\n\nGenerally, the framework when considering a refactor is to ask: if we were\nstarting again today knowing everything we know now, would we build it this\nnew way that we\u2019re considering? If yes, will it get easier or harder over\ntime? If you\u2019d build it the new way and it will get harder over time, do it\nnow.\n\nThat said, large-scale lateral migrations (lifting-and-shifting that results\nin a functionally-equivalent customer experience) are extremely costly. We try\nto avoid these when possible.\n\n## Communication\n\n### Discussing tradeoffs\n\nLike all approaches to building software, Stedi\u2019s approach comes with many\ntradeoffs \u2013 including, but certainly not limited to:\n\n  * Managed services, open source libraries, and open standards often have steep learning curves and poor documentation; they are often inflexible and lacking functionality.\n\n  * Managed services are harder to test, slower to iterate against, and harder to diagnose; they are expensive and have unpredictable roadmaps.\n\n  * Maintaining infrastructure as code is tedious and painful.\n\n  * Automated dependencies updates are distracting and error-prone.\n\nThese same tradeoffs will show up again and again; enumerating them at each\njuncture is distracting and demoralizing. Instead, focus discussions on\nmitigation. For example:\n\n  * \u201cGiven that this managed service will be hard to unit test. Let\u2019s come up with a plan for how we can ship with confidence.\u201d\n\n  * \u201cSince the cloud deployment feedback loop is slower than local development, we should invest in tooling to speed this up.\u201d\n\n  * \u201cThe documentation in this AWS library is sparse and outdated, so let\u2019s make sure we contribute back early and often before we lose the context.\u201d\n\n  * \u201cThis AWS service doesn\u2019t support this feature we\u2019ll want down the line, so let\u2019s schedule a meeting with the AWS PM to see if it\u2019s on their roadmap before building it ourselves.\u201d\n\n### Discussing roadblocks\n\nTechnology evolves rapidly. All features and functionality we use today did\nnot exist at one point; features and functionality that don\u2019t exist today\nmight exist tomorrow. Most importantly, features and functionality you think\ndon\u2019t exist today might already exist.\n\nWhen hitting a roadblock or an apparent dead end \u2013 for example, when it\nappears that a certain managed service or library isn\u2019t able to do something \u2013\ndraw a distinction between when you\u2019ve definitively determined that something\nis not supported, vs. when you\u2019ve exhausted ideas that you\u2019ve come up with but\nhave not definitively proven it isn\u2019t possible.\n\nIn other words: \u2018Absence of evidence\u2019 is not \u2018evidence of absence.\u2019 False\ndeterminations of impossibilities are extremely costly to us, particularly\nbecause the false determination in one corner of Stedi spreads to all of\nStedi.\n\nSomething is definitive when you can provide a link to source documentation\nconfirming that it isn\u2019t possible.\n\n  * Acceptable: \u201cA Lambda can\u2019t run for more than 15 minutes \u2013 see documentation: Function timeout \u2013 900 seconds (15 minutes).\u201d\n\n  * Unacceptable: \u201cX-ray doesn\u2019t support cross-account traces [no citation].\u201d\n\nWhen you have tried a number of things but haven\u2019t been able to make it work,\nthat is not definitive.\n\n  * Acceptable: \u201cI haven\u2019t been able to lock down this AWS resource via a tenant-scoped role. Here\u2019s what I\u2019ve tried...\u201d\n\n  * Unacceptable: \u201cTenant scoped IAM access won\u2019t work for this.\u201d\n\nIf you have tried a number of things and haven\u2019t been able to make something\nwork, post somewhere: \u201cI haven\u2019t been able to make this work, and I\u2019m running\nout of ideas/time. Here\u2019s what I\u2019ve tried...\u201d The fastest way to lose\ncredibility here is to falsely and authoritatively proclaim that something\nisn\u2019t possible without having done the work to back it up.\n\nOn the flip side, if you see something pronounced as impossible without the\nsupporting documentation, ask for the documentation. If you see this happening\nand fail to ask for the work to back it up, you have lowered our bar for\ntechnical rigor.\n\n### Written communication\n\nOur standard of \u201cWrite important things down\u201d doesn\u2019t mean \u201crecord actions\nalready taken.\u201d\n\nThe most important function of writing is as a tool for thinking. It follows\nthat writing should almost always precede action, particularly in software\ndevelopment.\n\nPaul Graham explained this nicely in an essay that I\u2019ve pulled passages from\nbelow:\n\n\u201cWriting about something, even something you know well, usually shows you that\nyou didn't know it as well as you thought. Putting ideas into words is a\nsevere test.\n\nOnce you publish something, the convention is that whatever you wrote was what\nyou thought before you wrote it. These were your ideas, and now you've\nexpressed them. But you know this isn't true.\n\nIt's not just having to commit your ideas to specific words that makes writing\nso exacting. The real test is reading what you've written. You have to pretend\nto be a neutral reader who knows nothing of what's in your head, only what you\nwrote.\n\nThere may exist people whose thoughts are so perfectly formed that they just\nflow straight into words. But I've never known anyone who could do this, and\nif I met someone who said they could, it would seem evidence of their\nlimitations rather than their ability. Indeed, this is a trope in movies: the\nguy who claims to have a plan for doing some difficult thing, and who when\nquestioned further, taps his head and says \"It's all up here.\" Everyone\nwatching the movie knows what that means. At best the plan is vague and\nincomplete. Very likely there's some undiscovered flaw that invalidates it\ncompletely.\n\nIn precisely defined domains it's possible to form complete ideas in your\nhead. People can play chess in their heads, for example. And mathematicians\ncan do some amount of math in their heads, though they don't seem to feel sure\nof a proof over a certain length till they write it down. But this only seems\npossible with ideas you can express in a formal language.\n\nThe reason I've spent so long establishing this rather obvious point is that\nit leads to another that many people will find shocking. If writing down your\nideas always makes them more precise and more complete, then no one who hasn't\nwritten about a topic has fully formed ideas about it. And someone who never\nwrites has no fully formed ideas about anything nontrivial.\n\nIt feels to them as if they do, especially if they're not in the habit of\ncritically examining their own thinking. Ideas can feel complete. It's only\nwhen you try to put them into words that you discover they're not. So if you\nnever subject your ideas to that test, you'll not only never have fully formed\nideas, but also never realize it.\n\nPutting ideas into words is certainly no guarantee that they'll be right. Far\nfrom it. But though it's not a sufficient condition, it is a necessary one.\u201d\n\nWriting a doc is not a perfunctory gesture, and asking someone for a doc on\nsomething is not a punishment or a mechanism for control. Writing a doc is a\nway of:\n\n  * surfacing requirements and assumptions, and\n\n  * driving clarity of reasoning stemming from those requirements and assumptions.\n\nWithout this step, our software has little hope of delivering the results we\nwant over the long term.\n\nNote that a doc doesn\u2019t necessarily have to take the form of prose \u2013 in some\ncases, the right format for a doc could be a proposed API spec with bullet\npoint lists of constraints, principles, or requirements. The goal of a doc is\nto reify your thinking and to share it with others.\n\nAs a final thought, not everyone has to write docs here. Some people just want\nto execute, and there is plenty of room for that, too \u2013 but if you just want\nto execute, you\u2019ll be executing on the plan, architecture, or implementation\ndescribed in someone else\u2019s doc. Our domain is too complex, and our ambitions\nare too large to build software willy-nilly.\n\nSHARE\n\nTwitter\n\nLinkedIn\n\nPREVIOUS\n\n## Stedi's drop-in replacements for critical Change Healthcare APIs\n\nNEXT\n\n## We discovered an AWS access vulnerability\n\nSystem status\n\n+1 332-378-5040\n\nAbout\n\nEDI Platform\n\nPricing\n\nDocumentation\n\nCustomers\n\nCompany\n\nCareers\n\nContact\n\nBlog\n\nChangelog\n\nResources\n\nEDI Reference\n\nEDI Inspector\n\nNetwork\n\nLegal\n\nService Terms\n\nPrivacy Notice\n\nBacked by\n\n228 Park Ave S, PMB 58460, New York, NY 10003, USA\n\nStedi is a registered trademark of Stedi, Inc. All names, logos, and brands of\nthird parties listed on our site are trademarks of their respective owners\n(including \u201cX12\u201d, which is a trademark of X12 Incorporated). Stedi, Inc. and\nits products and services are not endorsed by, sponsored by, or affiliated\nwith these third parties. Our use of these names, logos, and brands is for\nidentification purposes only, and does not imply any such endorsement,\nsponsorship, or affiliation.\n\n", "frontpage": false}
