{"aid": "40085421", "title": "C++ library for composing modular firmware at compile-time", "url": "https://github.com/intel/compile-time-init-build", "domain": "github.com/intel", "votes": 1, "user": "PaulHoule", "posted_at": "2024-04-19 11:22:56", "comments": 0, "source_title": "GitHub - intel/compile-time-init-build: C++ library for composing modular firmware at compile-time.", "source_text": "GitHub - intel/compile-time-init-build: C++ library for composing modular\nfirmware at compile-time.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nintel / compile-time-init-build Public\n\n  * Notifications\n  * Fork 44\n  * Star 397\n\nC++ library for composing modular firmware at compile-time.\n\nintel.github.io/compile-time-init-build/\n\n### License\n\nBSL-1.0 license\n\n397 stars 44 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# intel/compile-time-init-build\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n6 Branches\n\n16 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nlukevalentytests and fixes for uint8_t lookupsApr 18, 20248b7d5ba \u00b7 Apr 18,\n2024Apr 18, 2024\n\n## History\n\n677 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| \ud83d\udc77 Add linting, some type hints for gen_str_catalog.py| Apr 15, 2024  \n  \n### benchmark\n\n|\n\n### benchmark\n\n| \ud83c\udfa8 Use profile-compilation library for benchmark| Nov 13, 2023  \n  \n### cmake\n\n|\n\n### cmake\n\n| \u2728 Allow string catalog generation to use stable IDs| Mar 29, 2024  \n  \n### docs\n\n|\n\n### docs\n\n| \u2728 Add CIB_LOG_VERSION| Apr 8, 2024  \n  \n### examples\n\n|\n\n### examples\n\n| \ud83c\udfa8 Remove clumsy decltyping of string constants| Nov 7, 2023  \n  \n### include\n\n|\n\n### include\n\n| tests and fixes for uint8_t lookups| Apr 18, 2024  \n  \n### test\n\n|\n\n### test\n\n| tests and fixes for uint8_t lookups| Apr 18, 2024  \n  \n### tools\n\n|\n\n### tools\n\n| \ud83d\udc77 Add linting, some type hints for gen_str_catalog.py| Apr 15, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| \ud83d\udc77 Use repo infrastructure| Sep 5, 2023  \n  \n### CMakeLists.txt\n\n|\n\n### CMakeLists.txt\n\n| use stdx bit_mask and bitset for pseudo_pext algorithm| Apr 18, 2024  \n  \n### CODE_OF_CONDUCT.md\n\n|\n\n### CODE_OF_CONDUCT.md\n\n| \ud83d\udcc4 Update contribution guidelines and code of conduct| Aug 31, 2023  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| \ud83d\udcc4 Update contribution guidelines and code of conduct| Aug 31, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| initial bare-bones commit of cib| Apr 4, 2022  \n  \n### README.md\n\n|\n\n### README.md\n\n| Remove mentioning v1.0.0....it's not recommended to use| Feb 4, 2024  \n  \n### USER_GUIDE.md\n\n|\n\n### USER_GUIDE.md\n\n| Update USER_GUIDE.md (#42)| Apr 23, 2022  \n  \n### security.md\n\n|\n\n### security.md\n\n| \ud83d\udd12 Add security.md| Jan 11, 2024  \n  \n## Repository files navigation\n\n# cib - Compile-time Initialization and Build\n\ncib is a C++ header-only library for building embedded firmware with reusable\ncomponents. It implements the compile-time initialization and build pattern.\nInstead of initializing components and registering callbacks at runtime, this\nprocess is executed at compile-time using constexpr or consteval functions.\n\nFirmware using cib is implemented as a collection of components. Each\ncomponent provides services and features to the build. Component features\nextend and provide new functionality to services.\n\n## Sub-projects\n\nThere are multiple sub-projects contained within cib. Some of them are used to\nimplement cib and others extend cib.\n\n  * Services\n\n    * Flow - cib service used to compose sequences of dependent operations from multiple components.\n    * Callback - cib service used to implement simple callback/listener pattern.\n  * Support\n\n    * string_constant - Compile-time string library with support for formatting similar to fmt/python format specifiers.\n    * log (wip) - Logging library.\n\n## Compiler/Standard support\n\nThe main branch of cib currently uses C++20 and is tested with:\n\n  * Clang 14 thru 17\n  * GCC 12 thru 13\n\nAn older version of cib that uses C++17 is tagged at v1.7.0. It is tested\nwith:\n\n  * Clang 9 thru 15\n  * GCC 9 thru 12\n\nFor the older version see this repo at that tag.\n\n## Installing / Getting started\n\nThe recommended way to use cib is with CMake and CPM. With this method,add the\nfollowing to your CMakeLists.txt:\n\n    \n    \n    CPMAddPackage(\"gh:intel/compile-time-init-build#047aab6) target_link_libraries(your_target PRIVATE cib)\n\nWhere 047aab6 is the git hash (or tag, or branch) that you want to use.\n\ncib is also released as a single header file as well as the zipped github\nrepo. To get started quickly, download the cib.hpp header from the release\narea:\n\n    \n    \n    wget https://github.com/intel/compile-time-init-build/releases/download/v1.0.0/cib.hpp\n\nAnother option is to include cib as a git submodule in your repo and add the\ncib directory in your CMakeLists.txt file:\n\n    \n    \n    add_subdirectory(extern/compile-time-init-build) target_link_libraries(your_target PRIVATE cib)\n\nWith any of these methods, include the cib.hpp header in your code to use it.\n\n### Hello, world!\n\nSince cib is a library for efficiently building firmware through composition a\nsimple example takes a few more lines than a typical \"Hello, world!\"\n\n    \n    \n    #include <cib/cib.hpp> #include <iostream> struct say_message : public cib::callback_meta<>{}; // the 'core' component exposes the 'say_message' service for others to extend struct core { constexpr static auto config = cib::exports<say_message>; }; // the 'say_hello_world' component extends 'say_message' with its own functionality struct say_hello_world { constexpr static auto config = cib::extend<say_message>([](){ std::cout << \"Hello, world!\" << std::endl; }); }; // the 'hello_world' project composes 'core' and 'say_hello_world' struct hello_world { constexpr static auto config = cib::components<core, say_hello_world>; }; // the nexus instantiates the project cib::nexus<hello_world> nexus{}; int main() { // the fully extended and built services are ready to be used nexus.service<say_message>(); return 0; }\n\nTry out this example live at Compiler Explorer.\n\nA larger and more illustrative example can be found in this repo at\nexamples/hello_world.\n\nFor more details on how to use cib, see the User Guide.\n\n### Building\n\ncib is built with CMake. The single header is built with the release_header\ntarget:\n\n    \n    \n    git clone https://github.com/intel/compile-time-init-build.git cmake -B build cmake --build build -t release_header ls build/include/cib/ | grep cib.hpp\n\nThis combines all the cib header files in the include tree by recursively\nincluding the #include directives and ignoring all other macros.\n\nNOTE: cib uses CPM.cmake to fetch its dependencies. When first running cmake,\nthe dependencies will be downloaded. To avoid re-downloading dependencies when\nreconfiguring cmake, it's recommended to designate a cache directory and set\nthe CPM_SOURCE_CACHE environment variable.\n\nUnit tests are registered with CTest, and will build and run as part of the\nbuilt-in all target.\n\n    \n    \n    cmake -B build cmake --build build\n\nThis will build and run all the unit tests with Catch2 and GTest. To re-run\nthem:\n\n    \n    \n    ctest --test-dir build\n\n## Features\n\n  * Compose modular firmware systems with high-level abstractions\n  * Perform registration of components at compile-time\n\n    * \ud83c\udfce Optimize runtime-performance and memory usage\n    * \ud83e\uddba Catch undefined behavior during initialization\n\nSee the full documentation.\n\n## Contributing\n\nIf you'd like to contribute, please fork the repository and use a feature\nbranch. Pull requests are warmly welcome.\n\nFor more details on contributing, please see CONTRIBUTING.md\n\n## Links\n\n  * Repository: https://github.com/intel/compile-time-init-build/\n  * Issue tracker: https://github.com/intel/compile-time-init-build/issues\n\n    * In case of sensitive bugs like security vulnerabilities, please contact one or more of the project maintainers directly instead of using issue tracker. We value your effort to improve the security and privacy of this project!\n\n## Licensing\n\nThe code in this project is licensed under the BSL-1.0 license. See LICENSE\nfor more details.\n\n## About\n\nC++ library for composing modular firmware at compile-time.\n\nintel.github.io/compile-time-init-build/\n\n### Resources\n\nReadme\n\n### License\n\nBSL-1.0 license\n\n### Code of conduct\n\nCode of conduct\n\n### Security policy\n\nSecurity policy\n\nActivity\n\nCustom properties\n\n### Stars\n\n397 stars\n\n### Watchers\n\n28 watching\n\n### Forks\n\n44 forks\n\nReport repository\n\n## Releases 6\n\nv1.0.0 Latest\n\nJul 26, 2022\n\n\\+ 5 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 15\n\n## Languages\n\n  * C++ 94.9%\n  * Python 3.0%\n  * CMake 2.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
