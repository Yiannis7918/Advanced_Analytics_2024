{"aid": "40077048", "title": "OpenMCT: A web based mission control framework", "url": "https://github.com/nasa/openmct", "domain": "github.com/nasa", "votes": 6, "user": "InitEnabler", "posted_at": "2024-04-18 15:09:13", "comments": 0, "source_title": "GitHub - nasa/openmct: A web based mission control framework.", "source_text": "GitHub - nasa/openmct: A web based mission control framework.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nnasa / openmct Public\n\n  * Notifications\n  * Fork 1.2k\n  * Star 11.3k\n\nA web based mission control framework.\n\nnasa.github.io/openmct/\n\n### License\n\nView license\n\n11.3k stars 1.2k forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# nasa/openmct\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n965 Branches\n\n192 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nozyxrefactor: remove the final .bounds() call (#7695)Apr 17, 20245a06b51 \u00b7 Apr\n17, 2024Apr 17, 2024\n\n## History\n\n7,979 Commits  \n  \n### .circleci\n\n|\n\n### .circleci\n\n| chore: bump @playwright/test to 1.42.1 (#7627)| Mar 21, 2024  \n  \n### .github\n\n|\n\n### .github\n\n| chore(gha): run prcop workflow on milestone (#7647)| Mar 27, 2024  \n  \n### .vscode\n\n|\n\n### .vscode\n\n| fix(#7524): Open in New Tab action from a sub-object in a layout (#7542)|\nMar 11, 2024  \n  \n### .webpack\n\n|\n\n### .webpack\n\n| fix(e2e): specify .nyc_output path as custom config setting (#7658)| Apr 1,\n2024  \n  \n### docs/src\n\n|\n\n### docs/src\n\n| docs: Update release.yml and docs (#7514)| Feb 20, 2024  \n  \n### e2e\n\n|\n\n### e2e\n\n| Handle paste events for images and text properly (#7679)| Apr 16, 2024  \n  \n### example\n\n|\n\n### example\n\n| fix(#7524): Open in New Tab action from a sub-object in a layout (#7542)|\nMar 11, 2024  \n  \n### src\n\n|\n\n### src\n\n| refactor: remove the final .bounds() call (#7695)| Apr 17, 2024  \n  \n### .cspell.json\n\n|\n\n### .cspell.json\n\n| Plot legends expand by default when enabled (#7453)| Feb 7, 2024  \n  \n### .eslintrc.cjs\n\n|\n\n### .eslintrc.cjs\n\n| fix(#7623): Resize ConductorAxis properly (#7624)| Mar 26, 2024  \n  \n### .git-blame-ignore-revs\n\n|\n\n### .git-blame-ignore-revs\n\n| [Flexible Layouts] Flexible Layout styling fixes (#7319)| Jan 4, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| fix(#7623): Resize ConductorAxis properly (#7624)| Mar 26, 2024  \n  \n### .npmignore\n\n|\n\n### .npmignore\n\n| chore: remove type: module, create openmct-e2e subpackage (#7590)| Mar 28,\n2024  \n  \n### .npmrc\n\n|\n\n### .npmrc\n\n| [build] Re-enable package lock (#7584)| Mar 14, 2024  \n  \n### .nvmrc\n\n|\n\n### .nvmrc\n\n| feat(tooling): adds nvm (#6938)| Aug 19, 2023  \n  \n### .prettierignore\n\n|\n\n### .prettierignore\n\n| chore: add prettier (1/3): add packages, configurations, fix lint i...| May\n18, 2023  \n  \n### .prettierrc\n\n|\n\n### .prettierrc\n\n| [CI]Add docker and npm caching (#6748)| Jun 21, 2023  \n  \n### API.md\n\n|\n\n### API.md\n\n| docs: Mission Status and more (#7521)| Mar 26, 2024  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| chore: add prettier (1/3): add packages, configurations, fix lint i...| May\n18, 2023  \n  \n### LICENSE.md\n\n|\n\n### LICENSE.md\n\n| chore: update copyright end year to 2024 (#7364)| Jan 9, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Add CodeQL badge to readme (#6803)| Dec 14, 2023  \n  \n### SECURITY.md\n\n|\n\n### SECURITY.md\n\n| remove reference to LGTM (#7591)| Mar 16, 2024  \n  \n### TESTING.md\n\n|\n\n### TESTING.md\n\n| chore: remove type: module, create openmct-e2e subpackage (#7590)| Mar 28,\n2024  \n  \n### build-docs.sh\n\n|\n\n### build-docs.sh\n\n| chore: update copyright end year to 2024 (#7364)| Jan 9, 2024  \n  \n### codecov.yml\n\n|\n\n### codecov.yml\n\n| chore: add prettier (2/3): apply formatting, re-enable lint ci step (...|\nMay 18, 2023  \n  \n### copyright-notice.html\n\n|\n\n### copyright-notice.html\n\n| chore: update copyright end year to 2024 (#7364)| Jan 9, 2024  \n  \n### copyright-notice.js\n\n|\n\n### copyright-notice.js\n\n| chore: update copyright end year to 2024 (#7364)| Jan 9, 2024  \n  \n### index-test.cjs\n\n|\n\n### index-test.cjs\n\n| refactor: migrate to ESM (#7331)| Jan 2, 2024  \n  \n### index.html\n\n|\n\n### index.html\n\n| fix(#7524): Open in New Tab action from a sub-object in a layout (#7542)|\nMar 11, 2024  \n  \n### karma.conf.cjs\n\n|\n\n### karma.conf.cjs\n\n| chore: remove type: module, create openmct-e2e subpackage (#7590)| Mar 28,\n2024  \n  \n### openmct.js\n\n|\n\n### openmct.js\n\n| docs: Mission Status and more (#7521)| Mar 26, 2024  \n  \n### package-lock.json\n\n|\n\n### package-lock.json\n\n| chore: remove type: module, create openmct-e2e subpackage (#7590)| Mar 28,\n2024  \n  \n### package.json\n\n|\n\n### package.json\n\n| chore: remove type: module, create openmct-e2e subpackage (#7590)| Mar 28,\n2024  \n  \n### tsconfig.json\n\n|\n\n### tsconfig.json\n\n| chore: remove type: module, create openmct-e2e subpackage (#7590)| Mar 28,\n2024  \n  \n## Repository files navigation\n\n# Open MCT\n\nOpen MCT (Open Mission Control Technologies) is a next-generation mission\ncontrol framework for visualization of data on desktop and mobile devices. It\nis developed at NASA's Ames Research Center, and is being used by NASA for\ndata analysis of spacecraft missions, as well as planning and operation of\nexperimental rover systems. As a generalizable and open source framework, Open\nMCT could be used as the basis for building applications for planning,\noperation, and analysis of any systems producing telemetry data.\n\nNote\n\nPlease visit our Official Site and Getting Started Guide\n\nOnce you've created something amazing with Open MCT, showcase your work in our\nGitHub Discussions Show and Tell section. We love seeing unique and wonderful\nimplementations of Open MCT!\n\n## Building and Running Open MCT Locally\n\nBuilding and running Open MCT in your local dev environment is very easy. Be\nsure you have Git and Node.js installed, then follow the directions below.\nNeed additional information? Check out the Getting Started page on our\nwebsite. (These instructions assume you are installing as a non-root user;\ndevelopers have reported issues running these steps with root privileges.)\n\n  1. Clone the source code:\n\n    \n    \n    git clone https://github.com/nasa/openmct.git\n\n  2. (Optional) Install the correct node version using nvm:\n\n    \n    \n    nvm install\n\n  3. Install development dependencies (Note: Check the package.json engine for our tested and supported node versions):\n\n    \n    \n    npm install\n\n  4. Run a local development server:\n\n    \n    \n    npm start\n\nImportant\n\nOpen MCT is now running, and can be accessed by pointing a web browser at\nhttp://localhost:8080/\n\nOpen MCT is built using npm and webpack.\n\n## Documentation\n\nDocumentation is available on the Open MCT website.\n\n### Examples\n\nThe clearest examples for developing Open MCT plugins are in the tutorials\nprovided in our documentation.\n\nNote\n\nWe want Open MCT to be as easy to use, install, run, and develop for as\npossible, and your feedback will help us get there! Feedback can be provided\nvia GitHub issues, Starting a GitHub Discussion, or by emailing us at arc-dl-\nopenmct@mail.nasa.gov.\n\n## Developing Applications With Open MCT\n\nFor more on developing with Open MCT, see our documentation for a guide on\nDeveloping Applications with Open MCT.\n\n## Compatibility\n\nThis is a fast moving project and we do our best to test and support the\nwidest possible range of browsers, operating systems, and nodejs APIs. We have\na published list of support available in our package.json's browserslist key.\n\nThe project uses nvm to ensure the node and npm version used, is coherent in\nall projects. Install nvm (non-windows), here or the windows equivalent here\n\nIf you encounter an issue with a particular browser, OS, or nodejs API, please\nfile a GitHub issue\n\n## Plugins\n\nOpen MCT can be extended via plugins that make calls to the Open MCT API. A\nplugin is a group of software components (including source code and resources\nsuch as images and HTML templates) that is intended to be added or removed as\na single unit.\n\nAs well as providing an extension mechanism, most of the core Open MCT\ncodebase is also written as plugins.\n\nFor information on writing plugins, please see our API documentation.\n\n## Tests\n\nOur automated test coverage comes in the form of unit, e2e, visual,\nperformance, and security tests.\n\n### Unit Tests\n\nUnit Tests are written for Jasmine and run by Karma. To run:\n\nnpm test\n\nThe test suite is configured to load any scripts ending with Spec.js found in\nthe src hierarchy. Full configuration details are found in karma.conf.js. By\nconvention, unit test scripts should be located alongside the units that they\ntest; for example, src/foo/Bar.js would be tested by src/foo/BarSpec.js.\n\n### e2e, Visual, and Performance tests\n\nThe e2e, Visual, and Performance tests are written for playwright and run by\nplaywright's new test runner @playwright/test.\n\nTo run the e2e tests which are part of every commit:\n\nnpm run test:e2e:stable\n\nTo run the visual test suite:\n\nnpm run test:e2e:visual\n\nTo run the performance tests:\n\nnpm run test:perf\n\nThe test suite is configured to all tests located in e2e/tests/ ending in\n*.e2e.spec.js. For more about the e2e test suite, please see the README\n\n### Security Tests\n\nEach commit is analyzed for known security vulnerabilities using CodeQL. The\nlist of CWE coverage items is available in the CodeQL docs. The CodeQL\nworkflow is specified in the CodeQL analysis file and the custom CodeQL\nconfig.\n\n### Test Reporting and Code Coverage\n\nEach test suite generates a report in CircleCI. For a complete overview of\ntesting functionality, please see our Circle CI Test Insights Dashboard\n\nOur code coverage is generated during the runtime of our unit, e2e, and visual\ntests. The combination of those reports is published to codecov.io\n\nFor more on the specifics of our code coverage setup, see\n\n# Glossary\n\nCertain terms are used throughout Open MCT with consistent meanings or\nconventions. Any deviations from the below are issues and should be addressed\n(either by updating this glossary or changing code to reflect correct usage.)\nOther developer documentation, particularly in-line documentation, may presume\nan understanding of these terms.\n\n  * plugin: A plugin is a removable, reusable grouping of software elements. The application is composed of plugins.\n  * composition: In the context of a domain object, this refers to the set of other domain objects that compose or are contained by that object. A domain object's composition is the set of domain objects that should appear immediately beneath it in a tree hierarchy. A domain object's composition is described in its model as an array of id's; its composition capability provides a means to retrieve the actual domain object instances associated with these identifiers asynchronously.\n  * description: When used as an object property, this refers to the human-readable description of a thing; usually a single sentence or short paragraph. (Most often used in the context of extensions, domain object models, or other similar application-specific objects.)\n  * domain object: A meaningful object to the user; a distinct thing in the work support by Open MCT. Anything that appears in the left-hand tree is a domain object.\n  * identifier: A tuple consisting of a namespace and a key, which together uniquely identifies a domain object.\n  * model: The persistent state associated with a domain object. A domain object's model is a JavaScript object which can be converted to JSON without losing information (that is, it contains no methods.)\n  * name: When used as an object property, this refers to the human-readable name for a thing. (Most often used in the context of extensions, domain object models, or other similar application-specific objects.)\n  * navigation: Refers to the current state of the application with respect to the user's expressed interest in a specific domain object; e.g. when a user clicks on a domain object in the tree, they are navigating to it, and it is thereafter considered the navigated object (until the user makes another such choice.)\n  * namespace: A name used to identify a persistence store. A running open MCT application could potentially use multiple persistence stores, with the\n\n## Open MCT v2.0.0\n\nSupport for our legacy bundle-based API, and the libraries that it was built\non (like Angular 1.x), have now been removed entirely from this repository.\n\nFor now if you have an Open MCT application that makes use of the legacy API,\na plugin is provided that bootstraps the legacy bundling mechanism and API.\nThis plugin will not be maintained over the long term however, and the legacy\nsupport plugin will not be tested for compatibility with future versions of\nOpen MCT. It is provided for convenience only.\n\n### How do I know if I am using legacy API?\n\nYou might still be using legacy API if your source code\n\n  * Contains files named bundle.js, or bundle.json,\n  * Makes calls to openmct.$injector(), or openmct.$angular,\n  * Makes calls to openmct.legacyRegistry, openmct.legacyExtension, or openmct.legacyBundle.\n\n### What should I do if I am using legacy API?\n\nPlease refer to the modern Open MCT API. Post any questions to the Discussions\nsection of the Open MCT GitHub repository.\n\n## Related Repos\n\nNote\n\nAlthough Open MCT functions as a standalone project, it is primarily an\nextensible framework intended to be used as a dependency with users' own\nplugins and packaging. Furthermore, Open MCT is intended to be used with an\nHTTP server such as Apache or Nginx. A great example of hosting Open MCT with\nApache is openmct-quickstart and can be found in the table below.\n\nRepository| Description  \n---|---  \nopenmct-tutorial| A great place for beginners to learn how to use and extend\nOpen MCT.  \nopenmct-quickstart| A working example of Open MCT integrated with Apache HTTP\nserver, YAMCS telemetry, and Couch DB for persistence.  \nOpen MCT YAMCS Plugin| Plugin for integrating YAMCS telemetry and command\nserver with Open MCT.  \nopenmct-performance| Resources for performance testing Open MCT.  \nopenmct-as-a-dependency| An advanced guide for users on how to build, develop,\nand test Open MCT when it's used as a dependency.  \n  \n## About\n\nA web based mission control framework.\n\nnasa.github.io/openmct/\n\n### Resources\n\nReadme\n\n### License\n\nView license\n\n### Security policy\n\nSecurity policy\n\nActivity\n\nCustom properties\n\n### Stars\n\n11.3k stars\n\n### Watchers\n\n269 watching\n\n### Forks\n\n1.2k forks\n\nReport repository\n\n## Releases 63\n\nv3.2.1 Latest\n\nFeb 28, 2024\n\n\\+ 62 releases\n\n## Packages 0\n\nNo packages published\n\n## Used by 152\n\n\\+ 144\n\n## Contributors 89\n\n\\+ 75 contributors\n\n## Languages\n\n  * JavaScript 61.7%\n  * Vue 29.4%\n  * SCSS 8.3%\n  * Other 0.6%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
