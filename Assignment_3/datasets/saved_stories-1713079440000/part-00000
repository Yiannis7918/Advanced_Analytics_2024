{"aid": "40027866", "title": "Fast and secure translation on your local machine with a GUI", "url": "https://github.com/XapaJIaMnu/translateLocally", "domain": "github.com/xapajiamnu", "votes": 6, "user": "Intralexical", "posted_at": "2024-04-14 01:22:49", "comments": 0, "source_title": "GitHub - XapaJIaMnu/translateLocally: Fast and secure translation on your local machine, powered by marian and Bergamot.", "source_text": "GitHub - XapaJIaMnu/translateLocally: Fast and secure translation on your\nlocal machine, powered by marian and Bergamot.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nXapaJIaMnu / translateLocally Public\n\n  * Notifications\n  * Fork 20\n  * Star 175\n\nFast and secure translation on your local machine, powered by marian and\nBergamot.\n\n### License\n\nMIT license\n\n175 stars 20 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# XapaJIaMnu/translateLocally\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n15 Branches\n\n1 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nXapaJIaMnuM1 compat (#153)a210037 \u00b7\n\n## History\n\n508 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Fix notarization (#136)  \n  \n### 3rd_party\n\n|\n\n### 3rd_party\n\n| M1 compat (#153)  \n  \n### cmake\n\n|\n\n### cmake\n\n| M1 compat (#153)  \n  \n### dist\n\n|\n\n### dist\n\n| M1 compat (#153)  \n  \n### logo\n\n|\n\n### logo\n\n| Mac logo is now square too  \n  \n### misc\n\n|\n\n### misc\n\n| Use version from VERSION for app -v and macOS bundle version  \n  \n### scripts\n\n|\n\n### scripts\n\n| Be more intelligent about finding translateLocally binary  \n  \n### src\n\n|\n\n### src\n\n| inventory: search for models in XDG_DATA_DIRS/translateLocally/models (...  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Add logos for all platforms. Square logos will arrive later  \n  \n### .gitmodules\n\n|\n\n### .gitmodules\n\n| initial commit  \n  \n### CMakeLists.txt\n\n|\n\n### CMakeLists.txt\n\n| ARM build (#128)  \n  \n### LICENCE.md\n\n|\n\n### LICENCE.md\n\n| Add archlinux packaging  \n  \n### README.md\n\n|\n\n### README.md\n\n| Improve Readme  \n  \n### eu-logo.png\n\n|\n\n### eu-logo.png\n\n| Add the EU logo to the repo  \n  \n### translateLocally_es_ES.ts\n\n|\n\n### translateLocally_es_ES.ts\n\n| initial commit  \n  \n## Repository files navigation\n\n# translateLocally\n\nFast and secure translation on your local machine with a GUI, powered by\nmarian and Bergamot.\n\n## Downloads\n\nYou can download the latest automatic build for Windows, Linux and Mac from\nthe releases github tab or from the official website. We also have\ncompatibility builds for Windows and Mac that aim to cover very old hardware\nand M1.\n\n## Compile from source\n\nBringing fast and secure machine translation to the masses! To build and run\n\n    \n    \n    mkdir build cd build cmake .. # this step is only necessary when compiling on ARM # cmake should give you the absolute path of the command that needs to run: # $GITHUB_WORKSPACE/cmake/fix_ruy_build.sh $GITHUB_WORKSPACE ${{github.workspace}}/build` make -j5 ./translateLocally\n\nRequires QT>=5 libarchive intel-mkl-static. We make use of the QT>=5 network,\nQT>=5 linguisticTool and QT>=5 svg components. Depending on your distro, those\nmay be split in separate package from your QT package (Eg qt{6/7}-tools-dev;\nqt{5/6}-svg or libqt5svg5-dev). QT6 is fully supported and its use is\nencouraged. intel-mkl-static may be part of mkl or intel-mkl packages.\n\n### Ubuntu 20.04 build dependencies:\n\n    \n    \n    sudo apt-get install -y libpcre++-dev qttools5-dev qtbase5-dev libqt5svg5-dev libarchive-dev libpcre2-dev\n\n### Ubuntu 22.04 build dependencies:\n\n    \n    \n    sudo apt-get install -y libxkbcommon-x11-dev libpcre++-dev libvulkan-dev libgl1-mesa-dev qt6-base-dev qt6-base-dev-tools qt6-tools-dev qt6-tools-dev-tools qt6-l10n-tools qt6-translations-l10n libqt6svg6-dev libarchive-dev libpcre2-dev\n\n#### Install MKL for Ubuntu (Any)\n\n    \n    \n    wget -qO- \"https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB\" | sudo apt-key add - sudo sh -c \"echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list\" sudo apt-get update -o Dir::Etc::sourcelist=\"/etc/apt/sources.list.d/intel-mkl.list\" sudo apt-get install -y --no-install-recommends intel-mkl-64bit-2020.0-088\n\n### Archlinux build dependencies\n\n    \n    \n    # pacman -S libarchive pcre2 protobuf qt6-base qt6-svg intel-oneapi-mkl\n\n### OpenBlas\n\nWe technically support building against OpenBLAS as a BLAS provider, but we\nstrongly discourage it. The performance offered by OpenBLAS is significantly\nlower than that of Intel's MKL, regardless of the CPU manufacturer.\nFurthermore, OpenBLAS enables OpenMP parallelization by default, but\nunfortunately our matrices are too small to take advantage of OpenMP and we\nend up with up to 100x slowdown compared MKL in the worst case scenario with\nthe majority of end users not aware of how to debug this issue. How sad.\n\nIf you really want to use OpenBLAS instead you can do:\n\n    \n    \n    mkdir build cd build cmake .. -DBLAS_LIBRARIES=-lblas -DCBLAS_LIBRARIES=-lcblas make -j6 OMP_NUM_THREADS=1 ./translateLocally # disable OpenMP parallelization.\n\n## MacOS Build\n\nOn MacOS, translateLocally doesn't rely on MKL, but instead on Apple\naccelerate. If you want to build a portable executable that is able to run on\nmultiple machines, we recommend using Qt's distribution of Qt, as opposed to\nhomebrew's due to issues with macdeployqt. To produce a .dmgdo:\n\n    \n    \n    mkdir build cd build cmake .. cmake --build . -j3 --target translateLocally-bin translateLocally.dmg\n\nAlternatively, if you wish to sign and notarize the .dmgfor distribution, you\nmay use macdmg.sh\n\n    \n    \n    mkdir build cd build cmake .. make -j5 ../dist/macdmg.sh .\n\nCheck the script for the environment variables that you need to set if you\nwant to take advantage of signing and notarization.\n\n## Windows Build\n\nOn Windows, we recommend using vcpkg to install all necessary packages and\nVisual Studio to perform the build.\n\n# Command line interface\n\ntranslateLocally supports using the command line to perform translations.\nExample usage:\n\n    \n    \n    ./translateLocally --help Usage: ./translateLocally [options] A secure translation service that performs translations for you locally, on your own machine. Options: -h, --help Displays help on commandline options. --help-all Displays help including Qt specific options. -v, --version Displays version information. -l, --list-models List locally installed models. -a, --available-models Connect to the Internet and list available models. Only shows models that are NOT installed locally or have a new version available online. -d, --download-model <output> Connect to the Internet and download a model. -r, --remove-model <output> Remove a model from the local machine. Only works for models managed with translateLocally. -m, --model <model> Select model for translation. -i, --input <input> Source translation text (or just used stdin). -o, --output <output> Target translation output (or just used stdout).\n\n## Downloading models from CLI\n\nModels can be downloaded from the GUI or the CLI. For the CLI model management\nyou need to:\n\n    \n    \n    $ ./translateLocally -a Czech-English type: base version: 1; To download do -d cs-en-base German-English type: base version: 2; To download do -d de-en-base English-Czech type: base version: 1; To download do -d en-cs-base English-German type: base version: 2; To download do -d en-de-base English-Estonian type: tiny version: 1; To download do -d en-et-tiny Estonian-English type: tiny version: 1; To download do -d et-en-tiny Icelandic-English type: tiny version: 1; To download do -d is-en-tiny Norwegian (Bokmal)-English type: tiny version: 1; To download do -d nb-en-tiny Norwegian (Nynorsk)-English type: tiny version: 1; To download do -d nn-en-tiny $ ./translateLocally -d en-et-tiny Downloading English-Estonian type: tiny... 100% [############################################################] Model downloaded succesffully! You can now invoke it with -m en-et-tiny\n\n## Removing models from the CLI\n\nModels can be removed from the GUI or the CLI. For the CLI model removal, you\nneed to:\n\n    \n    \n    ./translateLocally -r en-et-tiny Model English-Estonian type tiny successfully removed.\n\n## Listing available models\n\nThe avialble models can be listed with -l\n\n    \n    \n    ./translateLocally -l Czech-English type: tiny version: 1; To invoke do -m cs-en-tiny German-English type: tiny version: 2; To invoke do -m de-en-tiny English-Czech type: tiny version: 1; To invoke do -m en-cs-tiny English-German type: tiny version: 2; To invoke do -m en-de-tiny English-Spanish type: tiny version: 1; To invoke do -m en-es-tiny Spanish-English type: tiny version: 1; To invoke do -m es-en-tiny\n\n## Translating a single sentence\n\nNote that customising the translator settings can only be done via the GUI.\n\n    \n    \n    echo \"Me gustaria comprar la casa verde\" | ./translateLocally -m es-en-tiny\n\n## Translating a whole dataset\n\n    \n    \n    sacrebleu -t wmt13 -l en-es --echo ref > /tmp/es.in ./translateLocally -m es-en-tiny -i /tmp/es.in -o /tmp/en.out\n\nNote that if you are using the macOS translateLocally.app version, the -i and\n-o options are not able to read most files. You can use pipes instead, e.g.\n\n    \n    \n    translateLocally.app/Contents/MacOS/translateLocally -m es-en-tiny < input.txt > output.txt\n\n## Pivoting and piping\n\nThe command line interface can be used to chain several translation models to\nachieve pivot translation, for example Spanish to German.\n\n    \n    \n    sacrebleu -t wmt13 -l en-es --echo ref > /tmp/es.in cat /tmp/es.in | ./translateLocally -m es-en-tiny | ./translateLocally -m en-de-tiny -o /tmp/de.out\n\n# NativeMessaging interface\n\ntranslateLocally can integrate with other applications and browser extensions\nusing native messaging. This functionality is similar to using pipes on the\ncommand line, except that the message format is JSON which allows you to\nspecify options per input fragment, and the translated fragments are returned\nwhen they become available as opposed to the input order.\n\n## Limitations\n\nRight now there is a 10MB message limit for incoming messages. This matches\nthe limitations of Firefox. Responses are limited to about 4GB due to the\nnative messaging message format.\n\n## Using NativeMessaging from Python\n\nStart translateLocally in a subprocess with the -p option, and pass it\nmessages formatted as described here to its stdin. All supported messages are\ndescribed in the NativeMsgIface.h file.\n\nThere is an example, native_client.py, that demonstrates how to use\ntranslateLocally as an async Python API.\n\n## Using NativeMessaging from browser extensions\n\nRight now, the functionality is only automatically available to Firefox and\nChrome.\n\ntranslateLocally automatically registers itself with Firefox when you start\ntranslateLocally in GUI mode. Then you can install the Firefox translation\naddon. After installation of the addon, go into the addon settings and pick\n\"translateLocally\" as translation provider.\n\n### Developing your own browser extension\n\nDue to the way Firefox and Chrome call translateLocally, you will need to add\nyour browser extension id to the translateLocally source code before it is\nable to accept native messages.\n\nAdd your extension id to constants.h and rebuild translateLocally from source.\nOnce you start it in GUI mode, it will re-register itself with support for\nyour extension.\n\nIf you want your extension id added to translateLocally permanently, please\nopen an issue or send us a pull request!\n\n# Importing custom models\n\ntranslateLocally supports importing custom models. translateLocally uses the\nBergamot fork of marian. As such, it supports the vast majority marian models\nout of the box. You can just train your marian model and place it a directory.\n\n## Basic model import\n\nThe directory structure of a translateLocally model looks like this:\n\n    \n    \n    $ tree my-custom-model my-custom-model/ \u251c\u2500\u2500 config.intgemm8bitalpha.yml \u251c\u2500\u2500 model_info.json \u251c\u2500\u2500 model.npz \u2514\u2500\u2500 vocab.deen.spm\n\nThe config.intgemm8bitalpha.yml name is hardcoded, and so is model_info.json.\nEverything else could have an arbitrary name. translateLocally will load the\nmodel according to the settings specified in config.intgemm8bitalpha.yml.\nThese are just normal marian configuration options. model_info.json contains\nmetadata about the model:\n\n    \n    \n    $ cat model_info.json { \"modelName\": \"German-English tiny\", \"shortName\": \"de-en-tiny\", \"type\": \"tiny\", \"src\": \"German\", \"trg\": \"English\", \"version\": 2.0, \"API\": 1.0 }\n\nOnce the files are in place, tar the model:\n\n    \n    \n    $ tar -czvf my-custom-model.tar.gz my-custom-model\n\nAnd you can import it via the GUI: Open translateLocally and go to Edit ->\nTranslator Settings -> Languages -> Import model and navigate to the archive\nyou created.\n\n## Quantising the model\n\nThe process described above will create a model usable by translateLocally,\nalbeit not a very efficient one. In order to create an efficient model we\nrecommend that you quantise the model to 8-bit integers. You can do that by\ndownloading and compiling the Bergamot fork of marian, and using marian-conv\nto create the quantised model:\n\n    \n    \n    $MARIAN/marian-conv -f input_model.npz -t output_model.bin --gemm-type intgemm8\n\nAnd then changing your configuration config.intgemm8bitalpha.yml to point to\nthis new model, as well as appending gemm-precision: int8shift to it.\n\n## Further increasing performance\n\nFor best results, we strongly recommend that you use student models.\nInstructions on how to create one + scripts can be found here and a detailed\nvideo tutorial and explanations are available here. Student models are\ntypically at least 8X faster than teacher models such as the transformer-base\npreset.\n\nYou can further achive another 30%-40% performance boost if you precompute the\nquantisation multipliers of the model and you use a lexical shortlist. The\nprocess for those is described in details at the Bergamot project's Github.\nRemember that you need to use the Bergamot fork of Marian.\n\nExample script that converts a marian model to the most efficient 8-bit\nrepresentation can also be found at Bergamot's Github.\n\n## External repositories\n\nWe support custom repositories. You can add a custom repository from the\nSettings->Repositories menu. An example repository file can seen here.\nCurrently available repositories:\n\n  * Bergamot: https://translatelocally.com/models.json\n  * OpusMT: https://object.pouta.csc.fi/OPUS-MT-models/app/models.json\n\nThe Bergamot repository is the one used by default. The OpusMT one needs to be\nadded by the user, if the user desires to do so.\n\n# Acknowledgements\n\nThis project has received funding from the European Union\u2019s Horizon 2020\nresearch and innovation programme under grant agreement No 825303.\n\n## Bergamot\n\nThis project was made possible through the combined effort of all researchers\nand partners in the Bergamot project https://browser.mt/partners/ . The\ntranslation models are prepared as part of the Bergamot project\nhttps://github.com/browsermt/students . The translation engine used is\nhttps://github.com/browsermt/bergamot-translator which is based on marian\nhttps://github.com/marian-nmt/marian-dev .\n\n## About\n\nFast and secure translation on your local machine, powered by marian and\nBergamot.\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n175 stars\n\n### Watchers\n\n7 watching\n\n### Forks\n\n20 forks\n\nReport repository\n\n## Releases\n\n1 tags\n\n## Packages 0\n\nNo packages published\n\n## Contributors 4\n\n  * jelmervdl Jelmer\n  * XapaJIaMnu Nikolay Bogoychev\n  * pacien\n  * kpu Kenneth Heafield\n\n## Languages\n\n  * C++ 81.6%\n  * CMake 11.7%\n  * Python 5.5%\n  * Shell 1.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
