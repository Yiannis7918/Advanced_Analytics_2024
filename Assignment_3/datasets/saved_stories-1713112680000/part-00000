{"aid": "40030160", "title": "Caddy-Docker-Proxy: Caddy as a Reverse Proxy for Docker", "url": "https://github.com/lucaslorentz/caddy-docker-proxy", "domain": "github.com/lucaslorentz", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-14 10:35:40", "comments": 0, "source_title": "GitHub - lucaslorentz/caddy-docker-proxy: Caddy as a reverse proxy for Docker", "source_text": "GitHub - lucaslorentz/caddy-docker-proxy: Caddy as a reverse proxy for Docker\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nlucaslorentz / caddy-docker-proxy Public\n\n  * Notifications\n  * Fork 154\n  * Star 2.3k\n\nCaddy as a reverse proxy for Docker\n\n### License\n\nMIT license\n\n2.3k stars 154 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# lucaslorentz/caddy-docker-proxy\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n5 Branches\n\n40 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nlucaslorentzMerge pull request #587 from\nlucaslorentz/dependabot/go_modules/githu...a7549ce \u00b7\n\n## History\n\n466 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Move dependabot file to the right location  \n  \n### caddyfile\n\n|\n\n### caddyfile\n\n| Bump github.com/caddyserver/caddy/v2 from 2.7.4 to 2.7.5  \n  \n### config\n\n|\n\n### config\n\n| initial commit: introduce 'envfile' CLI argument  \n  \n### docker\n\n|\n\n### docker\n\n| chore: remove refs to deprecated io/ioutil  \n  \n### examples\n\n|\n\n### examples\n\n| Update the whoami source  \n  \n### generator\n\n|\n\n### generator\n\n| Add option scan stopped containers  \n  \n### tests\n\n|\n\n### tests\n\n| Update the whoami source  \n  \n### utils\n\n|\n\n### utils\n\n| Move source files out of plugin folder  \n  \n### .dockerignore\n\n|\n\n### .dockerignore\n\n| Migrate to azure pipelines and build windows image  \n  \n### .editorconfig\n\n|\n\n### .editorconfig\n\n| Fix global options  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Update caddy to 2.7.3, go to 1.20 and all other packages  \n  \n### Dockerfile\n\n|\n\n### Dockerfile\n\n| Update to use alpine 3.17 instead  \n  \n### Dockerfile-alpine\n\n|\n\n### Dockerfile-alpine\n\n| Update to use alpine 3.17 instead  \n  \n### Dockerfile-nanoserver\n\n|\n\n### Dockerfile-nanoserver\n\n| Update windows images and try to run integration tests on windows  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Add MIT LICENSE [skip ci]  \n  \n### README.md\n\n|\n\n### README.md\n\n| Change whoami source in file README.md  \n  \n### azure-pipelines.yml\n\n|\n\n### azure-pipelines.yml\n\n| Update caddy to 2.7.3, go to 1.20 and all other packages  \n  \n### build-images-linux.sh\n\n|\n\n### build-images-linux.sh\n\n| Compute release version from BUILD_SOURCEBRANCH to be safer  \n  \n### build-images-windows.sh\n\n|\n\n### build-images-windows.sh\n\n| Compute release version from BUILD_SOURCEBRANCH to be safer  \n  \n### build.sh\n\n|\n\n### build.sh\n\n| Move source files out of plugin folder  \n  \n### cmd.go\n\n|\n\n### cmd.go\n\n| Change scan-stopped-containers default value to false  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| Bump github.com/stretchr/testify from 1.8.4 to 1.9.0  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| Bump github.com/stretchr/testify from 1.8.4 to 1.9.0  \n  \n### loader.go\n\n|\n\n### loader.go\n\n| review: remove redundant '%s' formatter from log.Info  \n  \n### module.go\n\n|\n\n### module.go\n\n| Register docker_proxy caddy module  \n  \n### run-docker-tests-linux.sh\n\n|\n\n### run-docker-tests-linux.sh\n\n| Update windows images and try to run integration tests on windows  \n  \n### run-docker-tests-windows.sh\n\n|\n\n### run-docker-tests-windows.sh\n\n| Update windows images and try to run integration tests on windows  \n  \n## Repository files navigation\n\n# Caddy-Docker-Proxy\n\n## NEW MODULE NAME!\n\nWe've renamed our go module, from version 2.7.0 forward you should import\ncaddy-docker-proxy using github.com/lucaslorentz/caddy-docker-proxy/v2 or a\nspecific version github.com/lucaslorentz/caddy-docker-proxy/v2@v2.7.0.\n\nThe old name github.com/lucaslorentz/caddy-docker-proxy/plugin will be a\navailable for backwards compatibility, but it will not have the latest\nversion.\n\n## Introduction\n\nThis plugin enables Caddy to be used as a reverse proxy for Docker containers\nvia labels.\n\n## How does it work?\n\nThe plugin scans Docker metadata, looking for labels indicating that the\nservice or container should be served by Caddy.\n\nThen, it generates an in-memory Caddyfile with site entries and proxies\npointing to each Docker service by their DNS name or container IP.\n\nEvery time a Docker object changes, the plugin updates the Caddyfile and\ntriggers Caddy to gracefully reload, with zero-downtime.\n\n## Table of contents\n\n  * Basic usage example, using docker-compose\n  * Labels to Caddyfile conversion\n\n    * Tokens and arguments\n    * Ordering and isolation\n    * Sites, snippets and global options\n    * Go templates\n  * Template functions\n\n    * upstreams\n  * Examples\n  * Docker configs\n  * Proxying services vs containers\n\n    * Services\n    * Containers\n  * Execution modes\n\n    * Server\n    * Controller\n    * Standalone (default)\n  * Caddy CLI\n  * Docker images\n\n    * Choosing the version numbers\n    * Chosing between default or alpine images\n    * CI images\n    * ARM architecture images\n    * Windows images\n    * Custom images\n  * Connecting to Docker Host\n  * Volumes\n  * Trying it\n\n    * With docker-compose file\n    * With run commands\n  * Building it\n\n## Basic usage example, using docker-compose\n\n    \n    \n    $ docker network create caddy\n\ncaddy/docker-compose.yml\n\n    \n    \n    version: \"3.7\" services: caddy: image: lucaslorentz/caddy-docker-proxy:ci-alpine ports: - 80:80 - 443:443 environment: - CADDY_INGRESS_NETWORKS=caddy networks: - caddy volumes: - /var/run/docker.sock:/var/run/docker.sock - caddy_data:/data restart: unless-stopped networks: caddy: external: true volumes: caddy_data: {}\n    \n    \n    $ docker-compose up -d\n\nwhoami/docker-compose.yml\n\n    \n    \n    version: '3.7' services: whoami: image: traefik/whoami networks: - caddy labels: caddy: whoami.example.com caddy.reverse_proxy: \"{{upstreams 80}}\" networks: caddy: external: true\n    \n    \n    $ docker-compose up -d\n\nNow, visit https://whoami.example.com. The site will be served automatically\nover HTTPS with a certificate issued by Let's Encrypt or ZeroSSL.\n\n## Labels to Caddyfile conversion\n\nPlease first read the Caddyfile Concepts documentation to understand the\nstructure of a Caddyfile.\n\nAny label prefixed with caddy will be converted into a Caddyfile config,\nfollowing these rules:\n\n### Tokens and arguments\n\nKeys are the directive name, and values are whitespace separated arguments:\n\n    \n    \n    caddy.directive: arg1 arg2 \u2193 { directive arg1 arg2 }\n\nIf you need whitespace or line-breaks inside one of the arguments, use double-\nquotes or backticks around it:\n\n    \n    \n    caddy.respond: / \"Hello World\" 200 \u2193 { respond / \"Hello World\" 200 }\n    \n    \n    caddy.respond: / `Hello\\nWorld` 200 \u2193 { respond / `Hello World` 200 }\n    \n    \n    caddy.respond: | / `Hello World` 200 \u2193 { respond / `Hello World` 200 }\n\nDots represent nesting, and grouping is done automatically:\n\n    \n    \n    caddy.directive: argA caddy.directive.subdirA: valueA caddy.directive.subdirB: valueB1 valueB2 \u2193 { directive argA { subdirA valueA subdirB valueB1 valueB2 } }\n\nArguments for the parent directive are optional (e.g. no arguments to\ndirective, setting subdirective subdirA directly):\n\n    \n    \n    caddy.directive.subdirA: valueA \u2193 { directive { subdirA valueA } }\n\nLabels with empty values generate a directive without any arguments:\n\n    \n    \n    caddy.directive: \u2193 { directive }\n\n### Ordering and isolation\n\nBe aware that directives are subject to be sorted according to the default\ndirective order defined by Caddy, when the Caddyfile is parsed (after the\nCaddyfile is generated from labels).\n\nDirectives from labels are ordered alphabetically by default:\n\n    \n    \n    caddy.bbb: value caddy.aaa: value \u2193 { aaa value bbb value }\n\nSuffix _<number> isolates directives that otherwise would be grouped:\n\n    \n    \n    caddy.route_0.a: value caddy.route_1.b: value \u2193 { route { a value } route { b value } }\n\nPrefix <number>_ isolates directives but also defines a custom ordering for\ndirectives (mainly relevant within route blocks), and directives without order\nprefix will go last:\n\n    \n    \n    caddy.1_bbb: value caddy.2_aaa: value caddy.3_aaa: value \u2193 { bbb value aaa value aaa value }\n\n### Sites, snippets and global options\n\nA label caddy creates a site block:\n\n    \n    \n    caddy: example.com caddy.respond: \"Hello World\" 200 \u2193 example.com { respond \"Hello World\" 200 }\n\nOr a snippet:\n\n    \n    \n    caddy: (encode) caddy.encode: zstd gzip \u2193 (encode) { encode zstd gzip }\n\nIt's also possible to isolate Caddy configurations using suffix _<number>:\n\n    \n    \n    caddy_0: (snippet) caddy_0.tls: internal caddy_1: site-a.com caddy_1.import: snippet caddy_2: site-b.com caddy_2.import: snippet \u2193 (snippet) { tls internal } site_a { import snippet } site_b { import snippet }\n\nGlobal options can be defined by not setting any value for caddy. They can be\nset in any container/service, including caddy-docker-proxy itself. Here is an\nexample\n\n    \n    \n    caddy.email: you@example.com \u2193 { email you@example.com }\n\nNamed matchers can be created using @ inside labels:\n\n    \n    \n    caddy: localhost caddy.@match.path: /sourcepath /sourcepath/* caddy.reverse_proxy: @match localhost:6001 \u2193 localhost { @match { path /sourcepath /sourcepath/* } reverse_proxy @match localhost:6001 }\n\n### Go templates\n\nGolang templates can be used inside label values to increase flexibility. From\ntemplates, you have access to current Docker resource information. But, keep\nin mind that the structure that describes a Docker container is different from\na service.\n\nWhile you can access a service name like this:\n\n    \n    \n    caddy.respond: /info \"{{.Spec.Name}}\" \u2193 respond /info \"myservice\"\n\nThe equivalent to access a container name would be:\n\n    \n    \n    caddy.respond: /info \"{{index .Names 0}}\" \u2193 respond /info \"mycontainer\"\n\nSometimes it's not possile to have labels with empty values, like when using\nsome UI to manage Docker. If that's the case, you can also use our support for\ngo lang templates to generate empty labels.\n\n    \n    \n    caddy.directive: {{\"\"}} \u2193 directive\n\n## Template functions\n\nThe following functions are available for use inside templates:\n\n### upstreams\n\nReturns all addresses for the current Docker resource separated by whitespace.\n\nFor services, that would be the service DNS name when proxy-service-tasks is\nfalse, or all running tasks IPs when proxy-service-tasks is true.\n\nFor containers, that would be the container IPs.\n\nOnly containers/services that are connected to Caddy ingress networks are\nused.\n\n\u26a0\ufe0f caddy docker proxy does a best effort to automatically detect what are the\ningress networks. But that logic fails on some scenarios: #207. To have a more\nresilient solution, you can manually configure Caddy ingress network using CLI\noption ingress-networks, environment variable CADDY_INGRESS_NETWORKS. You can\nalso specify the ingress network per container/service by adding to it a label\ncaddy_ingress_network with the network name.\n\nUsage: upstreams [http|https] [port]\n\nExamples:\n\n    \n    \n    caddy.reverse_proxy: {{upstreams}} \u2193 reverse_proxy 192.168.0.1 192.168.0.2\n    \n    \n    caddy.reverse_proxy: {{upstreams https}} \u2193 reverse_proxy https://192.168.0.1 https://192.168.0.2\n    \n    \n    caddy.reverse_proxy: {{upstreams 8080}} \u2193 reverse_proxy 192.168.0.1:8080 192.168.0.2:8080\n    \n    \n    caddy.reverse_proxy: {{upstreams http 8080}} \u2193 reverse_proxy http://192.168.0.1:8080 http://192.168.0.2:8080\n\n\u26a0\ufe0f Be carefull with quotes around upstreams. Quotes should only be added when\nusing yaml.\n\n    \n    \n    caddy.reverse_proxy: \"{{upstreams}}\" \u2193 reverse_proxy \"192.168.0.1 192.168.0.2\"\n\n## Examples\n\nProxying all requests to a domain to the container\n\n    \n    \n    caddy: example.com caddy.reverse_proxy: {{upstreams}}\n\nProxying all requests to a domain to a subpath in the container\n\n    \n    \n    caddy: example.com caddy.rewrite: * /target{path} caddy.reverse_proxy: {{upstreams}}\n\nProxying requests matching a path, while stripping that path prefix\n\n    \n    \n    caddy: example.com caddy.handle_path: /source/* caddy.handle_path.0_reverse_proxy: {{upstreams}}\n\nProxying requests matching a path, rewriting to different path prefix\n\n    \n    \n    caddy: example.com caddy.handle_path: /source/* caddy.handle_path.0_rewrite: * /target{uri} caddy.handle_path.1_reverse_proxy: {{upstreams}}\n\nProxying all websocket requests, and all requests to /api*, to the container\n\n    \n    \n    caddy: example.com caddy.@ws.0_header: Connection *Upgrade* caddy.@ws.1_header: Upgrade websocket caddy.0_reverse_proxy: @ws {{upstreams}} caddy.1_reverse_proxy: /api* {{upstreams}}\n\nProxying multiple domains, with certificates for each\n\n    \n    \n    caddy: example.com, example.org, www.example.com, www.example.org caddy.reverse_proxy: {{upstreams}}\n\nMore community-maintained examples are available in the Wiki.\n\n## Docker configs\n\n> Note: This is for Docker Swarm only. Alternatively, use\n> CADDY_DOCKER_CADDYFILE_PATH or -caddyfile-path\n\nYou can also add raw text to your Caddyfile using Docker configs. Just add\nCaddy label prefix to your configs and the whole config content will be\ninserted at the beginning of the generated Caddyfile, outside any server\nblocks.\n\nHere is an example\n\n## Proxying services vs containers\n\nCaddy docker proxy is able to proxy to swarm services or raw containers. Both\nfeatures are always enabled, and what will differentiate the proxy target is\nwhere you define your labels.\n\n### Services\n\nTo proxy swarm services, labels should be defined at service level. In a\ndocker-compose file, labels should be inside deploy, like:\n\n    \n    \n    services: foo: deploy: labels: caddy: service.example.com caddy.reverse_proxy: {{upstreams}}\n\nCaddy will use service DNS name as target or all service tasks IPs, depending\non configuration proxy-service-tasks.\n\n### Containers\n\nTo proxy containers, labels should be defined at container level. In a docker-\ncompose file, labels should be outside deploy, like:\n\n    \n    \n    services: foo: labels: caddy: service.example.com caddy.reverse_proxy: {{upstreams}}\n\n## Execution modes\n\nEach caddy docker proxy instance can be executed in one of the following\nmodes.\n\n### Server\n\nActs as a proxy to your Docker resources. The server starts without any\nconfiguration, and will not serve anything until it is configured by a\n\"controller\".\n\nIn order to make a server discoverable and configurable by controllers, you\nneed to mark it with label caddy_controlled_server and define the controller\nnetwork via CLI option controller-network or environment variable\nCADDY_CONTROLLER_NETWORK.\n\nServer instances doesn't need access to Docker host socket and you can run it\nin manager or worker nodes.\n\nConfiguration example\n\n### Controller\n\nController monitors your Docker cluster, generates Caddy configuration and\npushes to all servers it finds in your Docker cluster.\n\nWhen controller instances are connected to more than one network, it is also\nnecessary to define the controller network via CLI option controller-network\nor environment variable CADDY_CONTROLLER_NETWORK.\n\nController instances require access to Docker host socket.\n\nA single controller instance can configure all server instances in your\ncluster.\n\nConfiguration example\n\n### Standalone (default)\n\nThis mode executes a controller and a server in the same instance and doesn't\nrequire additional configuration.\n\nConfiguration example\n\n## Caddy CLI\n\nThis plugin extends caddy's CLI with the command caddy docker-proxy.\n\nRun caddy help docker-proxy to see all available flags.\n\n    \n    \n    Usage of docker-proxy: --caddyfile-path string Path to a base Caddyfile that will be extended with Docker sites --envfile Path to an environment file with environment variables in the KEY=VALUE format to load into the Caddy process --controller-network string Network allowed to configure Caddy server in CIDR notation. Ex: 10.200.200.0/24 --ingress-networks string Comma separated name of ingress networks connecting Caddy servers to containers. When not defined, networks attached to controller container are considered ingress networks --docker-sockets Comma separated docker sockets When not defined, DOCKER_HOST (or default docker socket if DOCKER_HOST not defined) --docker-certs-path Comma separated cert path, you could use empty value when no cert path for the concern index docker socket like cert_path0,,cert_path2 --docker-apis-version Comma separated apis version, you could use empty value when no api version for the concern index docker socket like cert_path0,,cert_path2 --label-prefix string Prefix for Docker labels (default \"caddy\") --mode Which mode this instance should run: standalone | controller | server --polling-interval duration Interval Caddy should manually check Docker for a new Caddyfile (default 30s) --event-throttle-interval duration Interval to throttle caddyfile updates triggered by docker events (default 100ms) --process-caddyfile Process Caddyfile before loading it, removing invalid servers (default true) --proxy-service-tasks Proxy to service tasks instead of service load balancer (default true) --scan-stopped-containers Scan stopped containers and use their labels for Caddyfile generation (default false)\n\nThose flags can also be set via environment variables:\n\n    \n    \n    CADDY_DOCKER_CADDYFILE_PATH=<string> CADDY_DOCKER_ENVFILE=<string> CADDY_CONTROLLER_NETWORK=<string> CADDY_INGRESS_NETWORKS=<string> CADDY_DOCKER_SOCKETS=<string> CADDY_DOCKER_CERTS_PATH=<string> CADDY_DOCKER_APIS_VERSION=<string> CADDY_DOCKER_LABEL_PREFIX=<string> CADDY_DOCKER_MODE=<string> CADDY_DOCKER_POLLING_INTERVAL=<duration> CADDY_DOCKER_PROCESS_CADDYFILE=<bool> CADDY_DOCKER_PROXY_SERVICE_TASKS=<bool> CADDY_DOCKER_SCAN_STOPPED_CONTAINERS=<bool> CADDY_DOCKER_NO_SCOPE=<bool, default scope used>\n\nCheck examples folder to see how to set them on a Docker Compose file.\n\n## Docker images\n\nDocker images are available at Docker hub:\nhttps://hub.docker.com/r/lucaslorentz/caddy-docker-proxy/\n\n### Choosing the version numbers\n\nThe safest approach is to use a full version numbers like 0.1.3. That way you\nlock to a specific build version that works well for you.\n\nBut you can also use partial version numbers like 0.1. That means you will\nreceive the most recent 0.1.x image. You will automatically receive updates\nwithout breaking changes.\n\n### Chosing between default or alpine images\n\nOur default images are very small and safe because they only contain Caddy\nexecutable. But they're also quite hard to troubleshoot because they don't\nhave shell or any other Linux utilities like curl or dig.\n\nThe alpine images variant are based on the Linux Alpine image, a very small\nLinux distribution with shell and basic utilities tools. Use -alpine images if\nyou want to trade security and small size for a better troubleshooting\nexperience.\n\n### CI images\n\nImages with the ci tag suffix means they were automatically generated by\nautomated builds. CI images reflect the current state of master branch and\ntheir stability is not guaranteed. You may use CI images if you want to help\ntesting the latest features before they're officially released.\n\n### ARM architecture images\n\nCurrently we provide linux x86_64 images by default.\n\nYou can also find images for other architectures like arm32v6 images that can\nbe used on Raspberry Pi.\n\n### Windows images\n\nWe recently introduced experimental windows containers images with the tag\nsuffix nanoserver-ltsc2022.\n\nBe aware that this needs to be tested further.\n\nThis is an example of how to mount the windows Docker pipe using CLI:\n\n    \n    \n    $ docker run --rm -it -v //./pipe/docker_engine://./pipe/docker_engine lucaslorentz/caddy-docker-proxy:ci-nanoserver-ltsc2022\n\n### Custom images\n\nIf you need additional Caddy plugins, or need to use a specific version of\nCaddy, then you may use the builder variant of the official Caddy Docker image\nto make your own Dockerfile.\n\nThe main difference from the instructions on the official image is that you\nmust override CMD to have the container run using the caddy docker-proxy\ncommand provided by this plugin.\n\n    \n    \n    ARG CADDY_VERSION=2.6.1 FROM caddy:${CADDY_VERSION}-builder AS builder RUN xcaddy build \\ --with github.com/lucaslorentz/caddy-docker-proxy/v2 \\ --with <additional-plugins> FROM caddy:${CADDY_VERSION}-alpine COPY --from=builder /usr/bin/caddy /usr/bin/caddy CMD [\"caddy\", \"docker-proxy\"]\n\n## Connecting to Docker Host\n\nThe default connection to Docker host varies per platform:\n\n  * At Unix: unix:///var/run/docker.sock\n  * At Windows: npipe:////./pipe/docker_engine\n\nYou can modify Docker connection using the following environment variables:\n\n  * DOCKER_HOST: to set the URL to the Docker server.\n  * DOCKER_API_VERSION: to set the version of the API to reach, leave empty for latest.\n  * DOCKER_CERT_PATH: to load the TLS certificates from.\n  * DOCKER_TLS_VERIFY: to enable or disable TLS verification; off by default.\n\n## Volumes\n\nOn a production Docker swarm cluster, it's very important to store Caddy\nfolder on persistent storage. Otherwise Caddy will re-issue certificates every\ntime it is restarted, exceeding Let's Encrypt's quota.\n\nTo do that, map a persistent Docker volume to /data folder.\n\nFor resilient production deployments, use multiple Caddy replicas and map\n/data folder to a volume that supports multiple mounts, like Network File\nSharing Docker volumes plugins.\n\nMultiple Caddy instances automatically orchestrate certificate issuing between\nthemselves when sharing /data folder.\n\n## Trying it\n\n### With docker-compose file\n\nClone this repository.\n\nDeploy the compose file to swarm cluster:\n\n    \n    \n    $ docker stack deploy -c examples/standalone.yaml caddy-docker-demo\n\nWait a bit for services to startup...\n\nNow you can access each service/container using different URLs\n\n    \n    \n    $ curl -k --resolve whoami0.example.com:443:127.0.0.1 https://whoami0.example.com $ curl -k --resolve whoami1.example.com:443:127.0.0.1 https://whoami1.example.com $ curl -k --resolve whoami2.example.com:443:127.0.0.1 https://whoami2.example.com $ curl -k --resolve whoami3.example.com:443:127.0.0.1 https://whoami3.example.com $ curl -k --resolve config.example.com:443:127.0.0.1 https://config.example.com $ curl -k --resolve echo0.example.com:443:127.0.0.1 https://echo0.example.com/sourcepath/something\n\nAfter testing, delete the demo stack:\n\n    \n    \n    $ docker stack rm caddy-docker-demo\n\n### With run commands\n\n    \n    \n    $ docker run --name caddy -d -p 443:443 -v /var/run/docker.sock:/var/run/docker.sock lucaslorentz/caddy-docker-proxy:ci-alpine $ docker run --name whoami0 -d -l caddy=whoami0.example.com -l \"caddy.reverse_proxy={{upstreams 80}}\" -l caddy.tls=internal traefik/whoami $ docker run --name whoami1 -d -l caddy=whoami1.example.com -l \"caddy.reverse_proxy={{upstreams 80}}\" -l caddy.tls=internal traefik/whoami $ curl -k --resolve whoami0.example.com:443:127.0.0.1 https://whoami0.example.com $ curl -k --resolve whoami1.example.com:443:127.0.0.1 https://whoami1.example.com $ docker rm -f caddy whoami0 whoami1\n\n## Building it\n\nYou can build Caddy using xcaddy or caddy docker builder.\n\nUse module name github.com/lucaslorentz/caddy-docker-proxy/v2 to add this\nplugin to your build.\n\n## About\n\nCaddy as a reverse proxy for Docker\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n2.3k stars\n\n### Watchers\n\n20 watching\n\n### Forks\n\n154 forks\n\nReport repository\n\n## Releases 38\n\nv2.8.11 Latest\n\nMar 22, 2024\n\n\\+ 37 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 28\n\n\\+ 14 contributors\n\n## Languages\n\n  * Go 89.7%\n  * Shell 9.9%\n  * Dockerfile 0.4%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
