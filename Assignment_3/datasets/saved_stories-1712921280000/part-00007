{"aid": "40008365", "title": "Argon2 Password Hashing Utility", "url": "https://github.com/P-H-C/phc-winner-argon2", "domain": "github.com/p-h-c", "votes": 1, "user": "1vuio0pswjnm7", "posted_at": "2024-04-12 00:50:12", "comments": 0, "source_title": "GitHub - P-H-C/phc-winner-argon2: The password hash Argon2, winner of PHC", "source_text": "GitHub - P-H-C/phc-winner-argon2: The password hash Argon2, winner of PHC\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nP-H-C / phc-winner-argon2 Public\n\n  * Notifications\n  * Fork 391\n  * Star 4.6k\n\nThe password hash Argon2, winner of PHC\n\n### License\n\nView license\n\n4.6k stars 391 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# P-H-C/phc-winner-argon2\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n4 Branches\n\n6 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nveorqMerge pull request #321 from bittorf/fix-spelling-mistakesf57e61e \u00b7\n\n## History\n\n659 Commits  \n  \n### include\n\n|\n\n### include\n\n| use HTTPS instead of HTTP for URLs  \n  \n### kats\n\n|\n\n### kats\n\n| Adding in Argon2id functionality. This involves:  \n  \n### latex\n\n|\n\n### latex\n\n| Fix typos  \n  \n### man\n\n|\n\n### man\n\n| Add comment about -v defaulting to the most recent Argon2 version  \n  \n### src\n\n|\n\n### src\n\n| Merge pull request #285 from dra27/mingw-w64-fixes  \n  \n### vs2015\n\n|\n\n### vs2015\n\n| Add GenerateDebugInformation to Argon2Ref project  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| Fixed missing references in generated PDF  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| fix the Makefile to install libargon2.pc  \n  \n### .travis.yml\n\n|\n\n### .travis.yml\n\n| Fix Travis failures  \n  \n### Argon2.sln\n\n|\n\n### Argon2.sln\n\n| Visual Studio improvements  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| Update CHANGELOG.md  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| use HTTPS instead of HTTP for URLs  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Don't use @rpath on macOS  \n  \n### Package.swift\n\n|\n\n### Package.swift\n\n| adds Package.swift for SPM support  \n  \n### README.md\n\n|\n\n### README.md\n\n| fix 3 spelling mistakes  \n  \n### appveyor.yml\n\n|\n\n### appveyor.yml\n\n| Run TestCI just for Release configuration  \n  \n### argon2-specs.pdf\n\n|\n\n### argon2-specs.pdf\n\n| Fixed missing references in generated PDF  \n  \n### export.sh\n\n|\n\n### export.sh\n\n| prepare the next release  \n  \n### libargon2.pc.in\n\n|\n\n### libargon2.pc.in\n\n| fix 3 spelling mistakes  \n  \n## Repository files navigation\n\n# Argon2\n\nThis is the reference C implementation of Argon2, the password-hashing\nfunction that won the Password Hashing Competition (PHC).\n\nArgon2 is a password-hashing function that summarizes the state of the art in\nthe design of memory-hard functions and can be used to hash passwords for\ncredential storage, key derivation, or other applications.\n\nIt has a simple design aimed at the highest memory filling rate and effective\nuse of multiple computing units, while still providing defense against\ntradeoff attacks (by exploiting the cache and memory organization of the\nrecent processors).\n\nArgon2 has three variants: Argon2i, Argon2d, and Argon2id. Argon2d is faster\nand uses data-depending memory access, which makes it highly resistant against\nGPU cracking attacks and suitable for applications with no threats from side-\nchannel timing attacks (eg. cryptocurrencies). Argon2i instead uses data-\nindependent memory access, which is preferred for password hashing and\npassword-based key derivation, but it is slower as it makes more passes over\nthe memory to protect from tradeoff attacks. Argon2id is a hybrid of Argon2i\nand Argon2d, using a combination of data-depending and data-independent memory\naccesses, which gives some of Argon2i's resistance to side-channel cache\ntiming attacks and much of Argon2d's resistance to GPU cracking attacks.\n\nArgon2i, Argon2d, and Argon2id are parametrized by:\n\n  * A time cost, which defines the amount of computation realized and therefore the execution time, given in number of iterations\n  * A memory cost, which defines the memory usage, given in kibibytes\n  * A parallelism degree, which defines the number of parallel threads\n\nThe Argon2 document gives detailed specs and design rationale.\n\nPlease report bugs as issues on this repository.\n\n## Usage\n\nmake builds the executable argon2, the static library libargon2.a, and the\nshared library libargon2.so (or on macOS, the dynamic library libargon2.dylib\n-- make sure to specify the installation prefix when you compile: make\nPREFIX=/usr). Make sure to run make test to verify that your build produces\nvalid results. sudo make install PREFIX=/usr installs it to your system.\n\n### Command-line utility\n\nargon2 is a command-line utility to test specific Argon2 instances on your\nsystem. To show usage instructions, run ./argon2 -h as\n\n    \n    \n    Usage: ./argon2 [-h] salt [-i|-d|-id] [-t iterations] [-m memory] [-p parallelism] [-l hash length] [-e|-r] [-v (10|13)] Password is read from stdin Parameters: salt The salt to use, at least 8 characters -i Use Argon2i (this is the default) -d Use Argon2d instead of Argon2i -id Use Argon2id instead of Argon2i -t N Sets the number of iterations to N (default = 3) -m N Sets the memory usage of 2^N KiB (default 12) -p N Sets parallelism to N threads (default 1) -l N Sets hash output length to N bytes (default 32) -e Output only encoded hash -r Output only the raw bytes of the hash -v (10|13) Argon2 version (defaults to the most recent version, currently 13) -h Print argon2 usage\n\nFor example, to hash \"password\" using \"somesalt\" as a salt and doing 2\niterations, consuming 64 MiB, using four parallel threads and an output hash\nof 24 bytes\n\n    \n    \n    $ echo -n \"password\" | ./argon2 somesalt -t 2 -m 16 -p 4 -l 24 Type: Argon2i Iterations: 2 Memory: 65536 KiB Parallelism: 4 Hash: 45d7ac72e76f242b20b77b9bf9bf9d5915894e669a24e6c6 Encoded: $argon2i$v=19$m=65536,t=2,p=4$c29tZXNhbHQ$RdescudvJCsgt3ub+b+dWRWJTmaaJObG 0.188 seconds Verification ok\n\n### Library\n\nlibargon2 provides an API to both low-level and high-level functions for using\nArgon2.\n\nThe example program below hashes the string \"password\" with Argon2i using the\nhigh-level API and then using the low-level API. While the high-level API\ntakes the three cost parameters (time, memory, and parallelism), the password\ninput buffer, the salt input buffer, and the output buffers, the low-level API\ntakes in these and additional parameters , as defined in include/argon2.h.\n\nThere are many additional parameters, but we will highlight three of them\nhere.\n\n  1. The secret parameter, which is used for keyed hashing. This allows a secret key to be input at hashing time (from some external location) and be folded into the value of the hash. This means that even if your salts and hashes are compromised, an attacker cannot brute-force to find the password without the key.\n\n  2. The ad parameter, which is used to fold any additional data into the hash value. Functionally, this behaves almost exactly like the secret or salt parameters; the ad parameter is folding into the value of the hash. However, this parameter is used for different data. The salt should be a random string stored alongside your password. The secret should be a random key only usable at hashing time. The ad is for any other data.\n\n  3. The flags parameter, which determines which memory should be securely erased. This is useful if you want to securely delete the pwd or secret fields right after they are used. To do this set flags to either ARGON2_FLAG_CLEAR_PASSWORD or ARGON2_FLAG_CLEAR_SECRET. To change how internal memory is cleared, change the global flag FLAG_clear_internal_memory (defaults to clearing internal memory).\n\nHere the time cost t_cost is set to 2 iterations, the memory cost m_cost is\nset to 2^16 kibibytes (64 mebibytes), and parallelism is set to 1 (single-\nthread).\n\nCompile for example as gcc test.c libargon2.a -Isrc -o test, if the program\nbelow is named test.c and placed in the project's root directory.\n\n    \n    \n    #include \"argon2.h\" #include <stdio.h> #include <string.h> #include <stdlib.h> #define HASHLEN 32 #define SALTLEN 16 #define PWD \"password\" int main(void) { uint8_t hash1[HASHLEN]; uint8_t hash2[HASHLEN]; uint8_t salt[SALTLEN]; memset( salt, 0x00, SALTLEN ); uint8_t *pwd = (uint8_t *)strdup(PWD); uint32_t pwdlen = strlen((char *)pwd); uint32_t t_cost = 2; // 2-pass computation uint32_t m_cost = (1<<16); // 64 mebibytes memory usage uint32_t parallelism = 1; // number of threads and lanes // high-level API argon2i_hash_raw(t_cost, m_cost, parallelism, pwd, pwdlen, salt, SALTLEN, hash1, HASHLEN); // low-level API argon2_context context = { hash2, /* output array, at least HASHLEN in size */ HASHLEN, /* digest length */ pwd, /* password array */ pwdlen, /* password length */ salt, /* salt array */ SALTLEN, /* salt length */ NULL, 0, /* optional secret data */ NULL, 0, /* optional associated data */ t_cost, m_cost, parallelism, parallelism, ARGON2_VERSION_13, /* algorithm version */ NULL, NULL, /* custom memory allocation / deallocation functions */ /* by default only internal memory is cleared (pwd is not wiped) */ ARGON2_DEFAULT_FLAGS }; int rc = argon2i_ctx( &context ); if(ARGON2_OK != rc) { printf(\"Error: %s\\n\", argon2_error_message(rc)); exit(1); } free(pwd); for( int i=0; i<HASHLEN; ++i ) printf( \"%02x\", hash1[i] ); printf( \"\\n\" ); if (memcmp(hash1, hash2, HASHLEN)) { for( int i=0; i<HASHLEN; ++i ) { printf( \"%02x\", hash2[i] ); } printf(\"\\nfail\\n\"); } else printf(\"ok\\n\"); return 0; }\n\nTo use Argon2d instead of Argon2i call argon2d_hash_raw instead of\nargon2i_hash_raw using the high-level API, and argon2d instead of argon2i\nusing the low-level API. Similarly for Argon2id, call argon2id_hash_raw and\nargon2id.\n\nTo produce the crypt-like encoding rather than the raw hash, call\nargon2i_hash_encoded for Argon2i, argon2d_hash_encoded for Argon2d, and\nargon2id_hash_encoded for Argon2id\n\nSee include/argon2.h for API details.\n\nNote: in this example the salt is set to the all-0x00 string for the sake of\nsimplicity, but in your application you should use a random salt.\n\n### Benchmarks\n\nmake bench creates the executable bench, which measures the execution time of\nvarious Argon2 instances:\n\n    \n    \n    $ ./bench Argon2d 1 iterations 1 MiB 1 threads: 5.91 cpb 5.91 Mcycles Argon2i 1 iterations 1 MiB 1 threads: 4.64 cpb 4.64 Mcycles 0.0041 seconds Argon2d 1 iterations 1 MiB 2 threads: 2.76 cpb 2.76 Mcycles Argon2i 1 iterations 1 MiB 2 threads: 2.87 cpb 2.87 Mcycles 0.0038 seconds Argon2d 1 iterations 1 MiB 4 threads: 3.25 cpb 3.25 Mcycles Argon2i 1 iterations 1 MiB 4 threads: 3.57 cpb 3.57 Mcycles 0.0048 seconds (...) Argon2d 1 iterations 4096 MiB 2 threads: 2.15 cpb 8788.08 Mcycles Argon2i 1 iterations 4096 MiB 2 threads: 2.15 cpb 8821.59 Mcycles 13.0112 seconds Argon2d 1 iterations 4096 MiB 4 threads: 1.79 cpb 7343.72 Mcycles Argon2i 1 iterations 4096 MiB 4 threads: 2.72 cpb 11124.86 Mcycles 19.3974 seconds (...)\n\n## Bindings\n\nBindings are available for the following languages (make sure to read their\ndocumentation):\n\n  * Android (Java/Kotlin) by @lambdapioneer\n  * Dart by @tmthecoder\n  * Elixir by @riverrun\n  * Erlang by @ergenius\n  * Go by @tvdburgt\n  * Haskell by @hvr\n  * JavaScript (native), by @ranisalt\n  * JavaScript (native), by @jdconley\n  * JavaScript (ffi), by @cjlarose\n  * JavaScript (browser), by @antelle\n  * JVM by @phXql\n  * JVM (with keyed hashing) by @kosprov\n  * Lua (native) by @thibaultCha\n  * Lua (ffi) by @thibaultCha\n  * OCaml by @Khady\n  * Python (native), by @flamewow\n  * Python (ffi), by @hynek\n  * Python (ffi, with keyed hashing), by @thusoy\n  * Python (ffi, with keyed hashing), by @ultrahorizon\n  * R by @wrathematics\n  * Ruby by @technion\n  * Rust by @quininer\n  * Rust by @bcmyers\n  * C#/.NET CoreCLR by @kmaragon\n  * Perl by @leont\n  * mruby by @Asmod4n\n  * Swift by @ImKcat\n  * Swift by @tmthecoder\n\n## Test suite\n\nThere are two sets of test suites. One is a low level test for the hash\nfunction, the other tests the higher level API. Both of these are built and\nexecuted by running:\n\nmake test\n\n## Intellectual property\n\nExcept for the components listed below, the Argon2 code in this repository is\ncopyright (c) 2015 Daniel Dinu, Dmitry Khovratovich (main authors), Jean-\nPhilippe Aumasson and Samuel Neves, and dual licensed under the CC0 License\nand the Apache 2.0 License. For more info see the LICENSE file.\n\nThe string encoding routines in src/encoding.c are copyright (c) 2015 Thomas\nPornin, and under CC0 License.\n\nThe BLAKE2 code in src/blake2/ is copyright (c) Samuel Neves, 2013-2015, and\nunder CC0 License.\n\nAll licenses are therefore GPL-compatible.\n\n## About\n\nThe password hash Argon2, winner of PHC\n\n### Resources\n\nReadme\n\n### License\n\nView license\n\nActivity\n\nCustom properties\n\n### Stars\n\n4.6k stars\n\n### Watchers\n\n123 watching\n\n### Forks\n\n391 forks\n\nReport repository\n\n## Releases 6\n\n20190702 Latest\n\nJul 2, 2019\n\n\\+ 5 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 68\n\n\\+ 54 contributors\n\n## Languages\n\n  * C 93.9%\n  * Makefile 3.6%\n  * PowerShell 1.3%\n  * Other 1.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
