{"aid": "40011269", "title": "Generating Diagrams from Text Generated by ChatGPT", "url": "https://blog.ouseful.info/2022/12/12/generating-diagrams-from-text-generated-by-chatgpt/", "domain": "ouseful.info", "votes": 1, "user": "epaga", "posted_at": "2024-04-12 11:08:26", "comments": 0, "source_title": "Generating Diagrams from Text Generated by ChatGPT", "source_text": "Generating Diagrams from Text Generated by ChatGPT \u2013 OUseful.Info, the blog...\n\nSkip to content\n\nOUseful.Info, the blog...\n\nTrying to find useful things to do with emerging technologies in open\neducation and data journalism. Snarky and sweary to anyone who emails to offer\nme content for the site.\n\n# Generating Diagrams from Text Generated by ChatGPT\n\nFor years and years now I\u2019ve tried to argue the case for using tools that will\ngenerate diagrams from text and never really met with much success. To me it\nseems like an obvious thing to do: it makes for more maintainable assets, and\nit can speed up iteration cycles if you are trying to get a the logicial,\nrelational elements of the diagram right. Automated layout engines, and style\ntheming potentally give you a lot of flexibility in how the rendered diagram\nlooks, although custom theming tends not to be explicitly offered in most of\nthe diagramming packages of which I am aware.\n\nAs a text generation engine, the ability of ChatGPT to generate code is well\nknown. So if it can generate code, can it also generate diagrams from\ndescriptions by mapping the description onto a text based diagramming package\nlanguage format? I\u2019ve already posted a couple of demos showing that it can,\nbut here\u2019s a more general post on the topic.\n\nIn this post, as well as demonstrating the range of diagram script types that\ncan be generated, I also hope to hint at how we can use ChatGPT as part of an\niteractive visual thinking process, getting ChatGPT to generate base diagrams\nand then using further prompts to iterate on them.\n\nAs with my previous \u201cchats\u201d, I am not really looking to deeply at the\ncorrectness of the generated responses. In most cases, I naively accept them\nand use them as the basis of the the nxt prompt.\n\nThe initial prompt for each new diagram type is started in a new thread.\n\n> Generate a flowchart using valid mermaid.js syntax that shows the process\n> for making a cup of tea. Then explain the process.\n>\n> Me to ChatGPT\n    \n    \n    graph TD A[Boil Water] --> B[Add Tea Bag] B --> C[Steep Tea] C --> D[Add Milk and Sugar] D --> E[Enjoy Cup of Tea] The process for making a cup of tea starts by boiling water in a kettle or pot. Once the water is boiling, a tea bag is added to the hot water. The tea is then steeped for a few minutes to allow the flavor to infuse into the water. After the desired strength of tea is reached, milk and sugar can be added to taste. The final step is to enjoy the cup of tea.\n\nWe can render the script in a mermaid.js previewer:\n\n> Add a decision step that checks if the tea is sweet enough, and if it isn\u2019t\n> add some sugar.\n>\n> Me to ChatGPT\n\nIn the following example, ChatGPT used a different diagram type to the one I\nprompted for...\n\n> Using mermaid.js user journey daigram syntax, generate a diagram that shows\n> the journey associated with making a cup of tea\n>\n> Me to ChatGPT\n    \n    \n    sequenceDiagram participant User as \"You\" participant Kettle as \"Kettle\" participant Tea as \"Tea\" participant Cup as \"Cup\" User ->> Kettle: Fill with water Kettle ->> Kettle: Boil water User ->> Tea: Place tea bag in cup Kettle ->> Cup: Pour hot water over tea bag User ->> Cup: Add milk and sugar to taste Cup ->> Cup: Stir User ->> Cup: Enjoy cup of tea\n\nHow about a Gantt chart?\n\n> Using mermaid.js v. 9.2.2 Gantt chart daigram syntax, generate a diagram\n> script that provides a plan for how to make and serve a two course meal\n> featuring a soup starter and a fish an chiips main course. The main course\n> should be served as soon has the starter has been eaten.\n>\n> Me to ChatGPT\n    \n    \n    gantt title Soup and Fish and Chips Meal Plan dateFormat YYYY-MM-DD section Soup Make soup: task1, 2020-01-01, 3d Serve soup: task2, 2020-01-04, 1d section Fish and Chips Prepare fish and chips: task3, 2020-01-04, 2d Cook fish and chips: task4, 2020-01-06, 2d Serve fish and chips: task5, 2020-01-08, 1d\n\n> It would be better if the main course preparation started earlier so that it\n> could be served sooner after the soup had been eaten.\n>\n> Me to ChatGPT\n    \n    \n    gantt title Soup and Fish and Chips Meal Plan dateFormat YYYY-MM-DD section Soup Make soup: task1, 2020-01-01, 3d Serve soup: task2, 2020-01-04, 1d section Fish and Chips Prepare fish and chips: task3, 2020-01-01, 2d Cook fish and chips: task4, 2020-01-03, 2d Serve fish and chips: task5, 2020-01-05, 1d\n\n> Using valid mermaid.js statediagram syntax, generate a description for a\n> coin based vending machine that must wait for at least the minimum amount of\n> coins to be inserted before vending the goods and returning any change.\n>\n> Me to ChatGPT\n    \n    \n    stateDiagram state \"Idle\" as idle state \"Coin Inserted\" as coin state \"Vending\" as vending state \"Change Returned\" as change idle --> coin : minimum amount of coins inserted coin --> vending : vending button pressed vending --> change : goods dispensed and change returned change --> idle : end of transaction\n\n> The machine needs a loop state that checks if the required amount of money\n> has been given as change.\n>\n> Me to ChatGPT\n    \n    \n    stateDiagram state \"Idle\" as idle state \"Coin Inserted\" as coin state \"Vending\" as vending state \"Change Returned\" as change state \"Checking Change\" as checking idle --> coin : minimum amount of coins inserted coin --> vending : vending button pressed vending --> change : goods dispensed and change returned change --> checking : start checking change checking --> change : required change given checking --> idle : end of transaction\n\n> Using mermaid.js classdiagram syntax, generate a valid script for a diagram\n> that could be used to model a doctor\u2019s patient list, including prescriptions\n> given to each patient by each doctor\n>\n> Me to ChaGPT\n    \n    \n    classDiagram class Patient { +firstName: String +lastName: String +birthdate: Date -prescriptions: Prescription[] } class Doctor { +firstName: String +lastName: String +specialty: String -patients: Patient[] } class Prescription { +name: String +dosage: String +startDate: Date +endDate: Date } Patient --* Prescription Doctor --* Patient\n\n> We also need to be able to see which prescriptions were provided to which\n> patient by which doctor\n>\n> Me to ChatGPT\n    \n    \n    classDiagram class Patient { +firstName: String +lastName: String +birthdate: Date -prescriptions: Prescription[] } class Doctor { +firstName: String +lastName: String +specialty: String -patients: Patient[] } class Prescription { +name: String +dosage: String +startDate: Date +endDate: Date -doctor: Doctor } Patient --* Prescription Doctor --* Patient Prescription --> Doctor\n\n> Using the syntax used by the http://blockdiag.com/ diagram generator,\n> generate a script for a block diagram that shows the process of making a cup\n> of tea or a cup of coffee\n>\n> Me to ChatGPT\n\nWe can preview the result using the blockdiag interactive previewer:\n\nIn the following example, I found the prompt effectiveness was dramatically\nimproved by giving an example of the correct syntax copied directly fro the\ndocumentation.\n\n> Using the seqdiag syntax used by the http://blockdiag.com/ diagram\n> generator, generate a script for a sequence diagram that shows a 2FA process\n>\n> An example format looks like this:\n>\n> seqdiag { browser -> webserver [label = \u201cGET /index.html\u201d]; browser <\u2013\n> webserver; browser -> webserver [label = \u201cPOST /blog/comment\u201d]; webserver ->\n> database [label = \u201cINSERT comment\u201d]; webserver <\u2013 database; browser <\u2013\n> webserver; }\n>\n> Me to ChatGPT\n    \n    \n    seqdiag { user -> webserver [label = \"Enter username\"]; webserver -> user [label = \"Prompt for password\"]; user -> webserver [label = \"Enter password\"]; webserver -> 2FA_provider [label = \"Verify password\"]; 2FA_provider -> webserver [label = \"Send 2FA code\"]; webserver -> user [label = \"Prompt for 2FA code\"]; user -> webserver [label = \"Enter 2FA code\"]; webserver -> 2FA_provider [label = \"Verify 2FA code\"]; 2FA_provider -> webserver [label = \"Access granted\"]; webserver <-- user; }\n\nHere\u2019s what it looks like in the seqdiag previewer:\n\n> Using the actdiag syntax used by the http://blockdiag.com/ diagram\n> generator, generate a valid script for an activity diagram that describes\n> how to make a cup of tea. Lanes might include \u201ccupboard\u201d, \u201csink\u201d, \u201ckettle\u201d\n> etc. An example format looks like this:\n>\n> actdiag { write -> convert -> image lane user { label = \u201cUser\u201d write [label\n> = \u201cWriting reST\u201d]; image [label = \u201cGet diagram IMAGE\u201d]; } lane actdiag {\n> convert [label = \u201cConvert reST to Image\u201d]; } }\n>\n> Me to ChatGPT\n    \n    \n    actdiag { fill_kettle -> boil_kettle -> place_teabag -> pour_water -> add_milk -> stir -> drink lane cupboard { label = \"Cupboard\" tea [label = \"Get teabag\"]; milk [label = \"Get milk\"]; } lane sink { label = \"Sink\" fill_kettle [label = \"Fill kettle\"]; } lane kettle { label = \"Kettle\" boil_kettle [label = \"Boil water\"]; pour_water [label = \"Pour water into cup\"]; } lane cup { label = \"Cup\" place_teabag [label = \"Place teabag in cup\"]; add_milk [label = \"Add milk\"]; stir [label = \"Stir\"]; drink [label = \"Drink\"]; } }\n\nAnd previewing that in the actdiag previewer:\n\n> Using the nwdiag syntax used by the http://blockdiag.com/ diagram generator,\n> generate a valid script for a network diagram that describes a simple office\n> network with an intranet and a public network which both have access to the\n> public network, and an isolated test area network that is only accessible\n> from the intranet. Display the complete answer in a single preformatted code\n> block.\n>\n> The syntax looks like this:\n>\n> { network dmz { address = \u201c210.x.x.x/24\u201d web01 [address = \u201c210.x.x.1\u201d];\n> web02 [address = \u201c210.x.x.2\u201d]; } network internal { address =\n> \u201c172.x.x.x/24\u201d; web01 [address = \u201c172.x.x.1\u201d]; db01; app01; } }\n>\n> Me to ChatGPT\n\nAnd here is the result previewed in the nwdiag previewer:\n\nOther diagram types are also available via the blogdiag suite of tools. For\nexample, rack diagrams (generate a valid script for a rack diagram that\ndescribes a couple of racks that you might find in a data center running large\nlanguage model services as well as simple websites. Use whataver height racks\n(XU, which is to say, X units high) are appropriate):\n\n> Please generate a flow chart using the syntax used by the\n> https://flowchart.js.org/ package that describes a quicksort algorithm\n>\n> Me to ChatGPT\n\nAnd here is the response in the flowchart.js previewer:\n\nHmmm...\n\n> How about bubble sort?\n>\n> Me to ChatGPT\n\nHmm again....\n\nMaybe those prompts need working up to. In a new thread:\n\n> Describe the quicksort algorithm.\n>\n> Me to ChatGPT\n\n> Please generate a script for a flow chart describing the algorithm you\n> described that uses the syntax used by the https://flowchart.js.org/\n> package.\n>\n> Me to ChatGPT\n\n> Where you say \u201crecursively apply\u201d, shouldn\u2019t there be some sort of decision\n> and a loop?\n>\n> Me to ChatGPT\n\n> Generate a wavedrom script to show a timing diagram for a shift register\n>\n> Me to ChatGPT\n\nHere\u2019s what it looks like [wavedrom previewer]:\n\nThat\u2019s enough for now. Next, I wonder if we can use ChatGPT to generate TIkZ\nscripts, and scripts that generate diagrams using other LaTeX drawing\npackages?\n\nIf you do any of your own experiments with generating diagrams using any of\nthese packages/techniques, or others, and you write them up somewhere, please\nlink back here or add a link in the comments.\n\nPS not pictures, but music... MIDI madness with ChatGPT: the AI-powered tunes\nthat will make you laugh, cry, and dance. The post is syndicated via\nR-Bloggers but the original link doesn\u2019t resolve?\n\n### Rate this:\n\ni\n\n11 Votes\n\n### Share this:\n\nLike Loading...\n\n### Related\n\nQuick Index Page to ChatGPT PostsDecember 2, 2022In \"Anything you want\"\n\nCan We use ChatGPT to Render Diagrams From Accessible Diagram\nDescriptionsDecember 2, 2022In \"Anything you want\"\n\nChatGPT Volunteering Diagram Descriptions, Unprompted, in a Response to a\nMaths Related QuestionJanuary 5, 2023In \"Anything you want\"\n\n## Author: Tony Hirst\n\nI'm a Senior Lecturer at The Open University, with an interest in #opendata\npolicy and practice, as well as general web tinkering... View all posts by\nTony Hirst\n\nAuthor Tony HirstPosted on December 12, 2022January 3, 2023Categories Anything\nyou wantTags ChatGPT\n\n## 3 thoughts on \u201cGenerating Diagrams from Text Generated by ChatGPT\u201d\n\n  1. john says:\n\nJanuary 15, 2023 at 12:17 pm\n\nYou should have got ChatGpt to spellcheck the article...informative though!\n\n4\n\n1\n\ni\n\nRate This\n\n    1. Tony Hirst says:\n\nJanuary 16, 2023 at 11:02 am\n\nPart of the character of this blog is that th initial posts often contain\ntypos, that I correct if I spot them as I re-visit posts. Writing would\nprobably have fewer errors if WordPress.com didnlt have such a crappy\nauthoring envt.\n\n7\n\n0\n\ni\n\nRate This\n\n  2. Simon Keen says:\n\nApril 24, 2023 at 5:57 am\n\nWould be interesting to see if GPT4 can do XML for input into BPMN.oi to\ngenerate BPMN models from plain text.\n\n5\n\n0\n\ni\n\nRate This\n\nComments are closed.\n\n\u00a9 AJ Hirst 2008-2021\n\nAttribution: Tony Hirst.\n\n## Contact\n\nEmail me (Tony Hirst) Bookmarks Presentations\n\nTracking Jupyter newsletter\n\nJoin 2,068 other subscribers\n\nSubscribe in a reader\n\n## Archives\n\n## My Other Blogs\n\nF1Datajunkie Blog F1 data tinkerings Digital Worlds Blog Game Design uncourse\nVisual Gadgets Blog visualisation bits'n'pieces\n\n## Custom Search Engines\n\nChurnalism Times - Polls (search recent polls/surveys) Churnalism Times\n(search press releases) CourseDetective UK University Degree Course\nProspectuses UK University Libraries infoskills resources OUseful web\nproperties search How Do I? Instructional Video Metasearch Engine\n\n## Page Hacks\n\nRSS for the content of this page\n\nView posts in chronological order\n\n## Recent Posts\n\n## Top Posts\n\n  * Generating Diagrams from Text Generated by ChatGPT\n  * BlockPy - Introductory Python Programming Blockly Environment\n  * SQL Databases in the Browser, via WASM: SQLite and DuckDB\n  * Quick Play: Using Grafana For Motorsport Telemetry Dashboards\n  * Data Exfiltration Using Copilot in Edge?\n  * Building a JSON API Using Jupyter Notebooks in Under 5 Minutes\n  * More Than Ten Free Hosted Jupyter Notebook Environments You Can Try Right Now\n  * Running GPT4All On a Mac Using Python langchain in a Jupyter Notebook\n\n## Digital Worlds Blog\n\n  * Interlude \u2013 Enter the Land of Drawings...\n  * Photoshopping Audio...\n  * Augmented Reality and Autonomous Vehicles \u2013 Enabled by the Same Technologies?\n  * Using Cameras to Capture Objects as Well as Images\n  * Interlude \u2013 Ginger Facial Rigging Model\n  * Recap \u2013 Enabling the Impossible\n  * The Photorealistic Effect...\n  * Interlude \u2013 AR Apps Lite \u2013 Faceswapping\n  * From Motion Capture to Performance Capture \u2013 Sampling Movement in the Real World into the Digital Space\n  * 3D Models from Photos\n\nSubscribe in a reader\n\nOUseful.Info, the blog... Blog at WordPress.com.\n\n  * Reblog\n  * Subscribe Subscribed\n\n    * OUseful.Info, the blog...\n    * Already have a WordPress.com account? Log in now.\n\n  *     * OUseful.Info, the blog...\n    * Customize\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\nLoading Comments...\n\n%d\n\n", "frontpage": false}
