{"aid": "40031409", "title": "A better storage format for Postman API collections", "url": "https://github.com/juspay/hyperswitch/wiki/A-better-storage-format-for-postman-collections", "domain": "github.com/juspay", "votes": 1, "user": "manojr13", "posted_at": "2024-04-14 14:40:04", "comments": 0, "source_title": "A better storage format for postman collections", "source_text": "A better storage format for postman collections \u00b7 juspay/hyperswitch Wiki \u00b7\nGitHub\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\njuspay / hyperswitch Public\n\n  * Notifications\n  * Fork 1.1k\n  * Star 10.2k\n\n# A better storage format for postman collections\n\nJump to bottom\n\nNarsGNA edited this page Oct 20, 2023 \u00b7 1 revision\n\n> by Natarajan Kannan\n\nPostman collections are created using the Postman UI application. These\ncollections are represented as a JSON file by the Postman UI application. It\nis a single file that contains all the requests/tests/variables etc of the\ncollection. It is designed to be edited within the Postman UI. The newman tool\nallows teams to run Postman collections as part of their CI pipelines by\nsupplying the Postman collection file as an argument. Typically, teams that\nrely on Postman for their API testing in CI pipelines maintain a copy of the\ncollection file in their source repository. When teams maintain the Postman\ncollection in their repository, they will have the following workflow to make\nchanges to it and push is upstream:\n\n  * Import the collection json file from the repo into Postman UI\n  * Make changes to the collection in Postman UI\n  * Export the collection to a file using Postman UI\n  * Commit and push the changes\n\nThere are a few challenges with the above workflow:\n\n  1. Collection file diffs are very hard to review in pull requests\n\n     * Old format collection diff: https://github.com/juspay/hyperswitch/commit/7e29adb5c9dee8b03ef58ccbd85b07b106459380\n     * New format collection diff: https://github.com/juspay/hyperswitch/pull/2117/files\n  2. Developers cannot use their favourite editor to make changes, add/remove new tests\n\nAs a consequence of the above, collection maintenance suffers and often become\nstale.\n\n## Solution to the above challenges\n\nThe core reason for challenges presented above is the file format in which the\nPostman requests are maintained. A single JSON file that encapsulates the\nentire request code and sequencing does not lend itself for easy reviewing and\nbe an all-editor friendly format.\n\nThis fork of newman attempts to address the challenge by representing the\nPostman collection as a set of directories/files. It allows developers to\ncreate Postman collection using the directory representation and also run\nthem. It achieves this by re-constructing the collection json from the\ndirectory/file structure and leveraging the existing newman run\nimplementation.\n\nFor example, this is the directory equivalent representation of a sample\ncollection in the examples directory as generated by the dir-export command.\n\n### Directory representation of collection\n\nThe following is a tree structure of the directory that represents the Postman\ncollection with annotations of what each file corresponds to in a Postman\ncollection.\n\n    \n    \n    examples/Sample Postman Collection \u251c\u2500\u2500 .info.json # contains the info element from the top of collection json \u251c\u2500\u2500 .meta.json # contains the ordering of the request folders \u251c\u2500\u2500 .auth.json # contains the auth element from the top of the collection json \u251c\u2500\u2500 .variable.json # contains the variable element from the top of the collection json \u251c\u2500\u2500 .event.json # contains the event element from the top of the collection json \u2514\u2500\u2500 A simple GET request \u251c\u2500\u2500 .event.meta.json # contains the ordering of the scripts - prerequest / test \u251c\u2500\u2500 event.test.js # the test script that runs post the request \u251c\u2500\u2500 event.prerequest.js # the test script that runs before the request \u251c\u2500\u2500 request.json # the request json from the Postman collection \u2514\u2500\u2500 response.json # the response json\n\n### Next steps\n\nThis concept of representing Postman collections as a directory opens up\nprogrammatic pre-processing of request data before running the requests. This\ncould include things like the following:\n\n  * Re-using same data across requests\n  * Using other javascript libraries in testing code\n\nThe instructions for using the tool are given below. Please give it spin and\nlet me know it you if it is useful.\n\n## Usage\n\n### Installing newman from this fork\n\nOne can install the newman executable in this fork using the command:\n\n    \n    \n    npm install -g 'git+ssh://git@github.com:knutties/newman.git#feature/newman-dir'\n\nThe following no-arg run shows the new commands added to newman to help manage\nPostman requests maintained as directories/files instead of a single json\nfile.\n\n    \n    \n    $ newman Usage: newman [options] [command] Options: -v, --version output the version number -h, --help display help for command Commands: dir-add-folder [options] <folder-path> Add a folder to directory based Postman collection in the given path dir-add-request [options] <request-path> Add a request to directory based Postman collection in the given path dir-collection-create [options] <collection-path> Create a directory based Postman collection in the given path dir-export [options] <postman-collection-file> Convert a Postman collection file into its directory representation dir-export-import-check [options] <postman-collection-file> Check if an export followed by import results in same collection dir-import [options] <collection-dir> Convert a Postman directory representation into a postman collection dir-remove-folder <folder-path> Remove folder at given path from directory based Postman collection dir-remove-request <request-path> Remove request at given path from directory based Postman collection dir-run [options] <collection-dir> Runs the requests in collection-dir, with all the provided options run [options] <collection> Initiate a Postman Collection run from a given URL or path To get available options for a command: newman <command> -h\n\nThe following sections show the invocation of the different commands added in\nthis fork of newman.\n\n### Create a new directory based Postman collection\n\n    \n    \n    newman dir-collection-create new-dir-collection\n\n### Generating directory representation for an existing collection\n\n    \n    \n    newman dir-export examples/sample-collection.json\n\n### Convert a directory representation back to a Postman collection json file\n\n    \n    \n    newman dir-import examples/Sample\\ Postman\\ Collection/ -o examples/sample-collection.json\n\n### Diff the collection generated by export followed by its import\n\nThis command is typically used to test the tool itself to ensure it can handle\nall collection json use-cases.\n\n    \n    \n    newman dir-export-import-check examples/sample-collection.json\n\n### Execute a Postman collection stored in the directory format\n\n    \n    \n    newman dir-run examples/Sample\\ Postman\\ Collection/\n\nThe dir-run command supports all the options that the stock run command of\nnewman supports. This is achieved by re-using the same set of command options\nfor both the commands.\n\nSample output of dir-run shown below\n\n    \n    \n    newman Sample Postman Collection \u2192 A simple GET request GET https://postman-echo.com/get?source=newman-sample-github-collection [200 OK, 847B, 1054ms] \u2713 expect response be 200 \u2713 expect response json contain args \u2192 A simple POST request POST https://postman-echo.com/post [200 OK, 1.06kB, 317ms] \u2192 A simple POST request with JSON body POST https://postman-echo.com/post [200 OK, 1.17kB, 233ms] \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 executed \u2502 failed \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 iterations \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 requests \u2502 3 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 test-scripts \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 prerequest-scripts \u2502 0 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 assertions \u2502 2 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total run duration: 1647ms \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total data received: 2.13kB (approx) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 average response time: 534ms [min: 233ms, max: 1054ms, s.d.: 368ms] \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n### Add a folder under a existing directory\n\n    \n    \n    newman dir-add-folder examples/Sample\\ Postman\\ Collection/folder1\n\n### Add a request under a directory\n\n    \n    \n    newman dir-add-request examples/Sample\\ Postman\\ Collection/test4\n\nThis command adds the request to the end of the requests already present in\nthe folder. The order of the requests is stored in a separate file called\n.meta.json. The order of requests can be changed by re-ordering the requests\nin this file.\n\n### Remove a folder\n\n    \n    \n    newman dir-remove-folder examples/Sample\\ Postman\\ Collection/folder1\n\n### Remove a request\n\n    \n    \n    newman dir-remove-request examples/Sample\\ Postman\\ Collection/test4\n\nWhile we prefer our full-time hires to work on-site (at our Bangalore, India\nHQ), we are open to working with you remotely on a part time or a contractual\nbasis.\n\n##### Clone this wiki locally\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
