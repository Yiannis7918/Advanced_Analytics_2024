{"aid": "40010991", "title": "Fast, Declarative, Reproduble and Composable Developer Environments Using Nix", "url": "https://devenv.sh/", "domain": "devenv.sh", "votes": 13, "user": "domenkozar", "posted_at": "2024-04-12 10:08:23", "comments": 0, "source_title": "Fast, Declarative, Reproducible, and Composable Developer Environments", "source_text": "Fast, Declarative, Reproducible, and Composable Developer Environments -\ndevenv\n\n# Fast, Declarative, Reproduble and Composable Developer Environments using\nNix\n\nDevelop natively \u2022 Deploy containers \u2022 80.000+ packages \u2022 Write scripts \u2022 50+\nsupported languages \u2022 Define processes \u2022 Reuse services \u2022 Run tests \u2022 Enforce\ngit hooks\n\nGet started\n\nSimple JSON-like language\n\nDeclaratively define your development environment by toggling basic options.\n\nEnvironment variables.\n\n    \n\nUse env attribute set to define environment variables.\n\nIf you'd like to also include secrets from .env file, set dotenv.enable =\ntrue;.\n\nPackages.\n\n    Pick from 80000+ prebuilt packages for Linux/macOS and X64/Arm64. Works with WSL2.\n\nRun script(s) when entering the environment.\n\n    Prepare your environment when entering the shell that has environment already loaded.\n\nAutomatically load the environment when entering the project.\n\n    Using direnv will automatically load the environment when you enter the project directory.\n\ndevenv.nix\n\n    \n    \n    { pkgs, config, ... }: { env.GREET = \"determinism\"; packages = [ pkgs.ncdu ]; enterShell = '' echo hello ${config.env.GREET} ncdu --version ''; }\n    \n    \n    $ devenv shell hello determinism ncdu 2.3 (devenv) $\n\ndevenv.nix\n\n    \n    \n    { pkgs, ... }: { scripts.build.exec = \"parcel build\"; # Runs on git commit and CI pre-commit.hooks = { black.enable = true; # Your custom hooks generate-css = { enable = true; name = \"generate-css\"; entry = \"build\"; }; }; }\n    \n    \n    $ devenv shell build ...\n\nScripts and Git hooks\n\nDefine scripts and git hooks to automate your development workflow.\n\nScripts.\n\n    Define scripts that can be invoked inside the environment, using all the packages and environment variables.\n\ngit hooks.\n\n    Pick from builtin and language specific linters and formatters using git-hooks.nix.\n\nInvoke commands inside the environment.\n\n    Particularly useful in CI/CD and scripting.\n\nSearch packages and options\n\nExplore packages and options to customize your environment.\n\n    \n    \n    $ devenv search devenv +--------------+---------------+------------------------------------------------------------------------+ | Package | Version | Description | +--------------+---------------+------------------------------------------------------------------------+ | pkgs.devenv | 1.0.3 | Fast, Declarative, Reproducible, and Composable Developer Environments | +--------------+---------------+------------------------------------------------------------------------+ +--------------------------+---------+-----------+------------------------------------------------------------+ | Option | Type | Default | Description | +--------------------------+---------+-----------+------------------------------------------------------------+ | devenv.debug | boolean | false | Whether to enable debug mode of devenv enterShell script. | +--------------------------+---------+-----------+------------------------------------------------------------+ | devenv.warnOnNewVersion | boolean | true | Whether to warn when a new version of devenv is available. | +--------------------------+---------+-----------+------------------------------------------------------------+ | devenv.latestVersion | string | \"1.0.3\" | The latest version of devenv. | +--------------------------+---------+-----------+------------------------------------------------------------+ \u2022 Found 1 package and 3 options for 'devenv'.\n\nLanguages\n\nSupports over 50 programming languages.\n\nPacked with tooling.\n\n    Comes with commonly used tooling for each language. Including LSP servers, formatters, linters, and compilers.\n\nVersion support.\n\n    Languages like Python, Terraform, Rust, PHP and Ruby all have version support.\n\nExamples\n\n    Checkout examples collection to get started.\n\ndevenv.nix\n\n    \n    \n    { pkgs, config, ... }: { languages.python = { enable = true; version = \"3.11\"; venv.enable = true; venv.requirements = '' requests torch ''; uv.enable = true; }; languages.rust = { enable = true; channel = \"nightly\"; }; languages.php = { enable = true; version = \"8.1\"; ini = '' memory_limit = 256M ''; fpm.pools.web = { settings = { \"pm\" = \"dynamic\"; }; }; }; }\n\ndevenv.nix\n\n    \n    \n    { pkgs, ... }: { packages = [ pkgs.mkdocs pkgs.watchexec ]; processes = { docs.exec = \"mkdocs serve\"; tailwind.exec = \"watchexec -e html,css,js npx tailwindcss build extra.css -o output.css\"; }; }\n    \n    \n    $ devenv up \u2022 Building processes ... \u2022 Starting processes ... ...\n\nRun processes\n\nDefine your processes in a declarative way and start them with devenv up.\n\nProcesses\n\n    Inspired by Procfile, declare development processes that have access to your environment.\n\nprocess-compose\n\n    By default process-compose is used to manage processes, giving you a simple interface to inspect logs and restart processes (ctrl-r).\n\nRun services\n\nPick from a number of community maintained services like PostgreSQL, Redis,\nMySQL, RabbitMQ, WireMock, MinIO, Caddy, ElasticSearch, and more are being\nadded each day.\n\nPre-configured processes\n\n    Services define processes that are started when the service is enabled as part of devenv up.\n\nConfiguration\n\n    Each service provides a number of options how to configure it and a hook to pass extra configuration, whatever the format.\n\nExtendable\n\n    Define your development processes as a service, allowing reuse and simplicity of a few lines of configuration.\n\ndevenv.nix\n\n    \n    \n    { pkgs, ... }: { services.postgres = { enable = true; package = pkgs.postgresql_15; initialDatabases = [{ name = \"mydb\"; }]; extensions = extensions: [ extensions.postgis extensions.timescaledb ]; settings.shared_preload_libraries = \"timescaledb\"; initialScript = \"CREATE EXTENSION IF NOT EXISTS timescaledb;\"; }; }\n    \n    \n    $ devenv up ...\n\ndevenv.nix\n\n    \n    \n    { pkgs, ... }: { packages = [ pkgs.mkdocs pkgs.curl ]; processes = { docs.exec = \"mkdocs serve\"; }; enterTest = '' wait_for_port 8000 curl http://localhost:8000 | grep \"Hello, world!\" ''; }\n    \n    \n    $ devenv test ...\n\nRun tests\n\nRunning a script inside your development environment with all processes\nrunning should be as simple as devenv test.\n\nenterTest\n\n    \n\nExecute your favorite language test runner or a simple script to verify your\nenvironment.\n\nAll process management is taken care for you.\n\nContainer interoperability\n\nGenerate containers from your development environment and build/copy/run them.\n\nContainerize your environment.\n\n    \n\nshell container allows you to run your environment in a container.\n\nUse devenv container run shell to enter your environment in a container.\n\nContainerize your processes.\n\n    \n\nprocesses container allows you to run your processes in a container.\n\nUse devenv container run processes to run your processes in a container.\n\nCustom containers.\n\n    Define containers.mycontainer.* to customize your container.\n\ndevenv.nix\n\n    \n    \n    { pkgs, ... }: { packages = [ pkgs.mkdocs pkgs.curl ]; processes = { docs.exec = \"mkdocs serve\"; }; }\n    \n    \n    $ devenv container build processes ... $ devenv container copy processes ... $ devenv container run processes ...\n\ndevenv.nix\n\n    \n    \n    inputs: myorg-devenv: url: github:myorg/myorg-devenv imports: - ./frontend - ./backend - myorg-devenv/service1 - myorg-devenv/service2\n\nPoly/Mono repo composability\n\nCompose multiple environments into a single environment.\n\nLocal imports\n\n    If you're working on a monorepo, define environment per folder and import them to merge them into a single environment.\n\nRemote imports\n\n    \n\nIf you're working on a polyrepo, define environment per repository and import\nthem to merge them into a single environment.\n\nA great way to get started is to use central repository with all the shared\nconfiguration until your team is comfortable maintaining their own\nenvironments.\n\n## Built by\n\n", "frontpage": true}
