{"aid": "40013122", "title": "What we need to take away from the XZ Backdoor", "url": "https://news.opensuse.org/2024/04/12/learn-from-the-xz-backdoor/", "domain": "opensuse.org", "votes": 1, "user": "rascul", "posted_at": "2024-04-12 14:11:01", "comments": 0, "source_title": "What we need to take away from the XZ Backdoor", "source_text": "What we need to take away from the XZ Backdoor - openSUSE News\n\n##### Main\n\n  * Main site\n  * Software\n  * Wiki\n  * Documentation\n  * Forum\n\n##### Development\n\n  * Build service\n  * Bugzilla\n  * GitHub\n  * openQA\n  * Weblate\n  * Kernel\n\n##### Information\n\n  * News\n  * Events\n  * Planet\n  * Shop\n  * Status\n  * Survey\n\n##### Community\n\n  * IRC channels\n  * Mail lists\n  * Facebook group\n  * Telegram group\n  * Reddit\n\n##### Social media\n\n  * Mastodon\n  * Telegram\n  * Facebook\n  * Twitter\n  * YouTube\n\n##### Other\n\n  * Packman\n  * Kubic\n  * Guide (unofficial)\n  * Mirrors\n  * Lizards\n\n  1. News\n  2. 2024\n  3. April\n  4. 12\n  5. What we need to take away from the XZ Backdoor\n\n# What we need to take away from the XZ Backdoor\n\n12\\. Apr 2024 | Dirk Mueller | CC-BY-SA-3.0\n\nA lot has been written about the XZ Backdoor in the last few weeks, so it is\ntime to look forward. Before doing so, we share further details about what\nhappened with regards to openSUSE. For an overview how it affected openSUSE\nusers, please refer to the previous post.\n\n## Behind the scenes\n\nA few days before the public disclosure of the XZ backdoor, the SUSE product\nsecurity team got a hint that there is something odd with the XZ 5.6.x\nreleases. I am the SUSE employee and openSUSE packager that was updating and\nincluding this version into openSUSE Tumbleweed, so I got involved in this\nquite early. By that time, no context and information that was shared in the\ninitial public disclosure was available to us. However, that hint was all the\ninformation that we needed. It changed the way we looked at an established,\ncentral open-source project. Without that, the odd small diff in the\n\u201cconfigure\u201d stage of the build system would have been easily disregarded.\n\nOne day before disclosure, on Thursday evening, SUSE product security received\na longer and detailed report from Andres Freund via the shared distros\nsecurity disclosure list. The distros list is an encrypted mailing list where\ndistributors collaborate and coordinate on disclosures of security issues.\nThis report brought the new knowledge that the XZ backdoor specifically\ntargeted OpenSSH, which is one of the network-facing parts of nearly every\nLinux system. This even further increased our threat level to be of a remote\naccess backdoor and also caused us to widen our planned communication efforts.\n\nThe SUSE security team and I started analyzing. SUSE product security is a\nmember of various private security forums, like the distros list and CERT\nVINCE and others, which allow us to coordinate fixes between software vendors\nand have updates ready on the disclosure dates. With initial information that\nthere is something suspicious, it was relatively easy to find more suspicious\nthings in no particular order:\n\n  * openSUSE and SUSE track release artifact signatures with a keyring of trusted signatures. We noticed that the key that the artifacts were signed with changed some time ago, so we had to update our trusted keyring for the XZ project. We validated that there was a maintainer handover and that the new maintainer has direct commit access as well as the ability to sign releases and publish them. The web of trust of this new signing key was not well connected, which could have raised an alert, but it was signed by the previous maintainer and that was sufficient for us.\n\n  * Looking at the commit history, there was a flurry of commits between the last 5.5 beta and the 5.6.0 release in a short time window by that new maintainer; not coming via a Pull Request and no obvious review or discussion on it. This was immediately concerning. Normally projects do not do that just before a major new release. Reviewing every single commit immediately showed odd test files being committed and updated in 5.6.1, and that did not have corresponding updates in the test framework or in the project code, so these were \u201cunused\u201d. Normally test files are committed alongside a code fix in the same commit, or with a reference to a prior issue, or a commit that the test case is addressing. For an experienced maintainer of an upstream project, this seemed like a big oversight. The commit messages were sort of plausible but not really making sense, especially when comparing the (small) differences between 5.6.0 and 5.6.1.\n\nFurther investigation lead to finding the \u201cstage zero\u201d embedded in the build\nsystem and with that we were able to step through the layers of obfuscation to\nuntangle the second and third stage. Within minutes, it became clear to us\nthat very significant effort was spent on developing it. It wasn\u2019t the work of\na single developer on a rainy Sunday afternoon. Also, the second stage hinted\nthat this was a backdoor that was specifically targetted at only specific\nenvironments, Debian or RPM package builds using GCC and glibc. A normal user\nbuilding from source, either from the backdoored tarball or from git would\nhave never been affected. This raised alarm bells. So before we went further\nwith the reverse engineering, we assessed the impact.\n\nFor a while, openSUSE has not been using XZ for compression of our\ndistribution rpm packages; we switched to Zstd a while ago. However, XZ is\nvery widely used in the distribution, amongst many other things for\nuncompressing the sources of our GCC compiler that we use to build everything\nelse in the distribution. We checked and saw that the suspected malicous XZ\nrelease was being used for building our active openSUSE GCC compiler, which is\nused in every other build of the distribution. The worst case scenario to\nthink of here is that the unpacking of the GCC compiler build sources was\nbeing modified by the malicious XZ and we have a system compiler that was no\nlonger trustworthy. Although we do have signature checks on the sources (and\nhave secured copies of every source input we ever used anywhere in a trusted\nlookaside store), we have no checks whether the unpacked sources are actually\nthe sources that were signature checked prior to unpacking.\n\nSo even without any further information about the backdoor, we understood that\nthe impact worst case could be disastrous. So we started identifying affected\nprojects, products and distributions. Fortunately that list turned out to be\nfairly small. An ad hoc team was formed to handle the removal of the backdoor.\n\n## Initial Removal of the Backdoor for our users\n\nopenSUSE Tumbleweed ships an emergency update channel that we can use to\nrecover from fatal regressions in the regular Tumbleweed snapshots. These are\nextremely rare thanks to our automated testing pipeline, but they do happen.\nWe injected a downgrade of XZ into that emergency update channel and started\nbuilding an interim openSUSE snapshot release that had the malicious XZ update\nremoved. However, due to the unknown nature of the obfuscated backdoor, we\nwere planning with the worst assumption. We started collecting how many\npackages have been built and released with the build of the suspect GCC\ncompiler within the build environment. It was a very large list. Also, making\nsense of the reversing of the malicious backdoor object code in Ghidra would\ntake us another couple of hours. After a short sync, we decided to go for the\nsafe route and throw away every package that was built with the potentially\nmalicious XZ/GCC and started rebuilding all of them with only packages that\nwere coming from a safe backup, to restore integrity of our distribution as\nquickly as possible. openSUSE regularly tests this \u201cbootstrap mode\u201d as part of\nour distribution development and relies on the rebuild automation provided by\nthe Open Build Service, so this wasn\u2019t a lot of human work. It was just a lot\nof load for our build cluster. We had a couple of hours of waiting in front of\nus, which allowed further analysis of the backdoor.\n\n## Analysis of the backdoor\n\nAnalysis of the object code turned out to be time intensive. While the second\nstage that checked for the right build conditions (is it a distribution build,\ndoes it have the expected compiler environment etc.) was easy to decode and\nhelped us understand the potential impact, initially it wasn\u2019t really clear to\nus what the obfuscated object code that was injected during the build was\ndoing.\n\nBy using Ghidra, we were able to get somewhat readable C code back from the\ninjected machine code, so we started trying to decipher the puzzle. Spotting\nthe entry point in the _get_cpuid function that was part of the IFUNC handling\nwas one of the first findings. Just Googling this combination of words led to\nan upstream discussion, to the disablement of ifunc in the oss fuzz project\nand an interesting bug report in the Fedora community where Valgrind issues\nwere reported with XZ 5.6.0 and apparently the upstream was fixing those by\nupdating unrelated things including \u201cthe test files\u201d in the repository. There\nwere not only commits in the repository but also misleading communication\naround the issue directly related to those commits, which made it obvious that\nwe were not finding an unfortunate accident by an innocent maintainer who\nmight have been hacked, but a planned action by the current upstream\nmaintainer. Just in case the alarm bells weren\u2019t loud enough already, this\ndoubled their noise level.\n\n## Preparing for the Public Disclosure\n\nCombining all of what we learned so far, the picture became clearer. Somebody\nhad spent years of preparation to lay down the ground work, build up a good\nmaintainer reputation, take over the project and then chose a point in time\nthat was a critical window for several distribution projects and in the middle\nof Lunar New Year as well as other holidays to release a new version with new\nfeatures and an obfuscated backdoor that was well-crafted to target only\nspecific distributions, namely those using GCC, Binutils, Glibc with RPM or\nDebian build processes on x86_64.\n\nWith all of that in mind, we realized that there is going to be a lot of\npublic coverage on this. It will be in the news for days to weeks. So we\nstarted a new workstream to prepare for that with the communications teams.\n\n## Public Disclosure\n\nBy the time of the public disclosure, all workstreams had already completed.\nWe identified the list of affected products, and had already released all\nupdates for all affected ones. Communication was ready to be put online and\nsent out to the relevant parties. All of that was possible because many people\nwent above and beyond, put everything else aside to react timely and with a\nlot of engagement to ensure we haven\u2019t missed anything or overlooked anything;\nall this while a long public holiday weekend had already started. Kudos to\neveryone who was working around the clock on preparing for this.\n\n## Hero of the story\n\nThat nothing worse happened is only thanks to Andres Freund, a developer in\nthe PostgreSQL community who was not skipping over an odd performance\nregression of SSH logins to his recently upgraded Debian unstable\ninstallation. Another testiment that not letting go on something that everyone\nelse likely would have ignored for the next months to years is what makes a\nhero a hero.\n\nHowever, relying on heroes is not a sustainable and reliable strategy. So for\nthe future, we all need to learn from what happened and need to become a large\nteam of small heroes.\n\n## TLDR of What Happened\n\nLinux distributions were abused to deliver a backdoor to their users. What the\nexact purpose of the backdoor was is still speculation. It could be all from\nan individual who wanted to sell access to abundant compute power via public\ncloud hosted virtual machines that have a vulnerable ssh port open to the\npublic. Which is the rather unlikely, but still possible, one end of the\nspectrum. The other end of the spectrum is a company that sells backdoors to\nstate actors that make use of those to remotely and covertly access any Linux\nmachine. Although mistakes were made, it almost achieved that goal. Where is\nthe truth? Further evidence needs to be identified and analyzed for that.\n\n## Time to look forward\n\nAfter this close look behind the curtains of what happened at the end of\nMarch, the rest of this post switches gears to looking forward.\n\n### Linus Law and the distributions\n\n\u201cGiven enough eyeballs, all bugs are shallow\u201d. In open source communities,\nthis is cited a lot as a reason for why open source can be trusted. For open-\nsource projects that are attracting enough attention from sufficiently skilled\ncontributors, this \u201claw\u201d probably has at least some weight. However, we\nlearned for example from Heartbleed that these preconditions are not\nuniversally fulfilled. There are are many projects that are absolutely\nessential and yet are considered boring and fail to attract a lot of\nmaintainers or contributors, and those who are on the project are buried under\na pile of work already and can\u2019t really spend significant effort on ramping up\nnew joiners.\n\nThe XZ backdoor was designed to only target distributions. First, by the\nprechecks that the backdoor executed before unfolding, but also because the\nconditions necessary for implanting were only existing downstream in these\ndistributions. Debian, as well as the other affected distributions like\nopenSUSE are carrying a significant amount of downstream-only patches to\nessential open-source projects, like in this case OpenSSH. With hindsight,\nthat should be another Heartbleed-level learning for the work of the\ndistributions. These patches built the essential steps to embed the backdoor,\nand do not have the scrutiny that they likely would have received by the\nrespective upstream maintainers. Whether you trust Linus Law or not, it was\nnot even given a chance to chime in here. Upstream did not fail on the users,\ndistributions failed on upstream and their users here.\n\n### Open source and their communities\n\nBeing able to inspecting source code of open-source software gives the\ncommunity an unbeatable advantage over proprietary single-vendor alternatives.\nHowever, auditing source code is time intensive and often needs highly\nexperienced domain and security experts. Commercial distributions should and\nare playing an important role in this; yet they have not identified this. The\nXZ project was in that sense the perfect blind spot for how effort is\ntypically allocated for security audits. Very deeply nested and important for\nevery distribution due to non-obvious reasons, and in the state of only one\nmaintainer and very few contributors or reviewers for years. It is not the\nshiny new cloud native or otherwise fancy new open-source project that\nattracts thousand of developers or security researchers, and yet it is just as\nimportant for the integrity and security of modern computing. If anything\nthere is to learn here, is that the selection criterias for where to focus on\nneeds to be adjusted with these learnings.\n\nFurthermore, others have already emphasized that the initial attack vector\nwasn\u2019t technical. It wasn\u2019t an archaic tarball. The actual initial attack was\nsocial engineering and used toxic behavior in communities. This is real and\nnot only in this case affects the existing maintainers of open-source\nprojects. Many stories have been told where maintainer stress or burn out was\nconnected to toxic participants in the project communities. Although I believe\nthe distributions are not part of those activities, we are not set up to\nprevent these things from happening. The distribution developers are focused\non their issues and their users and are, due to their limited time, risking to\nneglect the (upstream) open-source communities. This is another thing that we\nneed to keep in mind.\n\nInitiatives like CHAOSS and the Open Source Security Foundation have been\nfounded because otherwise these situations would be too easy to miss. They\nprovide essential service toward analyzing the \u201cbus factor\u201d, or the \u201ccollusion\nfactor\u201d of how many actors are needed to subvert a project and thereby allow\nothers to focus on directing help where it matters the most.\n\n### The cost of Freedom\n\nFLOSS is not about cost, or about being free to use, but about the freedom to\ninspect and (re-)use. What is the cost of that freedom? In the proprietary\nworld, software is paid for. In open source, this freedom needs to receive the\nrecognition it deserves and needs to be valued. When somebody refers to the XZ\nbackdoor as a Software Supply Chain Security incident, that is not the full\npicture. A Software Supply chain would be where there is a supplier at one\nend. But open-source projects and communities are not suppliers today. They\nhave no legally binding contract with any of their consumers, and there is no\nexchange of money involved. There exists a community, varying in size, that\ncontributes and assists, either as volunteers or as paid workers. Most\nprojects are not receiving enough of it.\n\nAs an open-ended thought: Should distributions actively build up and manage\ntheir supply chain and treat \u201ctheir suppliers\u201d as real suppliers with legally\nbinding mutual terms and conditions and agreed upon compensations?\n\n### The Secure Web of Trust is the new Supply Chain Security\n\nIn this particular incident, signed tarballs were used to publish the launcher\nof the backdoor. Many things have been said about that. We need to realize\nthat this is a distraction. A trap. In terms of code size, 99.9% of the\nbackdoor was in the source code repository. The launcher in the tarball was to\nlimit the exposure of the backdoor to only the intended victims, not\ntechnically needed for anything or by anything. It would have been equally\neasy to embed and equally hard to spot with the rest of the 0.1% being also\ncommitted inside the project code repository, just in a marginally different\nway.\n\nFor most other thinkable attack scenarios, signed release artifacts provide\nimportant qualities. They fulfil the expectation to only ship what has been\ndeemed ship-ready. They provide an independently verifiable chain to the\norigin (the \u201cSupplier\u201d). However, each distribution starts with this\nverifiable first part of the chain and then adds on top. Often (or meanwhile\nalmost always) with a transparent way to verify those changes as well (in the\nform of SLSA conformant procedures), all in isolation. How reliable are those\ndisjoint chains? Currently, distributions occasionally reuse the same or\nsimilar patches on top of upstream project releases, but otherwise for the\nmost part work in isolation and only rarely actively collaborate. The\nessential piece of downstream patch that activated the backdoor existed for\nclose to 10 years in the distributions, yet has not been seen in upstream.\n\nWe recognize that the XZ backdoor is cleverly built. Yet, it had surprising\nflaws in execution. Whoever is interested in embedding further backdoors has\nlearned from the extensive public coverage of everything that went wrong.\nThese mistakes have been pointed out, published and learned from. We have\ngiven the actors behind this backdoor free training for future attacks. It is\ntime that distributions learn from this as well and also take training\nlessons. We need to actively collaborate and build a strong, reliable web of\ntrust with open-source projects and each other to be prepared to handle the\ninevitable future challenges that will come. Let\u2019s build a Secure Web of Trust\ntogether!\n\n_^Picture on this post was taken by Matthias Pastwa and used under CC-BY-ND\n2.0 DEED\n\nCategories: openSUSE Tumbleweed\n\nTags: openSUSE Developers Open Source Community Security\n\n##### Share this post:\n\n\u00a9 2011\u20132024 openSUSE contributors\n\nSource Code License\n\n", "frontpage": false}
