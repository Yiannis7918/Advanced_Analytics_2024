{"aid": "39967507", "title": "Getting Started with GitOps and FluxCD", "url": "https://developer-friendly.blog/2024/04/06/gitops-demystified-introduction-to-fluxcd-for-kubernetes/", "domain": "developer-friendly.blog", "votes": 1, "user": "meysamazad", "posted_at": "2024-04-08 08:32:50", "comments": 0, "source_title": "GitOps Demystified: Introduction to FluxCD for Kubernetes - Developer Friendly Blog", "source_text": "GitOps Demystified: Introduction to FluxCD for Kubernetes - Developer Friendly\nBlog\n\nSkip to content\n\n# Getting Started with GitOps and FluxCD\u00b6\n\nLearn how to leverage your Git repository, the GitOps style, to manage your\nKubernetes cluster with FluxCD. Enhance your delivery and reduce deployment\nfrictions with GitOps.\n\n## Introduction\u00b6\n\nGitOps is a modern approach to managing infrastructure and applications. It\nleverages Git repositories as the source of truth for your infrastructure and\napplication configurations. By using GitOps, you can automate your deployment\nprocesses, enhance your delivery pipeline, and reduce deployment frictions.\n\nIn this guide, we will explore the fundamentals of GitOps and FluxCD. We will\nlearn how to set up FluxCD in your Kubernetes cluster and automate your\ndeployments.\n\n## Prerequisites\u00b6\n\nBefore we start, you need to have the following prerequisites:\n\n  * A Kubernetes cluster up and running\n\n    * If you feel nerdy and don't mind getting your hands dirty with a bit of complexity, you shall find the Kubernetes the Hard Way very helpful.\n\n    * If you don't have the time or the mood to setup a full-fledged Kubernetes cluster, you can either use a managed cluster on a cloud provider, spin up any of the easy solutions e.g. Minikube, Kind, or follow our previous guide to Setup a production-ready Kubernetes cluster using K3s.\n\n  * A Git repository to store your Kubernetes manifests\n\n  * FluxCD^1 binary installed in your PATH (v2.2.3 at the time of writing)\n  * Optionally, the GitHub CLI (gh)^2 for easier GitHub operations ( v2.47.0 at the time of writing).\n  * A basic understanding of Kustomize. A topic for a future post.\n\n## What is GitOps?\u00b6\n\nGitOps is a modern approach to managing infrastructure and applications. It\nleverages Git repositories as the source of truth for your infrastructure and\napplication configurations. By using GitOps, you can automate your deployment\nprocesses, enhance your delivery pipeline, and reduce deployment frictions.\n\nGitOps Definition by Wikipedia\n\nGitOps evolved from DevOps. The specific state of deployment configuration is\nversion-controlled. Because the most popular version-control is Git, GitOps'\napproach has been named after Git. Changes to configuration can be managed\nusing code review practices, and can be rolled back using version-controlling.\nEssentially, all of the changes to a code are tracked, bookmarked, and making\nany updates to the history can be made easier. As explained by Red Hat,\n\"visibility to change means the ability to trace and reproduce issues quickly,\nimproving overall security.\"^3\n\n## What is FluxCD?\u00b6\n\nFluxCD is a popular GitOps operator for Kubernetes. It automates the\ndeployment of your applications and infrastructure configurations by syncing\nthem with your Git repository. FluxCD watches your Git repository for changes\nand applies them to your Kubernetes cluster.\n\n## FluxCD Setup & Automation\u00b6\n\nBootstrap refers to the initial setup of FluxCD in your Kubernetes cluster.\nAfter which, FluxCD will continuously watch your Git repository for changes\nand apply them to your cluster.\n\nOne of the benefits of using FluxCD during the bootstrap phase is that you can\neven upgrade FluxCD itself using the same GitOps approach, as you would do\nwith your applications.\n\nThat means less manual intervention and more automation, especially if you opt\nfor an automated FluxCD upgrade process^4. I don't know about you, but I\ncannot have enough automation in my life .\n\n## Step 0: Check Pre-requisites\u00b6\n\nYou can check your if your initial setup is acceptable by FluxCD using the\nfollowing command:\n\n    \n    \n    flux check --pre\n\n### Creating the GitHub Repository\u00b6\n\nSkip this step if you already have a GitHub repository ready for FluxCD.\n\nRepository\n\nFluxCD will create the repository as part of the bootstrap process. This step\nwill only give you flexibility for better customization.\n\nYou will need the GitHub CLI^2 installed for the following to work.\n\n    \n    \n    gh repo create getting-started-with-gitops --clone --public cd getting-started-with-gitops\n\n### Root Reconciler\u00b6\n\nFluxCD bootstrap is able to create any initial resource you place in its\nbootstrap path. Which means we will be able to spin up any and all the\nresources we need alongside FluxCD with only a single command.\n\nThat's why, in the same path to the FluxCD bootstrap, we will create a root\nKustomization that will control all the subdirectories and reconcile the\nresources as needed.\n\nThis will later be used to create the monitoring stack and all the bells and\nwhistles that come with it.\n\nclusters/dev/k8s.yml\n\n    \n    \n    apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: k8s namespace: flux-system spec: interval: 10s path: ./dev prune: true sourceRef: kind: GitRepository name: flux-system timeout: 2m wait: true\n\nAnd one of the stacks that will be managed by this root Kustomization are as\nfollows:\n\n    \n    \n    resources: - namespace.yml - repository.yml - release.yml\n    \n    \n    apiVersion: v1 kind: Namespace metadata: name: monitoring\n    \n    \n    apiVersion: source.toolkit.fluxcd.io/v1beta2 kind: HelmRepository metadata: name: grafana namespace: monitoring spec: interval: 10m url: https://grafana.github.io/helm-charts\n    \n    \n    apiVersion: helm.toolkit.fluxcd.io/v2beta2 kind: HelmRelease metadata: name: loki-stack namespace: monitoring spec: chart: spec: chart: loki-stack sourceRef: kind: HelmRepository name: grafana version: 2.x interval: 10m timeout: 2m values: grafana: enabled: true prometheus: enabled: true\n\n### Create a GitHub Personal Access Token\u00b6\n\nWe will need a GitHub Personal Access Token^7 with the repo scope. You can see\ntoken creation screenshot below:\n\nGenerating GitHub Personal Access Token (PAT)\n\nUse the newly created token for the next step.\n\n## Step 1: Bootstrapping FluxCD\u00b6\n\nWe can now spin up FluxCD in our Kubernetes cluster using the following\ncommand:\n\n    \n    \n    export GITHUB_TOKEN=\"TOKEN_FROM_THE_LAST_STEP\" export GITHUB_ACCOUNT=\"developer-friendly\" export GITHUB_REPO=\"getting-started-with-gitops\" flux bootstrap github \\ --owner=${GITHUB_ACCOUNT} \\ --repository=${GITHUB_REPO} \\ --private=false \\ --personal=true \\ --path=clusters/dev\n\nIt will take a moment or two for everything to reconcile, but after that,\nFluxCD will be up and running in your Kubernetes cluster.\n\n### Check the state of the cluster\u00b6\n\nYou can check the status using the following command.\n\n    \n    \n    flux check\n\nWe can also check the pods, Kustomization and HelmRelease resources.\n\n    \n    \n    kubectl get pods -A kubectl get kustomizations,helmreleases -A # ks,hr for short\n\nThe final status of our loki-stack HelmRelease will transition from this:\n\n    \n    \n    Running 'install' action with timeout of 2m0s\n\nTo this:\n\n    \n    \n    Helm install succeeded for release monitoring/loki-stack.v1 with chart loki-stack@2.10.2\n\n## Step 2: Monitoring the Cluster\u00b6\n\nWe now have the monitoring stack up and running in our Kubernetes cluster.\nLet's leverage it to deliver our alerts and notifications to the Prometheus\nAlertmanager^8.\n\nBecause of the necessity of monitoring and sane alerting, we need a mechanism\nto be notified about the events of our cluster based on different severities.\nThat's where FluxCD's notification controller^6 comes into play.\n\nIn this step we will create a Provider for FluxCD to send notifications and\nalerts to our in-cluster Alertmanager, after which the admin/operator can\ndecide how to handle them using the AlertmanagerConfig resource.\n\nAlertmanager Configuration\n\nStay tuned for a future post where we will explore how to configure\nAlertmanager to send notifications to various channels like Slack, Email, and\nmore.\n\n    \n    \n    resources: - alertmanager-address.yml - alertmanager.yml - alert.yml - info.yml\n    \n    \n    apiVersion: v1 kind: Secret metadata: name: alertmanager-address namespace: flux-system stringData: address: http://loki-stack-alertmanager.monitoring:9093/api/v2/alerts type: Opaque\n    \n    \n    apiVersion: notification.toolkit.fluxcd.io/v1beta3 kind: Provider metadata: name: alertmanager namespace: flux-system spec: secretRef: name: alertmanager-address type: alertmanager\n\nAnd the notification resources are as follows:\n\n    \n    \n    apiVersion: notification.toolkit.fluxcd.io/v1beta3 kind: Alert metadata: name: alert namespace: flux-system spec: eventSeverity: error eventMetadata: severity: error eventSources: - kind: GitRepository name: '*' namespace: flux-system - kind: Kustomization name: '*' namespace: flux-system - kind: HelmRelease name: '*' namespace: monitoring - kind: Kustomization name: '*' namespace: default providerRef: name: alertmanager summary: FluxCD reconciliation error\n    \n    \n    apiVersion: notification.toolkit.fluxcd.io/v1beta3 kind: Alert metadata: name: info namespace: flux-system spec: eventSeverity: info eventMetadata: severity: info eventSources: - kind: GitRepository name: '*' namespace: flux-system - kind: Kustomization name: '*' namespace: flux-system - kind: HelmRelease name: '*' namespace: monitoring - kind: Kustomization name: '*' namespace: default providerRef: name: alertmanager summary: FluxCD reconciliation info\n\nThere are some important notes worth mentioning here:\n\n  1. We didn't run any kubectl apply command after writing our new manifests and committing them to the repository. FluxCD took care of that behind the scenes. The root reconciler is a Kustomization resource which has a recursive nature and will apply all the kustomization.yml files in the subdirectories.\n  2. The alertmanager-address Secret will need to be in the same namespace as the Provider resource. This is due to the design of the Kubernetes itself and has less to do with FluxCD.\n  3. Having notifications on different severities allow you and your team to receive highlights about the live state of your cluster as you see fit. This means that you might be interested to route the informational notifications to a muted Slack channel which is likely noisier than the critical alerts, while sending the critical alerts to a pager system that will notify the right people at the right time.\n\nReconciliation\n\nAll the manifests we created so far are committed to the repository and pushed\nto the remote. We didn't need any kubectl apply command to apply those\nresources and as long as we write and commit all our manifests under the same\ntree structure, FluxCD will create them in the cluster.\n\n## Step 3: Trigger a Notification\u00b6\n\nWe have created the required resource for the notifications to be sent to the\nPrometheus' Alertmanager.\n\nTo take it for a spin, we can create a sample application to trigger the info\nnotification.\n\n    \n    \n    resources: - deployment.yml - service.yml configMapGenerator: - files: - configs.env name: echo-server images: - name: jmalloc/echo-server newTag: 0.3.6 namespace: default\n    \n    \n    LOG_HTTP_HEADERS=STDOUT LOG_HTTP_BODY=STDOUT\n    \n    \n    apiVersion: apps/v1 kind: Deployment metadata: name: echo-server spec: replicas: 1 selector: matchLabels: app: echo-server template: strategy: type: RollingUpdate rollingUpdate: maxSurge: 1 maxUnavailable: 0 metadata: labels: app: echo-server spec: containers: - name: echo-server image: jmalloc/echo-server ports: - containerPort: 8080 name: http envFrom: - configMapRef: name: echo-server\n    \n    \n    apiVersion: v1 kind: Service metadata: name: echo-server spec: ports: - name: http port: 80 targetPort: http selector: app: echo-server\n\nWe won't go into much detail for the Kustomize resource as that is a topic for\nanother post and deserves more depth.\n\nHowever, pay close attention to the syntax of configs.env and the way we have\nemployed configMapGenerator in the kustomization.yml file.\n\nThis will ensure that for every change to the configs.env file, the resulting\nConfigMap resource will be re-created with a new hash-suffixed name, which\nwill consequently restart the Deployment resource and re-read the new\nvalues^9.\n\nThis is an important highlight cause you have to specify your Deployment\nstrategy carefully if you want to avoid downtime in your applications.\n\nKustomize\n\nWe will dive into Kustomize and all its powerful and expressive features in a\nfuture post. Stay tuned to learn more about it.\n\nTo see that our notification has arrived at Alertmanager, we will jump over to\nthe Alertmanager service using port forwarding technique, although in a real\nworld scenario, you'd expose it through either an Ingress Controller or a\nGateway API (a topic for another post ).\n\n    \n    \n    kubectl port-forward -n monitoring svc/loki-stack-alertmanager 9093:9093 &\n\nSure enough, if we open http://localhost:9093, we will see the notification in\nthe Alertmanager UI as seen in the screenshot below.\n\nAlertmanager UI info triggered\n\n### Trigger a Critical Alert\u00b6\n\nNow, let's break the app to see if the severity of the notification changes as\nexpected.\n\ndev/echo-server/kustomization.yml\n\n    \n    \n    resources: - deployment.yml - service.yml configMapGenerator: - files: - configs.env name: echo-server images: - name: jmalloc/echo-server newTag: non-existent-tag namespace: default\n\nAnd lo and behold, the Alertmanager UI will now show the critical alert as\nseen below.\n\nAlertmanager UI error triggered\n\nTo restore the application to its normal state, you can revert the changes,\ncommit to the repository and let FluxCD do its magic.\n\n## Conclusion\u00b6\n\nThat concludes our guide on getting started with GitOps and FluxCD. We have\ncovered most of the essential components and concepts of GitOps and FluxCD.\n\nWe have deployed the monitoring stack right out of the box and provided the\nminimum working example^10 on how to structure your repository in a way that\nreduces the friction of your deployments in an automated and GitOps fashion.\n\nLastly, we have deployed an application and triggered both informational and\ncritical alerts to the Prometheus Alertmanager. By observing the notifications\nin the Alertmanager UI, we have seen how the notifications are routed based on\ntheir severity.\n\nIn a future post, we will explore more integrations with this setup on how to\nroute the notifications on Alertmanager to external services like Slack,\nDiscord, etc. and how to manage your secrets in a secure way so that you\nwouldn't have to commit them to your repository.\n\nAnother topic we didn't cover here was Receiver resource. That will require\ninternet access to your cluster, which we'll cover at a later post when\ndiscussing the Kubernetes Gateway API^11.\n\nUntil next time, ciao & happy coding!\n\n## Source Code\u00b6\n\nThe full repository is publicly available on GitHub^12 under the Apache 2.0\nlicense.\n\n  1. https://github.com/fluxcd/flux2/releases/ \u21a9\n\n  2. https://cli.github.com/ \u21a9\u21a9\n\n  3. https://en.wikipedia.org/wiki/DevOps#GitOps \u21a9\n\n  4. https://fluxcd.io/flux/installation/upgrade/#upgrade-with-flux-cli \u21a9\n\n  5. https://fluxcd.io/flux/flux-gh-action/ \u21a9\n\n  6. https://fluxcd.io/flux/components/notification/ \u21a9\n\n  7. https://github.com/settings/tokens/new \u21a9\n\n  8. https://prometheus.io/docs/alerting/latest/alertmanager/ \u21a9\n\n  9. https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/configmapgenerator/ \u21a9\n\n  10. https://en.wikipedia.org/wiki/Minimal_reproducible_example \u21a9\n\n  11. https://gateway-api.sigs.k8s.io/ \u21a9\n\n  12. https://github.com/developer-friendly/getting-started-with-gitops/tree/v2.2.3/ \u21a9\n\nApril 8, 2024 March 31, 2024 GitHub\n\nCopyright \u00a9 Meysam Azad\n\nMade with Material for MkDocs and hosted by GitHub Pages We respect your\nprivacy. To manage your cookie preferences, click here. Licensed under the\nApache-2.0 license\n\n", "frontpage": false}
