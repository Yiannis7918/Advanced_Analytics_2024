{"aid": "40088786", "title": "Multi-Tenancy in Pinecone", "url": "https://www.pinecone.io/learn/series/vector-databases-in-production-for-busy-engineers/vector-database-multi-tenancy/", "domain": "pinecone.io", "votes": 1, "user": "gk1", "posted_at": "2024-04-19 16:28:29", "comments": 0, "source_title": "Multi-Tenancy in Vector Databases | Pinecone", "source_text": "Multi-Tenancy in Vector Databases | Pinecone\n\nOpens in a new window Opens an external website Opens an external website in a\nnew window\n\nThis website utilizes technologies such as cookies to enable essential site\nfunctionality, as well as for analytics, personalization, and targeted\nadvertising purposes. You may change your settings at any time or accept the\ndefault settings. You may close this banner to continue with only essential\ncookies. Cookie Policy\n\nAnnouncementNew serverless free plan with 3x capacityLearn more\n\n# Multi-Tenancy in Vector Databases\n\n  * Data isolation and efficient querying with namespaces\n\nMulti-tenancy is a software architecture pattern where a single instance of a\nsystem serves multiple customers, or tenants, simultaneously, with some form\nof data isolation ensuring privacy and security between tenants. Multi-tenancy\nenables you to share infrastructure and operational overhead across customers,\nreducing costs and simplifying system management. Nearly every SaaS app needs\nto design for multi-tenancy; it\u2019s even relevant for some apps built for\ncompany-internal purposes.\n\nMulti-tenancy is a common pattern, but it\u2019s complex. You need to make sure\nthat the system you design can scale effectively, maintaining high performance\nfor all tenants\u2013 tenants that may have different workloads with different\nrequirements and SLAs.\n\nLet\u2019s consider a fictional AI-assisted wiki product, SmartWiki. SmartWiki has\n10\u2019s of millions of companies and individuals as their customers, each with a\nvarying number of users (employees), scale of data (existing corpus, rate of\nnew document creation), and SLAs provided to the customer by SmartWiki.\nSmartWiki pride themselves on their great UX, so query latency and other\nelements that affect customer perception of performance are paramount for all\ncustomers.\n\nLuckily, SmartWiki can lean on Pinecone\u2019s abstractions\u2013 indexes, namespaces,\nand metadata\u2013 to develop a multi-tenant system in a straightforward way.\nPinecone serverless takes care of storing and accessing your tenant data\nefficiently, so you can design a consistent system and see the benefits\nwithout extra work.\n\n## Data isolation and efficient querying with namespaces\n\nThe most straightforward pattern for building a multi-tenant solution with\nPinecone is by using one namespace per tenant. Namespaces allow you to\nphysically partition records in an index. Queries and other operations are\nthen limited to one namespace at a time.\n\nThat data isolation enhances query performance by isolating data into separate\nsegments. Namespaces operate and scale independently - so if SmartWiki\u2019s\ncustomer ACME is seeing a flurry of activity, queries and writes for\nWidgets'R'Us won\u2019t run any slower.\n\nAny query only interacts with one namespace, leading to faster response times\nand reduced costs. It also makes offboarding a tenant clean and simple\u2013 you\nsimply need to delete the namespace.\n\nRead more about serverless architecture.\n\nYou should prefer the namespaces pattern unless you require the ability to\nquery across tenants.\n\nAll namespaces belong to exactly one index in Pinecone. SmartWiki might want\nto have different indexes that represent different workload patterns- let\u2019s\nsay for RAG and for semantic search. Then, within those indexes, data is\nnamespaced to a specific tenant. Individual records (the group of vector + ID\n+ associated metadata) belong to those namespaces. Then, when a query (or a\nwrite) comes in, it only hits a subset of SmartWiki\u2019s data.\n\n### Real-world considerations for namespaces\n\nListen to our customer, Shortwave, talk about their namespacing strategy. Some\nof the things they suggest you consider:\n\n  * Do I need one namespace per user, per company, or some other division?\n  * How many documents do they have?\n  * How big are they?\n\nShortwave chose a strategy that worked for a case where they\u2019re working with\nmillions of emails, and needed strict separation between individual users\u2013\nmeaning the tenant is the individual user, which makes their setup look a bit\ndifferent from SmartWiki\u2019s.\n\nIn a design like this, you may need to allocate more namespaces than the index\nlimit, we recommend setting up a mapping table between your tenants and the\nindexes their namespace can be found. On query time, you\u2019ll first resolve the\nindex based on the tenant, and then proceed to query the project, index and\nthe appropriate namespace for the tenant.\n\n### Alternative: use metadata and ID prefixes when you need to query across\ntenants\n\nIn specific cases you may choose not to use namespaces to manage your tenants.\nFor example, in an internal tool for a single company, you might have a\nslightly different definition of tenancy where it\u2019s helpful to maintain some\namount of separation for filtering or bulk actions like deletions, but you\nwant to retain the flexibility to query your index across tenants. In that\ncase, you can also manage tenants using a combination of metadata and ID\nprefixes.\n\nConsider a RAG internal knowledge base chatbot for ACME co. They\u2019re trying to\ncreate federated search via their chatbot across their 150 different SaaS\nproducts, each of which has individual user accounts for their employees. They\nwant to be able to query across all data sources and all user accounts if\nneeded (for a superuser or admin), but realistically, they will need to filter\nwhat gets shown to a given user\u2013 and when that user, or a piece of software\nthey use, gets disconnected from the system, they need a clean way to remove\nthem.\n\nIn this pattern, you would store vectors from all tenants in a single index.\nFor any given vector, you would use an ID prefix to identify the user or data\nsource for a given piece of information. You would also attach metadata that\nidentifies the relevant tenant\u2013 user, data source.\n\nAt query time, you would apply filters based on metadata to show the right set\nof results. This approach separates tenants at the query level, allowing for\n\u201cvirtual\u201d segmentation without the need for separate indexes for each tenant.\n\nWhen it\u2019s time to delete or offboard a tenant, you can list all the vectors\nassociated with a ID prefix, then batch delete them.\n\nHere\u2019s how you can implement it:\n\n  * Add an ID prefix: At upsert time, assign a consistent ID prefix that identifies your tenant, e.g.{\"id\": \"tenantname#userID#vectorID\"}\n  * Assign Metadata: Alongside the prefix, assign metadata to each vector that identifies its tenant. For instance, you might use a key-value pair like {\"tenant_id\": \"tenantA\"} for all vectors belonging to Tenant A.\n  * Query with Metadata Filters: When querying the index, use metadata filters to retrieve only the vectors relevant to a specific tenant. For example, to retrieve vectors belonging to Tenant A, apply a filter that matches the tenant_id metadata to tenantA.\n\nThis method allows querying across multiple tenants if needed, while keeping\nthe tenants logically separated within the same index. It\u2019s important to note,\nhowever, that tenants share compute and storage resources in this model, and\nyou cannot track tenant-specific costs or provision tenants with different\ndimensions at the index level.\n\n### Tell us your tips\n\nNamespaces are the most common, best-alternative choice for managing multi-\ntenancy in Pinecone\u2013 as Shortwave and others do.\n\nWhat questions do you have, or what approaches have you taken? Come talk to us\nin the forum.\n\nShare via:\n\nVector Databases in Production for Busy Engineers\n\nChapters\n\n  1. Handling multi-tenancy\n\n     * Data isolation and efficient querying with namespaces\n\nProduct\n\nOverviewDocumentationIntegrationsTrust and Security\n\nSolutions\n\nCustomersRAGSemantic SearchMulti-Modal SearchCandidate\nGenerationClassification\n\nResources\n\nLearning CenterCommunityPinecone BlogSupport CenterSystem StatusWhat is a\nVector Database?What is Retrieval Augmented Generation (RAG)?\n\nCompany\n\nAboutPartnersCareersNewsroomContact\n\nLegal\n\nTermsPrivacyCookiesCookie Preferences\n\n\u00a9 Pinecone Systems, Inc. | San Francisco, CA\n\nPinecone is a registered trademark of Pinecone Systems, Inc.\n\n", "frontpage": false}
