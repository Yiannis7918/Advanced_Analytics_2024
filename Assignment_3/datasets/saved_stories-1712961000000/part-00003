{"aid": "40014724", "title": "Systemd minimizing required dependencies for libsystemd", "url": "https://mastodon.social/@pid_eins/112256363180973672", "domain": "mastodon.social", "votes": 23, "user": "klooney", "posted_at": "2024-04-12 16:28:30", "comments": 8, "source_title": "Lennart Poettering (@pid_eins@mastodon.social)", "source_text": "Lennart Poettering: \"A while back we started to tur...\" - Mastodon\n\nLennart Poettering: &quot;A while back we started to turn many of the\nlibra...&quot; - Mastodon\n\nCreate accountLogin\n\nLennart Poettering @pid_eins@mastodon.social\n\nA while back we started to turn many of the library dependencies of systemd from regular ELF dependencies (which you can explore with tools like lddtree or readelf -d ... | grep NEEDED) into dlopen() deps, in order to minimize the dep footprint of systemd. The primary reason for this was to make it easier to build small disk images without optional components, in particular for the purpose of initrds or container deployments. Recently, another reason for doing this came into focus:\n\nApr 12, 2024, 04:29 AM\u00b7\u00b7Web\n\n35boosts\u00b742favorites\n\n12h\n\nLennart Poettering @pid_eins\n\nlibsystemd was used as a vehicle to get from the backdoored liblzma into the\nssh process. There's hence value in reducing the ELF dependencies loaded into\nconsumers of our library, if we can avoid it, to make it harder to use our\ncode as exploit vehicle, even if we were neither the final target of the\nattack, nor directly attacked.\n\nFor these reasons (and others) late loading libraries via dlopen() instead of\nearly loading via traditional ELF shared library dependencies is...\n\n12h\n\nLennart Poettering @pid_eins\n\n... hence something that makes sense in many cases, and is going to become a\nmore common theme. (I mean, people have been doing this long before we started\ndoing this in systemd, and other OSes even have explicit concepts for that,\nfor example MacOS with its `-weak_library` linker tool.)\n\nNow, I think there are many pros of this approach, but there are cons too. I\npersonally think the pros by far outweigh the cons, but the cons *do* exist.\nThe most prominent one is that turning shared libary...\n\n12h\n\nLennart Poettering @pid_eins\n\n... dependencies into dlopen() dependencies somewhat hides them from the\nuser's and tools view, as the aforementioned tools won't show them anymore.\nTools that care about this information are package managers such as rpm/dpkg\n(which like to generate automatic package dependencies based on ELF\ndependencies), as well initrd generators such as dracut.\n\nLosing the dependency information sucks of course, in particular as some\npackage managers explicitly support optional deps anyway, hence could...\n\n12h\n\nLennart Poettering @pid_eins\n\n... expose these kinds of deps really nicely in their packaging metadata, if\nthey just knew about them.\n\nHence, if the lack of dep metadata is the main big con of dlopen() deps, let's\nsee if we can do something about it!\n\nhere's my proposal about this: https://github.com/systemd/systemd/pull/32234\n\nIt's a very simple approach. All it does is insert an ELF \"note\" into\ngenerated binaries that declare these deps. This information can then be\nconsumed by package managers, initrd generators and other tools.\n\nGitHubRFC: expose dlopen() dependencies in an ELF section by poettering \u00b7 Pull\nRequest #32234 \u00b7 systemd/systemdBy poettering\n\n12h\n\nLennart Poettering @pid_eins\n\nThe note can be generated via a relatively simple C macro, and placed close to\nthe dlopen() call. It then can be read from the ELF header in comparable\neffort to reading the usual DT_NEEDED dependencies.\n\nFor now, this is just an RFC, implemented as an example for some of systemd's\ndependencies. The concept is entirely generic however, and could easily be\nadopted for any project with little effort.\n\n12h\n\nLennart Poettering @pid_eins\n\nTo illustrate, right now in the systemd tree we turned the following deps into\ndlopen() deps: liblzma, libzstd, liblz4, libgcrypt, libbpf, libxkbcommon,\nlibarchive, libcryptsetup, libidn, libelf, libdw, libiptc, libfido2,\nlibtpm2-tss (and related), libkmod, libpasswdq, libpwquality, libpcre2,\nlibp11kit, libqrencode.\n\nOr to say this differently, systemd/libsystemd-core (i.e. the service manager\nitself), only has deps on libc (and its aux libs), libaudit, libmount,\nlibselinux, libseccomp left.\n\n12h\n\nLennart Poettering @pid_eins\n\nThe remaining deps are relatively core to most distros. libc of course is a\ndep we cannot turn into dlopen anyway in a C project, and the others are\nunlikely something we could really could make optional even if we wanted,\nbecause so many other basic components of the OS would pull them in anyway.\n\n11h\n\ngrawity @grawity@treehouse.systems\n\n@pid_eins I think it still makes sense to minimize them even if they're\nnormally installed \u2013 e.g. when something like libpam happens to be broken,\nthings can go from \"kernel panic because /sbin/init cannot be exec'd\" to \"you\nstill get to boot to a sulogin rescue shell and log in as root\".\n\nI guess most of them are probably unavoidable to be permanently linked, but\nlibgpg-error (as a dep of libgcrypt) always stands out as a funny-looking one\nto me.\n\n9h\n\nJan Katins @jankatins@fosstodon.org\n\n@pid_eins Thanks for the pointer, I was just debugging a problem because of\nthis (https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1068848), which ended\nup in this place: https://salsa.debian.org/kernel-team/initramfs-\ntools/-/blob/master/hook-functions?ref_type=heads#L248-249\n\nbugs.debian.org#1068848 - cryptsetup: Fails to unlock the filesystem with\nmissing libgcc_s.so.1 - Debian Bug report logs\n\n6h\n\nproject always tired @project1enigma@wandering.shop\n\n@pid_eins @offby1 Countdown to the first abuses caused by intentionally wrong\ndeclaration of dlopen dependencies...\n\n12h\n\nmxk @mxk@hachyderm.io\n\n@pid_eins honestly, for me one of the consequences of the xz story was going\nthe opposite direction and thinking about ways to prevent symbols from being\noverwritten and having applications use seccomp to prevent dlopen all\ntogether, when they don't need it. Also yes, I do dislike dependencies being\nhidden that way as someone, who writes SELinux and apparmor profiles and is\ngrateful for any way to know ahead of time, what an application needs to run.\n\n11h\n\nLennart Poettering @pid_eins\n\n@mxk well, in a world rife with pam modules, nss modules, openssl\nengines/providers, cryptsetup token modules, dri drivers, gconv charset\nmodules, gstreamer modules, web server modules, python's C module wrappers,\nnftables modules, and so on its very haed to prohibit dlopen. Might work in a\nrestrictive special purpose OS but not really in general purpose distros.\n\nDlopen exists for a reason. And i am pretty sure not loading at all is\ntypically better than loading with immutable relocations...\n\n8h\n\nJames Henstridge @jamesh@aus.social\n\n@pid_eins My main concern with this is that you lose a lot of type\ninformation, since you're casting all the function pointers through (void *)\nwhen using dlsym().\n\nI imagine you could hide some interesting bugs via not-quite-compatible\nfunction signatures (e.g. cause an argument to be truncated at 32 bits).\n\n7h\n\nLennart Poettering @pid_eins\n\n@jamesh in current systemd git we systemativally use some typeof() macro magic\nthat ensures we always cast the func ptrs returnerd by dlopen() to the actual\nprototype listed in the headers of the library in question. Thus we should get\nthe exact same type safety guarantees as you'd get when doing regular dynamic\nlib linking. Took us a bit to come up with the idea that typeof() can be used\nfor this, but it's amazing, as we don't have to repeat other libraries'\nprotoypes in our code at all anymore\n\n6h\n\nJames Henstridge @jamesh@aus.social\n\n@pid_eins Looking at the code, that's quite elegant. It also neatly solves the\nproblem of assigning a symbol to the wrong function pointer.\n\n6h\n\n0xC0DEC0DE07E8 @c0dec0dec0de@hachyderm.io\n\n@pid_eins @jamesh I need to look at this later...\n\n5h\n\nJames Henstridge @jamesh@aus.social\n\n@c0dec0dec0de @pid_eins The interesting stuff is in\nhttps://github.com/systemd/systemd/blob/main/src/basic/dlfcn-util.h\n\nAnd here's an example of the use of the helpers:\nhttps://github.com/systemd/systemd/blob/main/src/basic/compress.c#L132-L139\n\nGitHubsystemd/src/basic/dlfcn-util.h at main \u00b7 systemd/systemdThe systemd\nSystem and Service Manager . Contribute to systemd/systemd development by\ncreating an account on GitHub.\n\n5h\n\n0xC0DEC0DE07E8 @c0dec0dec0de@hachyderm.io\n\n@jamesh @pid_eins thanks!\n\n7h\n\nGaelan Steele @Gaelan@cathode.church\n\n@pid_eins\n\n> Tools that care about this information are package managers such as rpm/dpkg\n> (which like to generate automatic package dependencies based on ELF\n> dependencies)\n\nIncidentally, Nix does something similar, but without specific handling of\nELF; instead, since it installs packages at long randomish paths, it just\ngreps the entire package for instances of input packages' paths, which works\nsurprisingly well\n\n10h\n\nWintermute_BBS @Wintermute_BBS@oldbytes.space\n\n@pid_eins just don't use systemd. period.\n\n6h\n\n27329ed9-2211-a1ba-9371-e2641bf0dcb6 @a1ba@suya.place\n\n@pid_eins since many applications use libsystemd only for sd_notify, maybe it\nmakes sense to split sd_notify into standalone library?\n\nI did that but didn't publish yet, as my own implementation only cares about\nunix sockets and misses a lot of error handling.\n\n4h\n\njntesteves @jntesteves@fosstodon.org\n\n@a1ba @pid_eins This had some discussion recently in a previous toot:\nhttps://mastodon.social/@pid_eins/112202687764571433\n\n4h\n\n27329ed9-2211-a1ba-9371-e2641bf0dcb6 @a1ba@suya.place\n\n@jntesteves @pid_eins oh nice\n\n5h\n\nRhialto @rhialto@mastodon.sdf.org\n\n@pid_eins It would also help if the library that programs use to do some\nsystemd integration is not the same library that systemd uses itself. As I\nunderstand it, the function that sshd was patched to use from libsystemd is\ntrivial and could be in a very small library. Maybe there are other helper\nfunctions that do have some dependencies (I don't know; my operating system\ndoes not use systemd) but surely they are not the full list of systemd itself.\n\nExploreLive feeds\n\nLogin to follow profiles or hashtags, favorite, share and reply to posts. You\ncan also interact from your account on a different server.\n\nCreate accountLogin\n\nAbout\n\nDrag & drop to upload\n\n", "frontpage": true}
