{"aid": "40031198", "title": "Simple and easy Heroku telegram bot in Python", "url": "https://dspyt.com/simple-telegram-bot-in-python-hosted-easily-on-heroku", "domain": "dspyt.com", "votes": 1, "user": "fedorovn19", "posted_at": "2024-04-14 14:15:36", "comments": 0, "source_title": "DSPYT: Data Science with Python", "source_text": "Simple and easy heroku telegram bot in Python\n\nPublished on\n\n    Tuesday, May 3, 2022\n\n# Simple and easy heroku telegram bot in Python\n\nAuthors\n\n    \n\n  * Name\n    dspytdao\nTwitter\n\n    @dspytdao\n\nA Python Telegram Bot is a simple, easy-to-use tool that allows you to send\nand receive messages through the Telegram app. In this article we create\ntelegram bot which is a chatbot that uses the Telegram protocol to communicate\nwith users. It can be used to send and receive messages, as well as to manage\nchannels and users. Further we host python telegram on Heroku.\n\n##\n\nPython Virtual Environment\n\nFirst, we need to save python dependencies to host the telegram python bot on\nHeroku. In this tutorial related to hosting python telegram bot on heroku, we\nuse the python virtual environment library virtualenv. We install the python\nvirtualenv library with PIP:\n\n    \n    \n    pip install virtualenv\n\nNext, we create the python virtual environment and activate with the following\ncommands:\n\n    \n    \n    virtualenv project source project/Scripts/activate\n\nTo save the dependencies for the server such as Heroku, we run the following\npython command:\n\n    \n    \n    pip freeze > requirements.txt\n\nIn case we want to exit the python virtual environment:\n\n    \n    \n    deactivate\n\n##\n\nHeroku python telegram optimizing\n\nTo create a bot we have to message @BotFather in telegram. The command that\ncreates a bot is /newbot and you have to also name the bot. After that\nBotFather sends us the HTTP API TOKEN.\n\n##\n\nPython telegram bot\n\nFirst, we install the key python telegram bot library which is python-\ntelegram-bot:\n\n    \n    \n    pip install python-telegram-bot\n\nNext, we create a simple python telegram bot that uses /start and /help\ncommands as well as echoes the user\u2019s message. The script also uses a web hook\nfor Heroku hosting:\n\n    \n    \n    import logging import os from telegram.ext import Updater, CommandHandler, MessageHandler, Filters # Enable logging logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO) logger = logging.getLogger(__name__) PORT = int(os.environ.get('PORT', '8443')) # Define a few command handlers. These usually take the two arguments update and # context. Error handlers also receive the raised TelegramError object in error. def start(update, context): \"\"\"Send a message when the command /start is issued.\"\"\" update.message.reply_text('Hi!') def help(update, context): \"\"\"Send a message when the command /help is issued.\"\"\" update.message.reply_text('Help!') def echo(update, context): \"\"\"Echo the user message.\"\"\" update.message.reply_text(update.message.text) def error(update, context): \"\"\"Log Errors caused by Updates.\"\"\" logger.warning('Update \"%s\" caused error \"%s\"', update, context.error) def main(): \"\"\"Start the bot.\"\"\" # Create the Updater and pass it your bot's token. # Make sure to set use_context=True to use the new context based callbacks # Post version 12 this will no longer be necessary TOKEN = '' APP_NAME='https://app-name.herokuapp.com/' updater = Updater(TOKEN, use_context=True) # Get the dispatcher to register handlers dp = updater.dispatcher # on different commands - answer in Telegram dp.add_handler(CommandHandler(\"start\", start)) dp.add_handler(CommandHandler(\"help\", help)) # on noncommand i.e message - echo the message on Telegram dp.add_handler(MessageHandler(Filters.text, echo)) # log all errors dp.add_error_handler(error) updater.start_webhook(listen=\"0.0.0.0\",port=PORT,url_path=TOKEN,webhook_url=APP_NAME + TOKEN) updater.idle() if __name__ == '__main__': main()\n\nDo not forget to edit the created TOKEN and APP_NAME that you obtain through\nHeroku.\n\n##\n\nDeploying Heroku python telegram bot\n\nBesides, we create a Procfile that contains the following line:\n\nweb: python3 bot.py\n\nOur folder should contain three files: Procifle, the python script (in this\ncase bot.py), and requirements.txt.\n\nFinally, we deploy a python telegram bot on Heroku:\n\n    \n    \n    git init heroku create \"app-name\" # This is the APP_NAME from the script git remote -v git add . git commit -m \"commit\" git push heroku master\n\nThe GitHub repository for the python telegram bot\n\n##\n\nSummary\n\nIn this tutorial, we create a simple python Heroku telegram bot that uses\n/start and /help commands as well as echoes the user's message. The script\nalso uses a web hook for python Heroku hosting. To create a bot we have to\nmessage @BotFather in telegram. After that BotFather sends us the HTTP API\nTOKEN.\n\n##\n\nRelated Posts\n\n  * How to Panel data python \u2013 An easy introduction\n  * Simple Ceramic Data Model App and Unstoppable Domains\n  * Simple QR code generator on AWS with Flask\n  * How to implement asyncio python tutorial\n  * How to generate parsiq wallet triggers for CryptoPunks\n\nDiscuss on Twitter \u2022 View on GitHub\n\n## Tags\n\nPython telegram bot heroku api github telebot pip API virtualenv BotFather\n\n## Previous Article\n\nHow to python check proxy with aiohttp\n\n## Next Article\n\nHow to illustrate log returns vs simple returns\n\n\u2190 Back to the blog\n\nTwitter\n\nGitHub\n\nDiscord\n\nYouTube Dspyt Channel\n\nLinkedIn Dspyt\n\n\u00a9 2024 Dspyt\n\n", "frontpage": false}
