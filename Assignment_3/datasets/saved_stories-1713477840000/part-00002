{"aid": "40077591", "title": "Trustless SaaS is the way: elliptic API keys, self-hostable and source-available", "url": "https://criticalmoments.io/blog/trustless_saas", "domain": "criticalmoments.io", "votes": 3, "user": "scosman", "posted_at": "2024-04-18 16:02:44", "comments": 0, "source_title": "Trustless SaaS: How We Build SaaS That Doesn't Require Trust", "source_text": "Trustless SaaS: How We Build SaaS That Doesn't Require Trust\n\n  * Docs\n  * Blog\n  * Pricing\n  * Account\n\n  * Docs\n  * Blog\n  * Pricing\n  * Account\n\nBack to Blog\n\nApr 18, 2024\n\n# Trustless SaaS: How We Build SaaS That Doesn't Require Trust\n\n## You can trust us, but you shouldn't have to.\n\nWe've built our SDK, Critical Moments, based on a concept we call \"Trustless\nSaaS\". That is software that is remotely controlled or delivered, without the\nneed to trust a third-party service provider for correctness, security, or\nuptime SLAs.\n\nIn this blog post, we cover what \u201cTrustless SaaS\u201d is, why it benefits both us\nand our customers, and how we implement it using public key encryption.\n\n## Trustless SaaS Model\n\nThese three policies collectively form our \u201cTrustless SaaS\u201d model:\n\n### Source-Available\n\nAny code you run should be source-available. You can inspect all of the code\nand compile builds from source yourself. This way, you know that the binary\nisn't doing anything nefarious without needing to trust us.\n\nOur SDK's source code is available on GitHub.\n\n### Self-Hostable\n\nAny required web services should be self-hostable. Moreover, they should be\nsimple enough to self-host that most people choose this option. You don't need\nto trust that a service provider won't change how the service works without\nyour approval, because they can't.\n\nFor Critical Moments, we've implemented this through a web-hosted config file,\nwhich controls all of the SDK features.\n\n### No User Tracking\n\nA Trustless SaaS company shouldn't track your users. You don't need to trust\ntheir data and security practices, because they never have access to private\ndata. Even if they are compromised, your data remains secure.\n\nThe core functionality of Critical Moments does not involve accessing servers\nwe own. However, there are two exceptions tied to optional features, which we\nwill explain below. If you choose not to use these features, your clients will\nnever communicate with our servers.\n\n## Benefits\n\nWe believe that Trustless SaaS offers a wealth of benefits over traditional\nSaaS models:\n\nTraditional SaaS| Trustless SaaS  \n---|---  \nAccess Controls| Requires integration with client's systems (SSO, SAML, ACL,\netc.)| Uses existing internal tools and best practices  \nCompliance Approvals (security, data controls)| Often required| Not required  \nUser Tracking| Possible, cannot prove it isn't happening| Impossible, can\nprove it isn't happening  \nHosting| Included| Bring your own  \nShutdown Risk| Loss of critical business services| Continue as is, already\nself-hosting  \nService Outages| Caused by SaaS company, cannot be fixed by client| Not caused\nby Trustless SaaS company, fixable by client  \n  \nOf these aspects, we believe Trustless SaaS excels compared to traditional\nmodels in almost every category, though the preference for \"Bring your own\nhosting\" might vary. We discuss how we mitigate hosting tradeoffs below.\n\n## How we Implement Trustless SaaS with Public Key Cryptography\n\nTrustless goes both ways: we aim for more than just an honour system to ensure\nthat people don't just steal our software. After all, we are running a\nbusiness.\n\nCritical Moments offers both free and paid plans, featuring different\ncapabilities (with the Pro plan offered for free to small companies). You can\nsee our plans here.\n\nInstead of limiting feature sets through service calls as traditional SaaS\ncompanies might do, we rely on public key cryptography. Here's a simple\nbreakdown of our approach:\n\n  * The public key is embedded in the SDK. The private key is never published.\n  * Clients must register on our website to receive an API key, which is necessary to activate the SDK. Each API key includes a signature unique to the app's ID. Using an API key intended for a different app will prevent the SDK from starting.\n  * The config file you use dictates which SDK features are enabled. Before deployment, you must sign your config file using our signing service. This service checks your subscription level and won't sign if you're attempting to use features you haven't subscribed to.\n  * Our signing service also scans for common issues, alerting developers to potential problems before deployment.\n  * The client SDK can independently verify API Key and config file signatures locally, quickly, offline, without needing to contact any server (using elliptic curve signatures). This means your user's app does not need to communicate with our servers.\n  * This framework also allows you to change your plan at any time, sign a new config, and immediately deploy your new feature set to all existing clients, without needing app store updates.\n\nIf there's interest, we'll release a more technical blog post examining the\ndetails, including our choices for signing algorithms, signature length,\nencoding, signing packages, performance testing, and other fun nerdy details\n\ud83e\udd13.\n\n## Example Trustless SaaS Companies\n\nWe're not the first to offer software in this manner. Here's a look at several\ncompanies applying the Trustless SaaS model, and the mechanisms they use:\n\n  * Critical Moments (Us!): Uses self-hosted config files, elliptic curve signed API keys, and elliptic curve signed config files. All source code is available.\n  * EmailEngine: Features self-hosted servers, elliptic curve signed API keys with expiration times, and source-available code.\n  * Campfire by 37signals: Offers source code after purchase and a self-hosted server option for a one-time purchase.\n  * Jira and Confluence by Atlassian: Provides a self-host option with source code accessible to customers after purchase.\n  * GitLab: Operates an open-core model with a \u201ctrustless\u201d enterprise edition, and optional hosting.\n  * Bitwarden: Optional self-hosted service, source available on GitHub, downloadable licence file to unlock features, optional cloud-pull of new licenses.\n\n## Addressing Concerns With Trustless SaaS\n\n### Software Theft\n\nOne potential issue with making our code source-available is the risk of it\nbeing stolen. There are two avenues for this:\n\n  1. Users may subscribe, obtain a signed configuration, but continue using it long after their subscription has ended.\n  2. Direct theft, such as removing or bypassing our access control measures.\n\nFor the first scenario, we believe the dynamic nature of Critical Moments \u2014\nallowing updates such as new actions, triggers, and logic \u2014 makes it less\nlikely for users to benefit from a static setup. Our terms of service disallow\nsuch practices, and we hope most companies are honest. If we do see this\nhappening often, we could always implement measures against accounts\nfrequently subscribing and unsubscribing for short periods.\n\nFor direct software theft, while there is a risk, we don't believe it will\nsignificantly impact our business. Many other companies with open-core and\nsource-available models have preceded us and successfully proven this business\napproach. Our most important customers are unlikely to undertake the legal\nrisks associated with piracy, such as DMCA violations, breaches of our terms\nof service, or compromising their own intellectual property.\n\n> We don't want to compromise the user experience for our best customers just\n> to deter those who are unlikely to pay anyway.\n\nWe think the benefits of Trustless SaaS outweigh the risks when in comes to\nsoftware theft.\n\n### Company Shutdown\n\nAnother concern is what happens if our company ceases operations. Here's our\nplan for if that ever happens:\n\n  * Our SDK's source code is publicly available. The code shows that access controls don't have time-bombs, and can be removed.\n  * Should we discontinue the CM signing service, we're committed to release our client code under an open-source license, including the public key to allow signing new config files for existing installations. We hope to codify these promises in our licence in a future update.\n  * Trustless SaaS is self-hosted from the beginning, reducing your dependency on our continued operation.\n\nAgain, this is a significant improvement over traditional hosted SaaS\nalternatives. They usually lack a commitment to release their software as\nopen-source in the event of a shutdown. Even if they do release it, self-\nhosting a complex service while ensuring its ongoing operation and security\ncan be costly and impractical. In contrast, Trustless SaaS is designed from\nthe outset to be simple and straightforward to self-host.\n\n### Trustless Build System\n\nTo simplify onboarding, we provide binary builds as part of our release\nprocess. Here's how we ensure these remain trustless:\n\n  * Builds are executed using GitHub Actions, which generate publicly viewable logs that confirm the integrity of the build process.\n  * Our Package.swift file verifies that the binary's signature corresponds with the signature logged by GitHub Actions.\n  * Users have the option to compile binaries themselves using our provided scripts, offering an additional layer of trustlessness.\n\n### Hosting Convenience\n\nSome companies prefer hosted SaaS for its ease of use; not everyone wants to\nmanage another service. Here's how Trustless SaaS can address this:\n\n  * Keep self-hosted services simple. For example, Critical Moments only requires a single config file that can be hosted on any web server. Other companies offer one-click cloud deployments, or single-container hosts.\n  * Offer partially hosted options for more complex services. For instance, Critical Moments provides hosted weather and geo-IP services to make things easier for customers. Similarly, Bitwarden offers mixing self-hosted password vaults, with a hosted license service.\n\nIf enough customers are interested, a Trustless SaaS company can add full\nhosting services to complement their self-hosted options.\n\n### Signing Service Robustness\n\nWhile the core SDK does not require any service hosted by us for ongoing\noperations, you do need to contact our signing service to sign new\nconfiguration files. An outage at our service will not prevent your existing\nclients from continuing to function as usual, but it would temporarily hinder\nyour ability to implement changes. Despite this, we view our system as a\nsubstantial improvement over traditional hosted SaaS, where SaaS outages could\ncompletely disable end-user functionalities.\n\nAdditionally, our team possesses over a decade of experience in hosting\ncomplex, high-volume services. Given the relatively simple nature of the\nsigning service compared to our previous projects, we anticipate that outages\nwill be exceedingly rare.\n\n### Optional Services\n\nWhile the core Critical Moments service never requires the client calling a\nserver owned by us, some optional features require external data sources:\n\n  * Geo-IP Service: Determines the user's approximate location using IP addresses\u2014this requires a database which can't be embedded in the SDK because it's too large, and changes often.\n  * Weather Conditions: Requires access to frequently changing weather data.\n\nWe have implemented several measures to ensure customer data protection. We\ntransmit only the minimal data required for service functionality, and never\ntransmit any personally identifiable information. We maintain a brief log\nretention period to enhance privacy. For weather services, we add up to 1km of\n'noise' to obfuscate the user's location before it is transmitted (as precise\nGPS accuracy is unnecessary). Additionally, we proxy all requests to our\nthird-party weather provider, which conceals the end-user's IP address from\nthem, ensuring they don't retain IP data long term.\n\nWe are open to offering self-host options for these services if there is\nsufficient customer demand.\n\n## Conclusions\n\nWe are optimistic about our choice to build our company around the Trustless\nSaaS model. It aligns our interests with the interests of our customers:\n\n  * Companies can trust us precisely because they don't have to.\n  * Customers can see exactly what we're offering and can try before they buy.\n  * Our system already supports your existing security model, because it works within your infrastructure.\n  * It reduces blockers for enterprise sales (like the need for SAML or Single Sign On protocols, and complex audits), thereby speeding up the sales cycle.\n  * Operationally, it simplifies the \"service\" aspect in SaaS to a single remote config file, which can be hosted anywhere.\n  * Unlike the open-core model, we don't have to balance giving away too much or too little in our free offering. We're honest that it's a paid product, and it's fully source-available for total transparency.\n  * Designing for Trustless from the start provides flexibility. On-premise solutions are available immediately, and it's also easy for us to introduce a hosted option if our customers prefer convenience.\n\nTime will tell if this approach proves successful, but we're eager to see how\nit unfolds!\n\nOn this page:\n\nTrustless SaaS Model\n\nBenefits\n\nHow we Implement with Cryptography\n\nExample Companies\n\nAddressing Concerns\n\nSoftware Theft\n\nCompany Shutdown\n\nTrustless Build System\n\nHosting Convenience\n\nSigning Service\n\nOptional Services\n\nConclusions\n\nContributors:\n\nSteve Cosman\n\nShare this article:\n\nJump to section\n\n  * Trustless SaaS Model\n  * Benefits\n  * How we Implement with Cryptography\n  * Example Companies\n  * Addressing Concerns\n  * Software Theft\n  * Company Shutdown\n  * Trustless Build System\n  * Hosting Convenience\n  * Signing Service\n  * Optional Services\n  * Conclusions\n\n# The Mobile Growth SDK\n\n## Critical Moments helps you increase conversions, improve app ratings, and\nmake bugs disappear.\n\nProduct Tour\n\nGet Started\n\nHome Docs Blog Pricing Account Github Contact Legal\n\n", "frontpage": false}
