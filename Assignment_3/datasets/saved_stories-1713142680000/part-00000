{"aid": "40033436", "title": "Urllib3 is fundraising for HTTP/2 support", "url": "https://sethmlarson.dev/urllib3-is-fundraising-for-http2-support", "domain": "sethmlarson.dev", "votes": 2, "user": "BerislavLopac", "posted_at": "2024-04-14 18:57:33", "comments": 0, "source_title": "urllib3 is fundraising for HTTP/2 support", "source_text": "urllib3 is fundraising for HTTP/2 support\n\nAbout \u2022 Blog \u2022 Newsletter \u2022 Links\n\n# urllib3 is fundraising for HTTP/2 support\n\nPublished 2024-01-16 by Seth Larson Reading time: 11 minutes\n\n> TLDR: urllib3 is raising ~$40,000 USD to release HTTP/2 support and ensure\n> long-term sustainable maintenance of the project after a sharp decline in\n> financial support for 2023.\n\n## What is urllib3?\u00a7\n\nurllib3 is an HTTP client library for Python and is depended on by widely used\nprojects like pip, Requests, major cloud and service provider SDKs, and more.\nurllib3 is one of the most used Python packages overall, installed over 4\nbillion times in 2023 with 1.5 million dependent repos on GitHub, up 50% from\njust last year.\n\n## Project update\u00a7\n\n2023 was a transformative year for urllib3, headlined by the first stable\nrelease of v2.0 after multiple years of development by our maintainers and\ncommunity. This major release is only the beginning of our plans to overhaul\nthe library\u2019s capabilities by removing constraints on our HTTP implementation\nwhile preserving backwards compatibility.\n\nWe\u2019ve been able to accomplish this incredible work in 2023 thanks to financial\nsupport from Tidelift, the Spotify 2022 FOSS Fund, and our other sponsors\nwhich allowed us to offer bounties on tasks to fairly compensate maintainers\nand contributors for their time investments with the project.\n\nUnfortunately, compared to past years we\u2019ve experienced a sharp drop in\nfinancial support from non-Tidelift sources heading into 2024.\n\nYear| Non-Tidelift Funding  \n---|---  \n2019| $18,580  \n2020| $100*  \n2021| $9,950  \n2022| $14,493  \n2023| $2,330  \n  \n* December 2020 was the first time we offered ad-hoc financial support via GitHub Sponsors. Before this we only accepted grants for funding.\n\nOur team has worked hard to set the stage for HTTP/2 support with urllib3\nv2.0, and we plan to land HTTP/2 support without compromising on the\nsustainability of the project. Backwards-compatible HTTP/2 support in urllib3\nwould immediately benefit millions of users, among them the largest companies\nin the world, and requires adding more long-term maintenance burden to\nmaintainers. This important work and its maintenance should not be\nuncompensated.\n\nTo ensure timely and sustainable development of HTTP/2 for urllib3 we're\nlaunching a fundraiser with a goal of raising our Open Collective balance to\n$50,000 USD. HTTP/2 support has just started being developed and we're hoping\nto release stable support once our fundraising goal has been reached.\nDonations to Open Collective directly or to platforms like GitHub Sponsors or\nThanks.dev will all be counted towards this fundraising goal.\n\nOur team has a long track record of using our financial resources to complete\nlarger projects like secure URL parsing, TLS 1.3, modernizing our test suite\nframework, and finding security issues across multiple projects. All receipts\nare published publicly on our Open Collective with links to the work items\nbeing accomplished and blogged about by our maintainers. If you or your\norganization has questions about this fundraiser please email\nsethmichaellarson@gmail.com or ask in our community Discord.\n\nThere\u2019s more information below about the work we\u2019ve done so far for HTTP/2\nsupport and what else we plan to do in 2024 during our fundraiser. Thanks for\nsupporting open source software!\n\n## Funding update\u00a7\n\nurllib3 received $17,830 US dollars in financial support in 2023 from all\nsources and distributed $24,350 to contributors and maintainers. Our primary\nsupporter continues to be Tidelift, who provided $15,500 to core maintainers\nSeth, Quentin, and Illia.\n\nWe distributed $1,800 to community contributors through our bounty program,\nless than last year but still a sizable amount. We are looking to leverage our\nbounty program more in 2024 to implement HTTP/2 and WebAssembly features.\n\nOur Open Collective started the year with nearly $19,000 USD and ended the\nyear with $12,179. This statistic clearly shows the gap in funding, comparing\nthis year's fundraising of $2,330 to the average across 4 prior years of over\n$10,000 per year.\n\n* Seth Larson was also paid $7,000 by Tidelift for a packaging security standards project and $5,000 as a part of their \"lifter advocate\" program. Neither of these projects are directly related to urllib3 but are listed for completeness.\n\n## Maintenance update\u00a7\n\n2023 marks the 15th anniversary of urllib3 being first published to PyPI! \ud83e\udd73\nNot many open source projects stand the test of time and continue to see the\nwidespread usage that urllib3 does every day. We attribute our longevity to\nquickly elevating contributors from our community into project maintainers\nwhich we believe is a critical property of a sustainable open source project.\nFinancial rewards through our bounty program is a crucial piece of our\napproach to staying sustainable for the long-term.\n\nThis year we welcomed a new core maintainer to our team, Illia Volochii! \ud83c\udf89\nIllia has been putting in high quality and consistent work to get v2.0 out the\ndoor. Illia started contributing to urllib3 in 2022 and after landing multiple\nhigh-quality pull requests was asked to join the team of collaborators and\nbegin reviewing PRs and issues and helping with the release process.\n\nAfter adding Illia we now have three core maintainers including Seth Larson\nand Quentin Pradet, in addition to multiple collaborators and community\ncontributors.\n\nWe landed 160 commits from 13 unique contributors during 2023 which is up from\n~130 commits during 2022. We published 16 releases to PyPI in 2023, up from 8\nin 2022.\n\nFrom a security perspective, we continue to lead the pack for Python packages\nin terms of implementing security standards. urllib3 is the highest rated\nproject according to OpenSSF Scorecard with a score of 9.6 out of 10 overall.\nWe also were an early adopter of Trusted Publishers, adopting the new feature\ndays after they were announced during PyCon US 2023.\n\nWe remediated two moderate-severity vulnerabilities in 2023 and made the fixes\navailable in both the new v2.0 and security-fix only v1.26.x release streams.\nSupport for the previous major version of urllib3 is provided thanks to\nfunding from Tidelift.\n\n## Support for HTTP/2\u00a7\n\nWhen you first read this post you might have thought:\n\n> \u201cHasn't HTTP/2 been around for a long time?\u201d \ud83e\udd14\n\nAnd you'd be right! HTTP/2 was published in 2015 in RFC 7540 and is now used\nfor the majority of web requests. HTTP/2 and has been around for so long that\nthere's an already HTTP/3!\n\nSo why are we only just now starting to add support for HTTP/2 to urllib3? The\nreason is that the standard library module http.client only supports HTTP/1\nand before urllib3 v2.0 was released urllib3 was strongly tied to http.client\nAPIs. By breaking backwards compatibility in a few key ways (while maintaining\ncompatibility where it matters for most users) we've been able to set the\nstage for adding HTTP/2 to urllib3! \ud83d\ude80\n\nurllib3 is in good company: many of Python's stable HTTP clients don't support\nHTTP/2 like Requests (which uses urllib3 under the hood), aiohttp, and\nhttplib2.\n\nEven though we're waiting to release HTTP/2 support until after our fundraiser\nconcludes, we aren't waiting to get started. Our team has already started some\nof the required prep-work to implement HTTP/2. Want to follow along? We have a\ntop-level tracking issue for HTTP/2 support on GitHub.\n\nOver the past two months Quentin has migrated our test suite from the\nvenerable Tornado web backend to using the Hypercorn server and Quart\nmicroframework. Our test application communicates with the server using ASGI,\nwhich is perfect for our use-case: low-level enough to satisfy the needs of\nthe test suite and high-level enough to abstract the differences between\nHTTP/1 and HTTP/2. Now that the test suite runs with both HTTP/1 and HTTP/2,\nwe can start developing HTTP/2 with an extensive initial battery of test\ncases.\n\n## Support for Webassembly and Emscripten\u00a7\n\nWhen PyScript was first announced at PyCon US 2022 during a keynote by Peter\nWang, Seth was sitting front row to witness Python moving to the web. Later\nthat same day in the PyScript open space there were experiments for making\nHTTP requests with urllib3 and Pyodide together using a synchronous call to\nthe JavaScript fetch() API. At the time, despite having assistance from\nPyScript maintainers, there didn't seem to be a way forwards yet.\n\nFast-forward to today, the pyodide-http project has figured out how to make a\nsynchronous or streaming HTTP exchange using the fetch() and XMLHttpRequest\nJavaScript APIs along with Web Workers. Now that a synchronous approach to\nHTTP requests was possible we could add support to urllib3!\n\nThanks to Joe Marshall, urllib3 now has experimental support for the\nEmscripten platform, complete with bundling a small JavaScript stub for Web\nWorker support and testing against Chrome and Firefox in our CI. What's next\nis to thoroughly test and document the feature. We're aiming to release stable\nEmscripten support for urllib3 in 2024.\n\nThe most exciting part of this is that once a core dependency like urllib3 has\nbeen made compatible with Emscripten we'll likely see a wave of other packages\nthat immediately become compatible too, bringing even more of the Python\npackage ecosystem to the web \ud83e\udd73\n\n## Stable release of urllib3 v2.0\u00a7\n\nurllib3 had its first stable release of v2.0 in April 2023 and later the\nv2.1.0 release to remove many long-deprecated features like the [secure] extra\nwhich had become redundant with new improvements to the ssl standard library\nmodule and the urllib3.contrib.securetransport module which was needed on\nmacOS due to unavailability of an OpenSSL library on the platform to perform\nHTTPS with PyPI.\n\nThis release also put the project in a good place for future improvements like\nthose discussed above. The biggest blocker to adopting new HTTP\nimplementations were vestigial APIs from urllib3 primarily subclassing the\nstandard libraries http.client (or for Python 2: httplib) modules.\n\nBy removing and discouraging these implicit APIs we're better able to adopt\nalternate HTTP implementations such as the h2 library for HTTP/2 and\nJavaScript's fetch API for Emscripten.\n\n### Increasing adoption of urllib3 v2.x\u00a7\n\nThe initial adoption of urllib3 v2.x was lower than expected, due to the\nfollowing factors:\n\n  * By default, RedHat Enterprise Linux 7 (RHEL 7), AWS Lambda, Amazon Linux 2 and Read the Docs were all compiling the ssl module with OpenSSL 1.0.2. While botocore still pinned urllib3 to 1.26.x, Amazon Linux 2 was more popular than we expected and many users were not pinning or resolving their dependencies correctly and thus were receiving an incompatible version of urllib3.\n  * Various third-party packages like dockerpy, request-toolbelt and vcrpy were relying on implementation details of urllib3 that were deprecated or removed in v2.0 so couldn\u2019t upgrade right away.\n  * And finally, we intentionally removed the strict parameter from HTTPResponse which had no effect since Python 3. This affected only a few users.\n\nAfter a few weeks, we had around 3 millions daily downloads for v2.0. That's a\nlot of downloads, but only accounted for 30% of 1.26.x downloads at the time\nwithout any obvious upward trend. The only exception was Read the Docs that\nencouraged users to move to Ubuntu 22.04 and Python 3.11 shortly after the\nurllib3 2.0 release. To avoid a prolonged split in the ecosystem, we took\nvarious actions to help migrating to 2.x:\n\n  * Helped some libraries upgrade, including requests, docker-py, vcrpy, and requests-toolbelt.\n  * We added common migration issues to the v2 migration guide.\n  * With help from a LibreSSL developer and a Gentoo user, we added back LibreSSL support.\n  * To allow google-auth-library-python and the rest of the Google ecosystem to upgrade, we added back pyOpenSSL to allow in-memory certificate support.\n\nOur friend and Requests maintainer, Nate Prewitt allowed urllib3 v2.0 for\nPython 3.10+ users of botocore. This work on Requests inspired snowflake-\nconnector-python to follow suit.\n\nToday, most popular libraries support urllib3 2.0 and later, at least with\nPython 3.10 and above. And the libraries that don't support it yet get\nrequests from users. urllib3 2.x is reliably above 70% of 1.26.x downloads and\ngrowing. Additionally, Python 3.10+ users already download 2.x more than\n1.26.x, making us confident that the ecosystem split will eventually disappear\nin favor of the newest major version of urllib3.\n\n\ud83d\udc4b That's all for now, if you want to discuss this article you can join our\ncommunity Discord. Please share this article to help spread the word of our\nfundraiser and coming HTTP/2 support.\n\n> Thanks for reading! \u2661 Did you find this article helpful and want more\n> content like it? Get notified of new posts by subscribing to the RSS feed or\n> the email newsletter.\n\nThis work is licensed under CC BY-SA 4.0\n\n", "frontpage": false}
