{"aid": "40078935", "title": "Optimizing IC Design Data Management: Git-R-Don't for Hardware Design", "url": "https://www.keysight.com/blogs/en/tech/sim-des/2024/4/10/optimizing-ic-design-data-management", "domain": "keysight.com", "votes": 1, "user": "rbanffy", "posted_at": "2024-04-18 18:02:01", "comments": 0, "source_title": "Optimizing IC Design Data Management: Git-R-Don\u2019t for Hardware Design", "source_text": "Optimizing IC Design Data Management: Git-R-Don\u2019t for Hardware Design\n\n# Optimizing IC Design Data Management: Git-R-Don\u2019t for Hardware Design\n\nGit is an important distributed version control system designed for software\nengineers. It preserves a comprehensive history of changes and provides\nadvanced operations for efficient project management. This feature makes Git\nan ideal tool for software development, enabling teams to house an entire\nproject within a single repository.\n\nHowever, adapting Git for hardware design poses distinct challenges, as the\ndata requirements and workflows significantly differ from software\ndevelopment.\n\n## The Evolution of Version Control Tools\n\nSilicon Valley venture capitalist Marc Andreessen proclaimed, \u201cSoftware is\neating the world\u201d in 2011. Software complexity has continuously escalated,\nnecessitating more iterations, managing larger files, collaboration across\nglobal teams, and storing a higher data volume.\n\nInitially, version control tools like RCS and SCCS provided basic revision\nmanagement for individual files. They store the code base history on the same\ndisk storage used for the code under development. As a result, those initial\nversion control tools fell short in handling the entire software project. This\ngap led to wrappers such as Concurrent Versions System (CVS) in 1986.\n\nAs software development extended to geographically distributed workforces and\nneeded more sophisticated configuration management, client-server systems like\nSVN, ClearCase, and Perforce became popular around the early 90s. These\nsystems emerged as a user-friendly successor to CVS, offering a centralized\nrepository for managing file versions and facilitating collaboration among\ndevelopers. Over time, it gained widespread adoption for its simplicity and\nbranching capabilities.\n\nWith the growth of the open-source Linux Kernel, the Linux community built its\nown version control tool, Git, in 2005 to handle the distributed development\nof large open-source projects. Git, a distributed version control system, rose\nto prominence as a faster, more flexible alternative to SVN. Its decentralized\napproach and powerful branching features empowered developers and\nrevolutionized software development workflows.\n\n## Challenges of Configuration Management in Semiconductor Engineering\n\nWith today\u2019s semiconductor design scales to a team of thousands of engineers,\nconfiguration management challenges extend beyond software development. Fields\nsuch as integrated circuit (IC) design and semiconductor engineering confront\nsimilar challenges, including:\n\n  * Managing multiple iterations.\n  * Storing many sizable files of different types\n  * Collaborating with multiple cross-functional geodiversity teams.\n\nAccurately tracking revisions and configurations is crucial in these contexts,\nhighlighting the need for efficient version control systems tailored for\nhardware engineers.\n\nBut what is an ideal version control solution for managing projects in IC\ndesign domains and workflows?\n\nSemiconductor Design vs. Software Development: What Is the Difference?\n\nSemiconductor design and software projects share common ground.\n\nFirst, both involve extensive collaboration among multiple engineers who\ncreate, debug, and refine many files across multiple iterations. This process\nnecessitates a seamless solution for team members to exchange updates,\nincluding creating release candidates and base variants as the project\nprogresses.\n\nDespite these similarities, semiconductor design diverges significantly in its\ndata type, workflows, and requirements.\n\nData types\n\nDigital designs are typically done using text files written in Register\nTransfer Level (RTL) language, such as Verilog. Their management is similar to\nsoftware version controls systems. However, there are other analog, custom,\nand packaging components and specialized graphical tools (known as Electronic\nDesign Automation or EDA tools), like schematic and layout editors. These EDA\ntools produce a suite of related files, often encompassing large binary files\nto represent design objects that need to be verified by multiple EDA\ntoolchains and flows, marking a clear departure from the typical software\ndevelopment workflow of editing, compiling, and debugging.\n\nWorkflows\n\nThe semiconductor design flow introduces a higher level of complexity,\nincorporating various stages such as synthesis, placement and routing,\nsimulations of analog and digital components, formal verification, physical\nverification, and timing analysis. Each stage requires specific expertise and\nhuman intervention to interpret the results. Such as flow generates a\nsignificant amount of, often binary files and co-managed files (multiple files\nthat should be viewed as a single design object) necessitating not just the\ntraditional meticulous version control but also stringent configuration\nmanagement.\n\nIn comparison, a software workflow involves a much well-defined linear loop of\nedit, compile, test, and debug flow.\n\nExecution\n\nThroughout the IC design flow, some components may be reusable in whole or in\npart, typically referred to as Intellectual Property (IP) blocks. Companies\neither develop IP internally or procure it from third-party vendors such as\nArm and Synopsys. Semiconductor IP is the fundamental functional block for\ntoday\u2019s SoC or chiplet designs. Effective IP management demands not only an\naccessible IP catalog but also advanced revision control, access control, and\ntraceability across design hierarchies.\n\nGit works very well for managing software development, with each engineer\nworking on developing a feature or fixing issues. Its powerful ability to\nmerge changes to text files enables truly efficient distributed development,\nespecially for open-source projects. However, does Git meet the requirements\nof semiconductor design?\n\nSix Challenges of Using Git for IC Design Data Management\n\n### No.1 Handling large files\n\nIC design has exceptionally large files from hundreds of megabytes to\ngigabytes. The Git's model requires users to clone the repository. As a\nresult, every IC designer on the project needs to create a copy of all the\nlarge design files and all the revisions. This approach becomes impractical\ndue to the storage implications, especially when considering the costs of\nhigh-availability network storage in a corporate setting.\n\nFigure 1. IC design sizes\n\n### No. 2 Binary file management\n\nThe inability to automate merging for schematics and layouts needs a\ncentralized repository to prevent manual merging errors due to accidental\noverwrites. Also, engineers need a locking mechanism to ensure that fellow\nengineers are not making changes to the same file at the same time to enhance\ncollaboration and efficiency.\n\n### No. 3 Geographical distribution\n\nDesign teams are often geographically distributed. The teams need to\nsynchronize their changes daily or more often. Technology such as cache\nservers is necessary to make this more efficient especially given the size of\nthe design data.\n\n### No. 4 Access control\n\nAs design objects are often stored as a collection of co-managed files, a\nconfiguration management system should recognize these as related and manage\nit as a single, user recognizable, composite design object.\n\nIndividual engineers or contractors have different responsibilities in the\nsame design project, requiring the system to have proper access controls in\nplace. For instance, you may want to make sure that a layout engineer doesn\u2019t\nchange a schematic design. You may also want to prevent contractors from\nhaving any access to sensitive libraries. To enforce access controls, you need\nto have project data managed by a centralized server.\n\n### No.5 Design hierarchy management\n\nUnlike software development, where data is often organized in a simple flat\ndirectory structure, IC (Integrated Circuit) design involves a complex\nhierarchy of blocks. Each level of this hierarchy relies on integrating a\nlower-level block, making the organizational structure critical for IC\ndesigners. To manage these intricate designs, IC designers require a robust\nconfiguration management system capable of handling and executing within this\nhierarchical framework. Imagine the challenges software developers would face\nwithout the ability to compare different versions of their files to spot\nchanges. Such a scenario would make it extremely difficult to review\nmodifications or pinpoint the source of new bugs. Similarly, IC designers and\nlayout engineers should have access to advanced tools that enable them to\ndetect differences between versions of schematics or layouts.\n\n### No.6 Design tool Integration\n\nThe most challenging requirement for IC design data management is that\nrevision control and configuration management features must seamlessly\nintegrate into the design tools. In addition to efficient processes, design\ntools must be aware of the configuration management system to make sure that\ndesign changes are correctly recorded and trackable.\n\n## Streamline IC Design Data Management with Keysight SOS\n\nThere's often a strong temptation to look for tools that already exist and\nshoehorn them to meet similar needs in a different domain. However, while Git\nand other software configuration management (SCM) tools fit well with software\ndevelopment, they fall short in specific requirements of IC design, from\nbinary file management to design tool integration.\n\nKeysight Design Data Management (SOS) is a system designed from the ground up\nto meet the unique requirements of semiconductor IC designers.\n\nKeysight SOS can recognize composite design objects, understand IC design\nhierarchy, and reduce network storage through smart cache. Most importantly it\nhas seamless integration with all major EDA (Electronic Design Automation)\ntools including Cadence Virtuoso Studio, Synopsys Custom Compiler, Keysight\nADS (Advanced Design System), and more.\n\nFigure 2. Keysight SOS partners with all major EDA vendors\n\nGet a free trial of Keysight Design Data Management (SOS) to see how it can\nelevate your team\u2019s design reuse efficiency and streamline design data flow\nfrom concept to tape-out.\n\n### Related Content\n\nDemo request: Demo Keysight SOS\n\nWebinar: Streamline MMIC design with Keysight SOS\n\nProduct brochure: Keysight Design Data Management (SOS)\n\n### Related Posts\n\nlimit\n\n3\n\n", "frontpage": false}
