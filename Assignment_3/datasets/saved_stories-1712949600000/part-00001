{"aid": "40012374", "title": "Notes on git's error messages", "url": "https://jvns.ca/blog/2024/04/10/notes-on-git-error-messages/", "domain": "jvns.ca", "votes": 8, "user": "BerislavLopac", "posted_at": "2024-04-12 13:18:07", "comments": 0, "source_title": "Notes on git's error messages", "source_text": "Notes on git's error messages\n\n# Julia Evans\n\n  * About\n  * Talks\n  * Projects\n  * Twitter\n  * Mastodon\n  * Github\n\n# Notes on git's error messages\n\nWhile writing about Git, I\u2019ve noticed that a lot of folks struggle with Git\u2019s\nerror messages. I\u2019ve had many years to get used to these error messages so it\ntook me a really long time to understand why folks were confused, but having\nthought about it much more, I\u2019ve realized that:\n\n  1. sometimes I actually am confused by the error messages, I\u2019m just used to being confused\n  2. I have a bunch of strategies for getting more information when the error message git gives me isn\u2019t very informative\n\nSo in this post, I\u2019m going to go through a bunch of Git\u2019s error messages, list\na few things that I think are confusing about them for each one, and talk\nabout what I do when I\u2019m confused by the message.\n\n### improving error messages isn\u2019t easy\n\nBefore we start, I want to say that trying to think about why these error\nmessages are confusing has given me a lot of respect for how difficult\nmaintaining Git is. I\u2019ve been thinking about Git for months, and for some of\nthese messages I really have no idea how to improve them.\n\nSome things that seem hard to me about improving error messages:\n\n  * if you come up with an idea for a new message, it\u2019s hard to tell if it\u2019s actually better!\n  * work like improving error messages often isn\u2019t funded\n  * the error messages have to be translated (git\u2019s error messages are translated into 19 languages!)\n\nThat said, if you find these messages confusing, hopefully some of these notes\nwill help clarify them a bit.\n\n## error: git push on a diverged branch\n\n    \n    \n    $ git push To github.com:jvns/int-exposed ! [rejected] main -> main (non-fast-forward) error: failed to push some refs to 'github.com:jvns/int-exposed' hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. $ git status On branch main Your branch and 'origin/main' have diverged, and have 2 and 1 different commits each, respectively.\n\nSome things I find confusing about this:\n\n  1. You get the exact same error message whether the branch is just behind or the branch has diverged. There\u2019s no way to tell which it is from this message: you need to run git status or git pull to find out.\n  2. It says failed to push some refs, but it\u2019s not totally clear which references it failed to push. I believe everything that failed to push is listed with ! [rejected] on the previous line\u2013 in this case just the main branch.\n\nWhat I like to do if I\u2019m confused:\n\n  * I\u2019ll run git status to figure out what the state of my current branch is.\n  * I think I almost never try to push more than one branch at a time, so I usually totally ignore git\u2019s notes about which specific branch failed to push \u2013 I just assume that it\u2019s my current branch\n\n## error: git pull on a diverged branch\n\n    \n    \n    $ git pull hint: You have divergent branches and need to specify how to reconcile them. hint: You can do so by running one of the following commands sometime before hint: your next pull: hint: hint: git config pull.rebase false # merge hint: git config pull.rebase true # rebase hint: git config pull.ff only # fast-forward only hint: hint: You can replace \"git config\" with \"git config --global\" to set a default hint: preference for all repositories. You can also pass --rebase, --no-rebase, hint: or --ff-only on the command line to override the configured default per hint: invocation. fatal: Need to specify how to reconcile divergent branches.\n\nThe main thing I think is confusing here is that git is presenting you with a\nkind of overwhelming number of options: it\u2019s saying that you can either:\n\n  1. configure pull.rebase false, pull.rebase true, or pull.ff only locally\n  2. or configure them globally\n  3. or run git pull --rebase or git pull --no-rebase\n\nIt\u2019s very hard to imagine how a beginner to git could easily use this hint to\nsort through all these options on their own.\n\nIf I were explaining this to a friend, I\u2019d say something like \u201cyou can use git\npull --rebase or git pull --no-rebase to resolve this with a rebase or merge\nright now, and if you want to set a permanent preference, you can do that with\ngit config pull.rebase false or git config pull.rebase true.\n\ngit config pull.ff only feels a little redundant to me because that\u2019s git\u2019s\ndefault behaviour anyway (though it wasn\u2019t always).\n\nWhat I like to do here:\n\n  * run git status to see the state of my current branch\n  * maybe run git log origin/main or git log to see what the diverged commits are\n  * usually run git pull --rebase to resolve it\n  * sometimes I\u2019ll run git push --force or git reset --hard origin/main if I want to throw away my local work or remote work (for example because I accidentally commited to the wrong branch, or because I ran git commit --amend on a personal branch that only I\u2019m using and want to force push)\n\n## error: git checkout asdf (a branch that doesn't exist)\n\n    \n    \n    $ git checkout asdf error: pathspec 'asdf' did not match any file(s) known to git\n\nThis is a little weird because we my intention was to check out a branch, but\ngit checkout is complaining about a path that doesn\u2019t exist.\n\nThis is happening because git checkout\u2019s first argument can be either a branch\nor a path, and git has no way of knowing which one you intended. This seems\ntricky to improve, but I might expect something like \u201cNo such branch, commit,\nor path: asdf\u201d.\n\nWhat I like to do here:\n\n  * in theory it would be good to use git switch instead, but I keep using git checkout anyway\n  * generally I just remember that I need to decode this as \u201cbranch asdf doesn\u2019t exist\u201d\n\n## error: git switch asdf (a branch that doesn't exist)\n\n    \n    \n    $ git switch asdf fatal: invalid reference: asdf\n\ngit switch only accepts a branch as an argument (unless you pass -d), so why\nis it saying invalid reference: asdf instead of invalid branch: asdf?\n\nI think the reason is that internally, git switch is trying to be helpful in\nits error messages: if you run git switch v0.1 to switch to a tag, it\u2019ll say:\n\n    \n    \n    $ git switch v0.1 fatal: a branch is expected, got tag 'v0.1'`\n\nSo what git is trying to communicate with fatal: invalid reference: asdf is\n\u201casdf isn\u2019t a branch, but it\u2019s not a tag either, or any other reference\u201d. From\nmy various git polls my impression is that a lot of git users have literally\nno idea what a \u201creference\u201d is in git, so I\u2019m not sure if that\u2019s coming across.\n\nWhat I like to do here:\n\n90% of the time when a git error message says reference I just mentally\nreplace it with branch in my head.\n\n## error: git checkout HEAD^\n\n    \n    \n    $ git checkout HEAD^ Note: switching to 'HEAD^'. You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by switching back to a branch. If you want to create a new branch to retain commits you create, you may do so (now or later) by using -c with the switch command. Example: git switch -c Or undo this operation with: git switch - Turn off this advice by setting config variable advice.detachedHead to false HEAD is now at 182cd3f add \"swap byte order\" button\n\nThis is a tough one. Definitely a lot of people are confused about this\nmessage, but obviously there's been a lot of effort to improve it too. I don't\nhave anything smart to say about this one.\n\nWhat I like to do here:\n\n  * my shell prompt tells me if I\u2019m in detached HEAD state, and generally I can remember not to make new commits while in that state\n  * when I\u2019m done looking at whatever old commits I wanted to look at, I\u2019ll run git checkout main or something to go back to a branch\n\n## message: git status when a rebase is in progress\n\nThis isn\u2019t an error message, but I still find it a little confusing on its\nown:\n\n    \n    \n    $ git status interactive rebase in progress; onto c694cf8 Last command done (1 command done): pick 0a9964d wip No commands remaining. You are currently rebasing branch 'main' on 'c694cf8'. (fix conflicts and then run \"git rebase --continue\") (use \"git rebase --skip\" to skip this patch) (use \"git rebase --abort\" to check out the original branch) Unmerged paths: (use \"git restore --staged ...\" to unstage) (use \"git add ...\" to mark resolution) both modified: index.html no changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nTwo things I think could be clearer here:\n\n  1. I think it would be nice if You are currently rebasing branch 'main' on 'c694cf8'. were on the first line instead of the 5th line \u2013 right now the first line doesn\u2019t say which branch you\u2019re rebasing.\n  2. In this case, c694cf8 is actually origin/main, so I feel like You are currently rebasing branch 'main' on 'origin/main' might be even clearer.\n\nWhat I like to do here:\n\nMy shell prompt includes the branch that I\u2019m currently rebasing, so I rely on\nthat instead of the output of git status.\n\n## error: git rebase when a file has been deleted\n\n    \n    \n    $ git rebase main CONFLICT (modify/delete): index.html deleted in 0ce151e (wip) and modified in HEAD. Version HEAD of index.html left in tree. error: could not apply 0ce151e... wip\n\nThe thing I still find confusing about this is \u2013 index.html was modified in\nHEAD. But what is HEAD? Is it the commit I was working on when I started the\nmerge/rebase, or is it the commit from the other branch? (the answer is \u201cHEAD\nis your branch if you\u2019re doing a merge, and it\u2019s the \u201cother branch\u201d if you\u2019re\ndoing a rebase, but I always find that hard to remember)\n\nI think I would personally find it easier to understand if the message listed\nthe branch names if possible, something like this:\n\n    \n    \n    CONFLICT (modify/delete): index.html deleted on `main` and modified on `mybranch`\n\n## error: git status during a merge or rebase (who is \u201cthem\u201d?)\n\n    \n    \n    $ git status On branch master You have unmerged paths. (fix conflicts and run \u201cgit commit\u201d) (use \u201cgit merge \u2013abort\u201d to abort the merge)\n    \n    Unmerged paths: (use \u201cgit add/rm ...\u201d as appropriate to mark resolution) deleted by them: the_file\n    \n    no changes added to commit (use \u201cgit add\u201d and/or \u201cgit commit -a\u201d)\n\nI find this one confusing in exactly the same way as the previous message: it\nsays deleted by them:, but what \u201cthem\u201d refers to depends on whether you did a\nmerge or rebase or cherry-pick.\n\n  * for a merge, them is the other branch you merged in\n  * for a rebase, them is the branch that you were on when you ran git rebase\n  * for a cherry-pick, I guess it\u2019s the commit you cherry-picked\n\nWhat I like to do if I\u2019m confused:\n\n  * try to remember what I did\n  * run git show main --stat or something to see what I did on the main branch if I can\u2019t remember\n\n## error: git clean\n\n    \n    \n    $ git clean fatal: clean.requireForce defaults to true and neither -i, -n, nor -f given; refusing to clean\n\nI just find it a bit confusing that you need to look up what -i, -n and -f are\nto be able to understand this error message. I\u2019m personally way too lazy to do\nthat so even though I\u2019ve probably been using git clean for 10 years I still\nhad no idea what -i stood for (interactive) until I was writing this down.\n\nWhat I like to do if I\u2019m confused:\n\nUsually I just chaotically run git clean -f to delete all my untracked files\nand hope for the best, though I might actually switch to git clean -i now that\nI know what -i stands for. Seems a lot safer.\n\n### that\u2019s all!\n\nHopefully some of this is helpful!\n\nMaking crochet cacti\n\n\u00a9 Julia Evans. If you like this, you may like Ulia Ea or, more seriously, this\nlist of blogs I love or some books I've read.\n\nYou might also like the Recurse Center, my very favorite programming community\n(my posts about it)\n\n", "frontpage": true}
