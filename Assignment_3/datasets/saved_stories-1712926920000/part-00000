{"aid": "40010079", "title": "Waiting for PostgreSQL 17 \u2013 Invent Serialize Option for Explain", "url": "https://www.depesz.com/2024/04/11/waiting-for-postgresql-17-invent-serialize-option-for-explain/", "domain": "depesz.com", "votes": 2, "user": "mattashii", "posted_at": "2024-04-12 07:01:38", "comments": 0, "source_title": "Waiting for PostgreSQL 17 \u2013 Invent SERIALIZE option for EXPLAIN.", "source_text": "Waiting for PostgreSQL 17 \u2013 Invent SERIALIZE option for EXPLAIN. \u2013 select *\nfrom depesz;\n\nSkip to content\n\n#\n\n=$\n\n|\n\n# Waiting for PostgreSQL 17 \u2013 Invent SERIALIZE option for EXPLAIN.\n\nOn 3rd of April 2024, Tom Lane committed patch:\n\n    \n    \n    Invent SERIALIZE option for EXPLAIN. EXPLAIN (ANALYZE, SERIALIZE) allows collection of statistics about the volume of data emitted by a query, as well as the time taken to convert the data to the on-the-wire format. Previously there was no way to investigate this without actually sending the data to the client, in which case network transmission costs might swamp what you wanted to see. In particular this feature allows investigating the costs of de-TOASTing compressed or out-of-line data during formatting. Stepan Rutz and Matthias van de Meent, reviewed by Tomas Vondra and myself Discussion: https://postgr.es/m/ca0adb0e-fa4e-c37e-1cd7-91170b18cae1@gmx.de\n\nThis will be HUGE.\n\nLet's look at simple example, database for explain.depesz.com. Let's see how\nlong it would take to get all plans:\n\n    \n    \n    =$ EXPLAIN (analyze) SELECT * FROM simple; QUERY PLAN --------------------------------------------------------------------------------------------------------------------- Seq Scan ON simple (cost=0.00..210108.80 ROWS=4466880 width=267) (actual TIME=0.016..711.977 ROWS=1614584 loops=1) Planning TIME: 0.198 ms Execution TIME: 749.749 ms (3 ROWS)\n\nPretty OK. But it's not full picture. The thing is that while it did run most\nof query, it didn't really get the data to memory from toasted columns (and\npotentially some other places).\n\nNow, with this new SERIALIZE option I can:\n\n    \n    \n    =$ EXPLAIN (analyze, serialize) SELECT * FROM simple; QUERY PLAN --------------------------------------------------------------------------------------------------------------------- Seq Scan ON simple (cost=0.00..210108.80 ROWS=4466880 width=267) (actual TIME=0.011..399.249 ROWS=1614584 loops=1) Planning TIME: 0.028 ms Serialization: TIME=19479.433 ms output=28074610kB format=text Execution TIME: 19961.576 ms (4 ROWS)\n\nPlease note that we got new line, and much higher total execution cost.\nGetting data from table was simple to do in ~ 750ms. But getting data from\ntoast, and generating output to send to client \u2013 it took almost 20 seconds.\n\nPlus, please note that explain shows that there were rows=1614584 with\nwidth=267 \u2013 which would be ~ 410MB.\n\nBut, serialization showed that full output was output=28074610kB \u2013 26GB! Over\n60 times more.\n\nThis is great. Very good news to anyone working on query optimization. Thanks\na lot to everyone that worked on this.\n\nPosted on 2024-04-11|Tags analyze, explain, pg17, postgresql, serialize,\ntoast, waiting|\n\n## Leave a Reply\n\nThis site uses Akismet to reduce spam. Learn how your comment data is\nprocessed.\n\n## Search\n\n## Follow me\n\n  * Comments RSS\n  * Posts RSS\n\n## PostgreSQL\n\n  * Documentation\n  * Explain Analyze analyzer\n  * IRC help channel\n  * Mailing Lists search\n  * PG Planet\n  * PostgreSQL Home Page\n\n## About me\n\n  * CPAN\n  * GitLab\n  * Linked In\n\n", "frontpage": false}
