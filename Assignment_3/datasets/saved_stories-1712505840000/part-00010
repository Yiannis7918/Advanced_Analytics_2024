{"aid": "39959686", "title": "Lightweight and fast AMQP (0-9-1) server", "url": "https://github.com/cloudamqp/lavinmq", "domain": "github.com/cloudamqp", "votes": 1, "user": "jpalomaki", "posted_at": "2024-04-07 09:56:48", "comments": 0, "source_title": "GitHub - cloudamqp/lavinmq: Lightweight and fast AMQP (0-9-1) server", "source_text": "GitHub - cloudamqp/lavinmq: Lightweight and fast AMQP (0-9-1) server\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ncloudamqp / lavinmq Public\n\n  * Notifications\n  * Fork 20\n  * Star 358\n\nLightweight and fast AMQP (0-9-1) server\n\nlavinmq.com\n\n### License\n\nApache-2.0 license\n\n358 stars 20 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# cloudamqp/lavinmq\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n60 Branches\n\n157 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndentargDo not run CLA workflow for COLLABORATORsd3c277a \u00b7\n\n## History\n\n4,312 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Do not run CLA workflow for COLLABORATORs  \n  \n### debian\n\n|\n\n### debian\n\n| Build with crystal 1.8.0  \n  \n### extras\n\n|\n\n### extras\n\n| load debug symbols by default  \n  \n### openapi\n\n|\n\n### openapi\n\n| HTTP API docs: improve get message request body documentation (#647)  \n  \n### spec\n\n|\n\n### spec\n\n| Replication refactor (#641)  \n  \n### src\n\n|\n\n### src\n\n| Export replication lag in prometheus metrics (#646)  \n  \n### static\n\n|\n\n### static\n\n| Dont use shovel name as consumer tag (#634)  \n  \n### views\n\n|\n\n### views\n\n| Make the tables nicer, Name column wider  \n  \n### .ameba.yml\n\n|\n\n### .ameba.yml\n\n| ameba 1.6.0 passes  \n  \n### .cirrus.yml\n\n|\n\n### .cirrus.yml\n\n| allow freebsd ci build to fail  \n  \n### .eslintignore\n\n|\n\n### .eslintignore\n\n| AMQP websocket support  \n  \n### .eslintrc.json\n\n|\n\n### .eslintrc.json\n\n| AMQP websocket support  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| better git diff when treating .cr as ruby  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Replication refactor (#641)  \n  \n### .jshintignore\n\n|\n\n### .jshintignore\n\n| eslint all js  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| update changelog  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Readme updates (#516)  \n  \n### Dockerfile\n\n|\n\n### Dockerfile\n\n| Build conatiner/images using crystal 1.11.2  \n  \n### Dockerfile.deb\n\n|\n\n### Dockerfile.deb\n\n| LZ4 compression  \n  \n### Dockerfile.rpm\n\n|\n\n### Dockerfile.rpm\n\n| Build using crystal 1.11.0  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| change LICENSE file to full apache 2 license and added notice file  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Lint javascript w make and on CI  \n  \n### NOTICE\n\n|\n\n### NOTICE\n\n| Update README and other markdown files  \n  \n### README.md\n\n|\n\n### README.md\n\n| Improve docker run command in README  \n  \n### SECURITY.md\n\n|\n\n### SECURITY.md\n\n| Update README and other markdown files  \n  \n### depot.json\n\n|\n\n### depot.json\n\n| depot.dev for faster multi arch builds  \n  \n### generate-release-notes\n\n|\n\n### generate-release-notes\n\n| Fix release notes generation on GitHub Actions  \n  \n### lavinmq.spec\n\n|\n\n### lavinmq.spec\n\n| Fix changelog in RPM package  \n  \n### playwright.config.js\n\n|\n\n### playwright.config.js\n\n| Add playwright for frontend specs (#560)  \n  \n### shard.lock\n\n|\n\n### shard.lock\n\n| update amqp-client.cr and amqp-protocol versions (#651)  \n  \n### shard.yml\n\n|\n\n### shard.yml\n\n| v1.2.10  \n  \n## Repository files navigation\n\nA message queue server that implements the AMQP 0-9-1 protocol. Written in\nCrystal.\n\nAims to be very fast, has low RAM requirements, handles very long queues, many\nconnections, and requires minimal configuration.\n\nRead more at LavinMQ.com\n\n## Installation\n\n### From source\n\nBegin with installing Crystal. Refer to Crystal's installation documentation\non how to install Crystal.\n\nClone the git repository and build the project.\n\n    \n    \n    git clone git@github.com:cloudamqp/lavinmq.git cd lavinmq make sudo make install # optional\n\nNow, LavinMQ is ready to be used. You can check the version with:\n\n    \n    \n    lavinmq -v\n\n### Debian/Ubuntu\n\n    \n    \n    curl -fsSL https://packagecloud.io/cloudamqp/lavinmq/gpgkey | gpg --dearmor | sudo tee /usr/share/keyrings/lavinmq.gpg > /dev/null . /etc/os-release echo \"deb [signed-by=/usr/share/keyrings/lavinmq.gpg] https://packagecloud.io/cloudamqp/lavinmq/$ID $VERSION_CODENAME main\" | sudo tee /etc/apt/sources.list.d/lavinmq.list sudo apt-get update sudo apt-get install lavinmq\n\nIf you need to install a specific version of LavinMQ, do so using the\nfollowing command: sudo apt install lavinmq=<version>. This works for both\nupgrades and downgrades.\n\n### Fedora\n\n    \n    \n    sudo tee /etc/yum.repos.d/lavinmq.repo << 'EOF' [lavinmq] name=LavinMQ baseurl=https://packagecloud.io/cloudamqp/lavinmq/fedora/$releasever/$basearch gpgkey=https://packagecloud.io/cloudamqp/lavinmq/gpgkey repo_gpgcheck=1 gpgcheck=0 EOF sudo dnf install lavinmq\n\n## Usage\n\nLavinMQ only requires one argument, and it's a path to a data directory.\n\nRun LavinMQ with: lavinmq -D /var/lib/lavinmq\n\nMore configuration options can be viewed with -h, and you can specify a\nconfiguration file too, see extras/config.ini for an example.\n\n## Docker\n\nDocker images are published to Docker Hub. Fetch and run the latest version\nwith:\n\n    \n    \n    docker run --rm -it -p 5672:5672 -p 15672:15672 -v /var/lib/lavinmq:/tmp/amqp cloudamqp/lavinmq\n\nYou are then able to visit the management UI at http://localhost:15672 and\nstart publishing/consuming messages to amqp://guest:guest@localhost.\n\n## Debugging\n\nIn Linux, perf is the tool of choice when tracing and measuring performance.\n\nTo see which syscalls that are made use:\n\n    \n    \n    perf trace -p $(pidof lavinmq)\n\nTo get a live analysis of the mostly called functions, run:\n\n    \n    \n    perf top -p $(pidof lavinmq)\n\nA more detailed tutorial on perf is available here.\n\nIn OS X the app, Instruments that's bundled with Xcode can be used for\ntracing.\n\nMemory garbage collection can be diagnosed with boehm-gc environment\nvariables.\n\n## Contributing\n\nKindly read our contributing guide\n\n## LavinMQ with various plattforms\n\nAll AMQP client libraries work with LavinMQ and there are AMQP client\nlibraries for almost every platform on the market. Here are guides for a\ncouple of common plattforms.\n\n  1. Ruby\n  2. Node.js\n  3. Java\n  4. Python\n  5. PHP\n  6. Crystal\n\n## Performance\n\nA single m6g.large EC2 instance, with a GP3 EBS drive (XFS formatted), can\nsustain about 700.000 messages/s (16 byte msg body, single queue, single\nproducer, single consumer). A single producer can push 1.600.000 msgs/s and if\nthere's no producers auto-ack consumers can receive 1.200.000 msgs/s.\n\nEnqueueing 100M messages only uses 25 MB RAM. 8000 connection uses only about\n400 MB RAM. Declaring 100.000 queues uses about 100 MB RAM. About 1.600\nbindings per second can be made to non-durable queues, and about 1000\nbindings/second to durable queues.\n\n## Implementation\n\nLavinMQ is written in Crystal, a modern language built on the LLVM, with a\nRuby-like syntax. It uses an event loop library for IO, is garbage collected,\nadopts a CSP-like concurrency model and compiles down to a single binary. You\ncan liken it to Go, but with a nicer syntax.\n\nInstead of trying to cache messages in RAM, we write all messages as fast as\nwe can to disk and let the OS cache do the caching.\n\nEach queues is backed by a message store on disk, which is just a series of\nfiles (segments), by default 8MB each. Message segments are memory-mapped\nfiles allocated using the mmap syscall. However, to prevent unnecessary memory\nusage, we unmap these files and free up the allocated memory when they are not\nin use. When a file needs to be written or read, we re-map it and use only the\nmemory needed for that specific segment. Each incoming message is appended to\nthe last segment, prefixed with a timestamp, its exchange name, routing key\nand message headers.\n\nWhen a message is being consumed it reads sequentially from the segments. Each\nacknowledged (or rejected) message position in the segment is written to an\n\"ack\" file (per segment). If a message is requeued its position is added to a\nin memory queue. On boot all acked message positions are read from the \"ack\"\nfiles and then when deliviering messages skip those when reading sequentially\nfrom the message segments. Segments are deleted when all message in them are\nacknowledged.\n\nDeclarations of queues, exchanges and bindings are written to a definitions\nfile (if the target is durable), encoded as the AMQP frame they came in as.\nPeriodically this file is compacted/garbage-collected by writing only the\ncurrent in-memory state to the file (getting rid of all delete events). This\nfile is read on boot to restore all definitions.\n\nAll non-AMQP objects like users, vhosts, policies, etc. are stored in JSON\nfiles. Most often these type of objects does not have a high turnover rate, so\nwe believe that JSON in this case makes it easy for operators to modify things\nwhen the server is not running, if ever needed.\n\nIn the data directory we store users.json and vhosts.json as mentioned\nearlier, and each vhost has a directory in which we store definitions.amqp\n(encoded as AMQP frames), policies.json and the messages named such as\nmsgs.0000000124. Each vhost directory is named after the sha1 hash of its real\nname. The same goes for the queue directories in the vhost directory. The\nqueue directories only has two files, ack and enq, also described earlier.\n\n### Flows\n\nHere is an architectural description of the different flows in the server.\n\n#### Publish\n\nClient#read_loop reads from the socket, it calls Channel#start_publish for the\nBasic.Publish frame and Channel#add_content for Body frames. When all content\nhas been received (and appended to an IO::Memory object) it calls\nVHost#publish with a Message struct. VHost#publish finds all matching queues,\nwrites the message to the message store and then calls Queue#publish with the\nsegment position. Queue#publish writes to the message store.\n\n#### Consume\n\nWhen Client#read_loop receives a Basic.Consume frame it will create a Consumer\nclass and add it to the queue's list of consumers. Each consumer has a\ndeliver_loop fiber that will be notified by an internal Channel when new\nmessages are available in the queue.\n\n## Getting help\n\nFor questions or suggestions:\n\n  * We are on Slack.\n  * You can also use the lavinmq tag on Stackoverflow\n  * If you use LavinMQ via CloudAMQP then reach out to [support@cloudamqp.com]\n\n## Features\n\n  * AMQP 0-9-1 compatible\n  * AMQPS (TLS)\n  * HTTP API\n  * Publisher confirm\n  * Transactions\n  * Policies\n  * Shovels\n  * Queue federation\n  * Exchange federation\n  * Dead-lettering\n  * TTL support on queue, message, and policy level\n  * CC/BCC\n  * Alternative exchange\n  * Exchange to exchange bindings\n  * Direct-reply-to RPC\n  * Users and ACL rules\n  * VHost separation\n  * Consumer cancellation\n  * Queue max-length\n  * Importing/export definitions\n  * Priority queues\n  * Delayed exchanges\n  * AMQP WebSocket\n  * Single active consumer\n  * Replication\n  * Stream queues\n\nCurrently missing but planned features\n\n  * Automatic leader election in clusters\n\n### Known differences to other AMQP servers\n\nThere are a few edge-cases that are handled a bit differently in LavinMQ\ncompared to other AMQP servers.\n\n  * When comparing queue/exchange/binding arguments all number types (e.g. 10 and 10.0) are considered equivalent\n  * When comparing queue/exchange/binding arguments non-effective parameters are also considered, and not ignored\n  * TTL of queues and messages are correct to the 0.1 second, not to the millisecond\n  * Newlines are not removed from Queue or Exchange names, they are forbidden\n\n## Replication\n\nLavinMQ supports replication between a leader server and one or more\nfollowers. All changes on the leader is replicated to followers.\n\n### Replication configuration\n\nA shared secret is used to allow nodes in a cluster to communicate, make sure\nthat the .replication_secret file is the same in all data directores of all\nnodes.\n\nThen enable the replication listener on the leader:\n\n    \n    \n    [replication] bind = 0.0.0.0 port = 5679\n\nor start LavinMQ with:\n\n    \n    \n    lavinmq --data-dir /var/lib/lavinmq --replication-bind 0.0.0.0 --replication-port 5679\n\nConfigure the follower(s) to connect to the leader:\n\n    \n    \n    [replication] follow = tcp://hostname:port\n\nor start LavinMQ with:\n\n    \n    \n    lavinmq --data-dir /var/lib/lavinmq-follower --follow tcp://leader.example.com:5679\n\n## Stream queues\n\nStream queues are like append-only logs and can be consumed multiple times.\nEach consumer can start to read from anywhere in the queue (using the\nx-stream-offset consumer argument) over and over again. Stream queues are\ndifferent from normal queues in that messages are not deleted (see #retention)\nwhen a consumer acknowledge them.\n\n### Retention\n\nMessages are only deleted when max-length, max-length-bytes or max-age are\napplied, either as queue arguments or as policies. The limits are checked only\nwhen new messages are published to the queue, and only act on whole segments\n(which by default are 8MiB), so the limits aren't necessarily exact. So even\nif a max-age limit is set, but no messages are published to the queue,\nmessages might still be available in the stream queue that is way older that\nthe limit specified.\n\n## Contributors\n\n  * Carl H\u00f6rberg\n  * Anders B\u00e4lter\n  * Magnus Landerblom\n  * Magnus H\u00f6rberg\n  * Johan Eckerstr\u00f6m\n  * Anton Dalgren\n  * Patrik Ragnarsson\n  * Oskar Gustafsson\n  * Tobias Brod\u00e9n\n  * Christina Dahl\u00e9n\n  * Erica Weistrand\n  * Viktor Erlingsson\n\n## License\n\nThe software is licensed under the Apache License 2.0.\n\nCopyright 2018-2023 84codes AB\n\nLavinMQ is a trademark of 84codes AB\n\n## About\n\nLightweight and fast AMQP (0-9-1) server\n\nlavinmq.com\n\n### Topics\n\nserver amqp background-jobs message-queue job-queue\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\n### Security policy\n\nSecurity policy\n\nActivity\n\nCustom properties\n\n### Stars\n\n358 stars\n\n### Watchers\n\n19 watching\n\n### Forks\n\n20 forks\n\nReport repository\n\n## Releases 55\n\nv1.2.10 Latest\n\nMar 25, 2024\n\n\\+ 54 releases\n\n## Contributors 17\n\n\\+ 3 contributors\n\n## Languages\n\n  * Crystal 77.3%\n  * JavaScript 12.5%\n  * HTML 7.2%\n  * CSS 1.7%\n  * Ruby 0.5%\n  * Makefile 0.4%\n  * Other 0.4%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
