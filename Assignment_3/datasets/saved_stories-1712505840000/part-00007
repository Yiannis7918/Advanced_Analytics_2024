{"aid": "39959612", "title": "Beyond Foreign Keys", "url": "https://lackofimagination.org/2024/04/beyond-foreign-keys/", "domain": "lackofimagination.org", "votes": 2, "user": "tie-in", "posted_at": "2024-04-07 09:39:02", "comments": 0, "source_title": "Beyond Foreign Keys", "source_text": "Beyond Foreign Keys\n\nLack of Imagination\n\n# Beyond Foreign Keys\n\nApril 5, 2024 in Software\n\nPhoto by Ryo Yoshitake\n\nIn a relational database, foreign keys are normally used to associate records\nstored in different tables. Let\u2019s say we want to add a forum to our website\nwhere people can discuss matters related to our product. To keep things\nsimple, we will model our forum with just three tables: user, post and topic.\nThe relationships between the tables can be modeled by asking a few questions:\n\n  * Who wrote a given post? post.user_id references user.id.\n  * Which posts are under a given topic? post.topic_id references topic.id.\n  * Who started a given topic? topic.user_id references user.id.\n\nUsing foreign keys to associate tables for a simple forum.\n\nThis is all well and good, but each relationship requires adding a new column\nto a table, and we don\u2019t even have many-to-many relationships in this example,\nwhich will necessitate creating additional tables.\n\nWouldn\u2019t it be nice to define relationships dynamically without having to add\nextra columns or tables? And while we\u2019re at it, how about having sparse\nrelationships by associating a record directly with any other record like\n\u201cpost X was last edited by user #123\u201d or \u201cpost X was flagged for review by\nuser #456\u201d (who happens to be a moderator)?\n\nWith that idea in mind, I\u2019ve created Tie-in, a relational data component\nlibrary for Node.js. Tie-in lets you store and query records that can be\nrelated to any other record.\n\nLet\u2019s create a user, a post, and a topic by using data components (more on how\nto define them later) in the relational database of our choice (in this case\nPostgreSQL):\n\n    \n    \n    const dbConfig = { client: 'pg', connection: 'postgresql://localhost/me' }; // Load Tie-in and data component definitions const tie = require('tie-in')(dbConfig); const user = require('./components/user')(tie); const post = require('./components/post')(tie); const topic = require('./components/topic')(tie); async function firstSteps() { // Register the components we will use await tie.register([user, post, topic]); // Create a user named Asuka const userId = await tie.create(user({ username: 'Asuka', email: 'asuka@localhost', country: 'JP' })); // Create a post and make its author Asuka const postId = await tie.create(post({ content: 'Hi!' }), { upstream: [user({ id: userId, relType: 'author' })], }); // Create a topic and make the topic starter Asuka, also make the post a child of this topic const topicId = await tie.create(topic({ title: 'First Topic' }), { upstream: [user({ id: userId, relType: 'starter' })], downstream: [post({ id: postId, relType: 'child' })], }); // Retrieve topic and related records const topicRecs = await tie.get(topic({ id: topicId })); console.log(JSON.stringify(topicRecs, null, 2)); } firstSteps();\n\nOnce the individual records are in place, we retrieve the newly created topic\nwith tie.get, which recursively retrieves all related records and groups them\ntogether. In Tie-in, related records can be upstream (referencing a record)\nand/or downstream (referenced from another record). Related records can\noptionally have types specified by relType.\n\n    \n    \n    { \"topic\": [ { \"self\": { \"id\": 1, \"title\": \"First Topic\", \"createdAt\": \"2024-03-28T12:27:51.542Z\", \"updatedAt\": \"2024-03-28T12:27:51.542Z\" }, \"user\": [ { \"self\": { \"relType\": \"starter\", \"id\": 1, \"username\": \"Asuka\", \"email\": \"asuka@localhost\", \"country\": \"JP\", \"createdAt\": \"2024-03-28T12:27:51.531Z\", \"updatedAt\": \"2024-03-28T12:27:51.531Z\" } } ], \"post\": [ { \"self\": { \"relType\": \"child\", \"id\": 1, \"content\": \"Hi!\", \"createdAt\": \"2024-03-28T12:27:51.538Z\", \"updatedAt\": \"2024-03-28T12:27:51.538Z\" } } ] } ] }\n\n#### Defining Components\n\nTo define a component, you call tie.define with the following arguments:\n\n  * name: Name of the component\n  * schema: A function that defines the database table schema. Tie-in uses knex under the hood. Table field names must be in snake_case for maximum compatibility across different database systems. Tie-in does the snake_case to camelCase conversions and vice versa automatically.\n  * data: A function that accepts an object with field names in camelCase, maps those fields to the database table fields created with schema, and returns the resulting object.\n\nIn its simplest form, a component definition should look like the example\nbelow. The only requirement is that there must be a field named id that\nuniquely identifies each record.\n\n    \n    \n    module.exports = (tie) => { const name = 'post'; async function schema(knex, tablePrefix) { const tableName = tablePrefix + name; if (!(await knex.schema.hasTable(tableName))) { return knex.schema.createTable(tableName, function (table) { table.increments('id').primary(); table.text('content').notNullable(); table.timestamps(false, true); }); } } function data(input) { return { id: input?.id, content: input?.content, created_at: input?.createdAt, updated_at: input?.updatedAt, }; } return tie.define(name, schema, data); };\n\nYou might probably want to validate the input passed to the data function.\nTie-in uses fn-arg-validator for internal data validation, and exposes it\nthrough tie.is, but you can of course use any other library you would like.\n\n### tie.get\n\nSyntax: tie.get(comp, filters = {})\n\nWhen you pass a component instance (comp) to tie.get, it uses the component\ninstance\u2019s data for search. Here are some examples:\n\n  * await tie.get(user( {country: 'JP'} )) returns the users from Japan.\n  * await tie.get(user( {country: 'JP', username: 'Asuka'} )) returns the users from Japan having the username \u2018Asuka\u2019.\n  * await tie.get(user()) returns all users.\n\ntie.get supports a wide range of options to filter the results returned. For\nexample:\n\n    \n    \n    async function getPostCountsGroupedByUser(topicId) { const filters = { aggregate: [{ fn: 'count', args: '*' }], group: { by: user(), columns: ['id', 'username'] }, filterUpstreamBy: [topic({ id: topicId })], orderBy: [{ column: 'username', order: 'asc' }], limit: 20, }; return tie.get(post(), filters); }\n\nFor a complete list of the available functions and options, you can visit Tie-\nin\u2019s GitHub page.\n\n### How is this Different than an ORM?\n\nTie-in isn\u2019t an ORM (Object-Relational Mapper). In fact, Tie-in\u2019s data\ncomponent instances are immutable \u2013 once set, you can\u2019t change the values a\ncomponent instance holds.\n\nTie-in components have embedded schema definitions. In a sense, they are self-\ncontained.\n\nTie-in doesn\u2019t suffer from the worst performance issues that plague various\nORMs such as the infamous N+1 query problem. Tie-in also tries its best to\nreduce the number of queries it generates by merging related queries together.\n\n### Can I still use Foreign Keys?\n\nAbsolutely. There\u2019s nothing preventing you from using them. Foreign keys are\ngreat! Tie-in doesn\u2019t replace foreign keys, but supplements them.\n\n### Fun with Relationships\n\nIn my opinion, Tie-in makes it fun to write database-level code by removing\nthe need to define relationships for anything and everything. You can easily\nhave an ad-hoc relationship between two records and nothing else.\n\nTie-in\u2019s recursive record retrieval functionality makes it almost too easy to\nget the data you need without having to worry about all the joins, and dare I\nsay, it\u2019s a little like magic.\n\nRelated:\n\n  * Common SQL Mistakes Developers Make\n  * Our Experience with PostgreSQL on ZFS\n  * Decoding Complex-Sounding Programming Terms with Examples\n\nTAGGED IN software databases sql javascript\n\n\u00a9 2024 Aycan Gulez\n\n  * Share on Linkedin\n  * Share on Twitter\n  * Share on Reddit\n\n#### Aycan Gulez\n\n", "frontpage": false}
