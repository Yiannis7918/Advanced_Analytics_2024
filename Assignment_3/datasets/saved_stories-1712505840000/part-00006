{"aid": "39959592", "title": "Flyweight: A Node.js ORM Specifically for SQLite", "url": "https://github.com/thebinarysearchtree/flyweight", "domain": "github.com/thebinarysearchtree", "votes": 4, "user": "unemployable", "posted_at": "2024-04-07 09:32:53", "comments": 0, "source_title": "GitHub - thebinarysearchtree/flyweight: An ORM for SQLite", "source_text": "GitHub - thebinarysearchtree/flyweight: An ORM for SQLite\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nthebinarysearchtree / flyweight Public\n\n  * Notifications\n  * Fork 3\n  * Star 264\n\nAn ORM for SQLite\n\n### License\n\nMIT license\n\n264 stars 3 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# thebinarysearchtree/flyweight\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nthebinarysearchtreeread mece0069e \u00b7\n\n## History\n\n260 Commits  \n  \n### src\n\n|\n\n### src\n\n| types  \n  \n### test\n\n|\n\n### test\n\n| updates  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| ignore build file  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| date is now stored as a string  \n  \n### README.md\n\n|\n\n### README.md\n\n| read me  \n  \n### hero.png\n\n|\n\n### hero.png\n\n| read me  \n  \n### index.d.ts\n\n|\n\n### index.d.ts\n\n| migration undo  \n  \n### index.js\n\n|\n\n### index.js\n\n| modifiers (not, gt, etc)  \n  \n### interfaces.d.ts\n\n|\n\n### interfaces.d.ts\n\n| add defaults, count, exists  \n  \n### package-lock.json\n\n|\n\n### package-lock.json\n\n| support cjs  \n  \n### package.json\n\n|\n\n### package.json\n\n| types  \n  \n## Repository files navigation\n\n# Flyweight\n\nAn ORM for SQLite and NodeJS. Flyweight combines a very simple API for\nperforming basic operations, with the ability to create SQL queries that are\nparsed by the ORM.\n\nFor example, if you create a query in ./database/sql/users/roles.sql that\nlooks like this:\n\n    \n    \n    select u.id, u.name, groupArray(r.name) as roles from users u join roles r on r.userId = u.id where u.name = $name group by u.id\n\nA function db.users.roles will be available in the API with the correct types.\n\n## Shorthand JSON functions\n\n    \n    \n    object( u.id, u.name, u.social) as user\n\nis just shorthand for\n\n    \n    \n    json_object( 'id', u.id, 'name', u.name, 'social', u.social) as user\n\nOther commands available are groupArray which is shorthand for\njson_group_array, and array, which is shorthand for json_array.\n\n## Creating tables\n\nTables are created the same way as they are in SQL. The native types available\nin strict mode are integer, real, text, blob, and any. In addition to these\ntypes, four additional types are included by default: boolean, date, and json.\nboolean is a column in which the values are restricted to 1 or 0, date is a\nJavaScript Date stored as an ISO8601 string, and json is json stored as text.\nThese additional types are automatically parsed by the ORM.\n\n    \n    \n    create table events ( id integer primary key, name text not null, startTime date not null, locationId integer references locations );\n\nEach table has a singular and plural form. If you want to get one row with the\nbasic API, you can use:\n\n    \n    \n    const event = await db.event.get({ id: 100 });\n\nIf you want to get many rows, you can use:\n\n    \n    \n    const names = await db.events.get({ id: eventIds }, 'name');\n\nIf you want to insert a row, you can do:\n\n    \n    \n    const id = await db.coach.insert({ name: 'Eugene Bareman', city: 'Auckland' });\n\n## Getting started\n\n    \n    \n    mkdir test cd test npm init npx create-flyweight database\n\nYou can run the npx command at the root of either an existing or a new\nproject. Once that is done, you can import the database this way:\n\n    \n    \n    import { db } from './database/db.js'; await db.user.insert({ name: 'Andrew' }); const users = await db.users.get(); console.log(users);\n\nA users table has already been created for you to play around with.\n\nYou can update types whenever you change the SQL by either calling npm run\nwatch to automatically update the types, or npm run types to do it manually.\n\n## Migrations\n\nTables are defined in ./database/sql/tables.sql. You can add or change tables\nfrom here and then run the migration command npm run migrate <migration-name>.\n\nIf you want to add a new column to a table without needing to drop the table,\nmake sure you put the column at the end of the list of columns.\n\n## Regular expressions\n\nFlyweight supports regular expressions in some of its methods. These regular\nexpressions are converted to like statements, which limits what kind of\nregular expressions you can make.\n\n    \n    \n    const coach = await db.coach.get({ name: /^Eugene.+/ });\n\n## Default values\n\nDefault values can be set for boolean and date columns using the following\nsyntax:\n\n    \n    \n    create table users ( id integer primary key, isDisabled boolean not null default false, createdAt date not null default now() );\n\ncurrent_timestamp will not work properly when wanting to set the default date\nto the current time. This is because current_timestamp does not include\ntimezone information and therefore when parsing the date string from the\ndatabase, JavaScript will assume it is in local time when it is in fact in UTC\ntime.\n\n## The API\n\nEvery table has get, update, insert, and remove methods available to it, along\nwith any of the custom methods that are created when you add a new SQL file to\nthe corresponding table's folder. Views only have the get method available to\nthem.\n\n### Insert\n\ninsert simply takes one argument - params, with the keys and values\ncorresponding to the column names and values you want to insert. It returns\nthe primary key, or part of the primary key if the table has a composite\nprimary key. The plural version of insert is for batch inserts and takes an\narray of params. It doesn't return anything.\n\n### Update\n\nupdate takes two arguments - the query (or null), and the params you want to\nupdate. It returns a number representing the number of rows that were affected\nby the query. For example:\n\n    \n    \n    await db.coach.update({ id: 100 }, { city: 'Brisbane' });\n\nwhich corresponds to\n\n    \n    \n    update coaches set city = 'Brisbane' where id = 100;\n\n### Get\n\nget takes two optional arguments. The first is params - an object representing\nthe where clause. For example:\n\n    \n    \n    const fights = await db.fights.get({ cardId: 9, titleFight: true });\n\ntranslates to\n\n    \n    \n    select * from fights where cardId = 9 and titleFight = 1;\n\nThe keys to params must be the column names of the table. The values can\neither be of the same type as the column, an array of values that are the same\ntype as the column, null, or a regular expression if the column is text. If an\narray is passed in, an in clause is used, such as:\n\n    \n    \n    const fights = await db.fights.get({ cardId: [1, 2, 3] });\n\nwhich translates to\n\n    \n    \n    select * from fights where cardId in (1, 2, 3);\n\nIf null is passed in as the value, the SQL will use is null. If a regular\nexpression is passed in, the SQL will use like.\n\nAll of the arguments are passed in as parameters for security reasons.\n\nThe second argument to get can be one of three possible values:\n\n  1. a string representing a column to select. In this case, the result returned is a single value or array of single values, depending on whether a plural or singular table name is used in the query.\n  2. an array of strings, representing the columns to select.\n  3. An object with one or more of the following properties:\n\nselect or exclude: select can be a string or array representing the columns to\nselect. exclude can be an array of columns to exclude, with all of the other\ncolumns being selected.\n\norderBy: a string representing the column to order the result by, or an array\nof columns to order the result by.\n\ndesc: set to true when using orderBy if you want the results in descending\norder.\n\nlimit and offset: corresponding to the SQL keywords with the same name.\n\ndistinct: adds the distinct keywords to the start of the select clause.\n\nFor example:\n\n    \n    \n    const fighters = await db.fighters.get({ isActive: true }, { select: ['name', 'hometown'], orderBy: 'reachCm', limit: 10 });\n\nWhile the default interpretation of the query parameters is =, you can modify\nthe meaning by importing not, gt, gte, lt, and lte.\n\nFor example:\n\n    \n    \n    import { not } from 'flyweightjs'; const excluded = [1, 2, 3]; const users = await db.users.get({ id: not(excluded) });\n\n### Exists and Count\n\nThese functions take one argument representing the where clause.\n\n    \n    \n    const count = await db.fighters.count({ hometown: 'Brisbane, Australia' }); const exists = await db.fighter.exists({ name: 'Israel Adesanya' });\n\n### Remove\n\nremove takes one argument representing the where clause and returns the number\nof rows affected by the query.\n\n    \n    \n    const changes = await db.fighters.remove({ id: 100 });\n\n## Creating SQL queries\n\nWhen creating SQL queries, make sure you give an alias to any columns in the\nselect statement that don't have a name. For exampe, do not do:\n\n    \n    \n    select max(startTime) from events;\n\nas there is no name given to max(startTime).\n\nParameters in SQL files should use the $name notation. If you want to include\ndynamic content, you should use the ${column} format and then pass in a second\nargument when calling the SQL statement in JavaScript. For example:\n\n    \n    \n    select * from users where location = $location order by ${column};\n    \n    \n    const options = { unsafe: { column: 'lastName' } }; const users = await db.users.from({ location: 'Brisbane' }, options);\n\nIf the unsafe parameter is undefined in the options argument, it will be\nremoved from the SQL statement.\n\nSingle quotes in strings should be escaped with \\\\. JSON functions are\nautomatically typed and parsed. For example, the following:\n\n    \n    \n    select id, object(name, startTime) as nest from events;\n\nwill have the type:\n\n    \n    \n    interface EventQuery { id: number; nest: { name: string, startTime: Date } }\n\nNulls are automatically removed from all groupArray results. When all of the\nproperties of object are from a left or right join, and there are no matches\nfrom that table, instead of returning, for example:\n\n    \n    \n    { name: null, startTime: null }\n\nthe entire object will be null.\n\n## Transactions and concurrency\n\nTransactions involve taking a connection from a pool of connections by calling\ngetTransaction. Once you have finished using the transaction, you should call\nrelease to return the connection to the pool. If there are a large number of\nsimultaneous transactions, the connection pool will be empty and\ngetTransaction will start to wait until a connection is returned to the pool.\n\n    \n    \n    import { db } from './db.js'; try { const tx = await db.getTransaction(); await tx.begin(); const coachId = await tx.coach.insert({ name: 'Eugene Bareman', city: 'Auckland' }); const fighterId = await tx.fighter.get({ name: /Israel/ }, 'id'); await tx.fighterCoach.insert({ fighterId, coachId }); await tx.commit(); } catch (e) { console.log(e); await tx.rollback(); } finally { db.release(tx); }\n\n## Running tests\n\nTo run the tests, first go into the test folder and run node setup.js to move\nthe test database to the right location. You can then run the tests with node\ntest.js or npm test.\n\n## About\n\nAn ORM for SQLite\n\n### Topics\n\nnodejs orm sqlite\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n264 stars\n\n### Watchers\n\n5 watching\n\n### Forks\n\n3 forks\n\nReport repository\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * JavaScript 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
