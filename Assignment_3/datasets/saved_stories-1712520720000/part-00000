{"aid": "39960893", "title": "An async PHP ORM based on AMPHP v3 and fibers", "url": "https://github.com/danog/AsyncOrm", "domain": "github.com/danog", "votes": 1, "user": "danogentili", "posted_at": "2024-04-07 14:10:11", "comments": 0, "source_title": "GitHub - danog/AsyncOrm: Async ORM based on AMPHP v3 and fibers.", "source_text": "GitHub - danog/AsyncOrm: Async ORM based on AMPHP v3 and fibers.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ndanog / AsyncOrm Public\n\n  * Sponsor\n  * Notifications\n  * Fork 0\n  * Star 4\n\nAsync ORM based on AMPHP v3 and fibers.\n\n### License\n\nApache-2.0 license\n\n4 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# danog/AsyncOrm\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n2 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndanogBump phpunit config & docsa824426 \u00b7\n\n## History\n\n81 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Cleanup GHA  \n  \n### docs\n\n|\n\n### docs\n\n| Bump phpunit config & docs  \n  \n### examples\n\n|\n\n### examples\n\n| Improve documentation  \n  \n### src\n\n|\n\n### src\n\n| Avoid issues when serializing during migration  \n  \n### tests\n\n|\n\n### tests\n\n| Improve tests  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| Add basic README  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Cleanup README.md, legacy MadelineProto table migration coverage  \n  \n### .php-cs-fixer.dist.php\n\n|\n\n### .php-cs-fixer.dist.php\n\n| First commit  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Change license to Apache 2  \n  \n### NOTICE\n\n|\n\n### NOTICE\n\n| Change license to Apache 2  \n  \n### README.md\n\n|\n\n### README.md\n\n| Cleanup README.md, legacy MadelineProto table migration coverage  \n  \n### composer.json\n\n|\n\n### composer.json\n\n| Add badges  \n  \n### infection.json5\n\n|\n\n### infection.json5\n\n| Rename a few classes  \n  \n### phpunit.xml\n\n|\n\n### phpunit.xml\n\n| Bump phpunit config & docs  \n  \n### psalm-baseline.xml\n\n|\n\n### psalm-baseline.xml\n\n| Cleanup  \n  \n### psalm.xml\n\n|\n\n### psalm.xml\n\n| Psalm fixes  \n  \n## Repository files navigation\n\n# Async ORM\n\nAsync ORM based on AMPHP v3 and fibers, created by Daniil Gentili\n(https://daniil.it) and Alexander Pankratov (alexander@i-c-a.su).\n\nSupports MySQL, Redis, Postgres.\n\nFeatures read and write-back caching, type-specific optimizations, and much\nmore!\n\nThis ORM library was initially created for MadelineProto, an async PHP client\nAPI for the telegram MTProto protocol.\n\n## Installation\n\n    \n    \n    composer require danog/async-orm\n\n## Usage\n\nThere are two main ways to use the ORM: through automatic ORM properties,\nwhich automatically connects appropriately marked DbArray properties to the\nspecified database, or by manually instantiating a DbArray with a\nDbArrayBuilder.\n\n  * Automatic ORM properties example \u00bb\n  * Manual example \u00bb\n\nThe DbArray obtained through one of the methods above is an abstract array\nobject that automatically stores and fetches elements of the specified type \u00bb,\nfrom the specified database.\n\nDbArrays of type ValueType::OBJECT can contain objects extending DbObject.\n\nClasses extending DbObject have a special save method that can be used to\npersist object changes to the database, as can be seen in the example.\n\n### Settings\n\nAs specified in the examples above, there are multiple settings classes that\ncan be used to connect to a specific database type:\n\n  * MysqlSettings: MySQL backend settings.\n  * PostgresSettings: Postgres backend settings.\n  * RedisSettings: Redis backend settings.\n\nAll these classes have multiple fields, described in their respective\ndocumentation (click on each class name to view it).\n\n#### Caching\n\nOne of the most important settings is the cacheTtl field, which specifies the\nduration of the read and write cache.\n\nIf non-zero, all array elements fetched from the database will be stored in an\nin-memory read cache for the specified number of seconds; multiple accesses to\nthe same field will each postpone flushing of that field by cacheTtl seconds.\n\nAll elements written to the array by the application will also be stored in an\nin-memory write cache, and flushed to the database every cacheTtl seconds.\n\nIf the array has an object value type (ValueType::OBJECT), write caching is\ndisabled.\n\nIf cacheTtl is 0, read and write caching is disabled.\n\nA special setting class is used to create DbArrays backed by no database,\nwhich can also be useful in certain circumstances:\n\n  * MemorySettings: MemorySettings backend settings.\n\n### Key and value types\n\nEach DbArray must have a specific key and value type.\n\nFor optimal performance, the specified types must be as strict as possible,\nhere's a list of allowed types:\n\n#### Key types\n\n  * KeyType::STRING - String keys only\n  * KeyType::INT - Integer keys only\n  * KeyType::STRING_OR_INT - String or integer keys (not recommended, for performance reasons please always specify either STRING or STRING_OR_INT).\n\n#### Value types\n\n  * ValueType::STRING: Direct storage of UTF-8 string values.\n  * ValueType::INT: Direct storage of integer values.\n  * ValueType::BOOL: Direct storage of boolean values.\n  * ValueType::FLOAT: Direct storage of floating point (double precision) values.\n  * ValueType::SCALAR: Values of any scalar type (including arrays, excluding objects), serialized as specified in the settings. Using SCALAR worsens performances, please use any of the other types if possible.\n  * ValueType::OBJECT: Objects extending DbObject, serialized as specified in the settings.\n\nOne of the most important value types is ValueType::OBJECT, it is used to\nstore entire objects extending the DbObject class to the database.\n\nObjects extending DbObject have a special save method that can be used to\npersist object changes to the database, as can be seen in the example.\n\n## API Documentation\n\nClick here \u00bb to view the API documentation.\n\n## About\n\nAsync ORM based on AMPHP v3 and fibers.\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\n### Stars\n\n4 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 2\n\nAllow serialization of DriverArray during SQL migration. Latest\n\nApr 7, 2024\n\n\\+ 1 release\n\n## Sponsor this project\n\ndanog Daniil Gentili\n\nSponsor\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * PHP 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
