{"aid": "40088619", "title": "43 Years of the Actor Model", "url": "https://swizec.com/blog/43-years-of-the-actor-model/", "domain": "swizec.com", "votes": 1, "user": "Tomte", "posted_at": "2024-04-19 16:14:22", "comments": 0, "source_title": "43 years of the actor model | Swizec Teller", "source_text": "43 years of the actor model | Swizec Teller\n\nswizec.com\n\n#### Senior Mindset Book\n\nGet promoted, earn a bigger salary, work for top companies\n\nLearn more\n\n### Start with a free chapter\n\nGet a free chapter from the Senior Engineer Mindset book and a sample\naudiobook chapter, followed by a Senior Mindset 101 email course.\n\n# 43 years of the actor model\n\nThe actor model of computation was first proposed in the 70's as a nicer way\nto deal with concurrency. Nowadays it's built into our everyday tools and we\ndon't think about it as much. Understanding how it works helps you write less\nbugs.\n\n43 years of actors: A taxonomy of actor models and their key properties is a\n2016 paper by Koster et al that provides a readable overview of the actor\nmodel and why it's good. You can read the paper with my annotations, here.\n\nThe paper identifies common concepts, classifies implementations into 4 types,\nand defines the Isolated Turn Principle as a key component. The authors stress\nthat specifics are implementation dependent.\n\nMeaning that the actor model of computation is more what you'd call guidelines\nthan actual rules.\n\n## The basic idea\n\nThe basic idea of an actor model is that you have actors doing work based on a\ncombination of internal state and commands/messages/events from outside. The\nactors do not directly share state. This makes them concurrency safe.\n\n## Common concepts\n\nYour tools will have different names for these concepts, but they all use the\nsame conceptual building blocks.\n\n  * message or event is a unit of communication between actors. Each contains a name and a payload.\n  * inbox or message queue is an ordered set of messages that the actor will process. The queue is in order but the processing need not be.\n  * turn or step is the processing of 1 message from start to finish.\n  * interface defines the list of messages an actor understands\n  * state is the actor's internal state. Anything it can access without concurrency counts.\n  * behavior is the combination of an actor's state and interface\n  * actor is the combination of execution context, inbox, interface, and state\n  * actor system is a language or library that implements the actor model\n\nYour React components are actors that communicate by passing events through a\nshared event mechanism. In a distributed backend system this maps nicely to\nmessage queues and lambda functions or servers that process events.\n\n## 4 types of implementations\n\nThe paper classifies implementations into 4 types and finds no difference in\nthe power of these different implementations as long as the Isolated Turn\nPrinciple is observed. Use whatever works for you.\n\n  1. The classic actor model uses create, send, and become primitives to implement the model in a functional paradigm. To change state, actors become a new actor with different behavior.\n  2. The active objects approach uses objects that hold internal state and use a single entry point to process events\n  3. The processes approach leverages processes to process an event from start to finish based on a single entry point. The process is killed when its turn finishes.\n  4. The communicating event-loops approach uses promises to wait for processing to be ready. It's the only paradigm that supports multiple entry/exit points for an actor.\n\nYou see active objects a lot in object oriented languages, I don't have much\ndirect experience.\n\nProcesses are common in distributed backend systems where a new Lambda boots\nup to process each event on a queue. Apache of ye olde LAMP stack uses this\napproach to start a new PHP process for every HTTP request.\n\n### A note on why event-loops are good\n\n> Also everyone saying JS isn't good for backend work is forgetting an\n> important detail:\n>\n> JavaScript is uniquely suited for IO-bound code. Most backend code is IO-\n> bound. Compute-bound is rare.\n>\n> \u2014 Swizec Teller (@Swizec) April 18, 2024\n\nEvent-loops are the core primitive in JavaScript. Every async function is an\nactor. This makes JavaScript uniquely well-suited for IO-bound code because\nthe single-threaded promise-based approach makes it easy to coordinate lots of\nwaiting around for input/output.\n\nBut event-loops are bad for compute-bound code because of their single-\nthreaded nature. If you lock up the CPU with your actor (function), it blocks\nall other in-progress actors from proceeding.\n\nThe paper does not talk about this and doesn't mention JavaScript. I assume\nfor two reasons:\n\n  * the paper is from 2016 and JS was not yet so popular for server-side code\n  * JS fails the isolated turn principle criterria, you have to enforce it manually\n\n## The Isolated Turn Principle\n\nThe isolated turn principle is key to making the actor model useful. Best when\nyour language can guarantee this, but you can use it as a set of principles\nfor your own code. Follow these rules and you'll rarely have bugs due to\nconcurrency.\n\n> A single turn must be processed as 1 isolated step\n\nTo satisfy this rule you need:\n\n  1. Safety meaning that an actor's state is fully isolated and cannot be modified by another actor or another instance of the same actor during processing\n  2. Liveness meaning that an actor must process a message start to finish without blocking operations\n\nIn JavaScript terms this translates to keeping your functions idempotent and\navoiding unmanaged mutable state.\n\nCheers, ~Swizec\n\nPublished on April 19th, 2024 in Software Engineering, Papers\n\n#### Did you enjoy this article?\n\n\ud83d\udc4e\ud83d\udc4d\n\n#### Continue reading about 43 years of the actor model\n\nSemantically similar articles hand-picked by GPT-4\n\n  * The problem with threads\n  * Do you really need immutable data?\n  * A new VSCode extension makes state machines shine on a team\n  * Week 7: Time, Clocks, and Ordering of Events in a Distributed System\n  * Backbone \u2192 React: it's a people problem after all ?\n\n## Learned something new? Read more Software Engineering Lessons from\nProduction\n\nI write articles with real insight into the career and skills of a modern\nsoftware engineer. \"Raw and honest from the heart!\" as one reader described\nthem. Fueled by lessons learned over 20 years of building production code for\nside-projects, small businesses, and hyper growth startups. Both successful\nand not.\n\nSubscribe below \ud83d\udc47\n\n### Software Engineering Lessons from Production\n\nJoin Swizec's Newsletter and get insightful emails \ud83d\udc8c on mindsets, tactics, and\ntechnical skills for your career. Real lessons from building production\nsoftware. No bullshit.\n\n> \"Man, love your simple writing! Yours is the only newsletter I open and only\n> blog that I give a fuck to read & scroll till the end. And wow always take\n> away lessons with me. Inspiring! And very relatable. \ud83d\udc4c\"\n>\n> ~ Ashish Kumar\n\n### Senior Mindset Book\n\nGet promoted, earn a bigger salary, work for top companies\n\nLearn more\n\nHave a burning question that you think I can answer? Hit me up on twitter and\nI'll do my best.\n\nWho am I and who do I help? I'm Swizec Teller and I turn coders into engineers\nwith \"Raw and honest from the heart!\" writing. No bullshit. Real insights into\nthe career and skills of a modern software engineer.\n\nWant to become a true senior engineer? Take ownership, have autonomy, and be a\nforce multiplier on your team. The Senior Engineer Mindset ebook can help \ud83d\udc49\nswizec.com/senior-mindset. These are the shifts in mindset that unlocked my\ncareer.\n\nCurious about Serverless and the modern backend? Check out Serverless\nHandbook, for frontend engineers \ud83d\udc49 ServerlessHandbook.dev\n\nWant to Stop copy pasting D3 examples and create data visualizations of your\nown? Learn how to build scalable dataviz React components your whole team can\nunderstand with React for Data Visualization\n\nWant to get my best emails on JavaScript, React, Serverless, Fullstack Web, or\nIndie Hacking? Check out swizec.com/collections\n\nDid someone amazing share this letter with you? Wonderful! You can sign up for\nmy weekly letters for software engineers on their path to greatness, here:\nswizec.com/blog\n\nWant to brush up on your modern JavaScript syntax? Check out my interactive\ncheatsheet: es6cheatsheet.com\n\nBy the way, just in case no one has told you it yet today: I love and\nappreciate you for who you are \u2764\ufe0f\n\nCreated by Swizec with \u2764\ufe0f\n\n", "frontpage": false}
