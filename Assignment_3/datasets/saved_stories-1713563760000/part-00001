{"aid": "40088380", "title": "Speedometer 3.0: The Best Way yet to Measure Browser Performance", "url": "https://webkit.org/blog/15131/speedometer-3-0-the-best-way-yet-to-measure-browser-performance/", "domain": "webkit.org", "votes": 1, "user": "constantinum", "posted_at": "2024-04-19 15:54:32", "comments": 0, "source_title": "Speedometer 3.0: The Best Way Yet to Measure Browser Performance", "source_text": "Speedometer 3.0: The Best Way Yet to Measure Browser Performance | WebKit\n\nWebKit\n\n# Speedometer 3.0: The Best Way Yet to Measure Browser Performance\n\nMar 11, 2024\n\nby Ryosuke Niwa\n\nAs announced on browserbench.org today, in collaboration with other browser\nengine developers, Apple\u2019s WebKit team is excited to introduce Speedometer\n3.0, a major update that better reflects the Web of today. It\u2019s built together\nby the developers of all major browser engines: Blink, Gecko, and WebKit with\nhundreds of contributions from companies like Apple, Google, Intel, Microsoft,\nand Mozilla. This post is a deep dive into how the collaborative Speedometer\nproject improved the benchmark\u2019s measurements methods and test content.\n\nTo recap history, in 2014, the WebKit team at Apple released the Speedometer\nbrowser benchmark, designed to measure the responsiveness of websites and web\napps.\n\nThe original Speedometer simulated user interactions in web applications,\ndriving TodoMVC sample apps written using different JavaScript frameworks to\nadd, complete, and remove todo items. It was unlike other DOM or web app\nbenchmarks publicly available at the time. These older benchmarks were mostly\ncollections of micro-benchmarks, and didn\u2019t reflect how DOM APIs were used in\nreal web apps, or how individual APIs interacted with the rest of the web\nbrowser engine. Speedometer quickly became an important tool for performance\nmeasurement and tuning not just in WebKit but also in other browser engines.\n\nIn 2018 the WebKit team, in collaboration with Google\u2019s Chrome team, released\nSpeedometer 2.0, updated to use the latest frameworks and libraries available\nat the time. The Speedometer benchmark has since gained even more popularity\namong browser engines as a guide for optimization, and among independent\ntesters and reviewers to compare different devices, operating systems, and\nbrowsers.\n\nToday\u2019s release of Speedometer 3.0 marks a major step forward in web browser\nperformance testing. It improves the accuracy of measurement and measures the\nperformance of a wide variety of contents.\n\n## Cross-Browser Collaboration\n\nSpeedometer 3.0\u2019s release is a result of the collaboration among browser\ndevelopers to improve the Web as a whole together. Much as Interop 2024\nrepresents joint work to test and improve standards compliance, Speedometer\n3.0 is a joint effort to test and improve browser performance.\n\nWhere previous Speedometer versions were developed as part of the WebKit\nproject, Speedometer 3.0 has been developed and released under a joint multi-\nstakeholder governance model including the three major engine browsers: Blink,\nGecko, and WebKit, and the repository has received hundreds of open source\ncontributions since the original announcement in December 2022. This\ncollaboration better ensures fairness in measurement and workload composition.\nAnd together, the group created a shared vision for the benchmark.\n\n## Improved Test Harness\n\nWe\u2019ve improved the way Speedometer measures runtime performance. Prior\nSpeedometer versions measured the time to run a test script synchronously as\n\u201csync\u201d time; and the time until a zero-delay timer scheduled at the end of\n\u201csync\u201d work fires as \u201casync\u201d time, as shown in the following diagram:\n\nHowever, this method sometimes misses important work that browser engines do\nin response to script-driven changes, because synchronous tasks and the zero-\ndelay timer are scheduled without considering the timing of rendering updates.\nIt also didn\u2019t capture any work frameworks delay until the next\nrequestAnimationFrame (rAF) callback, a common technique in modern frameworks.\nThe following diagram illustrates how important work could be missed by the\ntime calculations.\n\nSpeedometer 3.0 takes advantage of the fact that all browser engines have\nadopted the HTML5 event loop model for updating the webpage rendering. It\nmeasures test scripts within a requestAnimationFrame callback as \u201csync\u201d time,\nand the time to fire zero-delay timer scheduled in a second\nrequestAnimationFrame as \u201casync\u201d time:\n\nBecause the zero-delay timer is now scheduled in a second\nrequestAnimationFrame, it\u2019s guaranteed to be fired after all the zero-delay\ntimers scheduled during the synchronous portion of the test had fired. Thanks\nto HTML5\u2019s event loop processing model, browser engines update the rendering\nof web pages after all requestAnimationFrame are called before the next zero-\ndelay timer fires. These changes greatly improved Speedometer\u2019s ability to\naccurately measure the runtime of synchronous work and asynchronous work\nbrowsers do in response to script that handles user events.\n\nThe test harness has also been rewritten to use modern JavaScript features\nlike modules, native promises, let & const, async & await, and class syntax,\nwhich were not widely available at the time Speedometer 1.0 was first written.\n\nLike its precursors, Speedometer 3.0 sums up the runtime taken to simulate\nuser actions such as adding todo items, completing them, and removing them per\neach workload, and computes the geometric mean of the totals across different\nworkloads. The final score is calculated as the arithmetic mean of the\nreciprocal of the geometric mean:\n\n## Adjustment to Score\n\nSince Speedometer\u2019s benchmark content was last updated in 2018, web browsers\nhave gotten increasingly better at handling Speedometer content. Moreover, new\nhardware, such as Apple Silicon Macs, continues to push the boundary of what\u2019s\npossible in computing. Where originally scores were scaled to be under 100,\nmodern browsers now can score over 500 on the fastest devices. To make scores\neasier to compare and to make room for future improvements, we\u2019ve adjusted the\nscore so that a typical web browser will get a score in the 20-30 range to\nstart out.\n\n## Updated UI Frameworks\n\nNow let\u2019s take a look at the test content in Speedometer 3. Like the past\nversions of Speedometer, version 3.0 includes TodoMVC-based todo apps that\nemulate adding, completing, and removing todo items. To better represent the\nmodern Web, the most widely used JavaScript UI frameworks were identified from\nthe HTTP Archive in March 2023:\n\nThe monthly downloads in NPM was also taken into account to find frameworks\nwith high momentum:\n\nBased on these data points, we\u2019ve included the following JavaScript frameworks\nin our todo apps: Angular, Backbone, jQuery, Lit, Preact, React, React+Redux,\nSvelte, and Vue. For each framework, the most commonly used version at the\ntime was picked. Todo implementations written in vanilla JavaScript using ES5,\nES6, and web components are also included.\n\n## Complex DOM Versions\n\nIn addition, Speedometer 3.0 includes \u201ccomplex DOM\u201d versions of some of the\nTodoMVC applications. In these complex DOM versions, each todo app is embedded\ninside a UI structure which mimics a web application with many deeply nested\nDOM nodes and plenty of CSS rules. Even though the benchmark still emulates\nthe same set of operations, doing so in the context of more DOM elements and\nCSS rules adds work and captures additional performance bottlenecks.\n\nIn order to ensure the variety of performance scenarios to be tested,\nSpeedometer 3.0 includes 6 simple DOM todo applications and 6 complex DOM todo\napplications.\n\n## Broader Content\n\nTogether, these changes to todo apps dramatically improved the coverage of the\nbenchmark. But Speedometer 3.0 takes it a step further and includes entirely\nnew kinds of applications.\n\nSpeedometer 3.0 includes two test apps that mimic typical news sites, built\nusing the popular single page application frameworks Next.js and Nuxt. It\nemulates user actions such as clicking on menu items and navigating to another\npage in the single page app setup.\n\nSpeedometer 3.0 also includes four charting applications based on Observable\nPlot, chart.js, React stockcharts, and WebKit\u2019s performance dashboards.\nObservable Plot and React Stockcharts are based on D3 and test manipulating\nSVG-based graphics. Chart.js and WebKit\u2019s performance dashboards test drawing\ncanvas-based graphics.\n\nFinally, Speedometer 3.0 has added two text editing applications: a JavaScript\ncode editor built with CodeMirror and a WYSIWYG editor built with TipTap. In\nboth scenarios, it emulates the steps to create a new editable region, loading\na large amount of text, and syntax highlighting or boldening text:\n\nThe addition of these new applications dramatically broadens the scope of what\nSpeedometer 3.0 measures, and provide new opportunities for browser engines to\noptimize a broad spectrum of features like JavaScript, style, layout,\ngraphics, and DOM.\n\n## Future Work\n\nToday marks a remarkable milestone for the Web platform. Speedometer 3.0 sets\na whole new standard for measuring web browser performance. As browser\ndevelopers optimize their engines, this will expand the horizon of what Web\ndevelopers can achieve in the years to come. Because the goal of the\nSpeedometer benchmark is to reflect the real-world Web as much as possible,\nwe\u2019re expecting this benchmark to evolve over time. We\u2019ll be regularly\nupdating the list of frameworks to be tested, and periodically updating the\ntested framework\u2019s versions to reflect the real world usage. You can try\nSpeedometer 3 benchmark on browserbench.org. If you have any feedback or\nquestions, feel free to file issues on Github.\n\nNextImplementing Vertical Form ControlsLearn more\n\nPreviouslyRelease Notes for Safari Technology Preview 190Learn more\n\n", "frontpage": false}
