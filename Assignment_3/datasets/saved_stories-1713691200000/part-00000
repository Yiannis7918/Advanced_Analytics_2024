{"aid": "40102912", "title": "Racket Language", "url": "https://racket-lang.org/", "domain": "racket-lang.org", "votes": 19, "user": "swatson741", "posted_at": "2024-04-21 03:18:05", "comments": 0, "source_title": "Racket", "source_text": "Racket\n\nRacket\n\ndonate docs packages download\n\n* Racket version 8.12 is available.\n\nRacketCon 2023 videos\n\n#lang racket/gui\n\n    \n    \n    (define my-language 'English)\n    \n    (define translations #hash([Chinese . \"\u4f60\u597d \u4e16\u754c\"] [English . \"Hello world\"] [French . \"Bonjour le monde\"] [German . \"Hallo Welt\"] [Greek . \"\u0393\u03b5\u03b9\u03ac \u03c3\u03bf\u03c5, \u03ba\u03cc\u03c3\u03bc\u03b5\"] [Portuguese . \"Ol\u00e1 mundo\"] [Spanish . \"Hola mundo\"] [Thai . \"\u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\u0e0a\u0e32\u0e27\u0e42\u0e25\u0e01\"] [Turkish . \"Merhaba D\u00fcnya\"]))\n    \n    (define my-hello-world (hash-ref translations my-language \"hello world\"))\n    \n    (message-box \"\" my-hello-world)\n\nRacket is a mature and stable product. From the beginning, it has supported\ncross-platform graphical programming (Windows, macOS, Linux).\n\n  * Package System\n  * GUI Framework\n  * Standalone Binaries\n  * Foreign Interface\n\nRacket includes a rich set of libraries, covering the full range from web\nserver apps to mathematics and scientific simulation software.\n\n  * Web Applications\n  * Database\n  * Math & Statistics\n  * Full List \u2192\n\nIn Racket, programmers define their own loops with powerful macros. Indeed,\nthese macros are so powerful that programmers make entire domain-specific\nlanguages as libraries. No tools, no Makefiles required.\n\n  * Intro To Macros\n  * Macros In Depth\n  * Making New Languages\n  * Sample #Langs\n\nRacket is the first language to support higher-order software contracts and\nsafe gradual typing. Programmers can easily deploy these tools to harden their\nsoftware.\n\n  * The Contract Guide\n  * High-Order Contracts\n  * The Typed Racket Guide\n  * Gradual Typing\n\nRacket comes with support for major editors. The main bundle includes an\ninnovative and extensible interactive development environment that has\ninspired other IDE projects.\n\n  * DrRacket Guide\n  * VS Code/Magic Racket\n  * Emacs Integration\n  * Vim Integration\n\n#lang typed/racket\n\n    \n    \n    ;; Using higher-order occurrence typing (define-type SrN (U String Number)) (: tog ((Listof SrN) -> String)) (define (tog l) (apply string-append (filter string? l))) (tog (list 5 \"hello \" 1/2 \"world\" (sqrt -1)))\n\n#lang scribble/base\n\n    \n    \n    @; Generate a PDF or HTML document @(require (only-in racket ~a)) @(define N 99) @title{Bottles: @italic{Abridged}} @(apply itemlist (for/list ([n (in-range N 0 -1)]) @item{@(~a n) bottles.}))\n\n#lang datalog\n\n    \n    \n    ancestor(A, B) :- parent(A, B). ancestor(A, B) :- parent(A, C), ancestor(C, B). parent(john, douglas). parent(bob, john). ancestor(A, B)?\n\n#lang racket\n\n    \n    \n    (provide time-it)\n    \n    (require (for-syntax syntax/parse))\n    \n    (define-syntax (time-it stx) (syntax-parse stx [(_ task) #'(thunk-time-it (\u03bb () task))]))\n    \n    (define (thunk-time-it task) (define before (cim)) (define answer (task)) (define delta (- (cim) before)) (printf \"time: ~a ms\\n\" delta) answer)\n    \n    (define cim current-inexact-milliseconds)\n\nRacket allows programmers to add new syntactic constructs in the same way that\nother languages permit the formulation of procedures, methods, or classes. All\nyou need to do is formulate a simple rule that rewrites a custom syntax to a\nRacket expression or definition.\n\nLittle macros can particularly help programmers with DRY where other features\ncan\u2019t. The example on the left above shows how to define a new syntax for\nmeasuring the time a task takes. The syntax avoids the repeated use of lambda.\nNote also how the macro is exported from this module as if it were an ordinary\nfunction.\n\n#lang racket/gui\n\n    \n    \n    ;; let's play a guessing game\n    \n    (define frame (new frame% [label \"Guess\"]))\n    \n    (define secret (random 5)) (define ((check i) btn evt) (define found? (if (= i secret) \"Yes\" \"No\")) (message-box \"?\" found?) (when (= i secret) (send frame show #false)))\n    \n    (for ([i (in-range 5)]) (new button% [label (~a i)] [parent frame] [callback (check i)]))\n    \n    (send frame show #t)\n\nRacket comes with a comprehensive suite of libraries: a cross-platform GUI\ntoolbox, a web server, and more. Thousands of additional packages are a single\ncommand away: 3D graphics, a bluetooth socket connector, color maps, data\nstructures, educational software, games, a quantum-random number generator,\nscientific simulations, web script testing, and many more.\n\nMacros work with these tools. The example on the left above shows the\nimplementation of a small number-guessing game. It is implemented in the GUI\ndialect of Racket, and demonstrates a number of language features.\n\nGetting to know the full Racket macro system will feel liberating, empowering,\ndazzling\u2014like a whole new level of enlightenment. Developers can easily create\na collection of co-operating macros to implement algebraic pattern matching,\nsimple event-handling, or a logic-constraint solver.\n\nWhile Racket is a functional language, it has offered a sub-language of\nclasses and objects, mixins and traits, from the beginning. The macro-based\nimplementation of a Java-like class system lives in a library and does not\nneed any support from the core language. A Racket programmer can thus combine\nfunctional with object-oriented components as needed.\n\nSome languages convey ideas more easily than others. And some programming\nlanguages convey solutions better than others. Therefore Racket is a language\nfor making languages, so that a programmer can write every module in a well-\nsuited language.\n\nOften an application domain comes with several languages. When you need a new\nlanguage, you make it\u2014on the fly. Open an IDE window; create a language right\nthere, with just a few keystrokes; and run a module in this new language in a\nsecond IDE window. Making new languages really requires no setup, no project\nfiles, no external tools, no nothing.\n\nRacket comes with its own IDE, DrRacket (n\u00e9e DrScheme), and it sports some\nunique features. For example, when a programmer mouses over an identifier, the\nIDE draws an arrow back to where it was defined.\n\nA programmer immediately benefits from DrRacket while using an alternative\nlanguage, say Typed Racket. Racket macros, even complex ones and those used to\nmake new languages, record and propagate a sufficient amount of source\ninformation for DrRacket to act as if it understood the features of the new\nlanguage.\n\nRacket programmers usually love parentheses, but they have empathy for those\nwho need commas and braces. Hence, building languages with conventional\nsurface syntax, like that of datalog, is almost as easy as building\nparenthetical languages.\n\nRacket\u2019s ecosystem comes with parsing packages that allow developers to easily\nmap any syntax to a parenthesized language, which is then compiled to ordinary\nRacket with the help of Racket\u2019s macro system. Such a language can also\nexploit the hooks of the IDE framework, so that its programmers may take\nadvantage of Racket\u2019s IDE.\n\nSoftwareDownload RacketSource CodeBug ReportsNightly Snapshot BuildsPackages  \n---  \n  \nTutorials & DocumentationQuick IntroductionSystems ProgrammingThe Racket\nGuideThe Racket ReferenceWeb ApplicationsAll Documentation  \n---  \n  \nCommunityDiscourse and Discord These are the most active places for\nRacketeers.Slack (sign up), IRC, Reddit, and Mailing lists Racketeers are\nhere, too!Mastodon, Twitter, and Blog Keep in touch.Wiki and YouTube Learn\nmore from articles and talks.Team and Contributing Racket\u2019s development\nbenefits from a large distributed pool of contributors.Friendly Environment\nPolicy Applies to all Racket venues.Software Freedom Conservancy Make a tax-\ndeductible contribution to support our work.  \n---  \n  \nBooksRealm of Racket Learn to program with Racket, one game at a\ntime.Beautiful Racket Make your own programming languages with Racket.Server:\nRacket Develop a web application with Racket.All Racket Books  \n---  \n  \nEducationThe Racket Summer School a summer school for researchers,\nprofessionals, and (under)graduate students to the Racket philosophy of\nprogramming languagesProgram by Design (aka TeachScheme!) a curriculum and\ntraining program for high school teachers and college facultyBootstrap a\ncurriculum and training program for middle-school and high-school teachers  \n---  \n  \nSwagRacket T-Shirts \u2014 the perfect way to meet friends, influence people, and\nstay warm.Racket Stickers \u2014 the indispensable accessory for laptops and\ntextbooks.  \n---  \n  \nThank you\n\n* To the NSF, DARPA, the Fund for the Improvement of Postsecondary Education (FIPSE) at the US Department of Education, the Exxon Foundation, CORD, partners of the Academy of Information Technology, Microsoft, Mozilla, Google, and many individuals for their generous support over the years.\n\n", "frontpage": true}
