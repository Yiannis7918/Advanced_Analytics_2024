{"aid": "39964768", "title": "An all-JS tech stack helps our lean team move fast", "url": "https://www.joinatmos.com/blog/how-a-unified-tech-stack-helps-our-tiny-team", "domain": "joinatmos.com", "votes": 1, "user": "nikodunk", "posted_at": "2024-04-07 23:12:14", "comments": 0, "source_title": "How a unified tech stack helps our lean team move fast", "source_text": "How a unified tech stack helps our lean team move fast\n\n\u2190 Back to Blog\n\nFeb 7, 2023\n\nTeam Atmos Engineering\n\n# How a unified tech stack helps our lean team move fast\n\n\u2190 Back to Blog\n\nThe following system has helped Atmos support 10,000+ customers on 3 platforms\nwith only 1-2 full-time-equivalent engineers. Thanks to this stack we\u2019ve\nstayed secure and iterated rapidly. We need to be 10-20x more efficient than\nour nearest competitors (update: one of them closed) as our engineering team\nis 10-20x leaner than theirs.\n\nWe mainly stay efficient by reducing mental overhead and reducing maintenance\nburden. Our products are numerous - web, ios, android, savings, checking,\nloans, deposits, jobs - and yet a single developer should be able to\nunderstand, maintain and improve all of them.\n\n## More wood behind fewer arrows\n\nWe use one language (Javascript) everywhere for maximum efficiency and deeper\nunderstanding - we do not have time to write (and debug!) features multiple\ntimes in Kotlin on Android, Swift on iOS, Svelte on web and Python on the\nserver. We can move code between web, mobile & server as necessary.\n\nWe keep our code style as simple and abstraction-free as possible. This helps\nwith reasoning, and seems to prevent bugs.\n\nWe use as few technologies as possible, so we can understand them deeply and\ninvest in them. Simple, boring ones (like PSQL) are good. We share them on\nserver, mobile and web (like Moment). Library updates on one part of the stack\nbenefit us everywhere, like a Queue or database optimization for example. We\nhave one server running all projects - we do not have time for microservices.\n\nWe share code between products wherever possible. Similar logic on web, mobile\nand server goes in a shared Atmos library where all parts of the stack can\naccess it. This way a single bug fix to a permission error fixes it\neverywhere.\n\nShared code also helps us improve existing products while building new ones.\nImproved mobile components cross-pollinate into our web code, and improved\nloans UX boosts the original deposit UX. All products benefit from performance\nimprovements made anywhere, for example when non-blocking account opening was\nbuilt for loans it worked great on deposits.\n\nTesters are spread less thin when you have more shared code. As most of the\nbusiness logic is shared, using an obscure feature on web provides basic\nmobile testing. A team member confirming a wire address on iOS will find a bug\nbefore Android or web users notice.\n\nBugs are mostly discovered in internal testing because we use our products\npersonally. This is on top of automated testing we do.\n\nA breakdown of the stack is below.\n\n## The stack pt 1: All-Javascript iOS, Android & Web apps\n\n  * React/Remix SPA on web. We use Remix SPA on top of React for bundle splitting, standardized routing conventions, and great error catching.\n  * React Native/Expo for iOS and Android\n  * React Context to store user/account getting across all of web & mobile components.\n  * Tailwind as a shared styling language over React & React Native (thanks to twrnc)\n  * As little logic as possible is done on the frontends. Business logic, utilities, permissions, etc are moved to the backend where it is safer and automatically shared between clients\n  * Remix/React Router for web, React Navigation for mobile: Navigating between pages are not shared in order to feel native to web/mobile clients.\n  * Pages & Components: Over the years we have struggled to keep React Native pages and Web pages in sync over our massive feature set. For this reason, we experimented and then switched to mounting our web app into a React Native \"shell\". This gave us native page animations, Tab bars, stacks, etc, but helped us de-duplicate page UI & logic. We have learned to inject the native shell's state into the webview's UI for an instant page load and a near-native feel. Most of our users did not notice when we switched them from React Native pages to Webview pages, but they did notice that they suddenly had access to expanded, better-debugged functionality.\n  * Cypress e2e tests for \"critical path\" flows on web (apply, login, transfer, etc), enforced by CI, which is then re-used on mobile.\n\n## The stack pt 2: All-Javascript API\n\n  * Hapi/Node, a single server running all code for checking, savings, loans, donations, webhooks, joint checking, joint savings, commercial savings, etc\n  * Heroku, as little time as possible on DevOps\n  * BullMQ & Redis: A single job queue for all features: checking, savings, loans, commercial, cron jobs, etc\n  * PSQL database, no time for non-relational systems here\n  * Updated & audited packages and Node versions to unlock newest features & ensure security\n  * Jest unit tests of critical-path functions (underwrite loan, transact, etc), enforced by CI.\n  * Git monorepo with web/mobile/api\n\n## Landing Page, dashboards & process\n\n  * Webflow CMS for static landing pages\n  * Retool dashboard to access server jobs, and to detect fraud, approve users, approve loans, see growth, etc.\n  * If a task needs to be done we hand-perform it, the second time we write a server job for it, and if needs to be done a 3rd time we write an interface for that server job, so that engineering never needs to be pulled into (read: block) the loop again.\n  * Sendgrid for both transactional emails and marketing emails. We don\u2019t have time to synchronize contact lists and content between Sendgrid and Mailchimp and Sendgrid single-sends are good enough.\n\n## Alternatives\n\nIn a perfect world we\u2019d have a single codebase that renders everything server-\nside in a majestic monolith and use a one-person framework, but due to modern\ncustomer expectations of native apps on iOS, Android & web - we needed to\nbalance efficiency with competitiveness.\n\n  * Flutter, Flutter on web, Dart server - Notes: 1 language, Dart on backend is less established, Flutter on web is unfinished.\n  * React for web, Ionic React iOS & Android, Express server - Notes: 1 language, less native feel on mobile which is primary platform for 50% of users\n  * Rails for web, iOS, Android & server (Hey.com Style), with the mobile app\u2019s navigation rendered natively. Notes: 1 language, New approach, Maybe once battle-tested?, We try to pick boring technology as described above :)\n\n## Conclusion\n\nIn summary, the Atmos stack will not be perfect for every software project but\nit is strongly recommended for tiny startups. It has allowed us to deliver way\nmore value to customers per engineering hour than any other solution currently\navailable.\n\n### Start your climate journey today - apply for an Atmos account in just 2\nminutes.\n\nApply Now\n\n## Related Posts\n\nApr 5, 2024\n\nOp-eds\n\nWe're All Part of the Climate Equation\n\n\"Banks are complicit, but we all are to blame.\" In the face of the climate\ncrisis, Atmos cofounder Pete Hellwig believes understanding nuance and\nembracing humanity is the path forward to a transformed economy.\n\nApr 3, 2024\n\nProduct Updates \u2013 April 3rd 2024\n\nJoin us for a weekly review of our product updates made to optimize your\naccount holding experience at Atmos. This week our engineers have focused on\nmobile optimization to make it easier than ever to access your account on the\ngo, and are bringing business accounts an improved onboarding experience.\n\nMar 25, 2024\n\nProduct Updates\n\nProduct Updates \u2013 March 25th 2024\n\nJoin us for a weekly review of our product updates made to optimize your\naccount holding experience at Atmos. This week we\u2019re excited to announce our\nlaunch of Joint Checking, in addition to user experience optimization with in\napp pin setting, password resetting, account linking, and more!\n\nPersonal\n\nPersonal CheckingPersonal SavingsSolar Loans\n\nBusiness\n\nBusiness AccountsNonprofit Accounts\n\nSupport\n\nEmail UsFAQ\n\nCall Us: (866) 246-7194\n\nAtmos\n\nOur ImpactFees & RatesBlogLegalSecurityCareersDonationsAbout Us\n\nJoin to Get Insights on Climate-Positive Steps You Can Take\n\nThank you! Your submission has been received!\n\nOops! Something went wrong while submitting the form.\n\nAtmos Financial is a financial technology company, not a bank. Banking\nservices are provided by our partner financial institution, Five Star Bank,\nWarsaw NY (Member FDIC). Please see your account agreements for more\ninformation. Lending not available in all markets.\n\n1) CO2/yr saved from the atmosphere is indicative of potential impact of\ndeposits derived from estimates of 2021 utility-scale solar installations\nacross the country and is not necessarily indicative of Atmos funded accounts.\nDirect impact will be provided in application when available.\n\n2) CO2 equivalencies derived from this EPA GHG equivalencies calculator\n\n", "frontpage": false}
