{"aid": "40021369", "title": "Beyond the Padlock: Demystifying TLS \u2013 Part 1", "url": "https://lostinabstractions.substack.com/p/beyond-the-padlock-demystifying-tls", "domain": "lostinabstractions.substack.com", "votes": 1, "user": "anudeepc", "posted_at": "2024-04-13 08:04:15", "comments": 0, "source_title": "Beyond the Padlock \ud83d\udd12: Demystifying TLS - Part 1", "source_text": "Beyond the Padlock \ud83d\udd12: Demystifying TLS - Part 1\n\n# Lost In Abstractions\n\nShare this post\n\n#### Beyond the Padlock \ud83d\udd12: Demystifying TLS - Part 1\n\nlostinabstractions.substack.com\n\n#### Discover more from Lost In Abstractions\n\nContinue reading\n\nSign in\n\n# Beyond the Padlock \ud83d\udd12: Demystifying TLS - Part 1\n\n### The padlock in the URL bar. We see it countless times a day, yet its inner\nworkings remain shrouded in mystery for many. Today, we're unlocking those\nsecrets and diving headfirst into demystifying TLS\n\nAnudeep Reddy\n\nApr 11, 2024\n\nShare this post\n\n#### Beyond the Padlock \ud83d\udd12: Demystifying TLS - Part 1\n\nlostinabstractions.substack.com\n\nShare\n\nWe visit a number of websites everyday and it is a pretty common sight to see\na padlock in the URL bar of the browser. It is known that it offers security\nfor the data transferred but the process involved is lost in abstractions.\nMost of the times even developers have very little knowledge on what happens\nbehind the scenes. In this article let us try to understand how TLS works by\ntaking the example of a ubiquitous protocol that has become synonymous with\nsecure online interactions: HTTPS.\n\n##\n\n\ud83d\udd13 Unlocking the components\n\nTo understand TLS better let us first meet the key components involved.\n\n###\n\nDigital Certificates\n\nLet us take a real world analogy to understand what Digital certificates are\nand what they have to offer in establishing a secure communication. Consider\nDigital Certificates as passports issues to citizens of country. The process\nof issuing a passport involves a vetting process to ensure the identity of a\nperson and also the validity of the information provided, the passport is only\nissued upon successful verification. The passport once issued can be used to\nverify the identity and nationality of an individual. The entities to notice\nhere are the passport authority (a trusted party), the individual and the\npassport.\n\nSimilarly, when accessing a website how do we make sure that the data we\nreceived is actually from the website we tried to contact. How do we make sure\nif the data we received is not from a malicious website that is impersonating\nthe original website we are trying to access. Digital certificates here are\nused to verify the identity of a website. From the analogy above the role of a\ntrusted party is played by a Certificate Authority which is responsible for\nverifying the identity of a website before issuing a Digital Certificate. The\nDigital certificate is comparable to the passport using which a website can\nprove it\u2019s identity to the client trying to access it.\n\nA digital certificate contains a public key of the server, a Digital signature\nsigned by the CA and some metadata which includes the server name, validity\nand few other details (Refer for more information). The digital signature is\nadded to the certificate as a proof that the CA vouches for the server\u2019s\nidentity. It is generated by generating the hash of the certificate body and\nthen encrypting the hash with the private key of the CA. A client can verify\nthe validity of the certificate by doing the same in reverse. Generate a hash\nof the certificate body (excluding the signature), and use the CA\u2019s public key\nto decrypt the signature that is a part of the certificate. The generated hash\nshould be the same as the hash obtained by decrypting the signature.\n\n###\n\nPublic Key Cryptography\n\nPublic key cryptography enables secure key exchange which is later used for\nmaintaining confidentiality of data at transit.\n\n###\n\nSymmetric Key Encryption\n\nSymmetric key encryption algorithms are used to encrypt and decrypt data at\ntransit.\n\n###\n\nCipher Suites\n\nA cipher suite is a set of cryptographic algorithms which helps establish a\nsecure communication channel. Each algorithm of a suite deals with an aspect\nof cryptography. A Cipher Suite consists algorithms for:\n\n  * Key Exchange\n\n  * Authentication\n\n  * Bulk Data Encryption (Confidentiality)\n\n  * Message Authentication Code (Integrity)\n\n##\n\nIt all starts with a handshake \ud83e\udd1d\n\nA handshake is a process during which the client and the server exchange a\nseries of messages to agree on the parameters of the subsequent communication.\nIn a TLS handshake the client and the server should agree upon a cipher suite\nand based on the cipher suite selected the required information is exchanged\nand a secure connection is established.\n\nLet us divide the entire handshake into the following phases:\n\n  1. Agree upon a Cipher Suite.\n\n  2. Server should authenticate itself with the client.\n\n  3. Both client and server should either exchange or deduce a session key. The mechanism depends on the key exchange algorithm from the cipher suite.\n\n  4. Establish a connection. Use a symmetric key encryption algorithm from the cipher suite along with the session key to encrypt the data in transit.\n\nAt the time of writing, TLS 1.2 and 1.3 are being used and the previous\nversions of TLS/SSL are marked deprecated. The handshake has pretty much\nremained the same from TLS 1.0-1.2 but has seen a design change in TLS 1.3.\n\n###\n\nTLS 1.2\n\n####\n\nForward secrecy\n\nForward secrecy is a feature that protects encrypted sessions even if the long\nterm secret keys are compromised. This is achieved using ephemeral secret keys\nfor each connection which cannot be retrieved even if the master key is\ncompromised.\n\nECDHE is an example of an algorithm that offers forward secrecy. Both the\nclient and the server generate ephemeral key pair for each session. The ECDHE\nparams that are exchanged as mentioned above contains the corresponding\ntemporary public keys which are then used to deduce the secure session key.\n\nRSA on the other hand is an algorithm which doesn\u2019t offer forward secrecy. It\nmakes use of the server\u2019s master key pair to exchange the premaster secret.\nClient uses the server\u2019s public key (made available with the certificate) to\nencrypt the premaster secret, both the client and the server uses the\npremaster key along with the random values shared at the begining of the\nhandshake to generate a session key.\n\n####\n\nHandshake with RSA key exchange\n\nThe RSA key exchange algorithm is given less priority due to it\u2019s lack of\nforward secrecy. The algorithms which provide perfect forward secrecy are\ngiven a higher priority when estalishing a TLS 1.2 connection.\n\n  1. The ClientHello, ServerHello and the Certificate messages remain unchanged and are the same as explained in ECDHE handshake. This is followed by the server sending the ServerHelloDone message. The notable difference from ECDHE is the absence of Server Key Exchange message.\n\n  2. Client Key Exchange: The client generates a premaster secret and encrypts it using the server\u2019s public key and is sent to the server wrapped in this message.\n\n  3. Change Cipher Spec Message: The client sends this message to indicate that it has finished its part of the handshake. The server will now be waiting to receive a Encrypted Handshake Message.\n\n  4. Encrypted Handshake Message: The client builds a encrypted handshake message and it is done by taking a hash of ClientHello, ServerHello, Cerficate, Server Hello Done, Client KeyExchange messages appended together and encrypting the hash with the symmetric key generated. The hash is wrapped in a tls packet and sent to the server.\n\n  5. Verify and Establish connection: This is crucial step in the entire process because verifying the Encrypted Handshake Message ensures the integrity of the handshake and that is not tampered with by a man in the middle. Once the server verified this message the Application Data is encrypted and exchanged between the client and the server.\n\n####\n\nHandshake with ECDHE key exchange\n\n  1. ClientHello: The handshake starts with the client sending a client hello message to the server. This message contains the TLS version(1.2), a random value (client random), a list of supported cipher suites.\n\n  2. ServerHello: The server responds back with a server hello message. The contents include the most secure cipher suite from the list sent by the client (a cipher suite with ECDHE key exchange algorithm in this case) and a server random.\n\n  3. Certificate: The server sends the certificate to the client to prove its authenticity.\n\n  4. Server Key Exchange: The server also sends the ECDHE parameters that are essential for securely deducing the session key.\n\n  5. Server Hello Done: This message indicates that the server is done.\n\n  6. Client Key Exchange: The client does the same and replies back with ECDHE parameters.\n\n  7. Change Cipher Spec Message: The client sends this message to indicate that it has finished its part of the handshake. The server will now be waiting to receive a Encrypted Handshake Message.\n\n  8. Encrypted Handshake Message: The client builds a encrypted handshake message and it is done by taking a hash of ClientHello, ServerHello, Cerficate, KeyExchange, Server Hello Done messages appended together and encrypting the hash with the symmetric key generated using ECDHE. The hash is wrapped in a tls packet and sent to the server.\n\n  9. Verify and Establish connection: This is crucial step in the entire process because verifying the Encrypted Handshake Message ensures the integrity of the handshake and that is not tampered with by a man in the middle. Once the server verified this message the Application Data is encrypted and exchanged between the client and the server.\n\n###\n\nTLS 1.3\n\nThe notable features of TLS1.3 handshake are the shorter handshake for\nperformance and security enhancements.\n\n####\n\nHandshake with ECDHE key exchange\n\n  1. ClientHello: The TLS1.3 client hello messages contains the version of TLS, a list of supported ciphers and the key exchange algorithm (the client guesses a key exchange algorithm that the server might pick). It also contains the parameters supported by the key exchange algorithm (Keyshare).\n\n  2. ServerHello: The sever responds back with serverhello containing the key exchange algorithm the server has picked, the parameters need for successful key exchange.\n\n  3. ChangeCipherSpec: The server then sends this message indicating client to switch to encrypted channel. Any communication following this message is over an encrypted channel.\n\n  4. Encrypted Extensions: TLS1.3 supports exchange of any sensitive extensions once the encrypted channels has been established through this message.\n\n  5. Certificate: The server then sends the certificate to the client.\n\n  6. Certificate Verify: The certificate verify message is sent to prove the ownership of the private key associated with the certificate. This is achieved by signing the hash of all the handshake messages up until this point. The signature can be verified on the client side by computing the hash and verifying the signature using the public key.\n\n  7. ServerFinished: The finished message contains the hash of the entire handshake up to this point.\n\n  8. ChangeCipherSpec: The client now sends this message indicating that any communication following this from the client would be over an encrypted channel.\n\n  9. ClientFinished: The client finished message contains hash of all the messages until this point.\n\n##\n\nBonus: Unveiling the TLS Handshake with Wireshark\n\nThanks for reading Lost In Abstraction ! Subscribe for free to receive new\nposts and support my work.\n\nShare this post\n\n#### Beyond the Padlock \ud83d\udd12: Demystifying TLS - Part 1\n\nlostinabstractions.substack.com\n\nShare\n\nComments\n\nReady for more?\n\n\u00a9 2024 Anudeep Reddy\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
