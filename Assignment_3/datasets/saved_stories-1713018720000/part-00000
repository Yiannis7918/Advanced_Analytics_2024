{"aid": "40021491", "title": "Detecting the xz-utils Backdoor with Automation", "url": "https://objectsecurity.com/otai/xz-utils-backdoor/", "domain": "objectsecurity.com", "votes": 1, "user": "car", "posted_at": "2024-04-13 08:30:02", "comments": 0, "source_title": "Detecting the xz-utils Backdoor with Automation", "source_text": "Detecting the xz-utils Backdoor with Automation \u2013 ObjectSecurity OT.AI\nPlatform\n\nSkip to content\n\n# Detecting the xz-utils Backdoor with Automation\n\n## by Dr. Reza Fatahi, Principal Research Scientist, ObjectSecurity and Trevor\nThomas, Project Lead, ObjectSecurity (published 4/8/2024)\n\nIn this ObjectSecurity blog post, we discuss how automated binary\nvulnerability analysis helps detect advanced attacks such as the recently\ndiscovered \u201cxz-utils backdoor\u201d, which was committed on March 25, 2024 to a\nubiquitous library in the Linux ecosystem, via the xz-utils GitHub repository\nthat has since been removed from the site by Github and Microsoft. This\nmalware was disguised as a binary file meant to act as input for an automated\ntest that runs along with new public build versions of the xz-utils library.\nHad this exploit not been detected by Andres Freund, a developer at Microsoft,\ncountless Linux/Unix systems would have become vulnerable to what is suspected\nto be a nation state attack.\n\nOn March 25^th, 2024, this intentional backdoor was committed to a ubiquitous\nlibrary in the Linux ecosystem, via the xz-utils GitHub repository that has\nsince been removed from the site by Github and Microsoft. This malware was\ndisguised as a binary file meant to act as input for an automated test that\nruns along with new public build versions of the xz-utils library.\n\nOnly after a multi-stage parsing process is completed, does the backdoor\nbecome injected into release versions of xz-utils. The payload injected at the\nend of this process results in a malicious shared object (.SO) file in\nversions 5.6.0 and 5.6.1 of the liblzma dependency of xz-utils.\n\nxz-utils defines a shared library called liblzma that is meant to provide\ncompression and decompression capabilities to numerous downstream dependents.\nOne of these dependents is the SSH daemon, sshd. This daemon is the core\nprogram of any SSH server. Thus, had this attack succeeded, it would have\neffectively made Linux servers and computers open for unauthorized access.\nThankfully, this exploit was detected by Andres Freund, a developer at\nMicrosoft. You can read his original OSS post here. Due to the complexity of\nthe exploit, it is suspected that a nation state is behind this attack.\n\nCISA has also catalogued this backdoor as CVE-2024-3094.\n\nThis is the first attack of its kind: This is because the malware itself is\nnot truly present in the source code alone. Only when we examine the binary\nare we capable of detecting this backdoor.\n\n## Finding the Abused system() Call\n\nThe infected libzma.so.5.6.X instead allows for remote code execution (RCE)\nprior to authentication by extracting a command from the authenticating\nclient\u2019s SSH certificate and passing it to system(), in the place where\nRSA_public_decrypt would execute normally.\n\nIf we perform a backtrace in GDB, we can see the path obfuscation taken before\nreaching system() (see screenshot).\n\nThe analysis of the call shows a recursive structure at address 0x132C8 in the\nliblzma binary file. The process likely depends on interactions with other\nbinaries, such as standard libraries, and this is likely a dead end for many\nmore novice reverse engineers. What stands out, though, is the obfuscated\ncontrol flow.\n\nWe now demonstrate the automated findings of our ObjectSecurityTM OT.AI\nPlatformTM below, where this control flow is further analyzed and\ncharacterized as a particularly malevolent finding.\n\n## ROP Exploitation\n\nThe results of our analysis showed the liblzma binary to behave as a Return-\nOriented Programming (ROP) attack. The output showed, consistently, an overly\ncomplex control flow and the presence of a vast amount of ROP weaknesses. This\ntype of attack leverages existing code snippets within a program, known as\n\u201cgadgets,\u201d to execute arbitrary operations. Each gadget typically ends with a\nreturn instruction and is meticulously chosen to perform a step towards\nexecuting an attacker\u2019s payload without the need to inject new code, thus\nevading typical security measures that scan for code injections.\n\n### Understanding Return-Oriented Programming (ROP)\n\nAt its core, ROP is a sophisticated exploitation technique that abuses the way\nsoftware handles subroutine returns. It manipulates the stack, which is a\ncrucial data structure used to store return addresses and local variables for\nfunctions. In a typical ROP attack, an adversary carefully crafts a stack that\nincludes a sequence of return addresses, each pointing to a chosen gadget. By\nmanipulating the program\u2019s execution flow, these gadgets are executed in\nsequence to perform arbitrary actions.\n\nThe technique hinges on finding and using sequences of machine instructions\nthat are already present in the running program\u2019s memory, the \u201cgadgets\u201d. These\ngadgets are pieced together to construct a payload that achieves the\nattacker\u2019s objectives, such as compromising a system or stealing data.\n\n### Correlating Weird Control Flow with Increased ROP Attack Potential\n\nThe complexity of control flow in an application can significantly impact its\nvulnerability to ROP attacks. When control flow is irregular or convoluted, it\noften indicates numerous branches and potential execution paths. This\nenvironment can be ripe for ROP for several reasons:\n\n  1. Increased Gadget Availability: Complex control flows imply a higher diversity of code snippets and function epilogues. This variety provides a richer set of gadgets for attackers to exploit, enabling them to find the necessary components to string together their desired malicious functionality. A prominent feature of the liblzma backdoor is its complex control flow and increased number of ROP gadgets.\n  2. Obfuscation and Detection Evasion: Irregular control flows can make it more challenging for static analysis tools to accurately map out potential execution paths and detect anomalous sequences that might signify an exploit. This obfuscation naturally aids attackers in hiding their exploit chains within the legitimate complexity of the software. The xz-utils attack employs a sophisticated linker manipulation that can evade detection.\n  3. Compromised Flow Integrity: The very nature of ROP exploits involves diverting the intended control flow of a program. A binary that inherently contains complex or non-linear execution paths may be more susceptible to further manipulations without these anomalies being readily apparent to monitoring tools or even during manual review. Once triggered, the liblzma attack highjacks the control flow to access the SSH daemon for backdoor access.\n\n### Unveiling the Veil: The Critical Role of Linker Operations in\nCybersecurity\n\nThe Procedure Linkage Table (PLT) and the Global Offset Table (GOT) are\nfundamental components in the dynamic linking process that enables programs to\nutilize shared libraries for common functionality. This system is both\nprogrammable and dynamic, which conserves memory and supports modular\nprogramming. However, this flexibility also introduces significant risks. When\nmanipulated, the PLT and GOT can alter the intended control flow of an\napplication, potentially turning into conduits for ROP attacks.\n\nWhen malware, like that found in the xz-utils case, consistently interacts\nwith the PLT and GOT at specific addresses, it reveals a methodical approach\nto hijack these mechanisms. This consistency is a critical signal, a pattern\nthat, once recognized, can be monitored and mitigated against.\n\n### Correlation Between ROP Gadgets and Linker Addresses\n\nOur ObjectSecurityTM OT.AI PlatformTM demonstrates consistent interactions at\na common address, spanning multiple key sections that our platform utilizes to\nmeasure linker manipulations in PLT and GOT. This uniformity in address usage\nacross four critical linker sections is an assessment of our platform\u2019s\nmonitoring capabilities. These findings also associated to a function,\n__cxa_finalize, that correlates to the presence of multiple ROP gadgets in\nthis region:\n\nAnalyzing section 1 __cxa_finalize at 17824 interacts with cat 1 linker ops\nAnalyzing section 2 __cxa_finalize at 17824 interacts with cat 2 linker ops\nAnalyzing section 3 __cxa_finalize at 17824 interacts with cat 3 linker ops\nAnalyzing section 4 __cxa_finalize at 17824 interacts with cat 4 linker ops\n\nWe report that this dual identification is shown as the basis of a detection\nmechanism for this class of attacks that leverage complex execution flows and\nROP gadgets. With this level of insight, red, purple, and blue teams are\nequipped to preemptively address and neutralize sophisticated attack vectors,\nsecuring their systems against the most cunning of cyber adversaries.\n\n## Validation of Findings\n\nWe wanted to know with the unpatched and patched liblzma samples whether the\ndetection of ROP gadgets alone is sufficient in making the determination that\nthis backdoor exists within our analyses. The logistic regression model is\nchosen as an ideal method for this analysis because it allows for the\nintegration of multiple factors and provides a probabilistic framework for\nassessing the impact of these factors on the likelihood of our platform\u2019s\nfinal determinations.\n\nWe modeled our findings across three populations:\n\n  * Liblzma5.6.0 is an infected population\n  * Liblzma5.6.1 is an infected population\n  * Liblzma5.6.2 is the patched healthy population\n\nThe analysis results are the number of total ROP gadgets, the number of ROP\ngadgets within the same region as a linker manipulated address with multiple\ncategories of linker manipulations, and the number of categories of linker\nmanipulations at a common address of four possible categories of linker\nmanipulations.\n\nWe regularized the logistic regression model to handle the issues of perfect\nseparation, a common challenge in datasets with distinct group differences.\nThis regularization helped stabilize the estimates and provided more reliable\ninsights into the relationships between our predictors and the outcome.\n\nThe results are as follows:\n\nCoefficients: ([[-0.00069303, 0.30343857, 0.5774888]]) Intercept:\n([-0.27405023])\n\nCoefficients:\n\n  * ROP Gadgets: (-0.00069303). Slightly decreases the likelihood of infection with increasing number. Minimal effect.\n  * ROP Path: (0.30343857). Increases the likelihood of infection significantly with more detections.\n  * Linker Manipulations: (0.5774888). Strongly increases the likelihood of infection with higher values; most influential factor.\n\nIntercept ((-0.27405023)): Baseline log odds of being non-infected when all\npredictors are zero.\n\nThis analysis shows that while ROP gadgets are prevalent in the infected\npopulations, their sheer numbers alone do not significantly increase the\nlikelihood of a backdoor being present. Instead, the context in which these\ngadgets appear, particularly their association with linker manipulations, is\nnecessary for backdoor detection.\n\nTherefore, the results from this analysis shows that the Linker Manipulations\nanalysis of our ObjectSecurityTM OT.AI PlatformTM is the strongest predictor\nof detecting a ROP backdoor, followed by the ROP Path that depends on the\nfindings from Linker Manipulations. The analysis of ROP gadgets alone has a\nnegligible inverse effect on infection likelihood, indicating that their\npresence must be contextualized with more specific manipulative actions to\naccurately detect backdoors.\n\n## A Call to Arms in Cybersecurity: Detecting liblzma Attack in the OT.AI\nPlatform\n\nThe significance of finding ROP gadgets corresponding to addresses associated\nwith the PLT and GOT cannot be overstated. ROP is a cunning exploitation\ntechnique that avoids direct code injection by reusing existing code snippets\nin the program. By chaining these snippets, attackers can execute arbitrary\nmalicious functionality. The presence of ROP gadgets at PLT and GOT addresses\nis particularly alarming \u2014 it suggests that these critical sections are being\ntargeted as vector points for executing attack sequences.\n\nIn light of the recent security breach through the xz-utils library, our\nObjectSecurityTM OT.AI PlatformTM stands ready as a fully automated and\neffective solution designed to detect such backdoors and other exploits. It\nprovides comprehensive tools that benefit red, purple, and blue teams,\nensuring greater visibility within the binary samples of critical\ninfrastructure.\n\nThis exploration into the depths of dynamic linking and ROP exploits is a\ntestament to the power of modern cybersecurity defense strategies, such as\noffered by our ObjectSecurityTM OT.AI PlatformTM. As we share these insights,\nwe invite the global community to engage, learn, and fortify.\n\nThe fight against cyber threats is relentless, but so are we. Let\u2019s turn our\nknowledge into our most potent weapon in the cybersecurity arsenal.\n\n## Resources\n\n  1. Freund, Andres. oss-security mailing list. \u201cbackdoor in upstream xz/liblzma leading to ssh server compromise\u201d. 3/29/24. https://openwall.com/lists/oss-security/2024/03/29/4\n  2. NIST. \u201cCVE-2024-3094 Detail\u201d. 3/29/24. https://nvd.nist.gov/vuln/detail/CVE-2024-3094\n  3. Weems, Anthony. xzbot Github page. https://github.com/amlweems/xzbot/tree/main?tab=readme-ov-file\n  4. smx. XZ Backdoor Analysis Github page. https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504\n  5. ObjectSecurity. \u201cObjectSecurity OT.AI Platform\u201d website. https://objectsecurity.com/otai\n\nOT.AI Platform\n\nContact Us\n\nFollow Our Blog\n\n#### Related Posts\n\nAutomating Binary Exploit Detection using the ObjectSecurity OT.AI Platform\n\n#### Automating Binary Exploit Detection using the ObjectSecurity OT.AI\nPlatform\n\nApril 2nd, 2024\n\nPRESS RELEASE: Army awards ObjectSecurity $1M Vehicle Cybersecurity Contract\n\n#### PRESS RELEASE: Army awards ObjectSecurity $1M Vehicle Cybersecurity\nContract\n\nMarch 20th, 2024|0 Comments\n\nObjectSecurity OT.AI Platform Slots Perfectly With Newly Announced Navy Cyber\nStrategy\n\n#### ObjectSecurity OT.AI Platform Slots Perfectly With Newly Announced Navy\nCyber Strategy\n\nDecember 6th, 2023|0 Comments\n\n## Title\n\n# ABOUT\n\nObjectSecurityTM OT.AITM Platform\n\nProactively improve cyber resiliency by preventing OT cyber attacks and\nproduction downtime by identifying and reporting unpublished, hidden\nvulnerabilities in industrial software code.\n\n# USEFUL LINKS\n\n  * Support\n\n  * Subscribe\n\n  * OT.AI Platform Product Data Sheet\n\n  * Careers\n\n  * Other Capabilities\n\n# CONTACT INFO\n\n815 E Street, Box #12070 San Diego, CA 92101 USA\n\nMain US Phone: +1 (650) 515-3391\n\nEmail: salesinquiry@objectsecurity.com\n\n\u00a9 Copyright 2022 - 2024 | ObjectSecurity, ObjectSecurity Logo Design, OT.AI, OT.AI Logo Design and ThreatAI are trademarks of ObjectSecurity LLC. All other trademarks, logos, and brand names are the property of their respective owners. | All Rights Reserved.\n\nPage load link\n\nThis website uses cookies and third party services. Ok\n\nGo to Top\n\n", "frontpage": false}
