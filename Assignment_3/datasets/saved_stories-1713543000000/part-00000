{"aid": "40084956", "title": "Show HN: Qryptr \u2013 airgapped ecc text messenger", "url": "https://github.com/gappuser/qryptr", "domain": "github.com/gappuser", "votes": 1, "user": "abdela", "posted_at": "2024-04-19 10:08:04", "comments": 0, "source_title": "GitHub - gappuser/qryptr: Airgapped ECC text messenger", "source_text": "GitHub - gappuser/qryptr: Airgapped ECC text messenger\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ngappuser / qryptr Public\n\n  * Notifications\n  * Fork 0\n  * Star 0\n\nAirgapped ECC text messenger\n\n### License\n\nGPL-3.0 license\n\n0 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# gappuser/qryptr\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ngappuserUpdate README.mdApr 17, 2024f50e920 \u00b7 Apr 17, 2024Apr 17, 2024\n\n## History\n\n112 Commits  \n  \n### hardware\n\n|\n\n### hardware\n\n| Add files via upload| Apr 16, 2024  \n  \n### images\n\n|\n\n### images\n\n| Add files via upload| Apr 16, 2024  \n  \n### software\n\n|\n\n### software\n\n| Update qryptr.ino| Mar 29, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Dec 4, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 17, 2024  \n  \n## Repository files navigation\n\n# qryptr - airgapped ecc text messenger\n\nAre you a smartphone user worried about spyware, advanced actors, backdoors,\nzero-days or side-channel attacks? These routinely bypass end-to-end\nencryption through keyloggers, screen capture and compromised keys.\nSmartphones are part of complex ecosystems with dozens of hardware and\nsoftware components and remain vulnerable despite vendor and political\nefforts.\n\nWe introduce a simple, offline, airgapped device to counter such threats.\n\nPlain text messages are ECC encrypted and displayed as QR codes. These QR\ncodes can be photographed and shared using your smartphone. This method offers\nadditional endpoint security as plaintext and cryptographic keys are\nphysically seperated from your smartphone.\n\nThis repository contains all hardware and software to create such a device,\nwhich allows text messages of up to 299 characters.\n\n# How it works\n\nThe device has cryptographic software, a keyboard, camera, screen and is based\non the RP2040 microcontroller.\n\nEach user has a device. Upon receiving it, the user can generate his/her ECC\nkeypair. The user's ECC keypair uniquely identifies him/her, that is why it is\nreferred to as the user ID.\n\nThe public key of the user ID can be displayed as a QR code. Another user can\nadd that user ID scanning it. This is preferably done in-person, not remotely,\nto prevent man-in-the-middle attacks.\n\nAfter two users have added each others' ID's, they can write text messages\nwhich are ECC encrypted, base64 encoded and displayed as QR codes.\n\nUsing their smartphones, users can photograph/share these QR-codes with their\npreferred messaging app, such as Signal, Whatsapp, Telegram, Viber, or even\nemail or print the QR codes.\n\nThe recipient can scan the QR code with his/her device, which will read,\ndecode, decrypt and display the text message. The recommended read distance is\n10 cm between smartphone screen and camera. The letter \"Z\" is marked on the\nfrontpanel to help a user center the qr code in front of the camera.\n\n### Share and add IDs\n\n### Write and read messages\n\n# Use cases\n\n-Sharing sensitive information between journalists, lawyers, political actors or civil servants.\n\n-Sharing passwords between system administrators.\n\n-Sharing passwords for crypto wallets.\n\n-Sharing key material or passwords for HSM procedures.\n\n-Thwart spyware or advanced threats.\n\n# Implementation\n\n## hardware\n\nThe device consists of 2 printed circuit boards (PCBs): a mainplate and\nfrontplate with keys.\n\nWe chose a microcontroller platform to minimize platform complexity and\ndependencies: the RP2040.\n\nQR codes are read using a hardware camera, the GM803, available on aliexpress.\nGet the GM803-S version with short focal range. This camera will read the QR\ncode towards the serial interface of the RP2040.\n\nWe are using the Sharp LS027B7DH01 display, available on aliexpress. It is\nflat, requires few components, has a high resolution and low power\nrequirements. Other u8g2 supported displays could be used as well with some\nadjustments.\n\nHardware designs are available in the /hardware folder. With the Gerber, BOM\nand pick-and-place files, you can order directly from jlcpcb.com.\n\nAlternatively, you can view or clone these at the following urls to make\nadjustments.\n\nhttps://oshwlab.com/thomas255/mainplate-public (click \"clone\")\n\nhttps://oshwlab.com/thomas255/frontplate-public (click \"clone\")\n\nSome parts needs to be ordered seperately from lscs.com:\n\n-LCSC#: C2911889 Clamshell 18P Bottom Contact Surface Mount FFC connector.\n\nWe used one sided assembly at JLCPCB to save costs. This part can be soldered\nmanually, or alternatively, two sided assembly can be used at JLCPCB, in which\ncase this part does not need to be ordered seperately.\n\n-LCSC#: C2857713 18P Opposite Side 5cm P=0.5mm flat flexible cable to connect the frontplate (keyboard) with the mainplate\n\n-LCSC#: C5151979 12P Opposite Side 5cm P=0.5mm flat flexible cable to connect the GM-803 camera to the mainplate\n\n-M2 nuts and M2 bolts of 3mm length.\n\n-A plastic spacer between the mainplate and frontplate, for mechanical stability and assembly, which can be 3d printed with the provided spacer.stl file.\n\n-A 302040 lipo battery: https://www.aliexpress.com/item/33009055815.html\n\n## software\n\nWe use the Arduino IDE.\n\nGo to the board manager and install Arduino mbed OS RP2040 Boards (3.5.4).\nThis should set target_platform=mbed_rp2040 in preferences.txt for the arduino\nIDE.\n\nWe use the Arduino mbed_rp2040 target platform, because we want to use the\nSharp LS027B7DH01 display, and the earle philhower core does not allow\nchanging the HW SPI pin assignment. We want to use different pins for driving\nthe SPI display in the u8g2 display constructor, because the original pin\nassignment is very slow.\n\nUsing the library manager in the Arduino IDE, install the following libraries:\n\n-QRCode by Richard Moore (https://github.com/ricmoo/qrcode/)\n\n-U8G2 by Oliver Kraus (https://github.com/olikraus/u8g2)\n\n-Crypto by Rhys Weatherley and Brandon Wiley (https://github.com/OperatorFoundation/Crypto)\n\nTo upload the software, connect with PC through USB, turn on device, upload\n./software/qryptr.ino through the arduino IDE. If that does not work, there is\na reset button. Turn off the device, hold the reset button, connect with PC,\nrelease the reset button. Then upload the arduino sketch through the arduino\nIDE.\n\nOnce uploaded, navigate the menu with the arrow buttons (left, right, up,\ndown). There is no enter key. To select an option or continue, use the right\narrow. You can always go back with left arrow or interrupt reading by pressing\nany key.\n\n# Todos\n\n## hardware\n\n-Add resistor divider to measure the battery voltage\n\n-Expose SWD pins on PCB to enable loading the software through SWD pins. This will allow us to disconnect the datalines from the USB port and prevent an attack vector.\n\n## software\n\n-Create a software procedure to turn the camera on/off to save power.\n\n-Implement soft poweroff after timeout.\n\n-Implement symmetric encryption on the long-term private key of the user. This will require a password prompt for decrypting messages.\n\n-Enable multiple personal ID's (cryptographic keys)\n\n-Add start and end tags for messages and keys, so that it is clear whether a valid messages/key was received. This will prevent bad reads from crashing the device as well.\n\n-Use camera without character encoding (raw bytes).\n\n-Write special characters (diacritics) with ctrl button.\n\n-On screen arrows to make navigation more intuitive.\n\n# FAQ\n\n## hardware\n\nQ: Could we run the whole device on 3.3V?\n\nA: The Sharp LS027B7DH01 display requires 5V according to the specifications,\nalthough it seems to work on 3.3V as well. Possibly, the charge boost circuit\ncould be left out if the display is used at 3.3V.\n\nQ: Could we create a single PCB instead of a backplate and frontplate?\n\nA: Yes, it could be done, although a singular PCB would need double-sided PCB\nassembly which is more expensive for small quantities @ JLCPCB. It likely\nwould require a 4 layer PCB instead of 2 layer PCBs. Also, a seperate\nbackplate would need to be introduced.\n\nQ: How about using an epaper display instead of the Sharp display?\n\nA: It has been considered, but the Sharp display has a higher refresh rate and\nis very flat and easy to integrate with just a couple of capacitors. The Sharp\ndisplay is easy to use with the U8G2 library. There are other advantages to\nusing epaper displays such as low glare which would make it easier to\nphotograph the screen, so this could still be a good option.\n\n## software\n\nQ: How is encryption done?\n\nA: Using the arduino Crypto library, with 32 byte ECC curve25519 keys, using\nChaChaPoly cipher. Documented in the code, according to the procedure\ndescribed here:\n\nhttps://crypto.stackexchange.com/questions/101420/eccdh-direct-or-with-\ntemporary-ecc-keypairs\n\n# Assembly\n\nPlace the battery and solder the wires as shown below to the pads.\n\nPlace the 3d printed spacer as shown below, insert the m2 nuts with some glue.\n\nConnect the 18 pin keyboard connector as shown below, place the GM-803 camera\nmodule and connect with the 12 pin ffc connector cable.\n\nPlace the screen as shown below.\n\nSolder the frontplate 18 pin connector (or order an assembled frontplate from\nJLCPCB), and connect it. Soldering this 0.5mm pitch connector can be a bit\ntricky.\n\nUse the m2 3mm bolts to screw the frontplate down.\n\n## Setup GM803 camera\n\nAfter charging, a green led will light up. Turn on the device (PWR top right\npush button). You have to enable serial output of the GM803 camera. To do so,\nscan the following QR codes.\n\n### Reset (GM803 factory default)\n\n### Enable serial output\n\n## About\n\nAirgapped ECC text messenger\n\n### Resources\n\nReadme\n\n### License\n\nGPL-3.0 license\n\nActivity\n\n### Stars\n\n0 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * C++ 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
