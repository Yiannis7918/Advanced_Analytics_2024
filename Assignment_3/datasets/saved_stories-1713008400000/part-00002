{"aid": "40020779", "title": "Purl: A Simple Tool for Text Processing", "url": "https://github.com/catatsuy/purl", "domain": "github.com/catatsuy", "votes": 1, "user": "catatsuy", "posted_at": "2024-04-13 05:39:09", "comments": 0, "source_title": "GitHub - catatsuy/purl: Streamlining Text Processing", "source_text": "GitHub - catatsuy/purl: Streamlining Text Processing\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ncatatsuy / purl Public\n\n  * Notifications\n  * Fork 0\n  * Star 5\n\nStreamlining Text Processing\n\n### License\n\nMIT license\n\n5 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# catatsuy/purl\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n4 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ncatatsuyMerge pull request #47 from catatsuy/feature_mod_readme_simple579931b\n\u00b7\n\n## History\n\n95 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Update dependency golang to v1.22.2  \n  \n### demo\n\n|\n\n### demo\n\n| Add configuration and log files with sample data  \n  \n### internal/cli\n\n|\n\n### internal/cli\n\n| Update colorText function to support multiple filters  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Add purl to .gitignore and implement string replacement tool  \n  \n### .goreleaser.yml\n\n|\n\n### .goreleaser.yml\n\n| Update release archive name template and ldflags path in Makefile  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Update release archive name template and ldflags path in Makefile  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README with new \"purl\" tool features  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| Update module golang.org/x/term to v0.19.0  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| Update module golang.org/x/term to v0.19.0  \n  \n### main.go\n\n|\n\n### main.go\n\n| Update package structure to use internal package for CLI  \n  \n### renovate.json\n\n|\n\n### renovate.json\n\n| Add GitHub Actions workflows and security checks  \n  \n### test.txt\n\n|\n\n### test.txt\n\n| Add purl to .gitignore and implement string replacement tool  \n  \n## Repository files navigation\n\n# Purl\n\nPurl is a command-line utility designed for text file parsing and\nmanipulation, offering a modern alternative to traditional sed and perl one-\nliners. It features intuitive options for filtering, transforming, and\nmanaging text data. Importantly, Purl accepts both file input and standard\ninput, providing flexibility for various workflows. Moreover, it supports\nmultiple instances of the -filter and -exclude options, allowing users to\napply complex patterns of search refinements and exclusions in a single\ncommand.\n\nUnlike sed, Purl works the same way on both Mac and Linux, without any\ncompatibility issues. Simply download it to start using, offering a\nstraightforward experience for text manipulation.\n\n## Inspiration Behind \"Purl\"\n\nThe name \"Purl\" comes from a knitting technique and the sound of a flowing\nriver. In knitting, \"purling\" is a way to create smooth fabric by repeating\ncertain stitches. Similarly, the sound of a river is continuous and calming.\n\"Purl\" represents how this tool helps you transform text smoothly, just like\nthe consistent pattern of knitting and the steady flow of a river. It is\ndesigned to use simple commands like Perl to make complex text tasks easy.\n\n## Why purl?\n\nOlder tools like sed and grep have problems:\n\n  * Complex Regex: They use a regex that is not like Perl's, which is hard to use.\n  * Not Compatible: sed does not work the same on macOS and Linux, leading to problems.\n\nI used Perl before because it is easier for regex and works well on different\nsystems. But Perl has issues too:\n\n  * Not Installed by Default: New versions of macOS and Linux do not have Perl already installed, which makes it hard to use, especially in Docker.\n  * Less Popular: Fewer people use Perl now, so it seems less appealing.\n  * Not Just for One-Liners: Perl is not just for quick commands, which can make it confusing.\n\nWe need a new tool that:\n\n  * Uses Easy Perl-Like Regex: Easy to use for handling text using Go's regexp.\n  * Works on All Systems: No problems with different operating systems.\n  * Light and Easy to Install: Easy to set up anywhere.\n  * Simple Commands: Easy to understand, even for beginners.\n\nSo, I made purl. It brings together Perl's best parts but is simpler and ready\nfor today's users.\n\n## demo\n\nThis demo highlights how Purl utilizes both -filter and -exclude options to\npinpoint essential lines within a log file, streamlining the search for\nrelevant data.\n\nThis demo shows how to use Purl to change http:// URLs to https:// in a source\ncode file, using the -replace and -overwrite options to update the file\ndirectly.\n\nThis demo demonstrates using Purl to remove comments and empty lines from a\nconfiguration file, employing both -filter and -exclude options along with\n-overwrite to directly modify the file.\n\n## Features\n\npurl is a tool that helps you easily handle data from different sources. Here\nare its main features:\n\n  * Flexible Data Input and Output: You can input data from typing directly or from files. Similarly, you can choose to output data directly to your screen or save it back to files.\n  * Simple Commands: Use straightforward options like -replace, -filter, and -exclude to manage your data.\n  * Edit Files Easily: The -overwrite option lets you update files directly, making changes quick and simple.\n  * Colorful Output: When using the -filter option, the output on your screen can be colorful. You can control this with the -color or -no-color options.\n\nThis tool is made to be user-friendly and effective for different data\nhandling tasks.\n\n## Installation\n\nIt is recommended that you use the binaries available on GitHub Releases. It\nis advisable to download and use the latest version.\n\nIf you have a Go language development environment set up, you can also compile\nand install the 'purl' tools on your own.\n\n    \n    \n    go install github.com/catatsuy/purl@latest\n\nTo build and modify the 'purl' tools for development purposes, you can use the\nmake command.\n\n    \n    \n    make\n\nIf you use the make command to build and install the 'purl' tool, the output\nof the purl -version command will be the git commit ID of the current version.\n\n### Using Purl with GitHub Actions\n\nIf you want to use Purl in your GitHub Actions workflows, include the\nfollowing steps in your .github/workflows YAML file:\n\n    \n    \n    - name: Download purl run: | curl -sL https://github.com/catatsuy/purl/releases/latest/download/purl-linux-amd64.tar.gz | tar xz -C /tmp - name: Move purl to /usr/local/bin run: | sudo mv /tmp/purl /usr/local/bin/\n\nThese steps ensure that Purl is downloaded and moved to /usr/local/bin, making\nit available for use in subsequent steps of your workflow.\n\n## Usage Examples\n\n### Preview Changes Before Applying\n\n    \n    \n    purl -replace \"@search@replace@\" yourfile.txt\n\nThis command searches for \"search\" in yourfile.txt, shows how it would be\nreplaced with \"replace\", but does not modify the file itself.\n\n### Directly Modify Files\n\n    \n    \n    purl -overwrite -replace \"@search@replace@\" yourfile.txt\n\nUsing the -overwrite option, Purl will replace \"search\" with \"replace\" in\nyourfile.txt and save the changes to the file.\n\n### Using Standard Input\n\nPurl can also process input piped from other commands, offering flexibility in\nhow it's used:\n\n    \n    \n    cat yourfile.txt | purl -replace \"@search@replace@\"\n\nThis feeds the content of yourfile.txt into Purl, which processes and displays\nthe modified text according to the specified replacement pattern.\n\n### Using multiple files\n\nPurl supports processing multiple files in a single command, allowing you to\napply operations across several documents simultaneously. Simply list the\nfiles at the end of your command. For example:\n\n    \n    \n    purl -replace \"@search@replacement@\" file1.txt file2.txt file3.txt\n\nThis command will apply the replace operation to 'search' with 'replacement'\nin file1.txt, file2.txt, and file3.txt.\n\n### Usage with -filter\n\n    \n    \n    purl -filter \"error\" yourlog.log\n\nThis command filters the lines containing \"error\" in yourlog.log, displaying\nthem with colored output for better visibility.\n\n### Filtering Input with Multiple Criteria\n\nTo filter lines that meet multiple criteria, you can use the -filter option\nmultiple times. This works both when reading from a file and processing\nstandard input.\n\n    \n    \n    purl -filter \"error\" -filter \"warning\" yourlog.log\n\nOr for standard input:\n\n    \n    \n    cat yourlog.log | purl -filter \"error\" -filter \"warning\"\n\nThis will display lines that contain either \"error\" or \"warning\" from\nyourlog.log.\n\n### Excluding Lines with Multiple Patterns\n\nSimilarly, you can exclude lines that match multiple patterns by specifying\n-exclude more than once:\n\n    \n    \n    purl -exclude \"debug\" -exclude \"info\" yourlog.log\n\nOr for piped input:\n\n    \n    \n    cat yourlog.log | purl -exclude \"debug\" -exclude \"info\"\n\nThis approach excludes lines that contain \"debug\" or \"info\" from the output.\n\nPurl allows combining -filter and -exclude for precise text control.\n\n### Using the -i Option for Case-Insensitive Searches\n\nWhen the -i option is used with Purl, it allows case-insensitive matching for\nfilters and exclusions. For instance:\n\n    \n    \n    purl -i -filter \"error\" yourfile.txt\n\nThis command will match lines containing 'error' in any case variation, such\nas 'Error', 'ERROR', or 'error', in yourfile.txt.\n\nThe -i option in Purl enables case-insensitive operations not only for -filter\nbut also for -exclude and -replace. This enhances flexibility in handling text\nvariations. For example:\n\n    \n    \n    purl -i -exclude \"debug\" yourfile.txt\n\nThis will exclude lines with 'debug', 'Debug', 'DEBUG', etc., from\nyourfile.txt.\n\nSimilarly, when using -replace:\n\n    \n    \n    purl -i -replace \"@search@replacement@\" yourfile.txt\n\nThis applies the replacement operation regardless of case differences between\n'search' and its occurrences in yourfile.txt, ensuring 'Search', 'SEARCH',\netc., are also matched and replaced.\n\n### Integrating with Git, Grep, and Xargs\n\nFor users looking to apply replacements across multiple files in a Git\nrepository:\n\n    \n    \n    git grep -l 'search_pattern' | xargs purl -overwrite -replace \"@search_pattern@replace_text@\"\n\nThis sequence finds all files containing 'search_pattern', then uses Purl to\nreplace it with 'replace_text', directly modifying the files where the changes\nare applied.\n\nPurl is crafted to offer simplicity for quick tasks as well as the capability\nto perform complex text processing, embodying the spirit of its name in every\naction it performs.\n\n## About\n\nStreamlining Text Processing\n\n### Topics\n\nregexp sed text-processing grep-like\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n5 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 4\n\nv0.0.4 Latest\n\nApr 6, 2024\n\n\\+ 3 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * catatsuy Tatsuya Kaneko\n  * renovate[bot]\n\n## Languages\n\n  * Go 97.9%\n  * Makefile 2.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
