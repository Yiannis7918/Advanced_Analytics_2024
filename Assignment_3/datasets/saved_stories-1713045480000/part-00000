{"aid": "40023960", "title": "CSS Utility Classes and \"Separation of Concerns\" (2017)", "url": "https://adamwathan.me/css-utility-classes-and-separation-of-concerns/", "domain": "adamwathan.me", "votes": 1, "user": "tosh", "posted_at": "2024-04-13 15:56:28", "comments": 0, "source_title": "CSS Utility Classes and \"Separation of Concerns\"", "source_text": "CSS Utility Classes and \"Separation of Concerns\"\n\nAdam Wathan\n\nSoftware developer, author, and host of Full Stack Radio.\n\nAugust 7, 2017\n\n# CSS Utility Classes and \"Separation of Concerns\"\n\nOver the last several years, the way I write CSS has transitioned from a very\n\"semantic\" approach to something much more like what is often called\n\"functional CSS.\"\n\nWriting CSS this way can evoke a pretty visceral reaction from a lot of\ndevelopers, so I'd like to explain how I got to this point and share some of\nthe lessons and insights I've picked up along the way.\n\n## Phase 1: \"Semantic\" CSS\n\nOne of the best practices you'll hear about when you're trying to learn how to\nCSS good is \"separation of concerns.\"\n\nThe idea is that your HTML should only contain information about your content,\nand all of your styling decisions should be made in your CSS.\n\nTake a look at this HTML:\n\n    \n    \n    <p class=\"text-center\"> Hello there! </p>\n\nSee that .text-center class? Centering text is a design decision, so this code\nviolates \"separation of concerns\" because we've let styling information bleed\ninto our HTML.\n\nInstead, the recommended approach is to give your elements class names based\non their content, and use those classes as hooks in your CSS to style your\nmarkup:\n\n    \n    \n    <style> .greeting { text-align: center; } </style> <p class=\"greeting\"> Hello there! </p>\n\nThe quintessential example of this approach has always been CSS Zen Garden; a\nsite designed to show that if you \"separate your concerns\", you can completely\nredesign a site just by swapping out the stylesheet.\n\nMy workflow looked something like this:\n\n  1. Write the markup I needed for some new UI (an author bio card in this case):\n    \n        <div> <img src=\"https://cdn-images-1.medium.com/max/1600/0*o3c1g40EXj65Fq9k.\" alt=\"\"> <div> <h2>Adam Wathan</h2> <p> Adam is a rad dude who likes TDD, Active Record, and garlic bread with cheese. He also hosts a decent podcast and has never had a really great haircut. </p> </div> </div>\n\n  2. Add a descriptive class or two based on the content:\n    \n        - <div> + <div class=\"author-bio\"> <img src=\"https://cdn-images-1.medium.com/max/1600/0*o3c1g40EXj65Fq9k.\" alt=\"\"> <div> <h2>Adam Wathan</h2> <p> Adam is a rad dude who likes TDD, Active Record, and garlic bread with cheese. He also hosts a decent podcast and has never had a really great haircut. </p> </div> </div>\n\n  3. Use those classes as \"hooks\" in my CSS/Less/Sass to style my new markup:\n    \n        .author-bio { background-color: white; border: 1px solid hsl(0,0%,85%); border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); overflow: hidden; > img { display: block; width: 100%; height: auto; } > div { padding: 1rem; > h2 { font-size: 1.25rem; color: rgba(0,0,0,0.8); } > p { font-size: 1rem; color: rgba(0,0,0,0.75); line-height: 1.5; } } }\n\nHere's a demo of the final result:\n\nThis approach intuitively made sense to me, and for a while this is how I\nwrote HTML and CSS.\n\nEventually though, something started to feel a bit off.\n\nI had \"separated my concerns\", but there was still a very obvious coupling\nbetween my CSS and my HTML. Most of the time my CSS was like a mirror for my\nmarkup; perfectly reflecting my HTML structure with nested CSS selectors.\n\nMy markup wasn't concerned with styling decisions, but my CSS was very\nconcerned with my markup structure.\n\nMaybe my concerns weren't so separated after all.\n\n## Phase 2: Decoupling styles from structure\n\nAfter looking around for a solution to this coupling, I started finding more\nand more recommendations towards adding more classes to your markup so you\ncould target them directly; keeping selector specificity low and making your\nCSS less dependent on your particular DOM structure.\n\nThe most well-known methodology that advocates this idea is Block Element\nModifer, or BEM for short.\n\nTaking a BEM-like approach, the markup for our author bio might look more like\nthis:\n\n    \n    \n    <div class=\"author-bio\"> <img class=\"author-bio__image\" src=\"https://cdn-images-1.medium.com/max/1600/0*o3c1g40EXj65Fq9k.\" alt=\"\"> <div class=\"author-bio__content\"> <h2 class=\"author-bio__name\">Adam Wathan</h2> <p class=\"author-bio__body\"> Adam is a rad dude who likes TDD, Active Record, and garlic bread with cheese. He also hosts a decent podcast and has never had a really great haircut. </p> </div> </div>\n\n...and our CSS would look like this:\n\n    \n    \n    .author-bio { background-color: white; border: 1px solid hsl(0,0%,85%); border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); overflow: hidden; } .author-bio__image { display: block; width: 100%; height: auto; } .author-bio__content { padding: 1rem; } .author-bio__name { font-size: 1.25rem; color: rgba(0,0,0,0.8); } .author-bio__body { font-size: 1rem; color: rgba(0,0,0,0.75); line-height: 1.5; }\n\nView on CodePen\n\nThis felt like a huge improvement to me. My markup was still \"semantic\" and\ndidn't contain any styling decisions, and now my CSS felt decoupled from my\nmarkup structure, with the added bonus of avoiding unnecessary selector\nspecificity.\n\nBut then I ran into a dilemma.\n\n## Dealing with similar components\n\nSay I needed to add a new feature to the site: displaying a preview of an\narticle in a card layout.\n\nSay this article preview card had a full bleed image on the top, a padded\ncontent section below, a bold title, and some smaller body text.\n\nSay it looked exactly like an author bio.\n\nWhat's the best way to handle this while still separating our concerns?\n\nWe can't apply our .author-bio classes to our article preview; that wouldn't\nbe semantic. So we definitely need to make .article-preview its own component.\n\nHere's what our markup could look like:\n\n    \n    \n    <div class=\"article-preview\"> <img class=\"article-preview__image\" src=\"https://i.vimeocdn.com/video/585037904_1280x720.webp\" alt=\"\"> <div class=\"article-preview__content\"> <h2 class=\"article-preview__title\">Stubbing Eloquent Relations for Faster Tests</h2> <p class=\"article-preview__body\"> In this quick blog post and screencast, I share a trick I use to speed up tests that use Eloquent relationships but don't really depend on database functionality. </p> </div> </div>\n\nBut how should we handle the CSS?\n\n### Option 1: Duplicate the styles\n\nOne approach would be to straight up duplicate our .author-bio styles and\nrename the classes:\n\n    \n    \n    .article-preview { background-color: white; border: 1px solid hsl(0,0%,85%); border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); overflow: hidden; } .article-preview__image { display: block; width: 100%; height: auto; } .article-preview__content { padding: 1rem; } .article-preview__title { font-size: 1.25rem; color: rgba(0,0,0,0.8); } .article-preview__body { font-size: 1rem; color: rgba(0,0,0,0.75); line-height: 1.5; }\n\nThis works but of course it's not very DRY. It also makes it a bit too easy\nfor these components to differ in slightly different ways (maybe a different\npadding, or font color) which can lead to an inconsistent looking design.\n\n### Option 2: @extend the author bio component\n\nAnother approach is to use the @extend feature of your preprocessor of choice;\nletting you piggy-back off of the styles already defined in our .author-bio\ncomponent:\n\n    \n    \n    .article-preview { @extend .author-bio; } .article-preview__image { @extend .author-bio__image; } .article-preview__content { @extend .author-bio__content; } .article-preview__title { @extend .author-bio__name; } .article-preview__body { @extend .author-bio__body; }\n\nView on CodePen\n\nUsing @extend at all is generally not recommended, but that aside, this feels\nlike it solves our problem right?\n\nWe've removed the duplication in our CSS, and our markup is still free of\nstyling decisions.\n\nBut let's examine one more option...\n\n### Option 3: Create a content-agnostic component\n\nOur .author-bio and .article-preview components have nothing in common from a\n\"semantic\" perspective. One is the bio of an author, the other is a preview of\nan article.\n\nBut as we've already seen, they have a lot in common from a design\nperspective.\n\nSo if we wanted to, we could create a new component named after what they do\nhave in common, and reuse that component for both types of content.\n\nLet's call it a .media-card.\n\nHere's the CSS:\n\n    \n    \n    .media-card { background-color: white; border: 1px solid hsl(0,0%,85%); border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); overflow: hidden; } .media-card__image { display: block; width: 100%; height: auto; } .media-card__content { padding: 1rem; } .media-card__title { font-size: 1.25rem; color: rgba(0,0,0,0.8); } .media-card__body { font-size: 1rem; color: rgba(0,0,0,0.75); line-height: 1.5; }\n\n...here's what the markup for our author bio would look like:\n\n    \n    \n    <div class=\"media-card\"> <img class=\"media-card__image\" src=\"https://cdn-images-1.medium.com/max/1600/0*o3c1g40EXj65Fq9k.\" alt=\"\"> <div class=\"media-card__content\"> <h2 class=\"media-card__title\">Adam Wathan</h2> <p class=\"media-card__body\"> Adam is a rad dude who likes TDD, Active Record, and garlic bread with cheese. He also hosts a decent podcast and has never had a really great haircut. </p> </div> </div>\n\n...and here's the markup for our article preview:\n\n    \n    \n    <div class=\"media-card\"> <img class=\"media-card__image\" src=\"https://i.vimeocdn.com/video/585037904_1280x720.webp\" alt=\"\"> <div class=\"media-card__content\"> <h2 class=\"media-card__title\">Stubbing Eloquent Relations for Faster Tests</h2> <p class=\"media-card__body\"> In this quick blog post and screencast, I share a trick I use to speed up tests that use Eloquent relationships but don't really depend on database functionality. </p> </div> </div>\n\nThis approach also removes the duplication from our CSS, but aren't we \"mixing\nconcerns\" now?\n\nOur markup all of a sudden knows that we want both of these pieces of content\nto be styled as media cards. What if we wanted to change how the author bio\nlooked without changing how the article preview looks?\n\nBefore, we could just open up our stylesheet and choose new styles for either\nof the two components. Now we'd need to edit the HTML! Blasphemy!\n\nBut let's think about the flip side for a minute.\n\nWhat if we needed to add a new type of content that also needed the same\nstyling?\n\nUsing a \"semantic\" approach, we'd need to write the new HTML, add some\ncontent-specific classes as styling \"hooks\", open up our stylesheet, create a\nnew CSS component for the new content type, and apply the shared styles,\neither through duplication or using @extend or a mixin.\n\nUsing our content-agnostic .media-card class, all we'd need to write is the\nnew HTML; we wouldn't have to open the stylesheet at all.\n\nIf we're really \"mixing concerns\", shouldn't we need to make changes in\nmultiple places?\n\n## \"Separation of concerns\" is a straw man\n\nWhen you think about the relationship between HTML and CSS in terms of\n\"separation of concerns\", it's very black and white.\n\nYou either have separation of concerns (good!), or you don't (bad!).\n\nThis is not the right way to think about HTML and CSS.\n\nInstead, think about dependency direction.\n\nThere are two ways you can write HTML and CSS:\n\n  1. ~~\"Separation of Concerns\"~~ CSS that depends on HTML.\n\nNaming your classes based on your content (like .author-bio) treats your HTML\nas a dependency of your CSS.\n\nThe HTML is independent; it doesn't care how you make it look, it just exposes\nhooks like .author-bio that the HTML controls.\n\nYour CSS on the other hand is not independent; it needs to know what classes\nyour HTML has decided to expose, and it needs to target those classes to style\nthe HTML.\n\nIn this model, your HTML is restyleable, but your CSS is not reusable.\n\n  2. ~~\"Mixing Concerns\"~~ HTML that depends on CSS.\n\nNaming your classes in a content-agnostic way after the repeating patterns in\nyour UI (like .media-card) treats your CSS as a dependency of your HTML.\n\nThe CSS is independent; it doesn't care what content it's being applied to, it\njust exposes a set of building blocks that you can apply to your markup.\n\nYour HTML is not independent; it's making use of classes that have been\nprovided by the CSS, and it needs to know what classes exist so that it\ncombine them however it needs to to achieve the desired design.\n\nIn this model, your CSS is reusable, but your HTML is not restyleable.\n\nCSS Zen Garden takes the first approach, while UI frameworks like Bootstrap or\nBulma take the second approach.\n\nNeither is inherently \"wrong\"; it's just a decision made based on what's more\nimportant to you in a specific context.\n\nFor the project you're working on, what would be more valuable: restyleable\nHTML, or reusable CSS?\n\n### Choosing reusability\n\nThe turning point for me came when I read Nicolas Gallagher's About HTML\nsemantics and front-end architecture.\n\nI won't reiterate all of his points here, but needless to say I came away from\nthat blog post fully convinced that optimizing for reusable CSS was going to\nbe the right choice for the sorts of projects I work on.\n\n## Phase 3: Content-agnostic CSS components\n\nMy goal at this point was to explicitly avoid creating classes that were based\non my content, instead trying to name everything in a way that was as reusable\nas possible.\n\nThat resulted in class names like:\n\n  * .card\n  * .btn, .btn--primary, .btn--secondary\n  * .badge\n  * .card-list, .card-list-item\n  * .img--round\n  * .modal-form, .modal-form-section\n\n...and so on and so forth.\n\nI noticed something else when I started focusing on creating reusable classes:\n\nThe more a component does, or the more specific a component is, the harder it\nis to reuse.\n\nHere's an intuitive example.\n\nSay we were building a form, with a few form sections, and a submit button at\nthe bottom.\n\nIf we thought of all of the form contents as part of a .stacked-form\ncomponent, we might give the submit button a class like .stacked-form__button:\n\n    \n    \n    <form class=\"stacked-form\" action=\"#\"> <div class=\"stacked-form__section\"> <!-- ... --> </div> <div class=\"stacked-form__section\"> <!-- ... --> </div> <div class=\"stacked-form__section\"> <button class=\"stacked-form__button\">Submit</button> </div> </form>\n\nBut maybe there's another button on our site that's not part of a form that we\nneed to style the same way.\n\nUsing the .stacked-form__button class on that button wouldn't make a lot of\nsense; it's not part of a stacked form.\n\nBoth of these buttons are primary actions on their respective pages though, so\nwhat if we named the button based on what the components have in common and\ncalled it .btn--primary, removing the .stacked-form__ prefix completely?\n\n    \n    \n    <form class=\"stacked-form\" action=\"#\"> <!-- ... --> <div class=\"stacked-form__section\"> - <button class=\"stacked-form__button\">Submit</button> + <button class=\"btn btn--primary\">Submit</button> </div> </form>\n\nNow say we wanted this stacked form to look like it was in a floated card.\n\nOne approach would be to create a modifier and apply it to this form:\n\n    \n    \n    - <form class=\"stacked-form\" action=\"#\"> + <form class=\"stacked-form stacked-form--card\" action=\"#\"> <!-- ... --> </form>\n\nBut if we already have a .card class, why don't we compose this new UI using\nour existing card and stacked form?\n\n    \n    \n    + <div class=\"card\"> <form class=\"stacked-form\" action=\"#\"> <!-- ... --> </form> + </div>\n\nBy taking this approach, we have a .card that can be a home for any content,\nand an unopinionated .stacked-form that can be used inside of any container.\n\nWe're getting more reuse out of our components, and we didn't have to write\nany new CSS.\n\n## Composition over subcomponents\n\nSay we needed to add another button to the bottom of our stacked form, and we\nwanted it to be spaced out a little from the existing button:\n\n    \n    \n    <form class=\"stacked-form\" action=\"#\"> <!-- ... --> <div class=\"stacked-form__section\"> <button class=\"btn btn--secondary\">Cancel</button> <!-- Need some space in here --> <button class=\"btn btn--primary\">Submit</button> </div> </form>\n\nOne approach would be to create a new subcomponent, like .stacked-\nform__footer, add an additional class to each button like .stacked-\nform__footer-item, and use descendant selectors to add some margin:\n\n    \n    \n    <form class=\"stacked-form\" action=\"#\"> <!-- ... --> - <div class=\"stacked-form__section\"> + <div class=\"stacked-form__section stacked-form__footer\"> - <button class=\"btn btn--secondary\">Cancel</button> - <button class=\"btn btn--primary\">Submit</button> + <button class=\"stacked-form__footer-item btn btn--secondary\">Cancel</button> + <button class=\"stacked-form__footer-item btn btn--primary\">Submit</button> </div> </form>\n\nHere's what the CSS might look like:\n\n    \n    \n    .stacked-form__footer { text-align: right; } .stacked-form__footer-item { margin-right: 1rem; &:last-child { margin-right: 0; } }\n\nBut what if we had this same problem in a subnav somewhere, or a header?\n\nWe can't reuse the .stacked-form__footer outside of a .stacked-form, so maybe\nwe make a new subcomponent inside of our header:\n\n    \n    \n    <header class=\"header-bar\"> <h2 class=\"header-bar__title\">New Product</h2> + <div class=\"header-bar__actions\"> + <button class=\"header-bar__action btn btn--secondary\">Cancel</button> + <button class=\"header-bar__action btn btn--primary\">Save</button> + </div> </header>\n\n...but now we have to duplicate the effort we put into building our .stacked-\nform__footer in our new .header-bar__actions components.\n\nThis feels a lot like the problem we ran into way back at the beginning with\ncontent-driven class names doesn't it?\n\nOne way to solve this problem is to come up with an entirely new component\nthat's easier to reuse, and use composition.\n\nMaybe we make something like an .actions-list:\n\n    \n    \n    .actions-list { text-align: right; } .actions-list__item { margin-right: 1rem; &:last-child { margin-right: 0; } }\n\nNow we can get rid of the .stacked-form__footer and .header-bar__actions\ncomponents completely, and instead use an .actions-list in both situations:\n\n    \n    \n    <!-- Stacked form --> <form class=\"stacked-form\" action=\"#\"> <!-- ... --> <div class=\"stacked-form__section\"> <div class=\"actions-list\"> <button class=\"actions-list__item btn btn--secondary\">Cancel</button> <button class=\"actions-list__item btn btn--primary\">Submit</button> </div> </div> </form> <!-- Header bar --> <header class=\"header-bar\"> <h2 class=\"header-bar__title\">New Product</h2> <div class=\"actions-list\"> <button class=\"actions-list__item btn btn--secondary\">Cancel</button> <button class=\"actions-list__item btn btn--primary\">Save</button> </div> </header>\n\nBut what if one of these actions lists was supposed to be left justified, and\nthe other was supposed to be right justified? Do we make .actions-list--left\nand .actions-list--right modifiers?\n\n## Phase 4: Content-agnostic components + utility classes\n\nTrying to come up with these component names all of the time is exhausting.\n\nWhen you make modifiers like .actions-list--left, you're creating a whole new\ncomponent modifier just to assign a single CSS property. It's already got left\nin the name, so you're not going to fool anyone that it's \"semantic\" in any\nway either.\n\nWhat if we had another component that needed left-align and right-align\nmodifiers, would we create new component modifiers for that as well?\n\nThis gets back to same problem we were facing when we decided to kill\n.stacked-form__footer and .header-bar__actions and replace them with a single\n.actions-list:\n\nWe prefer composition to duplication.\n\nSo if we had two actions lists, one that needed to be left aligned and another\nthat needed to be right aligned, how could we solve that problem with\ncomposition?\n\n### Alignment utilities\n\nTo solve this problem with composition, we need to be able to add a new\nreusable class to our component that gives us the desired effect.\n\nWe were already going to call our modifers .actions-list--left and .actions-\nlist--right, so there's no reason not to call these new classes something like\n.align-left and .align-right:\n\n    \n    \n    .align-left { text-align: left; } .align-right { text-align: right; }\n\nNow we can use composition to make our stacked form buttons left-aligned:\n\n    \n    \n    <form class=\"stacked-form\" action=\"#\"> <!-- ... --> <div class=\"stacked-form__section\"> <div class=\"actions-list align-left\"> <button class=\"actions-list__item btn btn--secondary\">Cancel</button> <button class=\"actions-list__item btn btn--primary\">Submit</button> </div> </div> </form>\n\n...and our header buttons right-aligned:\n\n    \n    \n    <header class=\"header-bar\"> <h2 class=\"header-bar__title\">New Product</h2> <div class=\"actions-list align-right\"> <button class=\"actions-list__item btn btn--secondary\">Cancel</button> <button class=\"actions-list__item btn btn--primary\">Save</button> </div> </header>\n\n### Don't be afraid\n\nIf seeing the words \"left\" and \"right\" in your HTML makes you feel\nuncomfortable, remember we have been using components named after visual\npatterns in our UI for ages at this point.\n\nThere's no pretending that .stacked-form is any more \"semantic\" than .align-\nright; they're both named after how they affect the presentation of the\nmarkup, and we are using those classes in our markup to achieve a specific\npresentational result.\n\nWe're writing CSS-dependent HTML. If we want to change our form from a\n.stacked-form to a .horizontal-form, we do it in the markup, not the CSS.\n\n### Deleting useless abstractions\n\nThe interesting thing about this solution is that our .actions-list component\nis now basically useless; all it did before was align the contents to the\nright.\n\nLet's delete it:\n\n    \n    \n    - .actions-list { - text-align: right; - } .actions-list__item { margin-right: 1rem; &:last-child { margin-right: 0; } }\n\nBut now it's a little weird to have an .actions-list__item without an\n.actions-list. Is there another way we can solve our original problem without\ncreating an .actions-list__item component?\n\nIf you think back, the whole reason we created this component was to add a\nlittle bit of margin between two buttons. .actions-list was a pretty decent\nmetaphor for a list of buttons because it was generic and fairly reusable, but\ncertainly there could be situations where we need the same amount of spacing\nbetween items that aren't \"actions\" right?\n\nMaybe a more reusable name would be something like .spaced-horizontal-list? We\nalready deleted the actual .actions-list component though, because it's only\nthe children that really need any styling.\n\n### Spacer utilities\n\nIf only the children need styling, maybe it would be simpler to style the\nchildren independently instead of using fancy pseudo-selectors to style them\nas group?\n\nThe most reusable way to add some spacing next to an element would be a class\nthat let's us say \"this element should have some space next to it\".\n\nWe already added utilities like .align-left and .align-right, what if we made\na new utility just for adding some right margin?\n\nLet's create a new utility class, something like .mar-r-sm, for adding a small\namount of margin to the right of an element:\n\n    \n    \n    - .actions-list__item { - margin-right: 1rem; - &:last-child { - margin-right: 0; - } - } + .mar-r-sm { + margin-right: 1rem; + }\n\nHere's what our form and header would look like now:\n\n    \n    \n    <!-- Stacked form --> <form class=\"stacked-form\" action=\"#\"> <!-- ... --> <div class=\"stacked-form__section align-left\"> <button class=\"btn btn--secondary mar-r-sm\">Cancel</button> <button class=\"btn btn--primary\">Submit</button> </div> </form> <!-- Header bar --> <header class=\"header-bar\"> <h2 class=\"header-bar__title\">New Product</h2> <div class=\"align-right\"> <button class=\"btn btn--secondary mar-r-sm\">Cancel</button> <button class=\"btn btn--primary\">Save</button> </div> </header>\n\nThe entire concept of an .actions-list is nowhere to be seen, our CSS is\nsmaller, and our classes are more reusable.\n\n## Phase 5: Utility-first CSS\n\nOnce this clicked for me, it wasn't long before I had built out a whole suite\nof utility classes for common visual tweaks I needed, things like:\n\n  * Text sizes, colors, and weights\n  * Border colors, widths, and positions\n  * Background colors\n  * Flexbox utilities\n  * Padding and margin helpers\n\nThe amazing thing about this is that before you know it, you can build\nentirely new UI components without writing any new CSS.\n\nTake a look at this sort of \"product card\" component from a project of mine:\n\nHere's what my markup looks like:\n\n    \n    \n    <div class=\"card rounded shadow\"> <a href=\"...\" class=\"block\"> <img class=\"block fit\" src=\"...\"> </a> <div class=\"py-3 px-4 border-b border-dark-soft flex-spaced flex-y-center\"> <div class=\"text-ellipsis mr-4\"> <a href=\"...\" class=\"text-lg text-medium\"> Test-Driven Laravel </a> </div> <a href=\"...\" class=\"link-softer\"> @icon('link') </a> </div> <div class=\"flex text-lg text-dark\"> <div class=\"py-2 px-4 border-r border-dark-soft\"> @icon('currency-dollar', 'icon-sm text-dark-softest mr-4') <span>$3,475</span> </div> <div class=\"py-2 px-4\"> @icon('user', 'icon-sm text-dark-softest mr-4') <span>25</span> </div> </div> </div>\n\nThe number of classes used here might make you balk at first, but say we did\nwant to make this a real CSS component instead of composing it out of\nutilities. What would we call it?\n\nWe don't want to use content-specific names because then our component could\nonly be used in one context.\n\nMaybe something like this?\n\n    \n    \n    .image-card-with-a-full-width-section-and-a-split-section { ... }\n\nOf course not, that's ridiculous. Instead we'd probably want to compose it out\nof smaller components, like we've talked about before.\n\nWhat might those components be?\n\nWell maybe it's housed in a card. Not all cards have a shadow though so we\ncould have a .card--shadowed modifier, or we could create a .shadow utility\nthat could be applied to any element. That sounds more reusable, so let's do\nthat.\n\nIt turns out some of the cards on our site don't have rounded corners, but\nthis one does. We could make it .card--rounded, but we have other elements on\nthe site that are sometimes rounded the same amount too, and those aren't\ncards. A rounded utility would be more reusable.\n\nWhat about the image at the top? Maybe that's something like a .img--fitted,\nso it fills the card? Well there's a few other spots on the site where we need\nto fit something to it's parent width, and it's not always an image. Maybe\njust a .fit helper would be better.\n\n...you can see where I'm going with this.\n\nIf you follow that trail far enough with a focus on reusability, building this\ncomponent out of reusable utilities is the natural destination.\n\n### Enforced consistency\n\nOne of the biggest benefits of using small, composable utilities is that every\ndeveloper on your team is always choosing values from a fixed set of options.\n\nHow many times have you needed to style some HTML and thought, \"this text\nneeds to be a little darker,\" then reached for the darken() function to tweak\nsome base $text-color?\n\nOr maybe, \"this font should be a little smaller,\" and added font-size: .85em\nto the component you're working on?\n\nIt feels like you're doing things \"right\", because you're using a relative\ncolor or a relative font size, not just arbitrary values.\n\nBut what if you decide to darken the text by 10% for your component, and\nsomeone else darkens it by 12% for their component? Before you know it you end\nup with 402 unique text colors in your stylesheet.\n\nThis happens in every codebase where the way you style something is to write\nnew CSS:\n\n  * GitLab: 402 text colors, 239 background colors, 59 font sizes\n  * Buffer: 124 text colors, 86 background colors, 54 font sizes\n  * HelpScout: 198 text colors, 133 background colors, 67 font sizes\n  * Gumroad: 91 text colors, 28 background colors, 48 font sizes\n  * Stripe: 189 text colors, 90 background colors, 35 font sizes\n  * GitHub: 163 text colors, 147 background colors, 56 font sizes\n  * ConvertKit: 128 text colors, 124 background colors, 70 font sizes\n\nThis is because every new chunk of CSS you write is a blank canvas; there's\nnothing stopping you from using whatever values you want.\n\nYou could try and enforce consistency through variables or mixins, but every\nline of new CSS is still an opportunity for new complexity; adding more CSS\nwill never make your CSS simpler.\n\nIf instead, the solution to styling something is to apply existing classes,\nall of a sudden that blank canvas problem goes away.\n\nWant to mute some dark text a little? Add the .text-dark-soft class.\n\nNeed to make the font size a little smaller? Use the .text-sm class.\n\nWhen everyone on a project is choosing their styles from a curated set of\nlimited options, your CSS stops growing linearly with your project size, and\nyou get consistency for free.\n\n### You should still create components\n\nOne of the areas where my opinion differs a bit from some of the really die-\nhard functional CSS advocates is that I don't think you should build things\nout of utilities only.\n\nIf you look at some of the popular utility-based frameworks like Tachyons\n(which is a fantastic project), you'll see they create even button styles out\nof pure utilities:\n\n    \n    \n    <button class=\"f6 br3 ph3 pv2 white bg-purple hover-bg-light-purple\"> Button Text </button>\n\nWhoa. Let me break this one down:\n\n  * f6: Use the sixth font size in the font size scale (.875rem in Tachyons)\n  * br3: Use the third border radius in the radius scale (.5rem)\n  * ph3: Use the third size in the padding scale for horizontal padding (1rem)\n  * pv2: Use the second size in the padding scale for vertical padding (.5rem)\n  * white: Use white text\n  * bg-purple: Use a purple background\n  * hover-bg-light-purple: Use a light purple background on hover\n\nIf you need multiple buttons that have this same combination of classes, the\nrecommended approach with Tachyons is to create an abstraction through\ntemplating rather than through CSS.\n\nIf you were using Vue.js for example, you might create a component that you\nwould use like this:\n\n    \n    \n    <ui-button color=\"purple\">Save</ui-button>\n\n...and be defined something like this:\n\n    \n    \n    <template> <button class=\"f6 br3 ph3 pv2\" :class=\"colorClasses\"> <slot></slot> </button> </template> <script> export default { props: ['color'], computed: { colorClasses() { return { purple: 'white bg-purple hover-bg-light-purple', lightGray: 'mid-gray bg-light-gray hover-bg-light-silver', // ... }[this.color] } } } </script>\n\nThis is a great approach for a lot of projects, but I still think there are a\nlot of use cases where it's more practical to create a CSS component than it\nis to create a template-based component.\n\nFor the sort of projects I work on, it's usually simpler to create a new .btn-\npurple class that bundles up those 7 utilities than it is to commit to\ntemplatizing every tiny widget on the site.\n\n### ...but build them using utilities first\n\nThe reason I call the approach I take to CSS utility-first is because I try to\nbuild everything I can out of utilities, and only extract repeating patterns\nas they emerge.\n\nIf you're using Less as your preprocessor, you can use existing classes as\nmixins. That means that creating this .btn-purple component takes only a bit\nof multi-cursor wizardry in your editor:\n\nUnfortunately you can't do this in Sass or Stylus without creating a separate\nmixin for every utility class, so it's a bit more work there.\n\nIt's not always possible for every single declaration in a component to come\nfrom a utility of course. Complex interactions between elements like changing\na child's property when hovering over a parent are hard to do with utilities-\nonly, so use your best judgment and do whatever feels simpler.\n\n### No more premature abstraction\n\nTaking a component-first approach to CSS means you create components for\nthings even if they will never get reused. This premature abstraction is the\nsource of a lot of bloat and complexity in stylesheets.\n\nTake a navbar for example. How many times in your app do you rewrite the\nmarkup for your main nav?\n\nIn my projects I typically only do that once; in my main layout file.\n\nIf you build things with utilities first and only extract components when you\nsee worrisome duplication, you probably never need to extract a navbar\ncomponent.\n\nInstead, your navbar might look something like this:\n\n    \n    \n    <nav class=\"bg-brand py-4 flex-spaced\"> <div><!-- Logo goes here --></div> <div> <!-- Menu items go here --> </div> </nav>\n\nThere's just nothing there worth extracting.\n\n## Isn't this just inline styles?\n\nIt's easy to look at this approach and think it's just like throwing style\ntags on your HTML elements and adding whatever properties you need, but in my\nexperience it's very different.\n\nWith inline styles, there are no constraints on what values you choose.\n\nOne tag could be font-size: 14px, another could be font-size: 13px, another\ncould be font-size: .9em, and another could be font-size: .85rem.\n\nIt's the same blank canvas problem you face when writing new CSS for every new\ncomponent.\n\nUtilities force you to choose:\n\nIs this text-sm or text-xs?\n\nShould I use py-3 or py-4?\n\nDo I want text-dark-soft or text-dark-faint?\n\nYou can't just pick any value want; you have to choose from a curated list.\n\nInstead of 380 text colors, you end up with 10 or 12.\n\nMy experience is that building things utility-first leads to more consistent\nlooking designs than working component-first, as unintuitive as it might sound\nat first.\n\n## Where to start\n\nIf this approach sounds interesting to you, here's a few frameworks worth\nchecking out:\n\n  * Tachyons\n  * Basscss\n  * Beard\n  * turretcss\n\nRecently, I also released my own free open-source PostCSS framework called\nTailwind CSS that's designed around this idea of working utility-first and\nextracting components from repeated patterns:\n\nIf you're interested in checking it out, head over to the Tailwind CSS website\nand give it a try.\n\nProudly hosted with DigitalOcean.\n\n", "frontpage": false}
